<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0"
    xmlns:content="http://purl.org/rss/1.0/modules/content/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:atom="http://www.w3.org/2005/Atom"
>
    <channel>
        <title>Tomas Votruba writes about PHP and education</title>
        <link>https://tomasvotruba.com/</link>
        <description>PHP, Communities and Communication posts by Tomas Votruba</description>
        <pubDate>Mon, 02 Nov 2020 14:46:07 +0000</pubDate>
        <atom:link href="https://tomasvotruba.com/rss.xml" rel="self" type="application/rss+xml" />

        <lastBuildDate>Mon, 19 Oct 2020 00:00:00 +0000</lastBuildDate>

                            
            <item>
                <title><![CDATA[ How to Split Test Monorepo with Composer 2 ]]></title>
                <link>https://tomasvotruba.com/blog/2020/10/19/how-to-split-test-monorepo-with-composer-2</link>
                <description><![CDATA[ <p><a href="https://twitter.com/packagist/status/1319945203797708800">Composer 2 was released</a> this week. It brings <strong>massive <code>composer install/update</code> performance</strong> improvement of <a href="https://blog.packagist.com/composer-2-0-is-now-available">150-200 %</a>.
<br>
<br>
That means <a href="/blog/2020/01/13/why-is-first-instant-feedback-crucial-to-developers/">faster feedback</a> from CI and faster monorepo testing.
<br>
<br>
Today, we'll look on how to use Composer in Github Actions with monorepo split testing and what to avoid.</p> ]]></description>
                <content:encoded><![CDATA[ <p><em>Note: following feature will be available in Symplify 9, that will be released <a href="/blog/2017/10/30/what-can-you-learn-from-menstruation-and-symfony-releases/">along with Symfony 5.2</a>.</em></p>
<p>Monorepo split testing is made easier by <a href="https://github.com/symplify/monorepo-builder"><code>symplify/monorepo-builder</code> package</a>. This is how it <a href="/blog/2020/02/10/how-to-test-monorepo-after-split-before-actual-split/">&quot;works&quot; for Composer 1</a>. Why &quot;works&quot;? There are 2 problems, that we fix during upgrade to Composer 2.</p>
<p><br></p>
<p>Let's say we have a <code>symplify/symplify</code> monorepo, where we develop all <code>symplify</code> package. We need to test all packages together <strong>with their local version</strong>, even in pull-request.</p>
<h2 id="1-installing-packages-that-needs-local-version-package">1. Installing Packages that needs Local version Package</h2>
<p>We want to test <code>symplify/coding-standard</code> package:</p>
<ul>
<li>the <code>symplify/coding-standard</code> package needs <code>symplify/autowire-array-parameter</code> package
<ul>
<li>the <code>symplify/autowire-array-parameter</code> needs the <code>symplify/package-builder</code> package</li>
</ul></li>
</ul>
<p>In short:</p>
<ul>
<li>we're testing <em>a</em></li>
<li><em>a</em> needs <em>b</em>
<ul>
<li><em>b</em> needs <em>c</em></li>
</ul></li>
</ul>
<p><br></p>
<p>This the result of localized package <code>composer install</code> on GitHub Action with Composer 1:</p>
<ul>
<li>Package <em>a</em> and <em>b</em> and used in local version <em class="fas fa-fw fa-check text-success fa-lg"></em></li>
<li>Package <em>c</em> is used from packagist <em class="fas fa-fw fa-times text-danger fa-lg"></em></li>
</ul>
<img src="/assets/images/posts/2020/test_split_composer_2_require_3rd_package_fail.png" class="img-thumbnail">
<p>What happens with changes of <code>symplify/package-builder</code> in this pull-request? <strong>They're ignored</strong>, and last stable version is used instead. <em class="fas fa-fw fa-times text-danger fa-lg"></em></p>
<p><br></p>
<p>This is the same process, with <strong>Composer 2</strong>:</p>
<ul>
<li>Package <em>a</em> and <em>b</em> and used in local version <em class="fas fa-fw fa-check text-success fa-lg"></em></li>
<li>Package <em>c</em> is used in local version <em class="fas fa-fw fa-check text-success fa-lg"></em></li>
</ul>
<img src="/assets/images/posts/2020/test_split_composer_2_require_3rd_package_fixed.png" class="img-thumbnail">
<h2 id="2-state-local-packages-as-code-dev-master-code">2. State Local packages as <code>dev-master</code></h2>
<p>So we upgrade to Composer 2 with Symplify 9 and that's it? No.</p>
<p>Local and GitHub Action development are different. Locally, Composer can see them as <code>dev-master</code> branch, which works with using <code>branch-alias</code>. But on GitHub Actoin (or your any favorite CI, the pull-request branch is <code>dev-&lt;commit-hash&gt;</code>).</p>
<p><br></p>
<p>The <code>composer install</code> will lead to a conflict with these 2 version:</p>
<img src="/assets/images/posts/2020/test_split_composer_2_require_3rd_package_mess.png" class="img-thumbnail">
<p>What now?</p>
<p>I asked on Composer repository and after less than hour of work got <a href="https://github.com/composer/composer/issues/9368#issuecomment-718198161">a working solution with proper explanation</a>. Thank you Jordi!</p>
<p>Trick is using <code>COMPOSER_ROOT_VERSION=dev-master</code> env, that will explicitly make version <code>dev-master</code> for all environments.</p>
<p><br></p>
<p>This is the final working GitHub Action (here you can see <a href="https://github.com/symplify/symplify/blob/40dbc8005754254aee31316b9082826f30b51577/.github/workflows/split_tests.yaml">it the action</a>):</p>
<pre><code class="language-yaml">name: Split Tests

on:
    pull_request: null

jobs:
    split_testing:
        runs-on: ubuntu-latest

        strategy:
            fail-fast: false
            matrix:
                package_name:
                    - coding-standard
                    # and all the other packages...

        name: Split Tests of ${{ matrix.package_name }}

        steps:
            -   uses: actions/checkout@v2

            -   uses: shivammathur/setup-php@v1
                with:
                    php-version: 7.4
                    coverage: none
                    tools: composer:v2

            -   run: composer install --no-progress --ansi

            # tell composer to use local package version
            -   run: vendor/bin/monorepo-builder localize-composer-paths packages/${{ matrix.package_name }}/composer.json --ansi

            -
                working-directory: packages/${{ matrix.package_name }}
                run: composer update --no-progress --ansi
                env:
                    # see https://github.com/composer/composer/issues/9368#issuecomment-718112361
                    COMPOSER_ROOT_VERSION: "dev-master"

            -
                working-directory: packages/${{ matrix.package_name }}
                run: vendor/bin/phpunit</code></pre>
<p><br></p>
<p>Do you want to know more about this topic?</p>
<ul>
<li><a href="https://github.com/composer/composer/issues/9368">Issue on Composer</a></li>
<li><a href="https://getcomposer.org/doc/articles/repository-priorities.md#canonical-repositories">Canonical Repositories</a> and their <a href="https://getcomposer.org/doc/articles/repository-priorities.md#default-behavior">change in Composer 2</a></li>
</ul>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/10/19/how-to-split-test-monorepo-with-composer-2</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 19 Oct 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/10/19/how-to-split-test-monorepo-with-composer-2#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How We Stopped Merging Pull Requests ]]></title>
                <link>https://tomasvotruba.com/blog/2020/10/12/how-we-stopped-merging-pull-requests</link>
                <description><![CDATA[ <p>What comes before merging a pull request? Code-review, feedback from developers, and fixes to make the reviewer happy. After that, we only need the tests, coding standard, PHPStan, and Rector to pass in the CI.
<br><br>
Here is an idea - <strong>don't merge any pull-request from now on</strong>...</p> ]]></description>
                <content:encoded><![CDATA[ <p>...and let them opened for ages... no, just kidding.</p>
<h2 id="don-t-forget-to-merge">Don't forget to Merge</h2>
<p>But if you already accepted the pull-request, the issues are resolved, <strong>you still have to wait for CI to finish with green</strong>. If you're lucky, it's under 3 minutes, if you're open source 5-8 minutes and with private project 5-30 minutes.</p>
<p>How to kill the waiting time? Go for a coffee, toilet break, or a social leak (Facebook, Twitter, or your favorite PHP blog), get back, see the green checkbox, and click on the merge button. <strong>Or even worse</strong> - you jump to another issue, <a href="/blog/2018/08/27/why-and-how-to-avoid-the-memory-lock/">remember to merge</a>, then switch your focus back and forth...</p>
<img src="/assets/images/posts/2020/kodiak/kodiak_focus.png" alt="" class="img-thumbnail mt-5">
<p><a href="/blog/2020/01/13/why-is-first-instant-feedback-crucial-to-developers/">The instant feedback</a> is killed, and so is the flow.</p>
<blockquote class="blockquote text-center mt-5 mb-5">
<p>&quot;<strong>Can you automate</strong> responsibility developers have to think about?
<br>
Please do it!
<br>
They will be able to focus more and produce better quality code.&quot;</p>
</blockquote>
<p><br></p>
<h2 id="wait-for-240-pull-requests-a-month-no-thanks">Wait for 240 pull-requests a Month? No, Thanks!</h2>
<p>In <a href="https://github.com/rectorphp/rector/pulse/monthly">Rector</a>, <a href="https://github.com/symplify/symplify/pulse/monthly">Symplify</a> and <a href="https://github.com/migrify/migrify/pulse/monthly">Migrify</a> <a href="/clusters/#monorepo-from-zero-to-hero">mono-repositories</a> we had 240 merge-request for just last month.</p>
<p>That's <strong>240 distractions with ~5 minutes upkeep</strong> = 20 hours wasted by brain-waiting and much more work ruined.</p>
<h2 id="delegate-and-automate-merge-request">Delegate and Automate Merge Request</h2>
<p>What if I told you just a few percent of these manually? The rest is done by <a href="https://github.com/marketplace/kodiakhq">Kodiak</a>. That's not my full-time on-demand coworker, but Github Application that <strong>handles automated merging</strong>.</p>
<p>How does <em>Kodiak</em> work? You mark the pull-request with the &quot;automerge&quot; tag, then - if CI passes - the pull-request is merged. So instead of waiting 240 times for CI feedback, you'll <strong>add the tag when you finish the review</strong>. Then the pull-request is closed, and you can focus on the next work in the peace.</p>
<h2 id="4-steps-to-setup-kodiak">4 Steps to Setup Kodiak</h2>
<h3 id="1-go-to-setting-of-your-github-repository">1. Go to Setting of your GitHub Repository</h3>
<img src="/assets/images/posts/2020/kodiak/kodiak_branches_1.png" alt="" class="img-thumbnail mt-3">
<h3 id="2-add-branch-checks-for-code-master-code">2. Add Branch Checks for <code>master</code></h3>
<img src="/assets/images/posts/2020/kodiak/kodiak_branches_2.png" alt="" class="img-thumbnail mt-3">
<h3 id="3-select-jobs-that-are-required-to-pass">3. Select Jobs that are Required to Pass</h3>
<img src="/assets/images/posts/2020/kodiak/kodiak_require.png" alt="" class="img-thumbnail mt-3">
<h3 id="4-enable-kodiak">4. Enable Kodiak</h3>
<p>Go to <a href="https://github.com/marketplace/kodiakhq">marketplace</a> and enable it.</p>
<h3 id="5-add-code-kodiak-toml-code-setup-to-the-repository-code">5. Add <code>.kodiak.toml</code> Setup To the Repository code</h3>
<pre><code class="language-yaml"># .kodiak.toml
version = 1

# this saves deleting merged branches manually
merge.delete_branch_on_merge = true</code></pre>
<p><br></p>
<p>Now Kodiak is enabled and waiting for your work!</p>
<h2 id="1-step-to-automerge-pull-request-with-kodiak">1 Step to Automerge Pull-Request with Kodiak</h2>
<h3 id="1-after-you-decide-the-pr-is-ready-add-the-quot-automerge-quot-tag">1. After You Decide the PR is Ready, add the &quot;automerge&quot; tag</h3>
<img src="/assets/images/posts/2020/kodiak/koidak_tag.png" alt="" class="img-thumbnail mt-3">
<p>Then you're finished. The Kodiak will handle the rest...</p>
<p><br></p>
<p>Kodiak waits for the CI to pass...</p>
<img src="/assets/images/posts/2020/kodiak/kodiak_waiting.png" alt="" class="img-thumbnail mt-3">
<p>...then merges and deletes branch:</p>
<img src="/assets/images/posts/2020/kodiak/kodiak_merge.png" alt="" class="img-thumbnail mt-3">
<p><br></p>
<p>Now you've one less to think about for the rest of your life.</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/10/12/how-we-stopped-merging-pull-requests</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 12 Oct 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/10/12/how-we-stopped-merging-pull-requests#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Reveal Static Call Relationships in Your Code ]]></title>
                <link>https://tomasvotruba.com/blog/2020/10/05/how-to-reveal-static-call-relationships-in-your-code</link>
                <description><![CDATA[ <p>Static methods are easy to use. Have a guess. How long would it take to make 700 static methods in your code? 2-3 years? Now imagine you need a <a href="/blog/2018/04/26/how-i-got-into-static-trap-and-made-fool-of-myself/">replace one with dependency injection</a>.
<br><br>
You're <a href="/blog/2020/08/31/how-static-methods-kills-you-like-corona/">dead</a>. Well, at first, it feels like it. Then you can start to <a href="/blog/2019/04/01/removing-static-there-and-back-again/">analyze the problem</a> and make a refactoring plan. <strong>To increase plan chances for success, we needed data.</strong>
<br><br>
How can we get more data about static in our code?
<br><br>
Meet <em>Static Detector</em>.</p> ]]></description>
                <content:encoded><![CDATA[ <p>&quot;3 developers try to find one static method they can safely change.&quot;</p>
<img src="/assets/images/posts/2020/static_gordian_knot.jpg" class="img-thumbnail">
<p><br></p>
<p>Where is the end of it? Where to start?</p>
<p>Yay, <strong>we found one static method that seems independent on others</strong>. Let's send pull-requests for review.</p>
<p><br></p>
<p>Later that day, on code review...</p>
<ul>
<li>&quot;Well, it depends on one more method. Let's refactor it too...&quot;</li>
<li>&quot;Oh, now we need to change 2 methods in the template too... Hm, how do we get a service into that template?&quot;</li>
<li>&quot;Hm, this template is created in a static method as well. Let's register it as a service...&quot;</li>
<li>&quot;Ups, 3 more classes use this static service...&quot;</li>
</ul>
<p><br></p>
<p>Turmoil.</p>
<p><br></p>
<h2 id="stop-amp-relax">Stop &amp; Relax</h2>
<p>In a situation like this, let's take time to step back, breathe, and relax. There is a way to get out this, but brute force is not one of them.</p>
<blockquote class="blockquote text-center">
    "A journey of a thousand miles begins with a single step."
</blockquote>
<p><br></p>
<h2 id="recipe-for-static-success">Recipe for Static Success</h2>
<p>If we refactor 100+ static methods manually, we'll probably end up in the stress and frustration like in the story above.</p>
<p>The goal is to take one method at a time. But not just any static method. The easiest possible. How do we find it?</p>
<h2 id="take-low-hanging-fruit">Take Low Hanging Fruit</h2>
<p>The easiest static method is the <strong>one with the least coupling</strong>, or with a coupling that is easiest to remove, e.g.</p>
<ul>
<li>static method that is never used → remove it</li>
<li>static method that is used only locally → remove <code>static</code></li>
<li>static method that is used only in local static method → make it <code>private</code></li>
<li>static method that is used only in template → refactor is to <a href="/blog/2020/08/17/how-to-get-rid-of-magic-static-and-chaos-from-latte-filters/">filter service</a></li>
</ul>
<p>But you already know that, right? Anyone can remove method that is never used.
What is the hard problem? How can we be sure the method is not really used?</p>
<h2 id="static-detector-to-the-rescue">Static Detector to the Rescue</h2>
<p>To get these data, we use a handy tool <a href="https://github.com/migrify/static-detector">migrify/static-detector</a>.</p>
<p><br></p>
<p>Install it:</p>
<pre><code class="language-bash">composer require migrify/static-detector --dev</code></pre>
<p>Run it on your directory:</p>
<pre><code class="language-bash">vendor/bin/static-detector detect src</code></pre>
<p>We'll see the overview of all static methods, with all related static calls.</p>
<p>From the most spread one in the top, into <strong>the least coupled in the bottom</strong>.</p>
<p><br></p>
<p>For following file:</p>
<pre><code class="language-php">&lt;?php

// src/SomeStatic.php
final class SomeStatic
{
    public static function neverCalled()
    {
    }

    public function run()
    {
        self::calledJustOnce();
    }

    public static function calledJustOnce()
    {
    }
}</code></pre>
<p>We get this result:</p>
<img src="/assets/images/posts/2020/static_detector_result.png" class="img-thumbnail">
<p><br></p>
<p>Now even 700+ static methods do seem like such a big problem, right?</p>
<img src="/assets/images/posts/2020/static_gordian_knot_2.jpg" class="img-thumbnail">
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/10/05/how-to-reveal-static-call-relationships-in-your-code</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 05 Oct 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/10/05/how-to-reveal-static-call-relationships-in-your-code#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Add Colors to Continuous Integration Output ]]></title>
                <link>https://tomasvotruba.com/blog/2020/09/28/how-to-add-colors-to-continuious-integration-output</link>
                <description><![CDATA[ <p>Today I have a tip for your CI. I learned this tip from <a href="https://github.com/JanMikes">Jan Mikes</a>.
<br>
<br>
A small tip that made my everyday work with CI more colorful.</p> ]]></description>
                <content:encoded><![CDATA[ <ul>
<li>Do you use Travis, Github Actions, or Gitlab CI?</li>
</ul>
<p><br></p>
<ul>
<li>Do you use composer, PHPUnit, ECS, Rector, or PHPStan?</li>
</ul>
<p><br></p>
<ul>
<li>Do you have colors enabled in <code>phpunit.xml</code>?</li>
</ul>
<pre><code class="language-xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;phpunit colors="true"&gt;
    &lt;!-- ... --&gt;
&lt;/phpunit&gt;</code></pre>
<p><br></p>
<ul>
<li>Do you use <a href="https://blog.martinhujer.cz/have-you-tried-composer-scripts/">composer scripts</a> to prevent typos and re-use CI tool setup?</li>
</ul>
<p><br></p>
<p>...but still missing the <strong>colored output</strong>?</p>
<p><br></p>
<h2 id="sad-black-white-continuous-integration-world">Sad Black/White Continuous Integration World</h2>
<p>For many years I've run Travis, Gitlab, and <a href="/blog/2020/01/27/switch-travis-to-github-actions-to-reduce-stress/">now Github Actions</a>. I never knew the output could be readable for humans, so I always looked at the final checkmark for all the scripts.</p>
<p>It was <em class="fas fa-fw fa-check text-success"></em> or <em class="fas fa-fw fa-times text-danger"></em>.</p>
<p><br></p>
<p>When the CI runs the scripts:</p>
<pre><code class="language-yaml">scripts:
    - composer install
    - composer fix-cs</code></pre>
<p><br></p>
<p>This was usually the output:</p>
<img src="/assets/images/posts/2020/ansi_no_colors.png">
<img src="/assets/images/posts/2020/ansi_no_colors_2.png">
<p><br></p>
<h2 id="one-day-something-changed">One day, Something Changed</h2>
<p>The colors came to my life. I could read again, and the output was the same as in local environment!</p>
<img src="/assets/images/posts/2020/ansi_colors.png">
<img src="/assets/images/posts/2020/ansi_colors_2.png">
<p>What happened? Did they fix something on Github Actions? Or composer (and all the other tools were) was fixed?</p>
<p><br></p>
<p>No, <strong>just one new word</strong> appeared:</p>
<pre><code class="language-diff"> scripts:
-    - composer install
+    - composer install --ansi</code></pre>
<pre><code class="language-diff"> {
     "scripts": {
-        "fix-cs": "vendor/bin/ecs check --fix"
+        "fix-cs": "vendor/bin/ecs check --fix --ansi"
     }
 }</code></pre>
<p>Since then, I enjoy failed CI jobs more and find faster what went wrong.</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/09/28/how-to-add-colors-to-continuious-integration-output</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/09/28/how-to-add-colors-to-continuious-integration-output#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Symfony AutoBind Parameter is Dead, Long live Constant Parameters ]]></title>
                <link>https://tomasvotruba.com/blog/2020/09/21/symfony-autobind-parameter-is-dead-long-live-constant-parameters</link>
                <description><![CDATA[ <p>I wrote the <a href="/blog/2018/11/05/do-you-autowire-services-in-symfony-you-can-autowire-parameters-too/">Do you Autowire Services in Symfony? You can Autowire Parameters Too</a> almost 2 years ago. It seemed like a good idea at that time, to save manual YAML config wiring.
<br><br>
Now, with <a href="/blog/2020/07/16/10-cool-features-you-get-after-switching-from-yaml-to-php-configs/">PHP configs</a> on the Symfony markets, auto bind parameters became obsolete.
<br><br>
Welcome <strong>constant parameters</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <p>In the past, we used YAML to define parameters for Symfony application:</p>
<pre><code class="language-yaml">parameters:
    location: Prague</code></pre>
<p>How do we get parameter in a service? Via name auto binding: <strong>the parameter name = the param name in <code>__construct</code></strong>:</p>
<pre><code class="language-php">final class SomeService
{
    private string $location;

    public function __construct(string $location)
    {
        $this-&gt;location = $location;

        dump($location); // "Prague"
    }
}</code></pre>
<p>This allows us to have a typed parameter right in the constructor. We know it's a <code>string</code>.</p>
<h2 id="yaml-without-knowledge">YAML Without Knowledge</h2>
<ul>
<li>But where is the <code>location</code> param defined?</li>
<li>Where are all the places the parameter is used in?</li>
<li>Is the <code>string $location</code> in the <code>__construct</code> really a constructor parameter? What if that's a value object?</li>
</ul>
<pre><code class="language-php">$valuesObjects = [
    new SomeService('Prague'),
    new SomeService('Berlin'),
    new SomeService('London'),
];</code></pre>
<p>We don't know. We can be either anxious about it or not care about this detail at all.</p>
<p><br></p>
<p>Or we could <strong>quickly know with 1 click in PHPStorm</strong>. How?</p>
<h2 id="welcome-constant-parameters">Welcome Constant Parameters</h2>
<p>With <a href="/blog/2020/07/16/10-cool-features-you-get-after-switching-from-yaml-to-php-configs">Symfony configs in <code>*.php</code> format</a>, this is easypick:</p>
<pre><code class="language-php">use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return static function (ContainerConfigurator $containerConfigurator): void {
    $parameters = $containerConfigurator-&gt;parameters();
    $parameters-&gt;set('location', 'Prague');
};</code></pre>
<p>Wait, this was just a string. We want <strong>constant parameters</strong>:</p>
<pre><code class="language-php">use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
use App\Configuration\Option;

return static function (ContainerConfigurator $containerConfigurator): void {
    $parameters = $containerConfigurator-&gt;parameters();
    $parameters-&gt;set(Option::LOCATION, 'Prague');
};</code></pre>
<h2 id="when-constant-parameter-and-service-parameter-meet">When Constant Parameter and Service Parameter Meet</h2>
<p>We still want to avoid service configuration... we have 2 options.</p>
<ul>
<li>A. Use Symfony <a href="https://symfony.com/blog/new-in-symfony-4-1-getting-container-parameters-as-a-service">parameter bag</a>:</li>
</ul>
<pre><code class="language-php">use App\Configuration\Option;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

final class SomeService
{
    private string $location;

    public function __construct(ParameterBagInterface $parameterBag)
    {
        // re-type to (string) is needed, because "get()" return mixed type
        $this-&gt;location = (string) $parameterBag-&gt;get(Option::LOCATION);
    }
}</code></pre>
<ul>
<li>B. Use Symplify <a href="https://github.com/symplify/package-builder#get-all-parameters-via-service">ParameterProvider</a>:</li>
</ul>
<pre><code class="language-php">use App\Configuration\Option;
use Symplify\PackageBuilder\Parameter\ParameterProvider;

final class SomeService
{
    private string $location;

    public function __construct(ParameterProvider $parameterProvider)
    {
        // no re-type needed + parameter type validation included inside the ParameterProvider service
        $this-&gt;location = $parameterProvider-&gt;provideStringParameter(Option::LOCATION);
    }
}</code></pre>
<p>Both services work to find first is out of the box, second is mutable and useful for testing or post-container configurations. Pick the one that suits your project better.</p>
<p><strong>Are you unsure?</strong> Use the Symfony <code>ParameterBagInterface</code>.</p>
<h2 id="one-more-thing">One More Thing...</h2>
<p>We now have a clean design and constant parameters without any name &lt;=&gt; name hacking. That's nice.</p>
<p>But the best is yet to come. In the previous version, we were missing essential information about the parameter:</p>
<blockquote class="blockquote text-center mt-5 mb-5">
    Where are the places the parameter is used in?
</blockquote>
<p><br></p>
<p>Well, why not just <strong>click on the constant</strong> in your IDE?</p>
<p><br></p>
<img src="/assets/images/posts/2020/constant_parameter_locations.gif" class="img-thumbnail">
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/09/21/symfony-autobind-parameter-is-dead-long-live-constant-parameters</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 21 Sep 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/09/21/symfony-autobind-parameter-is-dead-long-live-constant-parameters#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Apply Coding Standard on PHP Snippets in Markdown Files? ]]></title>
                <link>https://tomasvotruba.com/blog/2020/09/14/how-to-apply-coding-standard-on-php-snippets-in-markdown-files</link>
                <description><![CDATA[ <p>Have you been asking this question since the inventions of coding standards? Do you write <code>README.md</code>?
If you maintain an open-source project, you do.
<br><br>
Coding standards are a matter of adding a few lines into <code>composer.json</code> and your favorite CI.
<strong>But what about <code>README.md</code> files?
<br>
<br>
Who will take care of them?</strong> Should we accept clean code in <code>/src</code>, but crap code in PHP snippets in Markdown? What if someone reading <code>README.md</code> will adopt its bad coding habits?
<br><br>
I say: &quot;We shall not!&quot;</p> ]]></description>
                <content:encoded><![CDATA[ <p><strong>This feature <a href="https://github.com/symplify/symplify/pull/2118">was contributed</a> to ECS 8.3 by <a href="https://github.com/samsonasik">samsonasik</a>. Thank you!</strong></p>
<p><br></p>
<p>We try to make new features <strong>as intuitive to use as possible</strong>, so you have to learn as less a possible to use them. Have more fun.</p>
<p>You already know ECS command <code>check</code>:</p>
<pre><code class="language-bash">vendor/bin/ecs check src

# to change the code
vendor/bin/ecs check src --fix</code></pre>
<h2 id="code-check-code-but-for-markdown-files"><code>check</code> but for Markdown Files</h2>
<p>How to apply the same coding standard to markdown files?</p>
<p>Just use <code>check-markdown</code> command instead of <code>check</code>:</p>
<pre><code class="language-bash">vendor/bin/ecs check-markdown README.md</code></pre>
<p>You can use multiple files or directories:</p>
<pre><code class="language-bash"># do you have multiple files?
vendor/bin/ecs check-markdown README.md packages

# or target names only?
vendor/bin/ecs check-markdown README.md packages/**/README.md</code></pre>
<p>How to <strong>fix the content</strong>? Just add <code>--fix</code>:</p>
<pre><code class="language-bash">vendor/bin/ecs check-markdown README.md --fix</code></pre>
<p>All the rules that you defined in <code>ecs.php</code> will be applied the same way they're applied to PHP code.</p>
<p><br></p>
<h2 id="how-does-it-look-in-practise">How does it Look in Practise?</h2>
<img src="/assets/images/posts/2020/check_markdown.gif" class="img-thumbnail">
<h2 id="composer-scripts-tip">Composer Scripts Tip</h2>
<p>How to add all this to your workflow? Another command to run every time? Nah, that's too <a href="/blog/2018/08/27/why-and-how-to-avoid-the-memory-lock/">memory locking</a> and tedious.</p>
<p>Instead, we can extend <a href="https://blog.martinhujer.cz/have-you-tried-composer-scripts/">composer scripts</a> in <code>composer.json</code>:</p>
<pre><code class="language-diff"> {
     "scripts": {
-        "check-cs": "vendor/bin/ecs check",
+        "check-cs": [
+           "vendor/bin/ecs check",
+           "vendor/bin/ecs check-markdown README.md",
+        ],
-        "fix-cs": "vendor/bin/ecs check --fix"
+        "fix-cs": [
+            "vendor/bin/ecs check --fix",
+            "vendor/bin/ecs check-markdown README.md --fix",
+        ]
     }
 }</code></pre>
<p>How does it change your workflow? Not at all! You can still use the same commands:</p>
<pre><code class="language-bash">composer checks-cs
composer fix-cs</code></pre>
<p>Just now they're much smarter ;)</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/09/14/how-to-apply-coding-standard-on-php-snippets-in-markdown-files</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/09/14/how-to-apply-coding-standard-on-php-snippets-in-markdown-files#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Introducing Object Calisthenics Rules for PHPStan ]]></title>
                <link>https://tomasvotruba.com/blog/2020/09/07/introducing-object-calisthenics-rules-for-phpstan</link>
                <description><![CDATA[ <p>For the last 2 years, I've maintained <a href="https://github.com/object-calisthenics/phpcs-calisthenics-rules">Object Calisthenics Rules for PHP_CodeSniffer</a>. In 2019 and 2020, there was a huge boom of custom PHPStan rulesets that make everyday development <a href="/blog/2018/08/27/why-and-how-to-avoid-the-memory-lock/">easier and stronger</a> at the same time.
<br><br>
<strong>Have you been waiting to put these rules into your <code>phpstan.neon</code>?</strong>
<br>
<br>
Today you can!</p> ]]></description>
                <content:encoded><![CDATA[ <p>Object Calisthenics is about SOLID rules and code architecture more than spaces and bracket positions, maybe <a href="/blog/2018/10/25/why-ast-fixes-your-coding-standard-better-than-tokens/">PHPStan and AST</a> are better to handle it?</p>
<p><br></p>
<h2 id="what-is-object-calis">What is Object Calis...?</h2>
<p>Oh wait, it's the first time you hear <em>Object Calisthenics</em>?</p>
<img src="/assets/images/posts/object_calisthenics_phpstan.jpg" class="img-thumbnail">
<p>Don't worry. It's not a physical sport that is required to become a better developer. You read about all 9 rules or listen to 12-min audio in <a href="https://williamdurand.fr/2013/06/03/object-calisthenics">Object Calisthenics</a> post by William Durand or check <a href="https://www.slideshare.net/guilhermeblanco/object-calisthenics-applied-to-php">colorful slides</a> by Guilherme Blanco, the former maintainer PHP_CodeSniffer set package.</p>
<p>Some of the rules are rather theoretical to entertain the mind, but some can be measured. And <strong>what can be measured, can be automated</strong>. What rules can you check in your CI?</p>
<ul>
<li>Rule 1: Only X Level of Indentation per Method</li>
<li>Rule 2: No <code>else</code> And <code>elseif</code></li>
<li><strong>Rule 5: No Chain Method Call</strong></li>
<li><strong>Rule 6: No Names Shorter than 3 Chars</strong></li>
<li>Rule 7: Keep Your Classes Small</li>
<li>Rule 9: No Setter Methods</li>
</ul>
<h2 id="introducing-phpstan-rules">Introducing PHPStan Rules</h2>
<p>You can add all of the rules above as <a href="https://github.com/symplify/coding-standard/blob/master/docs/phpstan_rules_object_calisthenics.md">a PHPStan ruleset</a>. I've ported these rules to <code>symplify/coding-standard</code> in the last 2 days.</p>
<pre><code class="language-bash">composer require symplify/coding-standard --dev</code></pre>
<p>And update <code>phpstan.neon</code>:</p>
<pre><code class="language-yaml"># phsptan.neon
includes:
    - vendor/symplify/coding-standard/packages/object-calisthenics/config/object-calisthenics-rules.neon</code></pre>
<p>As you can see, their rules are pretty strict, and in practice, that might be impossible to put on a real project. It's better to start slowly with low hanging fruit rules. Like these 2:</p>
<h3 id="rule-5-no-chain-method-call">Rule 5: No Chain Method Call</h3>
<pre><code class="language-yaml"># phpstan.neon
services:
    -
        class: Symplify\CodingStandard\ObjectCalisthenics\Rules\NoChainMethodCallRule
        tags: [phpstan.rules.rule]</code></pre>
<h3 id="rule-6-no-names-shorter-than-3-chars">Rule 6: No Names Shorter than 3 Chars</h3>
<pre><code class="language-yaml"># phpstan.neon
services:
    -
        class: Symplify\CodingStandard\ObjectCalisthenics\Rules\NoShortNameRule
        tags: [phpstan.rules.rule]
        arguments:
            minNameLenght: 3
            allowedShortNames: ['id', 'to', 'up']</code></pre>
<p>And you're ready to go!</p>
<h2 id="how-to-switch-from-php-codesniffer-to-phpstan-rules">How to Switch from PHP_CodeSniffer to PHPStan rules?</h2>
<p>Most likely, you're not using all the rules at once, so we look at migrating particular rules.</p>
<ul>
<li>Look at the <a href="https://github.com/symplify/coding-standard/blob/master/docs/phpstan_rules_object_calisthenics.md">list of PHPStan rules</a></li>
<li>Look at the full set - <a href="https://github.com/symplify/coding-standard/blob/master/packages/object-calisthenics/config/object-calisthenics-rules.neon"><code>object-calisthenics-rules.neon</code></a></li>
<li>Pick the rules you need and copy-paste them to your <code>phpstan.neon</code></li>
<li>You can use parameters to configure them, or explicit values (like in 2 cases above)</li>
<li>Add only <strong>1 rule at a time</strong> and then try to run PHPStan (<code>vendor/bin/phpstan analyse</code>) to make sure, it works</li>
</ul>
<p>Good luck and have fun.</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/09/07/introducing-object-calisthenics-rules-for-phpstan</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 07 Sep 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/09/07/introducing-object-calisthenics-rules-for-phpstan#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How Static Methods Kill You Like Corona ]]></title>
                <link>https://tomasvotruba.com/blog/2020/08/31/how-static-methods-kills-you-like-corona</link>
                <description><![CDATA[ <p>Do you know <a href="https://blog.codinghorror.com/the-broken-window-theory/">the Broken Window theory</a>? It's a social pattern in code, a great post written by a guy behind one small manual website - StackOverflow.
<br><br>
If you combine this theory and Static Methods in Your code, you'll get Corona. As we already know, it might or might not be deadly. How it spreads, what are ways to protect, can we cure it?</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="single-child-in-classroom-problem">Single Child in Classroom Problem</h2>
<p>It's September here, and many of friends walked their children to the school. Some for the first time in their life. Everyone is very cautious because it takes precisely <strong>1 corona-infected</strong> child, parent, or teacher to spread to another person very effectively.</p>
<img src="/assets/images/posts/static_corona_child.jpg" class="img-thumbnail">
<p>Some of my friends are teachers, and their prognosis is that most schools get closed down till the end of September. Why? Because if you have 1 infected child in a classroom of 30 children, all their teachers and schoolmates can be infected too. The problem is, tests take too long. <strong>It's not instant feedback</strong>. So we have to wait, hope, make up rationalizations in the meantime.</p>
<p>Playing statistics with fear now, but I think you've already got used to it from the news for the last 9 months.</p>
<h2 id="elderly-and-weak-people-are-the-corona-goal">Elderly and Weak People are the Corona Goal</h2>
<p>&quot;Ok, so few schools get closed down, what's a big of a deal?&quot; you might think. And you might be right. There is not much health risk in not going to a place. Have you heard of a person that died from not going to the cinema?</p>
<p>The problem is when the corona spreads to fragile people - the elderly and those with other illnesses. What happens when a lot of young and strong people get infected? Let's say they have a temperature, but no-one dies. As everything is connected in today's world, this <strong>speeds up corona spread</strong> between <em>strong population</em> and <em>weak population</em> and puts enormous danger on the latter.</p>
<p>So much for corona.</p>
<h2 id="corona-infected-child-in-a-classroom-is-like-a-static-method">Corona Infected Child in a Classroom is like a Static Method</h2>
<p>If we only were as conscious and reacted fast with static methods as we react with a single corona infected person. <strong>But don't care, because it's <a href="/blog/2020/01/13/why-is-first-instant-feedback-crucial-to-developers/">not instant feedback</a></strong>.</p>
<ul>
<li>
<p>Imagine <em>static methods</em> is like a strong population infected by corona. They can go anywhere; they don't care; they will live.</p>
</li>
<li>
<p>Imagine <em>service methods</em> (non-static) are like a weak population; they were not infected yet. They're ok, for now.</p>
</li>
</ul>
<h2 id="quot-show-me-some-code-quot">&quot;Show me Some Code!&quot;</h2>
<p>Do you want real meat? Let's look at code that can put down the company for many months:</p>
<h3 id="strong-population">Strong Population</h3>
<pre><code class="language-php">final class InfectedYoungChild
{
    public static function spreadInfection()
    {
        // ...
    }
}</code></pre>
<pre><code class="language-php">final class InfectedYoungParent
{
    public static function spreadInfection()
    {
        // ...
    }
}</code></pre>
<pre><code class="language-php">final class ClassRoom
{
    public static function spreadInfection()
    {
        InfectedYoungChild::spreadInfection();
        // ...
        InfectedYoungParent::spreadInfection();
        // ...
    }
}</code></pre>
<p>Imagine 100 more static methods in your code, so we save some paper.
To give your real-life example, one of the projects we migrate now has over 350 static methods in 110 000 lines of code.</p>
<h3 id="weak-population">Weak Population</h3>
<p>Let's say grandma feels lonely and <strong>wants to see their grandchildren</strong>, that gives her joy and purpose to live.</p>
<img src="/assets/images/posts/static_corona_grand_parents.jpg" class="img-thumbnail">
<p>At least once in a <em>while</em> (pun intended!):</p>
<pre><code class="language-php">final class HealthyGrandma
{
    public function seeGrandChildren(array $youngChildren)
    {
        foreach ($youngChildren as $youngChild) {
            if ($youngChild instanceof HuggableInterface) {
                $youngChild-&gt;hug($this);
            }
        }
    }
}</code></pre>
<p>But she's afraid, so she wants to be sure her grandchild won't kill her.</p>
<pre><code class="language-php">final class HealthyGrandma
{
    public function seeGrandChildren(array $youngChildren)
    {
        foreach ($youngChildren as $youngChild) {
            if ($youngChild instanceof InfectableInterface) {
                if ($youngChild-&gt;isInfected()) {
                    // the child is infected, can't happen, sorry :(
                    continue;
                }
            }

            if ($youngChild instanceof HuggableInterface) {
                $youngChild-&gt;hug($this);
            }
        }
    }
}</code></pre>
<h2 id="the-italy-mayhem-problem">The Italy Mayhem Problem</h2>
<p>How can we detect <code>InfectableInterface</code> in a static class? How can we collect data about infections in static classes?</p>
<p>We can't. And that's what happened in Italy this spring. Little control over the strong and weak part of your code population.</p>
<p>What can we do about it? I know you won't like it, <a href="/blog/2019/04/01/removing-static-there-and-back-again/">it's a lot of work</a> that has no impact right now - refactor static to non-static:</p>
<pre><code class="language-diff">-final class InfectedYoungChild
+final class InfectedYoungChild implements InfectableInterface
 {
-    public static function spreadInfection()
+    public function spreadInfection()
     {
         // ...
     }
 }</code></pre>
<p>And also...</p>
<pre><code class="language-diff">-final class InfectedYoungParent
+final class InfectedYoungParent implements InfectableInterface
{
-    public static function spreadInfection()
+    public function spreadInfection()
     {
         // ...
     }
 }</code></pre>
<p><strong>And mostly, all their dependencies... and their dependencies...</strong></p>
<pre><code class="language-diff">-final class ClassRoom
+final class ClassRoom implements InfectalbeImterface
 {
+    private InfectedYoungChild $infectedYoungChild;
+
+    InfectedYoungParent $infectedYoungParent
+
+    public fuction __construct(
+        InfectedYoungChild $infectedYoungChild,
+        InfectedYoungParent $infectedYoungParent
+    ) {
+         $this-&gt;infectedYoungChild = $infectedYoungChild;
+         $this-&gt;infectedYoungParent = $infectedYoungParent;
+    }

-    public static function spreadInfection()
+    public function spreadInfection()
     {
-        InfectedYoungChild::spreadInfection();
+        $this-&gt;infectedYoungChild-&gt;spreadInfection();
         // ...
-        InfectedYoungParent::spreadInfection();
+        $this-&gt;infectedYoungParent-&gt;spreadInfection();
         // ...
     }
 }</code></pre>
<p>This is the only way to save <a href="/blog/2018/04/26/how-i-got-into-static-trap-and-made-fool-of-myself/">from fractal static spread</a>.</p>
<p><br>
<br></p>
<p><strong>It might take time, work, effort, sweat &amp; tears, but it's worth it for the future.</strong></p>
<p><br></p>
<img src="/assets/images/posts/static_corona_safe.jpg" class="img-thumbnail">
<p><br></p>
<blockquote class="blockquote text-center">
<p>Great programmers do not live for today's delivered features,<br>
they live for <a href="/blog/2018/04/30/programming-climbing-a-huge-mountain/">the top of the mountain</a> in years of work.</p>
</blockquote>
<p><br></p>
<h2 id="what-if-we-find-the-corona-cure">What if We Find the Corona Cure?</h2>
<pre><code class="language-php">$coronaCure = new CoronaCure();

$infectables = $container-&gt;getByType(InfectableInteface::class);

foreach ($infectables as $infectable) {
    if (! $infectable-&gt;isInfected()) {
        continue;
    }

    $coronaCure-&gt;cure($infectable);
}</code></pre>
<p>Be sure to have all your services in your container, so they're available <strong>when you need them</strong>.</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/08/31/how-static-methods-kills-you-like-corona</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 31 Aug 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/08/31/how-static-methods-kills-you-like-corona#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ What if We Remove Strings from Symfony Extension Configuration ]]></title>
                <link>https://tomasvotruba.com/blog/2020/08/24/what-if-we-remove-strings-from-symfony-extension-configuratoin</link>
                <description><![CDATA[ <p>You can tell I'm a <a href="/blog/2020/07/16/10-cool-features-you-get-after-switching-from-yaml-to-php-configs/">huge fan PHP configs</a>. To be honest, I don't care; I'm just extremely lazy.
<br><br>
Yet, my laziness got me itching when I see <strong>configuration of extensions</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <p>I like the service configuration provided by Symfony. Typo-proof, everything is autocompleted by IDE, hard to put the wrong argument or make a typo.</p>
<pre><code class="language-php">use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return static function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();

    $services-&gt;defaults()
        -&gt;autowire()
        -&gt;autoconfigure()
        -&gt;public();

    $services-&gt;set(SomeService::class)
        -&gt;args(['some', 'value']);
};</code></pre>
<p>This config is a joy to use in IDE. Only the values that can change, like class name or arg value, are strings. <strong>Everything else is API of the modeling tool</strong>, here <code>ContainerConfigurator</code> from Symfony. This code is a state of Art.</p>
<p><br></p>
<p>But that's not everything we have in our configs. Let's look at a common extension you can found in <code>config/packages/doctrine.php</code> in your Symfony project:</p>
<pre><code class="language-php">use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return static function (ContainerConfigurator $containerConfigurator): void {
    $containerConfigurator-&gt;extension('break', [
        'dbal' =&gt; [
            'host' =&gt; '%env(DATABASE_HOST)%',
            'user' =&gt; '%env(DATABASE_USER)%',
            'password' =&gt; '%env(DATABASE_PASS)%',
        ],
    ]);
};</code></pre>
<p>How do you like this?</p>
<p>I'll share you secret deep from my traumatized mind - this is what I see:</p>
<pre><code class="language-php">use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return static function (ContainerConfigurator $containerConfigurator): void {
    $containerConfigurator-&gt;extension('error', [
        'bug' =&gt; [
            'typo' =&gt; ' _missing',
            ' problem ' =&gt; 'sorry_renamed',
            'forgotten' =&gt; 'FALSE POSITIVE',
        ],
    ]);
};</code></pre>
<blockquote class="blockquote text-center">
    "Anything that can go wrong, will go wrong.<br>
    In the worst possible order. When you least expect it."
</blockquote>
<p><br></p>
<h2 id="how-can-we-make-extension-as-good-as-service-registration">How can we make Extension as Good as Service Registration?</h2>
<p>If we look at <a href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/DependencyInjection/Loader/Configurator/ContainerConfigurator.php"><code>ContainerConfigurator</code></a>, it inherits from abstract class <a href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/DependencyInjection/Loader/Configurator/AbstractConfigurator.php"><code>AbstractConfigurator</code></a>.</p>
<p>What if we use per-extension Configurator... e.g. <code>DoctrineConfigurator</code>?</p>
<pre><code class="language-php">return static function (DoctrineConfigurator $doctrineConfigurator): void {
    $doctrineConfigurator-&gt;dbal()
        -&gt;user('%env(DATABASE_USER)%')
        -&gt;password('%env(DATABASE_PASS)%');
};</code></pre>
<p>Slightly less space fo bug... Still, I managed to split one there. It can cause a &quot;connection to database rejected&quot; error.</p>
<h2 id="environment-variables-for-everyone">Environment Variables for Everyone</h2>
<p>Have you spotted it?</p>
<pre><code class="language-diff"> return static function (DoctrineConfigurator $doctrineConfigurator): void {
     $doctrineConfigurator-&gt;dbal()
         -&gt;user('%env(DATABASE_USER)%')
-        -&gt;password('%env(DATABASE_PASS)%');
+        -&gt;password('%env(DATABASE_PASSWORD)%');
};</code></pre>
<ul>
<li>How could we prevent this?</li>
<li>How can one know the conventions of database env values without studying them?</li>
<li>What are other ENV values for the database we can use?</li>
</ul>
<p><a href="https://github.com/JanMikes">Jan Mikes</a> shared with me an interesting idea that <strong>removes this problem</strong>:</p>
<pre><code class="language-php">use DoctrineEnvs;

return static function (DoctrineConfigurator $doctrineConfigurator): void {
    $doctrineConfigurator-&gt;dbal()
        -&gt;user('%env(' . DoctrineEnvs::DATABASE_PASSWORD . ')%')
        -&gt;password('%env(' . DoctrineEnvs::DATABASE_PASSWORD . ')%');
};</code></pre>
<p><br></p>
<p>That seems like too much clutter... can we make it simpler and safes?</p>
<pre><code class="language-php">use DoctrineEnvParams;

return static function (DoctrineConfigurator $doctrineConfigurator): void {
    $doctrineConfigurator-&gt;dbal()
        -&gt;user(DoctrineEnvParams::DATABASE_PASSWORD)
        -&gt;password(DoctrineEnvParams::DATABASE_PASSWORD);
};</code></pre>
<p><br></p>
<p>In what cases is this the most useful?</p>
<p><br></p>
<p>Common key for the &quot;database name&quot; is never the same across database platforms and language integration. Imagine the saved hours and lifes on Docker/Doctrine/CI typos:</p>
<pre><code class="language-php">return static function (DoctrineConfigurator $doctrineConfigurator): void {
    $doctrineConfigurator-&gt;dbal()
        -&gt;database('%env(DATABASE_NAME)%');
        // or...?
        -&gt;database('%env(DATABASE_DBNAME)%');
        // or...?
        -&gt;database('%env(DATABASE_DATABASE)%');
        // or...?
        -&gt;database('%env(DB_NAME)%');
};</code></pre>
<p>Just don't care and use IDE autocomplete:</p>
<pre><code class="language-php">use DoctrineEnvParams;

return static function (DoctrineConfigurator $doctrineConfigurator): void {
    $doctrineConfigurator-&gt;dbal()
        -&gt;database(DoctrineEnvParams::DATABASE_NAME);
};</code></pre>
<h2 id="what-are-benefits-over-array-configuration">What are Benefits over Array configuration?</h2>
<ul>
<li><strong>the parameter is validated by standard PHP</strong> - if you put database name with <code>int</code>, the PHP throws an exception right on that line</li>
</ul>
<h3 id="focus-on-config-without-jumping-elsewhere">Focus on Config without Jumping Elsewhere</h3>
<ul>
<li>the IDE autocompletes method names - <strong>no need to look into configuration</strong>, what can be used - you can stay focused on your code</li>
<li>the IDE autocompletes ENV names - <strong>no need to look into configs or extension on Github</strong> - you can stay focused on your code</li>
</ul>
<h3 id="narrow-context">Narrow Context</h3>
<ul>
<li>context-aware autocomplete - when you type <code>dbal()</code> or <code>orm()</code> you only get methods, that are relevant in that context</li>
</ul>
<pre><code class="language-php">return static function (DoctrineConfigurator $doctrineConfigurator): void {
    $doctrineConfigurator-&gt;dbal()
        -&gt;... // dbal specific methods

    $doctrineConfigurator-&gt;orm()
        -&gt;... // orm specific methods
};</code></pre>
<ul>
<li>we can also go to a more narrow scope, like single <code>connection()</code></li>
</ul>
<pre><code class="language-php">return static function (DoctrineConfigurator $doctrineConfigurator): void {
    $doctrineConfigurator-&gt;dbal()
        -&gt;conntection()
            -&gt;... // only connection specific methods
};</code></pre>
<p>The <code>DoctrineConfigurator</code> with specific <code>methods()</code> and <code>Constant::KEYS</code> is one way to get rid of all string possible.</p>
<h2 id="what-about-value-objects">What about Value Objects?</h2>
<p>With PHP 8.0 to be released in 11/2020 will come <a href="https://stitcher.io/blog/php-8-named-arguments">named arguments</a>. With them, the IDE autocomplete becomes more powerful. If we combine it along with <code>__construct</code> validation in value objects, we have another solid way to add parameters:</p>
<pre><code class="language-php">return static function (DoctrineConfigurator $doctrineConfigurator): void {
    $doctrineConfigurator-&gt;dbal()
        -&gt;connection(new DbalConnection(
            DoctrineEnvParams::DATABASE_USER,
            DoctrineEnvParams::DATABASE_PASSWORD,
            DoctrineEnvParams::DATABASE_NAME
        ));
};</code></pre>
<p>Compared to method() autocomplete, we can also see <strong>what arguments are required</strong> and which optional:</p>
<pre><code class="language-php">// using PHP 8.0 syntax with constructor promotion

final class DbalConnection
{
    public function __construct(
        private string $user,
        private string $password,
        private string $database,
        private ?string $version = null
    ) {
        // ...
    }
}</code></pre>
<h2 id="instant-feedback-loop">Instant Feedback Loop</h2>
<p>If we get rid of strings that can go wrong, we've made a big shift <a href="/blog/2020/03/02/we-do-not-need-senior-developers-we-need-senior-code-bases/">to senior codebase</a>.</p>
<p>Another huge benefit for programmers <strong>is focus - along with <a href="/blog/2020/01/13/why-is-first-instant-feedback-crucial-to-developers/">instant feedback loop</a></strong>.</p>
<blockquote class="blockquote text-center">
    "If something goes wrong, I want to know it the moment it went wrong"
</blockquote>
<ul>
<li>
<p>If we put the wrong password to the database, the project works on the localhost server, the tests are passing, and CI is green, our feedback loop is slow, and we have to speed it up.</p>
</li>
<li>
<p>If the project crashes on the localhost server and tests are failing, our feedback look is fast.</p>
</li>
</ul>
<p><br></p>
<p><strong>How is instant feedback loop related to value objects and require arguments?</strong> Good question!</p>
<p>If we put user and password but forget the database name, the application will crash <strong>when</strong> it's connected:</p>
<pre><code class="language-php">use DoctrineEnvParams;

return static function (DoctrineConfigurator $doctrineConfigurator): void {
    $doctrineConfigurator-&gt;dbal()
        -&gt;user(DoctrineEnvParams::DATABASE_USER)
        -&gt;password(DoctrineEnvParams::DATABASE_PASSWORD);
};</code></pre>
<p>That's very late!</p>
<p>With value objects, we'll get the &quot;missing 3rd argument&quot; error:</p>
<pre><code class="language-php">return static function (DoctrineConfigurator $doctrineConfigurator): void {
    $doctrineConfigurator-&gt;dbal()
        -&gt;connection(new DbalConnection(
            DoctrineEnvParams::DATABASE_USER,
            DoctrineEnvParams::DATABASE_PASSWORD
            // boom :(
        ));
};</code></pre>
<p><strong>That's fast feedback loop!</strong></p>
<p><br></p>
<p>These were few ideas, how to <strong>get rid of strings</strong> in <code>/config</code> directory, so we can instead focus on something we love - algorithms, coding, and maybe a coffee cup!</p>
<p><br></p>
<p>I bet you can't come up with a better way to do this... share in comments to prove me wrong ;)</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/08/24/what-if-we-remove-strings-from-symfony-extension-configuratoin</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/08/24/what-if-we-remove-strings-from-symfony-extension-configuratoin#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Get Rid of Magic, Static and Chaos from Latte Filters ]]></title>
                <link>https://tomasvotruba.com/blog/2020/08/17/how-to-get-rid-of-magic-static-and-chaos-from-latte-filters</link>
                <description><![CDATA[ <p><a href="/blog/2020/08/10/4-ways-to-make-your-nette-project-more-readable/">In the previous post</a>, we looked at how to avoid array magic and duplicates of Latte in Presenter and Components.
<br>
<br>
Today we'll leverage those tips to make your code around Latte filters <strong>easy and smooth to work with</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <p>Do you have your <code>LatteFactory</code> service ready? If not, <a href="/blog/2020/08/10/4-ways-to-make-your-nette-project-more-readable#4-move-latte-engine-tuning-from-presenter-control-to-lattefactory">create it first</a>, because we'll build on it.</p>
<p><br></p>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Latte;

use Latte\Engine;
use Latte\Runtime\FilterInfo;

final class LatteFactory
{
    public function create(): Engine
    {
        $engine = new Engine();
        $engine-&gt;setStrictTypes(true);

        return $engine;
    }
}</code></pre>
<h2 id="how-to-register-a-new-latte-filter">How to register a new Latte Filter?</h2>
<p>This simple question can add easily add an anti-pattern to your code, that spreads like COVID and <a href="https://blog.codinghorror.com/the-broken-window-theory/">inspires developers to add more anti-patterns</a>. It's easy to <a href="/blog/2018/04/26/how-i-got-into-static-trap-and-made-fool-of-myself//">submit to static infinite loop</a>, I did it too.</p>
<p>But let's look at practice... <strong>how to add a filter</strong>?</p>
<p>Let's say we want to format money. The filter code is not relevant here, so we go with the simplest version possible:</p>
<pre><code class="language-php">class SomeFilter
{
    public function money(int $amount): string
    {
        return $amount . ' €';
    }
}</code></pre>
<p>We'll use it template like this:</p>
<pre><code class="language-html">You're total invoice amount:
&lt;strong&gt;{$amount|money}&lt;/strong&gt;

Thank you</code></pre>
<h2 id="1-register-static-magic-loader">1. Register Static Magic Loader</h2>
<p>This used to be the best practice in 2014. Just add a class and magically delegate called filter name:</p>
<pre><code class="language-diff"> namespace App\Latte;

 use Latte\Engine;
 use Latte\Runtime\FilterInfo;

 final class LatteFactory
 {
     public function create(): Engine
     {
         $engine = new Engine();
         $engine-&gt;setStrictTypes(true);
+        $engine-&gt;addFilter(null, SomeFilter::class . '::loader');

         return $engine;
    }
 }</code></pre>
<p>And add <code>loader()</code> method:</p>
<pre><code class="language-diff"> class SomeFilter
 {
-    public function money(int $amount): string
+    public static function money(int $amount): string
     {
         return $amount . ' €';
     }

+    public static function loader($arg)
+    {
+        $arg = \func_get_args();
+        $func = \array_shift($arg);
+        if (\method_exists(self::class, $func)) {
+            return \call_user_func_array([self::class, $func], $arg);
+        }
+
+         return null;
     }
 }</code></pre>
<p>This is my favorite magic part:</p>
<pre><code class="language-php">$engine-&gt;addFilter(null, SomeFilter::class . '::loader');</code></pre>
<p>Do you have any what is happening there? I don't.</p>
<p><br></p>
<h4 id="pros-amp-cons">Pros &amp; Cons</h4>
<ul>
<li>We have to use <code>static</code> <em class="fas fa-fw fa-times text-danger "></em></li>
<li>We can't use any service in <code>SomeFilter</code>, we have to use static only <em class="fas fa-fw fa-times text-danger "></em></li>
<li>We violate <code>addFilter()</code> method with magic and make it harder to read, maintain and refactor <em class="fas fa-fw fa-times text-danger "></em></li>
<li>We have one place to add filters <em class="fas fa-fw fa-check text-success "></em></li>
</ul>
<p><br></p>
<p>Can we do better?</p>
<h2 id="2-register-function-manually-with-code-addfilter-code">2. Register Function manually with <code>addFilter()</code></h2>
<p>The <code>addFilter()</code> can be used in the way <a href="https://github.com/nette/latte/blob/82a85d31caeaf9a9d307e910a2d1476f5460cee0/src/Latte/Engine.php#L267">it's designed for</a>:</p>
<pre><code class="language-diff"> namespace App\Latte;

 use Latte\Engine;
 use Latte\Runtime\FilterInfo;

 final class LatteFactory
 {
     public function create(): Engine
     {
         $engine = new Engine();
         $engine-&gt;setStrictTypes(true);
+        $engine-&gt;addFilter('money', function (int $amount): string {
+             return $amount . ' €';
+        });

         return $engine;
    }
 }</code></pre>
<p>Straight forward, transparent, and a few lines of code.</p>
<h4 id="pros-amp-cons">Pros &amp; Cons</h4>
<ul>
<li>We have very little code <em class="fas fa-fw fa-check text-success"></em></li>
<li>The framework part (Latte) is now directly bounded to our application domain - this makes code hard to refactor, decopule from framework or re-use in another context <em class="fas fa-fw fa-times text-danger "></em></li>
<li>We break dependency inversion principle - we have to edit <code>LatteFactory</code> to add a new filter <em class="fas fa-fw fa-times text-danger "></em></li>
<li>We made a seed for God class antipattern - soon our <code>LatteFactory</code> will have over 100 of lines with various filters <em class="fas fa-fw fa-times text-danger "></em></li>
<li>We think it's a good idea, because of short-code-is-the-best fallacy <em class="fas fa-fw fa-times text-danger "></em></li>
</ul>
<p><br></p>
<p>Can we do better?</p>
<h2 id="3-add-filter-provider-service">3. Add Filter Provider Service?</h2>
<p>The previous solution looks fine, if only we could get rid of coupling between framework and our code.</p>
<pre><code class="language-diff"> namespace App\Latte;

 use Latte\Engine;
 use Latte\Runtime\FilterInfo;

 final class LatteFactory
 {
+    private FilterProvider $filterProvider;
+
+    public function __construct(FilterProvider $filterProvider)
+    {
+        $this-&gt;filterProvider = $filterProvider;
+    }

     public function create(): Engine
     {
         $engine = new Engine();
         $engine-&gt;setStrictTypes(true);

+        foreach ($this-&gt;filterProvider-&gt;provide() as $filterName =&gt; $filterCallback) {
+            $engine-&gt;addFilter($filterName, $filterCallback);
+        }

         return $engine;
    }
 }</code></pre>
<pre><code class="language-php">&lt;?php

final class FilterProvider
{
    /**
     * @return array&lt;string, callable&gt;
     */
    public function provide(): array
    {
        return [
            'money' =&gt; function (int $amount): string {
                return $amount . ' €';
            }
        ];
    }
}</code></pre>
<p>The filter class is decoupled - no more hard-coded filters!</p>
<h4 id="pros-amp-cons">Pros &amp; Cons</h4>
<ul>
<li>We can add a new filter without every touching <code>LatteFactory</code> <em class="fas fa-fw fa-check text-success"></em></li>
<li>We can use services in filters <em class="fas fa-fw fa-check text-success"></em></li>
<li>We <strong>only moved a seed for God class antipattern</strong> - soon our <code>FilterProvider</code> will have over 100 of lines with various filters <em class="fas fa-fw fa-times text-danger "></em></li>
</ul>
<p><br></p>
<p>Can we do better?</p>
<h2 id="4-filter-provider-contract">4. Filter Provider Contract</h2>
<p>The ultimate solution is almost perfect. We only need to get rid of the God class completely. How can we do that?</p>
<p>The goal is simple:</p>
<ul>
<li>each domain should have its filters, e.g., filters for text should have their class, filters for money should have their class, etc.</li>
<li>we can't touch the <code>LatteEngine</code> to add a new filter, nor a new filter service</li>
</ul>
<p><br></p>
<p>What if we use <a href="/blog/2018/11/12/will-autowired-arrays-finally-deprecate-tags-in-symfony-and-nette//">autowired arrays feature from Nette 3.0</a>?</p>
<p><br></p>
<pre><code class="language-diff"> namespace App\Latte;

+use App\Contract\FilterProviderInterface;
 use Latte\Engine;
 use Latte\Runtime\FilterInfo;

 final class LatteFactory
 {
+    private array $filterProvider;
+
+    /**
+     * @param FilterProviderInterface[] $filterProviders
+     */
+    public function __construct(array $filterProviders)
+    {
+        $this-&gt;filterProviders = $filterProviders;
+    }

     public function create(): Engine
     {
         $engine = new Engine();
         $engine-&gt;setStrictTypes(true);

+        foreach ($this-&gt;filterProviders as $filterProvider) {
+            foreach ($filterProvider-&gt;provide() as $filterName =&gt; $filterCallback) {
+                $engine-&gt;addFilter($filterName, $filterCallback);
+            }
+        }

         return $engine;
    }
 }</code></pre>
<pre><code class="language-php">namespace App\Contract;

interface FilterProviderInterface
{
    /**
     * @return array&lt;string, callable&gt;
     */
    public function provide();
}</code></pre>
<pre><code class="language-diff">+use App\Contract\FilterProviderInterface;

-final class FilterProvider
+final class MoneyFilterProvider implements FilterProviderInterface
 {
     /**
      * @return array&lt;string, callable&gt;
      */
     public function provide(): array
     {
         return [
             'money' =&gt; function (int $amount): string {
                 return $amount . ' €';
             }
         ];
     }
 }</code></pre>
<h4 id="pros-amp-cons">Pros &amp; Cons</h4>
<ul>
<li>We have decoupled framework and our domain-specific filter <em class="fas fa-fw fa-check text-success"></em></li>
<li>To add a new filters, we only need to create a new service <em class="fas fa-fw fa-check text-success"></em></li>
<li>We finally use dependency injection at its best - Nette handles registering filters and collecting service for us <em class="fas fa-fw fa-check text-success"></em></li>
<li>We <strong>add a seed for God method</strong> - soon <code>provide()</code> will be full of weird callbacks and long methods <em class="fas fa-fw fa-times text-danger "></em></li>
</ul>
<p><br></p>
<p>Can we do better?</p>
<p><br></p>
<h2 id="5-from-callbacks-to-private-methods">5. From Callbacks to Private Methods</h2>
<pre><code class="language-diff"> use App\Contract\FilterProviderInterface;

 final class MoneyFilterProvider implements FilterProviderInterface
 {
     /**
      * @return array&lt;string, callable&gt;
      */
     public function provide(): array
     {
         return [
             'money' =&gt; function (int $amount): string {
-                return $amount . ' €';
+                return $this-&gt;money($mount);
             }
         ];
     }

+    private function money(int $amount): string
+    {
+        return $amount . ' €';
+    }
 }</code></pre>
<p>This looks like a duplicated code, right?</p>
<p>But what if money filters grow, included timezones and logged in user country? Is <code>MoneyFilterProvider</code> the best place to handle all this logic?</p>
<pre><code class="language-diff"> use App\Contract\FilterProviderInterface;

 final class MoneyFilterProvider implements FilterProviderInterface
 {
+    private MoneyFormatResolver $moneyFormatResolver;
+
+    public function __construct(MoneyFormatResolver $moneyFormatResolver)
+    {
+       $this-&gt;moneyFormatResolver = $moneyFormatResolver;
+    }

     /**
      * @return array&lt;string, callable&gt;
      */
     public function provide(): array
     {
         return [
             'money' =&gt; function (int $amount): string {
-                return $this-&gt;money($mount);
+                return $this-&gt;moneyFormatResolver-&gt;resolve($amount);
             }
         ];
     }

-    private function money(int $amount): string
-    {
-        return $amount . ' €';
-    }
 }</code></pre>
<h4 id="pros-amp-cons">Pros &amp; Cons</h4>
<ul>
<li>We have decoupled domain logic from filters <em class="fas fa-fw fa-check text-success"></em></li>
<li>We can re-use the used-to-be filter logic with <code>MoneyFormatResolver</code> in other places of application <em class="fas fa-fw fa-check text-success"></em></li>
<li>We are motivated to use DI and decouple code clearly to new service, if it ever becomes too complex <em class="fas fa-fw fa-check text-success"></em></li>
<li>We are ready for any changes that come in the future <em class="fas fa-fw fa-check text-success"></em></li>
<li><del>We think this is the best way, just because it's last <em class="fas fa-fw fa-times text-danger"></em></del> Not anymore ↓</li>
</ul>
<p><br></p>
<p>My question is: can we do better...?</p>
<hr />
<p><strong>Update 1 month later with new option:</strong></p>
<h2 id="6-invokable-filter-providers">6. Invokable Filter Providers</h2>
<p>In fashion of <a href="https://symfony.com/doc/current/controller/service.html#invokable-controllers">single-action controller</a> a tip from <a href="https://twitter.com/FrantisekMasa">@FrantisekMasa</a> and <a href="https://twitter.com/dada_amater">@dada_amater</a> for similar approach in filters. It look weird, new... so I had to try it in practise to see for myself.</p>
<pre><code class="language-php">namespace App\Contract;

interface FilterProviderInterface
{
    public function getName(): string;
}</code></pre>
<p>The filter itself - 1 filter = 1 class:</p>
<pre><code class="language-php">use App\Contract\FilterProviderInterface;

final class MoneyFilterProvider implements FilterProviderInterface
{
    private MoneyFormatResolver $moneyFormatResolver;

    public function __construct(MoneyFormatResolver $moneyFormatResolver)
    {
       $this-&gt;moneyFormatResolver = $moneyFormatResolver;
    }

    public function __invoke(int $amount): string
    {
        return $this-&gt;moneyFormatResolver-&gt;resolve($amount);
    }
}</code></pre>
<p>The <code>LatteFactory</code> now acceps the whole filter as callable object:</p>
<pre><code class="language-php">namespace App\Latte;

use Latte\Engine;
use Latte\Runtime\FilterInfo;

final class LatteFactory
{
    /**
     * @var FilterProviders[]
     */
    private array $filterProviders = [];

    /**
     * @param FilterProvider[]
     */
    public function __construct(array $filterProviders)
    {
        $this-&gt;filterProviders = $filterProviders;
    }

    public function create(): Engine
    {
        $engine = new Engine();
        $engine-&gt;setStrictTypes(true);

        foreach ($this-&gt;filterProviders as $filterProvider) {
            $engine-&gt;addFilter($filterProvider-&gt;getName(), $filterProvider);
        }

        return $engine;
    }
}</code></pre>
<h4 id="pros-amp-cons">Pros &amp; Cons</h4>
<ul>
<li>All of the advantages of previous approaches <em class="fas fa-fw fa-check text-success"></em></li>
<li>1 class = 1 rule, this is really challenge to clutter <em class="fas fa-fw fa-check text-success"></em></li>
<li>It's very intuitive to use  <em class="fas fa-fw fa-check text-success"></em></li>
<li>We don't have to maintain duplicated <code>provideFilters()</code> callables with private methods <em class="fas fa-fw fa-check text-success"></em></li>
<li>The <code>__invoke()</code> method has no contract, so we can forget to implement it <em class="fas fa-fw fa-times text-danger"></em></li>
</ul>
<p>We compensate this in <code>LatteFactory</code> itself:</p>
<pre><code class="language-php">public function create(): Engine
{
    $engine = new Engine();
    $engine-&gt;setStrictTypes(true);

    foreach ($this-&gt;filterProviders as $filterProvider) {
        if (! method_exists($filterProvider, '__invoke')) {
            $message = sprintf('Add "__invoke()" method to filter provider "%s"', get_class($filterProvider));
            throw new ShouldNotHappenException($message);
        }

        $engine-&gt;addFilter($filterProvider-&gt;getName(), $filterProvider);
    }

    return $engine;
}</code></pre>
<p>That's it!</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/08/17/how-to-get-rid-of-magic-static-and-chaos-from-latte-filters</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 17 Aug 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-09-01UTC00:00:000</updated>
                    <atom:updated>Tue, 01 Sep 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Tue, 01 Sep 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/08/17/how-to-get-rid-of-magic-static-and-chaos-from-latte-filters#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ 4 Ways to Make Your Nette Project More Readable ]]></title>
                <link>https://tomasvotruba.com/blog/2020/08/10/4-ways-to-make-your-nette-project-more-readable</link>
                <description><![CDATA[ <p>You can <a href="/blog/2019/08/26/how-we-migrated-54-357-lines-of-code-nette-to-symfony-in-2-people-under-80-hours/">switch PHP framework you use in a month</a>. Yet, <strong>80 % of work lays before the migration</strong> itself, is to take unreliable PHP code structures and <strong>make <a href="/blog/2020/03/02/we-do-not-need-senior-developers-we-need-senior-code-bases/">it readable</a> for developers</strong>.
<br><br>
What belongs to these 80 % when it comes to Nette-specific code?</p> ]]></description>
                <content:encoded><![CDATA[ <p>Each framework has its documentation. The developers take it and test it in practice, how good the examples stand in real life. Sometimes <strong>the practical experience goes against the documentation primary choice</strong>, like using <a href="/blog/2019/03/04/how-to-turn-laravel-from-static-to-dependency-injection-in-one-day/">dependency injection in Laravel</a>.</p>
<p>These practical tips are golden mine, <strong>because they save the company money and developer work time in the further future</strong>.
Do you use Nette? Today, we look at 10 such spots that will bring you code advantage and make changes more comfortable and stable.</p>
<h2 id="1-avoid-array-access">1. Avoid Array Access</h2>
<p>Could you guess, what type is <code>$something</code>?</p>
<pre><code class="language-php">use Nette\Application\UI\Presenter;

final class SomePresenter extends Presenter
{
    public function renderDefault()
    {
        // ...
        $something = $this['user'];
        $something-&gt;...?
    }

    // another 300+ lines of code
}</code></pre>
<p>What do you think? I'd go with <code>int</code> or <code>User</code>. It can be a form, a control, a form input... because array access in <code>Control</code> or <code>Presenter</code> is delegated to...</p>
<img src="/post_images/2020/nette_readability_array_access.png" class="img-thumbnail">
<p>... <code>getComponent()</code>/<code>addComponent()</code> methods.</p>
<h3 id="how-to-make-such-code-readable">How to Make Such Code Readable?</h3>
<p>Add PHPStan that prevent array access on objects:</p>
<pre><code class="language-yaml"># phpstan.neon
rules:
    - Symplify\CodingStandard\Rules\NoArrayAccessOnObjectRule</code></pre>
<p>This little rule might help us to re-introduce an essential yet straightforward coding cue:</p>
<ul>
<li>arrays are always arrays and <strong>behave like arrays</strong></li>
<li>objects are always objects, and <strong>behave like objects</strong></li>
</ul>
<p>Okay, we probably have now over dozens of errors. But what should we do about them?</p>
<p>Use the explicit method, that is hidden in <code>offsetGet()</code>/<code>offsetSet()</code> methods, e.g:</p>
<pre><code class="language-diff">-$something = $this['user'];
+$something = $this-&gt;getComponent('user');</code></pre>
<pre><code class="language-diff">-$this['user'] = $something ;
+$this-&gt;addComponent($something, 'user');</code></pre>
<h3 id="">👍</h3>
<h2 id="2-be-honest-about-components-you-use">2. Be Honest About Components You Use</h2>
<p>Alright, now we know its <em>a</em> component.</p>
<pre><code class="language-php">$something = $this-&gt;getComponent('user');
$something-&gt;...</code></pre>
<p>It might look natural since we're used to this syntax. Let's try to forget this habit. How readable is this approach?</p>
<p>Let's look at an example from another well-known area, with a similar context. Would you be able to work with such entity objects?</p>
<pre><code class="language-php">$entity = $this-&gt;getEntity('user');
// here we have only "getId()" method, that is common to all entities
$entity-&gt;...

// forget IDE autocomplete for specific entities
$entity-&gt;getName();</code></pre>
<p>Honestly, <a href="/blog/2018/08/27/why-and-how-to-avoid-the-memory-lock/">I don't memorize code</a>, my super-smart IDE does it for me.</p>
<h3 id="how-to-make-such-code-readable">How to Make Such Code Readable?</h3>
<p>Again, all we need is common sense. Nothing fancy.</p>
<p>How can we get an exact specific entity?</p>
<pre><code class="language-php">// 1. annotation
/** @var User $user */
$user = $this-&gt;getEntity('user');

// 2. add custom method with return type
$user = $this-&gt;getUser();

// another way or two you can think of</code></pre>
<img src="/post_images/2020/nette_readability_get_component.gif" class="img-thumbnail">
<h3 id="what-are-benefits-of-typed-code">What are Benefits of Typed Code?</h3>
<ul>
<li>IDE automated refactoring works on specific components</li>
<li>IDE can provide autocomplete, that is unique per component</li>
<li>PHPStan knows the types and component methods and where they're called from</li>
<li>Rector can refactor components with ease</li>
<li>the most important: <strong>you know what's going on, even if you're the first day on the project</strong></li>
</ul>
<blockquote class="blockquote text-center">
"So many benefits, that sounds great!<br>
But it's a lot of work to get there."
</blockquote>
<p>I feel you, same here. If I were about to do it manually, I would not do it.</p>
<p>Luckily, we <strong>lazy people have tools to work for us</strong>. Let <a href="https://github.com/rectorphp/rector">Rector</a> handle it:</p>
<pre><code class="language-php"># rector.php

use Rector\NetteCodeQuality\Rector\Assign\ArrayAccessGetControlToGetComponentMethodCallRector;
use Rector\NetteCodeQuality\Rector\Assign\ArrayAccessSetControlToAddComponentMethodCallRector;
use Rector\NetteCodeQuality\Rector\Assign\MakeGetComponentAssignAnnotatedRector;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return static function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();

    $services-&gt;set(MakeGetComponentAssignAnnotatedRector::class);
    $services-&gt;set(ArrayAccessSetControlToAddComponentMethodCallRector::class);
    $services-&gt;set(ArrayAccessGetControlToGetComponentMethodCallRector::class);
};</code></pre>
<p>And run Rector:</p>
<pre><code class="language-bash">vendor/bin/rector process src</code></pre>
<h3 id="">👍</h3>
<h2 id="3-remove-array-access-on-form-controls">3. Remove Array Access on Form Controls</h2>
<p>The #1 was about use in <code>Presenter</code> and <code>Control</code>, but what about <code>Form</code>?</p>
<pre><code class="language-php">use Nette\Application\UI\Form;

$form = new Form();
$form-&gt;addText('name', 'Name');</code></pre>
<p>Different class, same array access magic, same problem.</p>
<h3 id="how-to-make-such-code-readable">How to Make Such Code Readable?</h3>
<img src="/post_images/2020/nette_readability_get_form_control.gif" class="img-thumbnail">
<p>This makes code readable in the same points above - for IDE, PHPStan, and Rector.</p>
<p>&quot;So much work?&quot; Rector got you covered:</p>
<pre><code class="language-php"># rector.php

use Rector\NetteCodeQuality\Rector\ArrayDimFetch\ChangeControlArrayAccessToAnnotatedControlVariableRector;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return static function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();
    $services-&gt;set(ChangeControlArrayAccessToAnnotatedControlVariableRector::class);
};</code></pre>
<p><br></p>
<h3 id="can-we-do-better">Can We do Better?</h3>
<p>Imagine you create a form, and somewhere in your code, an input is removed, and select box added. Where? How? Magic!</p>
<p>So even better, <strong>modify forms only in the method they were created</strong>.</p>
<p>Do you need a form that is just slightly different from an already existing one? Don't mutate existing, but rather:</p>
<ul>
<li>create <strong>a new form factory</strong></li>
<li>decouple common <strong>abstract parent form factory</strong> class for re-use</li>
</ul>
<p>That way, you promote composition over inheritance in your code and respect SOLID principles.</p>
<h2 id="4-move-latte-engine-tuning-from-presenter-control-to-lattefactory">4. Move Latte Engine tuning from Presenter/Control to LatteFactory</h2>
<p>Latte modification in the wrong places is more common than you'd expect.</p>
<p><br></p>
<p>How would you add <code>setStrictTypes(true)</code> for all templates?</p>
<pre><code class="language-php">use Nette\Application\UI\Presenter;

abstract class AbstractPresenter extends Presenter
{
    public function beforeRender()
    {
        // is this the right place?
        // signals (handle*) are actually called after
        $this-&gt;template-&gt;getLatte()-&gt;setStrictTypes(true);
    }

    // or

    public function templatePrepareFilters()
    {
        // is this the right place?
        // or just for filters?
        $this-&gt;template-&gt;getLatte()-&gt;setStrictTypes(true);
    }
}</code></pre>
<p>Ou, don't forget the components. Every single component!</p>
<pre><code class="language-php">use Nette\Application\UI\Control;

abstract class AbstractControl extends Control
{
    // is this the right place?
    public function __construct()
    {
        // template can be null here
        $this-&gt;template-&gt;getLatte()-&gt;setStrictTypes(true);

        // or

        // isn't this lazy factory? what if the template object is different?
        $this-&gt;getTemplate()-&gt;getLatte()-&gt;setStrictTypes(true);
    }

    // or

    // is this the right place?
    public function render()
    {
        // so now we have to call parent::render() in every child component?
        $this-&gt;template-&gt;getLatte()-&gt;setStrictTypes(true);
    }
}</code></pre>
<p>Now we have to enforce this parent control in every other control we have, and we should be fine...</p>
<p>Until we <strong>use templates for mail</strong>. What a surprise when final invoice price was accidentally a string <code>''</code> that turned into <code>0</code>. Ups, we just got paid 0 € instead of 750 €.</p>
<h3 id="how-to-make-such-code-readable">How to Make Such Code Readable?</h3>
<p>Instead of trying to put down every fire our child makes in our home, we could... I don't know, take their matches?</p>
<p>It's also known as <em>single responsibility principle</em>. There is <strong>max. 1 place to make 1 change</strong> - meet <code>LatteFactory</code>:</p>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Latte;

use Latte\Engine;
use Latte\Runtime\FilterInfo;

final class LatteFactory
{
    public function create(): Engine
    {
        $engine = new Engine();
        $engine-&gt;setStrictTypes(true);

        return $engine;
    }
}</code></pre>
<p>We have a <strong>1 place to modify</strong> <code>Latte\Engine</code>. Now we need to tell Nette to use it to create all the templates - with an extension:</p>
<pre><code class="language-php">&lt;?php

// src/DI/LatteFactoryExtension.php

declare(strict_types=1);

namespace App\DI;

use App\Latte\LatteFactory;
use Latte\Engine;
use Nette\DI\CompilerExtension;

final class LatteFactoryExtension extends CompilerExtension
{
    public function loadConfiguration(): void
    {
        $containerBuilder = $this-&gt;getContainerBuilder();

        $containerBuilder-&gt;addDefinition('app.latteFactory')
            -&gt;setType(LatteFactory::class);

        $latteFactoryDefinition = $containerBuilder-&gt;getDefinition('latte.latteFactory');
        $latteFactoryDefinition-&gt;setFactory(['@' . LatteFactory::class, 'create']);
        $latteFactoryDefinition-&gt;setType(Engine::class);
    }
}</code></pre>
<p>Register the extension to config, and you're ready to go:</p>
<pre><code class="language-yaml">extensions:
    - App\DI\LatteFactoryExtension</code></pre>
<h3 id="change-is-the-only-constant">Change is the Only Constant</h3>
<p>Do we need to add <strong>translator to all templates</strong>?</p>
<p>No need to edit 3 places, just one:</p>
<pre><code class="language-diff"> &lt;?php

 declare(strict_types=1);

 namespace App\Latte;

 use Latte\Engine;
 use Latte\Runtime\FilterInfo;
+use Nette\Localization\ITranslator;

 final class LatteFactory
 {
+    private ITranslator $translator;
+
+    public function __construct(ITranslator $translator)
+    {
+        $this-&gt;translator = $translator;
+    }

     public function create(): Engine
     {
         $engine = new Engine();
         $engine-&gt;setStrictTypes(true);

+        $engine-&gt;addFilter('translate', function (FilterInfo $filterInfo, ...$args) {
+            return $this-&gt;translator-&gt;translate(...$args);
+        });

         return $engine;
     }
 }</code></pre>
<h3 id="">👍</h3>
<p><br></p>
<p>That's all for today.</p>
<h2 id="removing-magic-makes-us-feel-safe">Removing Magic makes us Feel Safe</h2>
<p>Just to repeat the basics. The goal of refactoring is to make code SOLID, unbreakable, and reliable source. When we have a code we understand, we feel safe.</p>
<blockquote class="blockquote text-center mt-5 mb-5">
When we feel safe, we are more productive and make huge changes faster.<br>
If we have to worry about every single line of code, we slowly freeze.
</blockquote>
<p>By 4 steps above, you've just added <strong>5 benefits to your codebase</strong>:</p>
<ul>
<li>IDE automated refactoring works on specific components</li>
<li>IDE can provide autocomplete, that is unique per component</li>
<li>PHPStan knows the types and component methods and where they're called from</li>
<li>Rector can refactor components with ease</li>
<li>the most important: <strong>you know what's going on, even if you're the first day on the project</strong></li>
</ul>
<p><br></p>
<p>Do you have a tip on how to make Nette code even better? Is there some shortcut I don't know about?</p>
<p>Let me know in the comments ↓. I'd love to learn a new skill that we could apply on Nette projects we upgrade.</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/08/10/4-ways-to-make-your-nette-project-more-readable</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/08/10/4-ways-to-make-your-nette-project-more-readable#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Give Away 1500 € in 1 Tweet and Help 25 People Learn Something New ]]></title>
                <link>https://tomasvotruba.com/blog/2020/08/03/how-give-away-1500-eur--in-1-tweet-and-help-25-people-learn-something-new</link>
                <description><![CDATA[ <p>What makes one give?
<br><br>
For me, it's a combination of gratitude, abundance, and inspiration in the surrounding.</p> ]]></description>
                <content:encoded><![CDATA[ <p>I love helping others in a way that helps them grow. In a feedback loop, their growth helps me to grow... recursive. Yet, I rarely touched the financial part. Still, <strong>I wanted to share gratitude with the community, that helps me every day to get where I am now</strong>. I'm very grateful to be part of it.</p>
<h2 id="what-were-the-3-last-nails-in-the-coffin">What were the 3 last Nails in the Coffin?</h2>
<ul>
<li>corona stuff, it hit many people very hard, with less work, income, and option to live a decent life</li>
<li>I saw <a href="https://twitter.com/_braindev/status/1276483109165416449">Jamie</a> giving away in June - thank you, Jamie, for inspiration!</li>
<li>accidentally, I listed to an intense podcast with <a href="https://sive.rs">Derek Sivers</a>, that dropped a reference to - <a href="https://www.amazon.com/Give-and-Take-Adam-Grant-audiobook/dp/B07F7F8NL5">Give and Take</a> - from the title I assumed it was a book about business and financial matters, but in the end, it gave me more insight how easy and inspiring is to give</li>
</ul>
<p>It <strong>felt right</strong>, so I thought...</p>
<blockquote class="blockquote text-center mt-5 mb-5">
    ...what the hell, let's do it!
</blockquote>
<p>In 5 minutes, around midnight, the tweet was ready. I pushed the &quot;Tweet&quot; button and let message go out in the world and let it live its own story:</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">I'll pay for 5 people to receive an online course/subscription of their choice (each up to $249)<br><br>❤️️ Like this tweet &amp; I will pick 5 winners by Monday 6 PM CET 🚀<br><br>Appreciate a RT to spread the word<br>cc <a href="https://twitter.com/javiereguiluz?ref_src=twsrc%5Etfw">@javiereguiluz</a> <a href="https://twitter.com/Ocramius?ref_src=twsrc%5Etfw">@Ocramius</a><a href="https://twitter.com/matthiasnoback?ref_src=twsrc%5Etfw">@matthiasnoback</a> <a href="https://twitter.com/michellesanver?ref_src=twsrc%5Etfw">@michellesanver</a> <a href="https://twitter.com/enunomaduro?ref_src=twsrc%5Etfw">@enunomaduro</a></p>— Tomas Votruba (@VotrubaT) <a href="https://twitter.com/VotrubaT/status/1284616098202230787?ref_src=twsrc%5Etfw">July 18, 2020</a></blockquote>
<p><br></p>
<h2 id="sunday-morning-surprise">Sunday Morning Surprise</h2>
<p><strong>I was excited how this evolves but scared of the feedback</strong>. So I just peeked at the notifications number on Tweetdeck. Only nine reactions? Oh, now, it's dead. I was sad and crushed. Maybe I put something wrong. Maybe I forgot to tweet it, I thought.</p>
<p>So I opened Twitter and looked for comments with feedback, what's wrong. 9 was a count of tweets with <em>some</em> notification, not the total number of notifications.</p>
<p><strong>There were over 50 retweets already</strong>. In a couple of hours, as people start to wake up on Sunday morning, the tweet had over 200 retweets and 600 likes! Oh many, this escalated quickly.</p>
<p>It was much faster and more than I ever imagined, but it was good.</p>
<h2 id="quot-i-want-to-win-not-for-myself-but-for-my-friends-quot">&quot;I want to Win, Not for myself, But for My Friends&quot;</h2>
<p>I was surprised, how many people wanted to <strong>share their prize with others</strong>:</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">I’ll take the prize and split for 2 friends. Fortunanetly i’m able to purchase what i think i need. It wasnt always like that, and also love to do the same here and there!<br>Thank you Tomas ❤️❤️❤️</p>— João Patrício (@ijpatricio) <a href="https://twitter.com/ijpatricio/status/1284825490369523713?ref_src=twsrc%5Etfw">July 19, 2020</a></blockquote>
<p><br></p>
<p>I was so touched by reactions that I've decided to raise the limit of 5 to <a href="https://twitter.com/VotrubaT/status/1284616098202230787/retweets/with_comments">9 people</a>.</p>
<hr />
<blockquote class="blockquote">
"I'm mstrYoda_ from twitter. You picked me as one of the winners. As I
told you, I want to give it to another person who needs it."
</blockquote>
<p>I loved that!</p>
<blockquote class="blockquote">
Please go for it! That's so generous of you. Just send me emails + gift link to courses, and I'll handle it.
<br>
To support your generosity and help your circle, I'm raising the limit to 400 €.
</blockquote>
<p>After a few days and emails, we managed <strong>to give 16 more people a course</strong> on Udemy.</p>
<p><br></p>
<h2 id="if-you-give-you-get-more">If You Give, You Get More</h2>
<p><br></p>
<p>I've got so many grateful emails, that my serotonin reserves were empty soon:</p>
<blockquote class="blockquote">
"It is a big help indeed for me, especially in the time of the pandemic. Money matters all the time, and I have a pregnant wife also to sustain all of her needs, and your perks will help me to save money and time."
</blockquote>
<hr />
<blockquote class="blockquote">
Trust this finds you well. Thank you so much for the random act of kindness that you are doing to total strangers like me. I am so grateful.
</blockquote>
<hr />
<blockquote class="blockquote">
I don't know what to say! You do care, and that's a great gesture
</blockquote>
<div class="text-center">
<h2 id="">❤️️❤️️❤️️</h2>
</div>
<p><br>
<br></p>
<p>Last but not least, I'd like to <strong>thank everyone who retweeted only to spread the message to their circles and wanted to help others</strong>. In the end, we could help together to 25 people, who would not have this change otherwise. That's a good job done!</p>
<h2 id="what-can-i-do-better-next-time">What can I do better Next Time</h2>
<ul>
<li>
<p>Many courses <strong>don't allow buying a gift</strong>. You have to contact support and ask if they can configure it in the database to some other email than the one you paid it from. It can be a nightmare, which is not what you want if you want to give away.</p>
</li>
<li>
<p>Saying that, pick a <strong>set of courses that have an easy way to buy gifts</strong>: <a href="https://www.udemy.com">Udemy</a> and <a href="https://laracasts.com/gift-certificates">Laracasts</a> were very helpful. Also, you can configure the invoice easily.</p>
</li>
<li>
<p>The two days limit to retweet was too much. It spread too far, and it was pretty hard to pick five winners out of 1 000 people. I'd go with <a href="https://twitter.com/_braindev/status/1276483109165416449">Jamie's strategy with <strong>limit of couple of hours</strong></a></p>
</li>
</ul>
<p><br></p>
<h2 id="if-you-can-give-now-it-s-the-time">If you Can Give, Now it's the Time</h2>
<p>We all live in this world together. Whatever country, DNA, or social status. The world is not in crisis; our humanity is. Now it's the best time to act and do something about it. <strong>Help a neighbor get their food list, buy a friend a beer, buy stranger food, or give whatever you want</strong>. The further unexpected help out of your circles, the better.</p>
<p>I spent some money, but I got much more joy, a feeling of community, and fantastic feedback on this random act of kindness.</p>
<p><strong>Now, it's time to help each other. I thank you in advance!</strong></p>
<p><br></p>
<p>Happy giving!</p>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/08/03/how-give-away-1500-eur--in-1-tweet-and-help-25-people-learn-something-new</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 03 Aug 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/08/03/how-give-away-1500-eur--in-1-tweet-and-help-25-people-learn-something-new#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Switch from YAML/XML Configs to PHP Today with Migrify ]]></title>
                <link>https://tomasvotruba.com/blog/2020/07/27/how-to-switch-from-yaml-xml-configs-to-php-today-with-migrify</link>
                <description><![CDATA[ <p>In <a href="/blog/2020/07/16/10-cool-features-you-get-after-switching-from-yaml-to-php-configs/">previous post</a>, we looked 10 reasons to switch from YAML to PHP configs. Still asking <em>why</em>? I dare you to <a href="/blog/2020/07/16/10-cool-features-you-get-after-switching-from-yaml-to-php-configs/">disagree with 1 reason there</a>.
<br><br>
If you have 1 config file, you already are on PHP side now. Close this post and enjoy life.
<br><br>
But what if you have 10 or even 100 YAML/XML configs? Are you doing to close down for a weekend to switch your code base?
<br>
<br>
Or maybe... <strong>5 minute job</strong>?</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="break-even-automation">Break-Even Automation</h2>
<p>With legacy migrations, we have to handle a lot of processes that are automated. If you work on 1 project for many years, it's a matter of habit to handle it manually. But <strong>handling 3 projects a month makes you think, how to automated any repeated work</strong>. It's cheaper, faster, and more reliable. The same way the writing tests are.</p>
<p><br></p>
<p>We made <a href="https://github.com/migrify/config-transformer">migrify/config-transformer</a> to handle this work for us.</p>
<img src="/assets/images/posts/2020/yaml_to_php.png" class="img-thumbnail">
<p><br></p>
<p><strong>Credit</strong> for inspiration first reported bugs, feature feedback, and exceptional test cases <strong>goes to <a href="https://github.com/archeoprog">archeoprog</a> and <a href="https://github.com/weaverryan">Ryan Weaver</a></strong>. Their input helped get the migrify package to high quality and covered Symfony features I didn't even know. Thank you, guys!</p>
<p><br></p>
<h2 id="1-install-migrify-config-transformer">1. Install migrify/config-transformer</h2>
<pre><code class="language-bash">composer require migrify/config-transformer --dev</code></pre>
<h2 id="2-run-code-switch-format-code-command">2. Run <code>switch-format</code> Command</h2>
<p>This command has 2 requires options and 1 argument:</p>
<ul>
<li><code>--input-format</code> - the format of the config you want to convert</li>
<li><code>--output-format</code> - desired output format (PHP is the default, YAML is also supported, useful for legacy projects with XML and but old Symfony)</li>
<li>the argument is paths to file/s or directories you want to convert</li>
</ul>
<pre><code class="language-bash">vendor/bin/config-transformer switch-format --input-format yaml app/config
vendor/bin/config-transformer switch-format --input-format xml app/config</code></pre>
<p>Are you lazy like me? Use shortcut:</p>
<pre><code class="language-bash">vendor/bin/config-transformer switch-format -i yaml -o php app/config
vendor/bin/config-transformer switch-format -i xml -o php app/config</code></pre>
<h2 id="why-am-i-putting-the-path-argument-as-the-last-one">Why am I Putting the Path Argument as the Last one?</h2>
<p>You've noticed, the path argument is the last in the command line. That's rather confusing, right?</p>
<pre><code class="language-bash"># conventional
vendor/bin/config-transformer PATH switch-format -i yaml -o php

# convenient
vendor/bin/config-transformer switch-format -i yaml -o php PATH</code></pre>
<p>Do you need to switch multiple paths in separated commits or apply them on multiple projects?
<br>
Re-use previous command and <strong>change the last part only</strong>.</p>
<p>This is how my <strong>real workflow</strong> looks like: from low hanging fruit of 1 file to the main config, to all packages.
Each followed by a separated commit, so it's easier to review and fix in case of regression.</p>
<pre><code class="language-bash">vendor/bin/config-transformer switch-format -i yaml -o php ecs.yaml
# commit

vendor/bin/config-transformer switch-format -i yaml -o php rector.yaml
# commit

vendor/bin/config-transformer switch-format -i yaml -o php app/packages
# commit

vendor/bin/config-transformer switch-format -i yaml -o php app/config/config.yaml
# commit</code></pre>
<h2 id="3-upgrade-paths-to-php-in-extensions-and-kernel">3. Upgrade paths to PHP in Extensions and Kernel</h2>
<p>The config format switch is one part; the next is to update loaders in PHP code.
Again, it's valid to handle it manually with search &amp; replace in PHPStorm.</p>
<pre><code class="language-diff"> use Symfony\Component\Config\FileLocator;
 use Symfony\Component\DependencyInjection\ContainerBuilder;
-use Symfony\Component\DependencyInjection\Loader\YamlFileLoader;
+use Symfony\Component\DependencyInjection\Loader\PhplFileLoader;
 use Symfony\Component\HttpKernel\DependencyInjection\Extension;

 final class SomeExtension extends Extension
 {
     public function load(array $configs, ContainerBuilder $container)
     {
-        $loader = new YamlFileLoader($container, new FileLocator());
+        $loader = new PhplFileLoader($container, new FileLocator());
-        $loader-&gt;load(__DIR__ . '/../Resources/config/controller.yaml');
+        $loader-&gt;load(__DIR__ . '/../Resources/config/controller.php');
-        $loader-&gt;load(__DIR__ . '/../Resources/config/events.yaml');
+        $loader-&gt;load(__DIR__ . '/../Resources/config/events.php');
     }
 }</code></pre>
<p>But in case your code is not standard and can't be bothered with correct regular expressions, Rector got you covered:</p>
<pre><code class="language-bash">composer require rector/rector --dev</code></pre>
<p>Setup <code>rector.php</code>:</p>
<pre><code class="language-php">&lt;?php

use Migrify\ConfigTransformer\FormatSwitcher\ValueObject\Format;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
use Rector\Symfony\Rector\Class_\ChangeFileLoaderInExtensionAndKernelRector;

return function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();
    $services-&gt;set(ChangeFileLoaderInExtensionAndKernelRector::class)
        -&gt;call('configure', [[
            ChangeFileLoaderInExtensionAndKernelRector::FROM =&gt; Format::YAML,
            ChangeFileLoaderInExtensionAndKernelRector::TO =&gt; Format::PHP,
        ]]);
};</code></pre>
<p>And let Rector handle the boring work:</p>
<pre><code class="language-bash">vendor/bin/rector p app src</code></pre>
<p><br></p>
<p>And that's it!</p>
<p>One little tool for you, one big leap for a PHP programmer-kind.</p>
<h2 id="supported-features">Supported Features</h2>
<ul>
<li>imports</li>
<li>services</li>
<li>parameters</li>
<li>autodiscovery</li>
<li>instance of</li>
<li>extensions, e.g. <code>framework</code>, <code>doctrine</code> or <code>twig</code></li>
<li>routing</li>
</ul>
<h2 id="let-us-know-help-you-grow">Let Us Know, Help You Grow</h2>
<p><strong>Is something broken? Have you found a space for improvement?</strong></p>
<p>Create <a href="https://github.com/migrify/migrify/issues/new">an issue</a> and let us know. We'd love to hear it.</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/07/27/how-to-switch-from-yaml-xml-configs-to-php-today-with-migrify</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-08-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Aug 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/07/27/how-to-switch-from-yaml-xml-configs-to-php-today-with-migrify#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Update Hundreds of Test Fixtures with Single PHPUnit run ]]></title>
                <link>https://tomasvotruba.com/blog/2020/07/20/how-to-update-hundreds-of-test-fixtures-with-single-phpunit-run</link>
                <description><![CDATA[ <p>In <a href="/blog/2020/07/13/the-most-effetive-test-i-found-in-7-years-of-testing/">previous post</a>, we look at the benefits of visual snapshot testing for lazy people. How bare <em>input/output</em> code in a single file makes tests easy to read for new contributors.
<br><br>
Today, we look at <strong>how to maintain visual snapshot tests</strong>.
<br><br>
Let's say we need to add <code>declare(strict_types=1);</code> to output part of 100 test fixtures? Would you add it manually in every single file?</p> ]]></description>
                <content:encoded><![CDATA[ <p>Short quiz from last week: <strong>what is the visual snapshot test</strong>?</p>
<p>A test where the new test case is a single fixture file:</p>
<pre><code class="language-bash">before
-----
after</code></pre>
<p><br></p>
<p>Let's say we test a service that multiplies the input number by 5.</p>
<p>How would the fixture look like?</p>
<pre><code class="language-bash">10
-----
50</code></pre>
<p>Correct! Now let's learn something new.</p>
<blockquote class="blockquote text-center">
    "It's easy to write tests that are hard to maintain."
</blockquote>
<h2 id="use-case-add-1-line-to-100-files">Use Case: Add 1 Line to 100 Files</h2>
<p>I'm currently working on a tool <a href="https://twitter.com/VotrubaT/status/1285190524627025925">that migrates YAML configs to PHP</a>. It's almost finished... but there is one thing missing in all those configs. <em>PHP</em> configs.</p>
<p><br></p>
<p>I forgot to add the <code>declare(strict_types=1);</code> line. So now, every time you generate a PHP config, you have to run coding standards too on these files. <strong>So much extra work you, end-developers</strong>.</p>
<p>When was my mission changed to <em>adding</em> developers extra tedious work? <strong>We need to handle it</strong>.</p>
<p><br></p>
<h3 id="what-can-we-do-now">What Can We Do Now?</h3>
<ul>
<li>add it to the PHP script, that converts the file to PHP, so the line is there</li>
<li>now tests start failing because the line is missing in the expected output</li>
</ul>
<pre><code class="language-yaml">parameters:
    key: 'value'
-----
&lt;?php

use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return static function (ContainerConfigurator $containerConfigurator): void {
    $parameters = $containerConfigurator-&gt;parameters();

    $parameters-&gt;set('key', 'value');
};</code></pre>
<ul>
<li>go through test fixtures and <strong>manually add the line</strong></li>
</ul>
<p>If we are lucky and the pattern is unique, we can use PHPStorm find/replace or even regular expressions. This might work for this simple case, <strong>but soon fails for real-life cases</strong> like &quot;add extra method call under each $service-&gt;set()&quot;.</p>
<p>We can do better.</p>
<p><br></p>
<h2 id="automated-test-fixture-updates">Automated Test Fixture Updates</h2>
<ul>
<li>How can we automate the update <strong>under few seconds</strong>?</li>
<li>How can we do it <strong>without thinking</strong> about what needs to be changed and how?</li>
</ul>
<p><br></p>
<p>With visual snapshot tests this is piece of cake. All we need is <code>UPDATE_TESTS=1</code> env and normal PHPUnit run:</p>
<img src="/assets/images/posts/2020/update_tests_example.gif" class="img-thumbnail">
<p>Now, all the 100 files have completed <code>declare(strict_types=1);</code>:</p>
<pre><code class="language-yaml">parameters:
    key: 'value'
-----
&lt;?php

declare(strict_types=1);

use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return static function (ContainerConfigurator $containerConfigurator): void {
    $parameters = $containerConfigurator-&gt;parameters();

    $parameters-&gt;set('key', 'value');
};</code></pre>
<h2 id="how-did-that-happened">How did that Happened?</h2>
<p>In the previous post, we looked on <a href="/blog/2020/07/13/the-most-effetive-test-i-found-in-7-years-of-testing/#code-time">how to split and test fixture files</a>.</p>
<p>We only update this code with a single method, that will handle the fixture updates:</p>
<pre><code class="language-diff"> &lt;?php

 use PHPUnit\Framework\TestCase;

 final class FirstTryTest extends TestCase
 {
     public function test(): void
     {
         $filePath = __DIR__ . '/fixture/first_try.php';

         $fixtureContent = file_get_contents($filePath);
         [$input, $expectedOutput] = explode("\n-----\n", $fixtureContent);

         // test your main domain service
         $output = $this-&gt;processInputInYourDomain($input);

+        $this-&gt;updateFixture($input, $output, $filePath);

         $this-&gt;assertSame($expectedOutput, $output);
     }
 }</code></pre>
<p>And add the <code>updateFixture()</code> method:</p>
<pre><code class="language-php">private function updateFixture(
    string $input,
    string $currentOutput,
    string $fixtureFilePath
): void {
    // only runs when UPDATE_TESTS=1 is put before PHPUnit run
    if (! getenv('UPDATE_TESTS')) {
        return;
    }

    // update changed output content part
    $newOriginalContent = $input . PHP_EOL .
        '-----' . PHP_EOL .
        $currentOutput . PHP_EOL;

    // update the fixture file
    file_put_contents($fixtureFilePath, $newOriginalContent);
}</code></pre>
<p>And that's it!</p>
<p>The best place to add <code>updateFixture()</code> is an abstract test case, e.g., <code>AbstractVisualSnapshotTestCase</code>. So we have one place to change.</p>
<p><br></p>
<p>Now you can do massive changes in your business logic, and even you rewrite the output completely, all you need to run is:</p>
<pre><code class="language-bash">UPDATE_TESTS=1 vendor/bin/phpunit</code></pre>
<p>Now we know the simplest way to maintain tests that are easy to read there is... or is it?</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/07/20/how-to-update-hundreds-of-test-fixtures-with-single-phpunit-run</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/07/20/how-to-update-hundreds-of-test-fixtures-with-single-phpunit-run#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ 10 Cool Features You Get after switching from YAML to PHP Configs ]]></title>
                <link>https://tomasvotruba.com/blog/2020/07/16/10-cool-features-you-get-after-switching-from-yaml-to-php-configs</link>
                <description><![CDATA[ <p>You've probably noticed <a href="https://github.com/symfony/symfony/issues/37186">Symfony is moving towards PHP configuration</a>. If you're on XML or YAML, you'll most likely migrate to PHP with upcoming Symfony 6.
<br>
<br>
There are already tools that <a href="https://twitter.com/VotrubaT/status/1283003111074922497">can help you migrate today</a> - <strong>so it's not a matter of work, but a matter of choice</strong>.
<br>
<br>
Today we look at 10 cool features you get by switching to PHP configs that make you an even lazier programmer.</p> ]]></description>
                <content:encoded><![CDATA[ <p>Do you <strong>care why</strong> this begun? Be sure to read <a href="https://github.com/symfony/symfony/issues/37186">Symfony issue</a>:</p>
<blockquote class="blockquote text-center mt-5 mb-5">
    The biggest advantage is IDE auto-completion out of the box,
    <br>
    and one XML/YAML language less to learn.
</blockquote>
<p><br></p>
<p>There are the cool features I've observed from migration of <strong>50+ YAML configs to PHP</strong>:</p>
<h2 id="1-absolute-paths-over-random-paths">1. Absolute Paths over Random Paths</h2>
<p>In configs, we often define paths to files or directories. Could you tell me what exact path this is?</p>
<pre><code class="language-yaml">parameters:
    paths:
        - 'src'</code></pre>
<ul>
<li>relative to the config location?</li>
<li>absolute to <code>%kernel.projectDir%</code>?</li>
<li>absolute to <code>%cwd%</code>?</li>
<li>what will warn us if we move the config?</li>
</ul>
<p><br></p>
<p><strong>We don't know</strong>. It depends on the internal tool implementation and luck.</p>
<p><br></p>
<p>Now the same config in PHP:</p>
<img src="/assets/images/posts/2020/yaml_php_absolute_click.gif" class="img-thumbnail">
<p>Pretty clear, right?</p>
<h2 id="2-we-can-see-del-deprecated-classes-del-in-phpstorm">2. We Can See <del>Deprecated Classes</del> in PHPStorm</h2>
<p>The YAML config <strong>will not show you</strong>, if class was deprecated:</p>
<img src="/assets/images/posts/2020/yaml_php_deprecated_class_yaml.png" class="img-thumbnail">
<p>PHPStorm will <del>cross the deprecated class</del> and prepare you better for the future:</p>
<img src="/assets/images/posts/2020/yaml_php_deprecated.png" class="img-thumbnail">
<h2 id="3-missing-classes-in-parameters">3. Missing Classes in Parameters</h2>
<p>In YAML, everything is a string by default, so YAML doesn't know that you mean <em>a class</em>.</p>
<p>PHPStorm shows that pretty clearly:</p>
<img src="/assets/images/posts/2020/yaml_php_missing_class.png" class="img-thumbnail">
<h2 id="4-ide-autocomplete-just-works">4. IDE Autocomplete Just Works</h2>
<p>Do you recall YAML struggle, when you want to <strong>register a service</strong>?</p>
<img src="/assets/images/posts/2018/symfony-plugin/yaml-class.gif" class="img-thumbnail">
<p><br></p>
<p>In PHP config you can <a href="/blog/2018/08/27/why-and-how-to-avoid-the-memory-lock/">forget it</a> and just type:</p>
<img src="/assets/images/posts/2020/yaml_php_class_autocomplete.gif" class="img-thumbnail">
<p>Even with typos like &quot;Appication&quot; ;)</p>
<h2 id="5-how-was-that-code-calls-code-syntax">5. How was that <code>calls</code> Syntax?</h2>
<p>Do you remember how to set a call on the service setup?</p>
<pre><code class="language-yaml">services:
    SomeClass:
        calls:
            # what now?</code></pre>
<p>No, don't Google it! Try from the top of your head.</p>
<p><br></p>
<p>An intuitive way would be to use the same syntax as properties/arguments:</p>
<pre><code class="language-yaml">services:
    SomeClass:
        calls:
            'setValue': [1]</code></pre>
<p>No :( then we have to Google it...</p>
<p><br></p>
<p>In PHP we <strong>can use intuitive approach</strong> and see what IDE tells us:</p>
<img src="/assets/images/posts/2020/yaml_php_calls.gif" class="img-thumbnail">
<h2 id="6-no-more-magic-yaml-syntax-for-constants">6. No More Magic YAML syntax for Constants</h2>
<p>In YAML everything is a string:</p>
<pre><code class="language-yaml">parameters:
    line_ending: PHP_EOL</code></pre>
<p>Is that <code>PHP_EOL</code> constant as we know it? No, it's <code>"PHP_EOL"</code> string.</p>
<p><br></p>
<p>How can we specify a <strong>string that is a constant</strong>? (Feels weird for my brain just writing this sentence.)</p>
<p><a href="https://symfony.com/blog/new-in-symfony-3-2-php-constants-in-yaml-files">Symfony 3.2 introduced special prefix</a>: <code>!php/const</code></p>
<pre><code class="language-yaml">parameters:
    line_ending: !php/const PHP_EOL</code></pre>
<p>Pretty crazy, right?</p>
<p><br></p>
<p>How does PHP solve this?</p>
<pre><code class="language-php">use  Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return static function (ContainerConfigurator $containerConfigurator): void {
    $parameters = $containerConfigurator-&gt;parameters();

    $parameters-&gt;set('line_ending', PHP_EOL);
};</code></pre>
<p><strong>It just works</strong>, no headache!</p>
<p><br></p>
<h2 id="7-one-way-to-add-arguments">7. One Way to Add Arguments</h2>
<p>These 2 files will produce the same configuration:</p>
<pre><code class="language-yaml">services:
    SomeService:
        # silent "arguments" key is omitted
        $key: value</code></pre>
<pre><code class="language-yaml">services:
    SomeService:
        arguments:
            $key: value
            # or was it this?
            # key: value</code></pre>
<p><br></p>
<p>In PHP this is <strong>just 1 clear way</strong>:</p>
<pre><code class="language-php">use Symfony\Component\Console\Application;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return static function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();

    $services-&gt;set(Application::class)
        -&gt;arg('key', 'value');
};</code></pre>
<p><br></p>
<h2 id="8-no-more-magic-tags-without-name">8. No More Magic Tags Without Name</h2>
<p>For tags, these 2 files produce the same output:</p>
<pre><code class="language-yaml">services:
    SomeService:
        tags:
            - kernel.event_subscriber
            # how do we extend this later?</code></pre>
<pre><code class="language-yaml">services:
    SomeService:
        tags:
            - { name: 'kernel.event_subscriber' }</code></pre>
<p>In PHP, there is just 1 way for both:</p>
<img src="/assets/images/posts/2020/yaml_php_event_tag.gif" class="img-thumbnail">
<h2 id="9-ecs-rector-amp-phpstan-watches-your-config-now">9. ECS, Rector &amp; PHPStan watches your Config Now</h2>
<p>This feature is my favorite by far because it finally opens the door for next-level automation.</p>
<p>YAML doesn't have any static analyzer or instant upgrade tool. This makes the upgrade of Symfony projects double the work - in PHP,  in YAML.</p>
<p>Since <code>*.php</code> is PHP code, all the powerful CI tools have access to it.</p>
<p><br></p>
<p><strong>Fewer bugs, effortless changes, less upgrade work, new PHPStan rules, more fun coding.</strong></p>
<h2 id="10-constants-over-strings">10. Constants over Strings 🎉</h2>
<p>Last but not least. You've probably noticed I hete typoes. I'm so used to tool watching my back, that I type much faster than my fingers can. Then I run the tools and code works (usually).</p>
<p>If you give me a choice of <code>"string"</code> or <code>CONSTANT</code>, 10 of 10 <a href="/blog/2020/05/25/the-bulletproof-event-naming-for-symfony-event-dispatcher/">I pick the <code>CONSTANT</code></a> (unless the string is <code>"really sexy and smart, verified"</code>).</p>
<p><br></p>
<p><strong>We don't have such a solid choice in YAML</strong>. If we want to use a parameter used elsewhere, we need to trust name is somehow validated (it isn't, because exception will tell you anyway).</p>
<p><br></p>
<p>For example, how do you ignore files in ECS?</p>
<pre><code class="language-yaml">parameters:
    excluded_files:
    # or
    excluded_path:
    # or
    excluded_paths:</code></pre>
<p>None of them :(. It's <code>exclude_files</code>! <strong>It's painful to look for such bugs</strong> because you need to analyze the whole project every time the config is changed.</p>
<p><br></p>
<p><strong>In PHP, we can do this</strong>:</p>
<img src="/assets/images/posts/2020/yaml_php_constants.gif" class="img-thumbnail">
<ul>
<li>Does the constant name change in the future? Rector handles it</li>
<li>Is the constant missing? PHPStan reports it</li>
</ul>
<h2 id="">🚀🚀🚀</h2>
<p><br></p>
<h2 id="start-today-time-passes-anyway">Start Today, Time passes Anyway</h2>
<p>Do you need more real-life examples to try it yourself? Learn from merged pull-requests:</p>
<ul>
<li><a href="https://github.com/bolt/core/pull/1636"><code>bolt/core</code> migration of <code>ecs.yaml</code> to <code>ecs.php</code></a></li>
<li><a href="https://github.com/TomasVotruba/tomasvotruba.com/pull/1023/commits/317451fe4770bf5fadd2f5f0807b0dc20c5ad121">the smallest migration of 1 file</a></li>
<li><a href="https://github.com/symplify/symplify/pull/2012"><code>symlify/easy-coding-standard</code> of 20 sets</a></li>
<li><a href="https://github.com/migrify/migrify/issues/61">issue that lists finished YAML to PHP migrations</a></li>
</ul>
<p><br></p>
<p>And of course, don't do it manually. Use <strong>automated tools</strong>:</p>
<ul>
<li><a href="https://github.com/migrify/config-transformer"><code>migrify/config-transformer</code></a> - handles YAML/XML to PHP/YAML</li>
<li><a href="https://github.com/symfony/maker-bundle/pull/604"><code>symfony/maker-bundle</code></a> - work in progress, handles YAML to PHP</li>
</ul>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/07/16/10-cool-features-you-get-after-switching-from-yaml-to-php-configs</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 16 Jul 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/07/16/10-cool-features-you-get-after-switching-from-yaml-to-php-configs#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ The most Effective Test I found in 7 years of Testing ]]></title>
                <link>https://tomasvotruba.com/blog/2020/07/13/the-most-effetive-test-i-found-in-7-years-of-testing</link>
                <description><![CDATA[ <p>Do you test your projects with automated tests? If not, would you like to start?
Do you work with application, integration, functional, unit, and Selenium layers and drive you crazy? Do you spend more time writing tests than the actual code behind them?
<br><br>
I want my <strong>tests to be simple, effective, and fun to write and maintain</strong>. Today, we look at one approach used by <a href="https://github.com/php/php-src">PHP itself</a>, <code>nikic/php-parser</code>. It's so good I'm surprised not everyone is using it.</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="the-bigger-the-scope-the-greater-the-teacher">The Bigger the Scope, the Greater the Teacher</h2>
<p>You can spend a year building house of your dreams. You already live in a flat, so you have a place to sleep. <strong>There is no pressure</strong>. You go there every weekend, add a window here and there, add doors, prepare holes in walls for electric heating cables... good 2-4 years.</p>
<p>How would the situation change if you'd build houses as a developer (the building one)? Your job is to build 100 flats per year. You can't fool around with the color of the walls inside each room. <strong>You have to be effective.</strong></p>
<p><br></p>
<p>The first case of building one house for a year - you only work on 1 PHP project at once. It's only <strong>natural to try-out all the testing layers</strong> you can Google. There are a couple of tests that test the product checkout process, a couple of integration tests to check the component is rendered correctly, <a href="/blog/2018/06/11/how-to-turn-mocks-from-nightmare-to-solid-kiss-tests/">mocking</a> to &quot;decouple&quot; one part from another.</p>
<p>Every month I work with ~5 private projects, and I maintain <a href="https://packagist.org/profile/?page=3">35 open-sources packages</a>. I used to have very complicated tests for all possible application parts, but that turned out to take more time to maintain to develop, and it <strong>slowed down my productivity brutally the more tests I had</strong>.</p>
<p><br></p>
<h2 id="how-do-php-core-test-cases-look-like">How do PHP-core test cases Look Like?</h2>
<p>Let's look at the PHP test <a href="https://github.com/php/php-src/blob/master/tests/basic/001.phpt">with name 001</a>.
Give it 60 seconds:</p>
<pre><code class="language-bash">--TEST--
Trivial "Hello World" test
--FILE--
&lt;?php echo "Hello World"?&gt;
--EXPECT--
Hello World</code></pre>
<p>Do you need a PHP-core developer to explain the whole testing process? You don't; you get it.</p>
<p>When we call:</p>
<pre><code class="language-php">&lt;?php echo "Hello World"?&gt;</code></pre>
<p>We get the output:</p>
<pre><code class="language-bash">Hello World</code></pre>
<p>The 1st line is just a description, useful for a more complicated case.</p>
<h2 id="testing-at-its-best">Testing at its Best</h2>
<ul>
<li>you <strong>don't need a package maintainer to explain you what the test does</strong></li>
<li>you <strong>don't have to read a book about testing</strong> to be able to contribute</li>
<li>you can edit it, and you can extend it</li>
<li>you can learn with growing complexity by yourself</li>
</ul>
<p>It's like a smartphone or door handle in testing.</p>
<p>This kind of testing gives you confidence, and that's by far the most important feeling that <a href="/blog/2020/03/02/we-do-not-need-senior-developers-we-need-senior-code-bases/">builds senior code bases</a>.</p>
<h2 id="domain-driven-testing">Domain Driven Testing</h2>
<p>You're probably thinking, &quot;but how do I apply this to my unique startup that does not compare strings&quot;? Of course, there is a place for the complex test that checks your checkout process work. The goal <strong>is not to narrow all your tests to 1 size</strong> to fit em all.</p>
<p>The goal is to find what startup is different from other projects. Is your specialty to build e-commerce websites, or is it a recommendation of the next best product? Is it an instant delivery of warm food or a reliable video conference for massive numbers of users?</p>
<h2 id="find-your-domain">Find Your Domain</h2>
<p><strong>Find your domain</strong>, because in this domain will be placed 80 % of your tests. If you pick the right domain and make these tests simple, effective, and fun to write and maintain, your developers will enjoy writing them, and your code will naturally grow.</p>
<p><br></p>
<p>Let's look at the projects you know:</p>
<ul>
<li>PHP
<ul>
<li><strong>main domain</strong>: running PHP input code with correct output to the user</li>
<li>side domain: validation of input, syntax check, informative errors</li>
</ul></li>
<li>php-parser
<ul>
<li><strong>main domain</strong>: parsing PHP input code to desired node objects</li>
<li>side domain: printing nodes back, comments handling</li>
</ul></li>
<li>Rector
<ul>
<li><strong>main domain</strong>: refactoring input code to the desired change</li>
<li>side domain: working with docblocks and types, format-preserving</li>
</ul></li>
</ul>
<h2 id="code-time">Code Time</h2>
<p>Enough theory, let's do the practice.</p>
<p>We have a fixture file with your domain, <code>/fixture/first_try.php</code>:</p>
<pre><code class="language-bash">input
-----
expected output</code></pre>
<p>Then we need to run Test Case:</p>
<pre><code class="language-php">&lt;?php

use PHPUnit\Framework\TestCase;

final class FirstTryTest extends TestCase
{
    public function test(): void
    {
        $fixtureContent = file_get_contents(__DIR__ . '/fixture/first_try.php');
        [$input, $expectedOutput] = explode("\n-----\n", $fixtureContent);

        // test your main domain service
        $output = $this-&gt;processInputInYourDomain($input);

        $this-&gt;assertSame($expectedOutput, $output);
    }
}</code></pre>
<p>And that's it :) See <a href="https://3v4l.org/sEudR">3v4l.org code sample</a>.</p>
<p><br></p>
<h2 id="few-tips-before-start">Few Tips before Start</h2>
<ul>
<li>it's all at one place - no file jumping and looking for the right file</li>
</ul>
<pre><code class="language-diff">-/tests/fixture/before/input_string.php
-/tests/fixture/after/some_string_print.php
+/tests/fixture/change_string.php</code></pre>
<ul>
<li>the file name is the description</li>
<li><strong>it scales</strong> - you can build a test that combines multiple problems at once, and still get the same input/output format</li>
<li>you can also <strong>combine formats</strong> in one fixture, e.g., for <a href="https://github.com/migrify/migrify/blob/master/packages/config-transformer/packages/format-switcher/tests/Converter/ConfigFormatConverter/FixtureYamlToPhp/normal/some.yaml">migration of Symfony configs from YAML to PHP</a>.</li>
</ul>
<p><br></p>
<h2 id="what-if-output-changes">What If Output Changes?</h2>
<p>&quot;But what happens when we add a new property to the output? Do we have to change all the files manually? That's crazy.&quot;</p>
<p>It would be crazy. I tried to update 60 files in php-parser when I only added typed properties... oh, that was too much work. At file 50, I figured out there is an automated way exactly my case. We will look at how we can <strong>turn these tests into snapshot tests that update themselves</strong> <a href="/blog/2020/07/20/how-to-update-hundreds-of-test-fixtures-with-single-phpunit-run/">in the next post</a>.</p>
<p><br></p>
<p>PS.: Do you want to automate part with loading and splitting fixture? Checkout <a href="https://github.com/symplify/easy-testing">symplify/easy-testing</a> package.</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/07/13/the-most-effetive-test-i-found-in-7-years-of-testing</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/07/13/the-most-effetive-test-i-found-in-7-years-of-testing#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Cleaning Lady Notes: From Class Mess to PSR-4 Step by Step With Confidence ]]></title>
                <link>https://tomasvotruba.com/blog/2020/07/06/cleaning-lady-notes-from-class-mess-to-psr4-step-by-step-with-confidence</link>
                <description><![CDATA[ <p>Today I'm starting a new post series - <em>Cleaning Notes</em>. These posts are for people who are <a href="/blog/2020/06/29/how-will-programming-look-like-in-2025/">aspiring legacy migrators</a> with a vision to improve private PHP ecosystem and bring joy to coding with gigantic applications again. The same vision we have in the Rector team.
<br><br>
In this series, you can learn about my experience, tricks, tips, and what fucked me up. So you <strong>save some frustration, where is not needed, discover hidden shortcuts and cool tools you never saw before</strong>.
<br><br>
We start with the most problematic topic in PHP legacy, that every project needs, but almost none has - <strong>transition to <a href="https://www.php-fig.org/psr/psr-4">PSR-4</a></strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <p><em>Dedicated to <a href="https://github.com/Kerrialn">Kerrial</a>, my great friend who teaches me so much about not giving a f_ck and just do the stuff.<br>Thanks, dude!</em></p>
<p><br></p>
<h2 id="how-to-approach-the-migration-itself">How to Approach the Migration Itself?</h2>
<h3 id="know-your-enemy">Know Your Enemy</h3>
<p>There are many use cases that we have to handle to get to PSR-4. Honestly, I find it easier to <a href="/blog/2019/08/26/how-we-migrated-54-357-lines-of-code-nette-to-symfony-in-2-people-under-80-hours/">switch a framework</a>, where start is clear and goal is clear.</p>
<p>In PSR-4 migration, we have a clear goal:</p>
<ul>
<li>PSR-4: in 1 file, there is 1 class/trait/interface</li>
<li>the class/trait/interface has a unique fully qualified name, that reflects file location</li>
<li>nothing else exists</li>
</ul>
<h3 id="start-has-many-ugly-forms">Start has Many Ugly Forms</h3>
<ul>
<li><strong>in 1 file, there is a dozen classes</strong> - very popular for exceptions or test fixtures</li>
<li>some classes have <strong>identical name</strong> and custom class loader gives one or the other preference (e.g., Magento and Drupal use this in some version)</li>
<li>there are classes without any namespace</li>
<li>there are classes with <code>Fake_Namespace</code></li>
<li>file has a different name than the class, e.g. <code>random_file.php</code> with <code>class SomeClass {}</code> in it</li>
<li>in 1 file, there are classes and functions, so the file has to be manually included to &quot;autoload&quot; the functions</li>
<li>there are conditional classes, e.g.</li>
</ul>
<pre><code class="language-php">if (! class_exists('SomeClass')) {
    final class SomeClass
    {
        // ...
    }
}</code></pre>
<p>A lot to suck in, right? Don't worry; each of them has a guide to follow.</p>
<h3 id="low-hanging-fruit">Low Hanging Fruit</h3>
<p>Each project is different, some of them has <a href="/blog/2020/04/13/how-to-migrate-spaghetti-to-304-symfony-5-controllers-over-weekend/">functions mixed with HTML</a>, some is missing composer completely, some needs to <a href="/blog/2020/06/08/drop-robot-loader-and-let-composer-deal-with-autoloading/">switch from custom-framework autoloading</a>.</p>
<p>But you should always apply basic rule:</p>
<blockquote class="blockquote text-center mt-5 mb-5">
    "Take the low hanging fruit first."
</blockquote>
<p>Always <strong>go for a simple target first</strong>. Don't be a hero. A hero falls from the sky after a massive battle over Atlantic, forgot to charge his smartphone... and dies alone.</p>
<p><strong>Be professional, close quickly, close early</strong>. Are there 3 files with 20 classes in them?</p>
<ul>
<li>split them to 20 classes</li>
<li>don't deal with namespaces, don't care about file naming</li>
<li>create pull-request</li>
<li>merge it</li>
</ul>
<p><em class="fas fa-fw fa-check text-success fa-2x"></em></p>
<p>Done. You've just made a first small step. Cross <a href="/cleaning-lady-checklist">one step of your list</a>, 9/10 is left.
But all those 9 steps are now 10 % less complicated.</p>
<blockquote class="blockquote text-center mt-5 mb-5">
    "Even if you die, the code you wrote is merged."
    <footer class="blockquote-footer text-center">Bus Boy Scout Factor</footer></blockquote>
<p>I love this coding principle. Why? Because it takes minimalism and productivity to the practical world. It narrows our focus, so any developer becomes a 10x programmer effortlessly.</p>
<p><br></p>
<h2 id="what-exactly-to-do-case-study">What Exactly to Do? - Case Study</h2>
<p>Enough theory. <strong>Let's look at the project we've recently migrate to PSR-4 and how exactly we did it</strong>.</p>
<p>This is not paid promo, but <a href="https://www.startupjobs.cz/en/startup/scrumworks-s-r-o">Amateri are hiriging</a>. We're far enough with the migration, so I'm confident it would be fun to work with such codebase.</p>
<h2 id="1-split-multiple-classes-in-1-file">1. Split Multiple Classes in 1 File</h2>
<p>How does it look?</p>
<pre><code class="language-diff"> // SomeFile.php
 class SomeClass
 {
 }

 class AnotherClass
 {
 }</code></pre>
<pre><code class="language-diff">+// AnotherClass.php
+class AnotherClass
+{
+}</code></pre>
<p><br></p>
<p>The <strong>1st cool tool</strong> we look at today is <a href="https://github.com/migrify/psr4-switcher">migrify/psr4-switcher</a>.
It doesn't need projects' autoloader so that it can be installed outside the project, e.g., in <code>/var/www/tools</code>, while your project is in <code>/var/www/old_project</code>.</p>
<p>Install it:</p>
<pre><code class="language-bash">composer require migrify/psr4-switcher --dev</code></pre>
<p>It would be great to have a list of all such multi-class files, right?</p>
<pre><code class="language-bash">vendor/bin/psr4-switcher find-multi-classes /src</code></pre>
<p>↓</p>
<pre><code class="language-bash">* SomeFile.php
    * SomeClass
    * AnotherClass</code></pre>
<p>Now we know how big a problem we're dealing with.</p>
<ul>
<li>Are there 3 files with 20 classes? <strong>Separate them manually</strong>.</li>
<li>Is that 50 files with 300 classes? Use <strong>Rector rule</strong> - <a href="https://github.com/rectorphp/rector/blob/master/docs/rector_rules_overview.md#multipleclassfiletopsr4classesrector"><code>MultipleClassFileToPsr4ClassesRector</code></a>.</li>
</ul>
<p>Now 1 file has exactly 1 class/interface/trait.</p>
<p>Send pull request, make sure your project's autoloader autoloads them, and tests are passing. Merge it, and you're done.</p>
<h2 id="2-check-class-short-name-vs-filename">2. Check Class Short name vs. Filename</h2>
<pre><code class="language-diff"> // Cucumber.php
-class Car
+class Cucumber
 {
 }</code></pre>
<p>If we only knew how many such files are there and where... back to PSR4-Switcher:</p>
<pre><code class="language-bash">vendor/bin/psr4-switcher check-file-class-name src</code></pre>
<p>You will get a list of files that don't match. Use PHPStorm refactoring to change the class name everywhere:</p>
<img src="/assets/images/posts/2020/psr4_rename_class.gif" class="img-thumbnail">
<p>Commit, PR, CI passes, merge.</p>
<p><em class="fas fa-fw fa-check text-success fa-2x"></em></p>
<h2 id="3-upper-case-directories-first-letter">3. Upper-case Directories First Letter</h2>
<p>In PSR-4, any non-root directory must start with the first big letter. Root is e.g. <code>/app</code>, <code>/src</code>.</p>
<pre><code class="language-diff">-/app/form/someForm
+/app/Form/SomeForm</code></pre>
<p>Go through directory in the left panel in PHPStorm and rename the directories there:</p>
<img src="/assets/images/posts/2020/psr4_rename_dirs.gif" class="img-thumbnail">
<p>Commit, PR, CI passes, merge.</p>
<p><em class="fas fa-fw fa-check text-success fa-2x"></em></p>
<h2 id="4-check-psr-4-root">4. Check PSR-4 root</h2>
<p>We've done 3 steps so far. Now comes the biggest one, actually adding PSR-4 roots to <code>composer.json</code>.</p>
<p>It will not be as pretty as 1 root line, but that's not what we go here now. Our goal is <strong>to have all classes loaded with PSR-4, no matter how many lines</strong> in <code>composer.json</code> does it need.</p>
<pre><code class="language-json">{
    "autoload": {
        "psr-4": {
            "Amateri\\Payment\\": "src/somewhere-else/Payment",
            "Amateri\\Delivery\\": "src/another-dir/Delivery"
        }
    }
}</code></pre>
<p>We can guess what namespace roots (<code>"Amateri\\Payment\\"</code>) should be loaded from which directory (<code>"src/somewhere-else/Payment"</code>)... or we can use science!</p>
<pre><code class="language-bash">vendor/bin/psr4-switcher generate-psr4-paths project/src --composer-json project/composer.json</code></pre>
<p>The command will generate such paths for us, based on existing namespaces and file locations.
There may be over 10 or even 50 of those. <strong>Don't worry about it now</strong>.</p>
<ul>
<li>put generated output to <code>composer.json</code> instead of <code>classmap</code>,</li>
<li>run <code>composer dump-autoload</code> to let composer know about news paths</li>
<li>run PHPStan to see if all classes are loaded</li>
</ul>
<p>If everything passes... Commit, PR, CI passes, merge.</p>
<p><em class="fas fa-fw fa-check text-success fa-2x"></em></p>
<h2 id="5-narrow-the-namespace-root-and-directories-in-code-composer-json-code">5. Narrow the Namespace Root and Directories in <code>composer.json</code></h2>
<p>Now comes my favorite part. Here we move all directories <strong>to use as little namespace root as possible</strong>.</p>
<p>It might be a little bit unclear, but give it time and it will fit in. Let's look at the example:</p>
<pre><code class="language-diff"> {
     "autoload": {
         "psr-4": {
-            "Amateri\\Payment\\": "src/somewhere-else/Payment",
-            "Amateri\\Delivery\\": "src/another-dir/Delivery",
+            "Amateri\\": "src"
        }
    }
}</code></pre>
<p>What happens with files?</p>
<pre><code class="language-diff">-src/somewhere-else/Payment
+src/Payment</code></pre>
<pre><code class="language-diff">-src/another-dir/Delivery
+src/Delivery</code></pre>
<p>Here use PHPStorm refactoring on the directory as in step 3.</p>
<ul>
<li>run <code>composer dump-autoload</code> to let composer know about news paths</li>
<li>run PHPStan to see if all classes are loaded</li>
</ul>
<p>If everything passes... Commit, PR, CI passes, merge.</p>
<p><em class="fas fa-fw fa-check text-success fa-2x"></em></p>
<h2 id="6-what-if-there-are-no-namespaces-or-are-very-very-bad">6. What if there are No Namespaces or Are Very Very Bad?</h2>
<p>In many codebases, there are just random files—no namespace, no fake namespace, etc.</p>
<p>For these, we have help of Rector with these 2 rules:</p>
<ul>
<li><a href="https://github.com/rectorphp/rector/blob/master/docs/rector_rules_overview.md#normalizenamespacebypsr4composerautoloadfilesystemrector"><code>NormalizeNamespaceByPSR4ComposerAutoloadRector</code></a></li>
<li><a href="https://github.com/rectorphp/rector/blob/master/docs/rector_rules_overview.md#normalizenamespacebypsr4composerautoloadrector"><code>NormalizeNamespaceByPSR4ComposerAutoloadFileSystemRector</code></a></li>
</ul>
<p><br></p>
<p>Register them in <code>rector.php</code>:</p>
<pre><code class="language-php">&lt;?php

// rector.php

declare(strict_types=1);

use Rector\PSR4\Rector\FileSystem\NormalizeNamespaceByPSR4ComposerAutoloadFileSystemRector;
use Rector\PSR4\Rector\Namespace_\NormalizeNamespaceByPSR4ComposerAutoloadRector;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();
    $services-&gt;set(NormalizeNamespaceByPSR4ComposerAutoloadRector::class);
    $services-&gt;set(NormalizeNamespaceByPSR4ComposerAutoloadFileSystemRector::class);
};</code></pre>
<p>And <strong>manually add the desired namespace</strong> to your <code>composer.json</code>:</p>
<pre><code class="language-diff"> {
+   "autoload": {
+        "psr-4": {
+            "Amateri\\": "src"
+        }
+    }
 }</code></pre>
<p>When you run the Rector, it will try to autocomplete all the namespaces to respect your <code>composer.json</code>:</p>
<pre><code class="language-bash">vendor/bin/rector p src</code></pre>
<p>This is one of <strong>the most significant changes in your application</strong>, so <strong>be sure to check it carefully</strong>. Not all cases are covered by Rector yet.</p>
<ul>
<li>run <code>composer dump-autoload</code> to let composer know about news paths</li>
<li>run PHPStan to see if all classes are loaded</li>
</ul>
<p>If everything passes... Commit, PR, CI passes, merge.</p>
<p><em class="fas fa-fw fa-check text-success fa-2x"></em></p>
<p><br></p>
<p>Then we added few manual tweaks here and there, and we were PSR-4 compliant with ~7 lines in PSR-4 in <code>composer.json</code>.</p>
<p><br></p>
<p><strong>Have you found a case that is not covered or a better way to this</strong>? Let me know in the comments.</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/07/06/cleaning-lady-notes-from-class-mess-to-psr4-step-by-step-with-confidence</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 06 Jul 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-08-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Aug 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/07/06/cleaning-lady-notes-from-class-mess-to-psr4-step-by-step-with-confidence#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Patch a Package in Vendor, Yet Allow its Updates ]]></title>
                <link>https://tomasvotruba.com/blog/2020/07/02/how-to-patch-package-in-vendor-yet-allow-its-updates</link>
                <description><![CDATA[ <p>While working with legacy code upgrades, we often need to fix a line or two in 3rd party package in <code>/vendor</code>.
<br>
<br>
You can fork it, but by that, you <strong>take manual responsibility</strong> for all the package updates.
You can copy a package locally, which is faster, but <strong>disables package updates</strong>.
<br><br>
Or... you can use &quot;composer patches&quot;?</p> ]]></description>
                <content:encoded><![CDATA[ <p>I'm currently working on one Nette project as <a href="/blog/2020/04/27/forget-complex-migrations-use-cleaning-lady-checklist/">a cleaning lady</a>. After making code nice &amp; shiny clean, we'll move from Nette 2.4 to Nette 3.0. During the cleaning process, we got into one delicate issue I'd love to share with you.</p>
<p><br></p>
<p>We used <a href="/blog/2020/06/01/inject-or-required-will-get-you-any-service-fast/">inject properties</a>:</p>
<pre><code class="language-php">&lt;?php

abstract class AbstactSomePresenter
{
    /**
     * @inject
     * @var SomeDependency
     */
    public $someDependency;
}</code></pre>
<p>But since PHP 7.4, we could drop the <code>@var</code> annotation:</p>
<pre><code class="language-php">&lt;?php

abstract class AbstactSomePresenter
{
    /**
     * @inject
     */
    public SomeDependency $someDependency;
}</code></pre>
<p>But... this doesn't work in Nette 2.4. Aww.</p>
<p><br></p>
<p>We tried to add this feature by replacing native <code>InjectExtension</code> with our own. But native extension <strong>is statically hardcoded</strong>, so there was no way to replace it.</p>
<p><strong>What else we can do?</strong> We looked at GitHub for a commit that added this feature somewhere between Nette 2.4 and 3.0 (with git blame GitHub feature and look at specific lines).</p>
<p><strong>We were lucky.</strong> It was <a href="https://github.com/nette/di/commit/24df5e6af0ecf18542dc6e721112598bc648082c#diff-e7f245a9be21411c36d839ed85a17457"><strong>just 2 lines</strong></a> that added this feature!</p>
<h2 id="how-to-change-2-lines-of-code-in-code-vendor-code">How to Change 2 Lines of code in <code>/vendor</code>?</h2>
<p>We needed the same commit in our codebase with Nette 2.4.</p>
<p><strong>How can we do that?</strong></p>
<ul>
<li>edit file in <code>/vendor/nette/di/*</code> manually</li>
<li>fork the package at version 2.4, edit it, release it, maintain it</li>
</ul>
<p><em class="fas fa-fw fa-times text-danger fa-2x"></em></p>
<p>These options are slow or will keep the code changed only on your local machine = your <code>composer install</code> would suck a long time.</p>
<p><br></p>
<p>Is there some automated way with all the benefits and almost zero maintenance?</p>
<ul>
<li><a href="https://github.com/cweagans/composer-patches">composer patches</a></li>
</ul>
<p><em class="fas fa-check text-success margin-auto fa-2x"></em></p>
<h2 id="patching-for-dummies">Patching For Dummies</h2>
<p>Idea behind <a href="https://github.com/cweagans/composer-patches">composer patches</a> is great, but the user experience with making the patch not so much. It's classic pixel coding - you have to edit the patch file the one slash or dot char. If you do it wrong, or the whole process collides with &quot;fatal error&quot;. That's why there is <a href="https://pehapkari.cz/blog/2017/01/20/jak-snadno-a-rychle-upravovat-soubory-ve-vendoru">over 10 comments under Czech post by Tomas Pilar</a>, asking about the pixel coding.</p>
<p>I don't want developers to be frustrated over pixel coding. I want developers to play and explore their abilities to their limits.</p>
<p>We made a Migrify package that adds UX layer <strong>that handles the tedious maintenance for you</strong>.</p>
<h2 id="4-steps-to-generate-your-first-patch">4 Steps to Generate Your First Patch</h2>
<h3 id="1-install-packages">1. Install Packages</h3>
<pre><code class="language-bash">composer require cweagans/composer-patches migrify/vendor-patches --dev</code></pre>
<h3 id="2-create-a-copy-of-code-vendor-code-file-you-want-to-change-with-code-old-code-suffix">2. Create a Copy of <code>/vendor</code> file you Want To Change with <code>*.old</code> Suffix</h3>
<p>For example, if you edit:</p>
<pre><code class="language-bash">vendor/nette/di/src/DI/Extensions/InjectExtension.php</code></pre>
<p>The copied file would be:</p>
<pre><code class="language-bash">vendor/nette/di/src/DI/Extensions/InjectExtension.php.old</code></pre>
<h3 id="3-open-the-original-file-and-change-it">3. Open the Original file and Change it</h3>
<pre><code class="language-diff">         if (DI\Helpers::parseAnnotation($rp, 'inject') !== null) {
-           if ($type = DI\Helpers::parseAnnotation($rp, 'var')) {
+           if ($type = \Amateri\Reflection\Helper\StaticReflectionHelper::getPropertyType($rp)) {
+           } elseif ($type = DI\Helpers::parseAnnotation($rp, 'var')) {
               $type = Reflection::expandClassName($type, Reflection::getPropertyDeclaringClass($rp));</code></pre>
<p>Only <code>*.php</code> file is loaded, not the <code>*.php.old</code> one. This way, you can <strong>be sure the new code</strong> is working before you generate patches.</p>
<h3 id="4-run-code-generate-code-command-to-create-patch-file-and-register-it">4. Run <code>generate</code> command to Create Patch File and Register it</h3>
<pre><code class="language-bash">vendor/bin/vendor-patches generate</code></pre>
<p>The Migrify tool will generate patch files for all files created this way in <code>/patches</code> directory:</p>
<pre><code class="language-bash">/patches/nette-di-di-extensions-injectextension.php.patch</code></pre>
<p>The patch path is created from the original file path, so <strong>the patch name is always unique</strong>.</p>
<p>Also, the configuration for <code>cweagans/composer-patches</code> is added your <code>composer.json</code>:</p>
<pre><code class="language-json">{
    "extra": {
        "patches": {
            "nette/di": [
                "patches/nette_di_di_extensions_injectextension.patch"
            ]
        }
    }
}</code></pre>
<p>That's it!</p>
<p><br></p>
<p>Now all you need to do is run composer:</p>
<pre><code class="language-bash">composer install</code></pre>
<p>And your patches are applied to your code!</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/07/02/how-to-patch-package-in-vendor-yet-allow-its-updates</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/07/02/how-to-patch-package-in-vendor-yet-allow-its-updates#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How Will Programming look like in 2025? ]]></title>
                <link>https://tomasvotruba.com/blog/2020/06/29/how-will-programming-look-like-in-2025</link>
                <description><![CDATA[ <p>We often read about best practices in coding, what framework has new features, or what is new in PHP X. How one can change this to that, why is this technique good or bad, or what new package you can download to your project.
<br>
That's only past or present.
<br>
<br>
I'm just finishing the reading of <a href="https://www.amazon.com/The-Inevitable-Kevin-Kelly-audiobook/dp/B01EB3OR32">The Inevitable</a>, written by Wired magazine founder, that focuses solely on the future. Inspired by this book, today, <strong>we look at the future of programming</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <p>Today we fight with technical debt, whatever that means, old legacy code that is hard to maintain, expensive to change, but also the biggest power that generates money. We should upgrade code, integrate DDD, write tests, upgrade PHP to secure it, update the server, and automate the deploy.</p>
<p>So much daunting work and we didn't even look at those other dozens of projects our company maintains... or at least stores on our servers, somewhere. We need to hire an expert that helps us to improve each piece just a little. Not because they're not good, just because there are too many technologies we can use and even more code we have to maintain.</p>
<p><strong>But what the future holds?</strong></p>
<h2 id="ide-meets-ai">IDE meets AI</h2>
<p>In the future, the typing code will become easier. Our IDE will be super-powered by AI, which learns on anonymous data of other PHP projects and from all the open-source projects on Github and Gitlab.</p>
<p>Thanks to this AI, we'll start typing &quot;class HomepageC...&quot; It will know we're creating a controller. It will know we're using Symfony from <code>composer.json</code>, what version do we use and will suggest to autocomplete the rest of the code with <code>final</code> and strict types based on used PHP version also from <code>composer.json</code>. It will generate a template with the templating system we use and mimic the bare content found on other templates our project already has.</p>
<p>Thanks to the massive amount of anonymous data and data from public repositories, the AI will know the best practice about testing the controller to generate the controller test.</p>
<h2 id="del-best-del-verified-practise"><del>Best</del> Verified Practise</h2>
<p>When we say &quot;best practice&quot;, we don't mean what I or somebody else wrote in a post or book based on a few personal experiences. These opinions are often based only on coupled of projects and the single opinionated human mind with feelings.</p>
<p>Best Practise will shift to Verified Practise, based on real data related to 2 hard metrics - <em>technical debt</em> and <em>coding effectivity</em>. <strong>Technical debt</strong> will be financial that shows how much each line of code will cost in the future. Do you write fluent static code without classes with types? The line might show 10 $. Do you write final classes with types and one public method? The line might show 2 $.</p>
<p>These numbers will not be random, but based on the continual colossal amount of big data analysis - still anonymous - from all the private projects that want to use this feature. The code will be compared to money expenses that were needed to maintain and improve the code. Thanks to this feedback, the AI will also know what version is cheaper for your specific project.</p>
<p>It will know about the context of your project and compare the data accordingly. Do you have a CLI project? It will be compared to the code of other CLI projects in the field. Do you write a website? It will be compared rather to website projects.</p>
<p><strong>Coding effectivity</strong> will be metric for the maintainability of the project. It will be measured from 0 to 100, as in 0 - code, that takes many hours to understand, even maybe days or weeks to change. A code with a score of 100 will be easy to understand to junior, and he or she can change the code almost instantly.</p>
<h2 id="ide-verified-auto-suggest">IDE Verified Auto Suggest</h2>
<p>The IDE will be aware of these metrics and will follow patterns in your code. When you start writing a piece of code that has coding effectivity 40-50, it will pop-up with the suggestion of code with the same result of effectivity 80-90. It will do the same job as Rector or PHPStan does today.</p>
<p>The performance will also be included, along with coding effectivity. The code performance will be automatically measured on every change in the background Docker container, and you'll be informed about any memory or time leaks. <strong>It will be so precise that it will mark a specific line and character that caused the leak</strong> and suggest fixing that you may accept.</p>
<h2 id="ast-refactoring">AST Refactoring</h2>
<p>Refactoring will also be more powerful than today. It will be based on abstract-syntax-tree and will suggest the best refactoring you do right now based on anonymous data from all the public and private projects available.</p>
<p>Instead of &quot;best practice&quot; subjective claims, you will know that:</p>
<ul>
<li>solution A will cost you 3 $ per line in technical debt, will be 95 in effectiveness and 45 in performance</li>
<li>solution B will cost you 1 $ per line of technical debt, and the effectiveness will be 70 and performance 50</li>
</ul>
<p>Do you build a startup and want to verify your idea? You'll pick A. Is your company stable, and does it need to be robust in the future? Go for slower-growing yet more stable B.</p>
<p><strong>You'll not have to argue with your colleague</strong> or with your boss why you should use this or this solution. You <strong>compare the numbers</strong> and then decide based on your priorities at that moment.</p>
<h2 id="context-aware-architecture">Context-Aware Architecture</h2>
<p>Your code will have context architecture. The AI will know when is the best to transit between contexts, based on data from other projects and their final costs of the transition. Do you bootstrap in WordPress? That's ok. Does your project become more popular, and you need to transition to another PHP framework that will handle your needs better? <strong>IDE will suggest you migrate to Laravel. One-click, and it's done.</strong></p>
<p>Three years later, your project is growing, and you have a lot of manual integration of 3rd party services that are already native in the Symfony framework. IDE will suggest you migrate... click... and boom, you're on Symfony 9. Do you find out there are <strong>not enough Symfony developers in the market</strong> to keep up with development? 1-click and IDE will migrate to a framework that has enough developers at a reasonable price.</p>
<h2 id="versioned-stackoverflow-answers">Versioned StackOverflow Answers</h2>
<p>IDE will look over your code and follow your coding habits. Do you usually write your feature in 15 minutes, but this one takes almost 2 hours now? In the following years, it will be that good that notices even a slight decrease in typing speed in a matter of seconds.</p>
<p>The IDE will then check your code, scan through StackOverflow answers, <strong>matches the answer that has the same version as your <code>composer.lock</code></strong> and suggest to use this piece of code as the most valued answer.</p>
<p>Do you worry this piece of code is just copy-pasted random code and <strong>will break your project</strong>? The answer rank is not based on human voting anymore, but on actually click-rate when it was successfully used and merged into the project code.</p>
<h3 id="tested-code-snippets">Tested Code Snippets</h3>
<p>Also, the code snippets are tested by StackOverflow daily and also before copy-pasting to your project. With exactly your version of your local environment, so you can be sure the code works. Humans do not version these answers as in the past. <strong>Code in the answer is upgraded on every release of the technology it uses</strong>. Is there an answer for Symfony 5, and then the Symfony 6 will be released? The old code is upgraded with the AST recipe that was released with Symfony 6 and published as a new answer. That way, both human and IDE can work with it.</p>
<h2 id="open-source-funding-by-activity">Open-Source Funding by Activity</h2>
<p>A new project that will connect companies and open-source contributors will be created. The open-source project will be funded by companies that use it. The developers who contribute will be funded by a unified system, based on incoming finances, without fee to cover the system expenses.</p>
<p><strong>Developers will be funded by their contribution that will be measured by AI-fined metrics</strong> that will include the impact of the feature, amount of work, invested time, code effectiveness, etc. This way, the code will be developed much more consistently than on the free time of individual contributors.</p>
<p><strong>An open-source developer will become a new full-time position</strong> funded by this project.</p>
<p>What do these companies get in reward? Promotion in the particular community, pre-release automated upgrade sets, and on-demand access to expert consultants who wrote the open-source projects they use.</p>
<h2 id="framework-consolidation">Framework Consolidation</h2>
<p>~10 PHP frameworks we have now will be consolidated by the market to lower numbers. PHP communities will learn how to co-operate more, instead of working almost identical MVC copies.</p>
<p><strong>Thanks to AST-migrations it will be possible to switch from any to any other PHP framework</strong>. This will allow us to <strong>narrow the market to 3-4 frameworks</strong>. If the framework migration is a matter of 1 click in your IDE, then there will be no competition based on history and long tail effect of dinosaurs, <strong>but only on quality</strong>.</p>
<p>Reduction of frameworks will lead to <strong>framework profiling</strong> - one framework will excel in API, the other in CLI, another in UX websites.</p>
<p>When the whole PHP community focuses on a lower number of frameworks, it will <strong>allow us to invest the saved energy to developing new technologies and new features</strong>.</p>
<h2 id="no-legacy-php-just-1-version">No Legacy PHP, just 1 Version</h2>
<p>Thanks to automated AST migrations, there will be <strong>only two versions of the PHP</strong> - stable and dev. As the upgrade of any package or project will become as fast and cheap as one click, there is no reason not to upgrade to the latest version. It might take PHP community a year or two to synchronize on this. But when it does, <strong>the new PHP will be released at the end of November</strong>, and at the end of December whole PHP open-source ecosystem <strong>will be using it as minimal version.</strong></p>
<h2 id="fully-automated-instant-upgrades">Fully Automated Instant Upgrades</h2>
<p>The PHP code won't have to be upgraded manually. Each PHP version will have fully upgrade AST-based recipe that anyone can use to upgrade the code automatically. GitHub will handle these recipes, so when a new PHP version is released, GitHub will automatically send a pull-request to your repository. <strong>Automated upgrades will not be just for PHP, but for any framework or package. Like Dependabot, we know now, but upgrading the code and solving all the BC breaks for you</strong>.</p>
<h3 id="github-upgrader">GitHub-Upgrader</h3>
<p>If you don't want to click on all the merges yourself, <strong>you can enroll in <em>automated upgrades</em> program so that GitHub will handle it for you</strong>. It will also handle the releases and handle semver the proper way.</p>
<h3 id="semver-automated">Semver Automated</h3>
<p><strong>There will be no arguments about if this is BC break of just a patch</strong>, as it will be handled by AI that will analyze the code before and after and decide based on that. It will be that smart, that it will detect how significant impact the BC break has. <strong>If it would not affect any code, it will be released as a patch.</strong></p>
<h2 id="experience-based-php-rfc">Experience-based PHP RFC</h2>
<p>The same BC break analysis will be possible for any RFC in PHP core code. Do you want to suggest typed constants? The AI will tell you how many projects from the top 10 000 on Github would break in decimal percent. Something similar is now done manually in a couple of RFCs.</p>
<h3 id="quot-bc-break-quot-redefined">&quot;BC Break&quot; Redefined</h3>
<p>The AI will also help you to generate migration AST recipes, so the instant upgrade can entirely handle the BC break. That would lead to a redefinition of &quot;BC break&quot; as we know it today. The BC break would only occur when automated upgrade cannot happen, and a human is needed to change the code.</p>
<h3 id="try-rfc-locally">Try RFC Locally</h3>
<p>Also, anyone can try the RFC feature locally right when the GitHub pull-request is created. How? The Github will automatically create a temporary release with a special dev-tag and push the PHP version to the package registry. You create a pull-request to add typed constants, send it on GitHub, and in 1 minute, you can run <code>sudo apt-get install php-dev-typed-constant</code> to get the PHP to your local machine.</p>
<p>This way, people will be able to try the feature before the merge and even before RFC voting. That way, even voting on features will be <strong>based on real data and experience</strong>, instead of emotions, opinions, and arguments.</p>
<p><br></p>
<h2 id="what-the-future-holds">What the Future Holds?</h2>
<p>In the future, our options will not be limited by our history, past choices, or fast-evolving technology that makes our code deprecated. Our options will be state of the art on the market on that specific day - just one click away.</p>
<p>This allows us to experiment more, verify our assumptions, and have real-life feedback.  It will lead to even more automated coding processes and inventions in language, patterns, or application architecture we can't even imagine today.</p>
<p><br></p>
<blockquote class="blockquote text-center">
"The best way to predict the future<br>is to create it."
</blockquote>
<p><br></p>
<p>Happy creating!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/06/29/how-will-programming-look-like-in-2025</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 29 Jun 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/06/29/how-will-programming-look-like-in-2025#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Why Class Constants Should be Typed ]]></title>
                <link>https://tomasvotruba.com/blog/2020/06/22/why-class-constants-should-be-typed</link>
                <description><![CDATA[ <p>Do you use PHP 7.4 <a href="/blog/2018/11/15/how-to-get-php-74-typed-properties-to-your-code-in-few-seconds/">typed properties</a>? Do you know why?
<br>
<br>
I use them, so <strong>I don't have to think and validate the property type</strong> every time. We just know its type or PHP would crash otherwise.
<br>
<br>
Until PHP 7.4 this was not possible and code was kinda crappy.
Where are we now with constant type? Do you trust your class constants type?</p> ]]></description>
                <content:encoded><![CDATA[ <p>With typed properties, the incorrect type-bug was completely removed:</p>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

final class Person
{
    public string $name;

    public function __construct(string $name)
    {
        $this-&gt;name = $name;
    }
}</code></pre>
<pre><code class="language-php">$name = new Person(20_20);</code></pre>
<p>You would not use the <code>Name</code> object like this, right?</p>
<p><br></p>
<h2 id="what-about-constants">What About Constants?</h2>
<p><strong>What</strong> are constants? They hold value, like properties, but <strong>the value doesn't change</strong>. We can change the value in the code, but not during runtime.</p>
<p><em>Pro-tip: Do you think all your properties have values that can change? <a href="https://github.com/rectorphp/rector/blob/master/docs/rector_rules_overview.md#changereadonlypropertywithdefaultvaluetoconstantrector">Dare Rector to find them</a>.</em></p>
<p>How do you define a class constant?</p>
<pre><code class="language-php">&lt;?php

final class SomeClass
{
    private const ORDER = 'first';

    // ...
}</code></pre>
<p>How is this dangerous? Sometimes, in 2 years future from today, there will be pull-request that changes it like this:</p>
<pre><code class="language-php">&lt;?php

final class SomeClass
{
    private const ORDER = 1;
}</code></pre>
<p>Because if you're first, you're 1, right? I had the pleasure to debug such cases only to figure out the constant type was changed. Why? Because it could.</p>
<p><strong>Constants value can be changed manually - so their type.</strong> It's rarely desired behavior, moreover, when using these constants in 3rd party code or from one.</p>
<h2 id="how-can-we-prevent-constant-re-type">How Can We Prevent Constant Re-type?</h2>
<pre><code class="language-php">&lt;?php

final class SomeClass
{
    /**
     * Should be a string
     */
    private const ORDER = 'first';
}</code></pre>
<p>We read comments, READMEs, or manuals... only when something goes wrong.</p>
<pre><code class="language-php">&lt;?php

final class SomeClass
{
    /**
     * @var string
     */
    private const ORDER = 'first';
}</code></pre>
<p>Slightly better, but still no way to enforce it.</p>
<pre><code class="language-php">&lt;?php

final class SomeClass
{
    private string const ORDER = 'first';
}</code></pre>
<p>Great! But maybe in 2025?</p>
<h2 id="future-scoping">Future Scoping</h2>
<p>The <a href="https://stitcher.io/blog/new-in-php-8">PHP 8.0 release will be a blast</a>. It's already ~30 merged features, and feature freeze is still <a href="https://thephp.website/en/issue/php8-release-schedule">23 days ahead of us</a>.</p>
<p>If we look at selected features in PHP 8:</p>
<ul>
<li><a href="https://wiki.php.net/rfc/constructor_promotion">Constructor Property Promotion</a></li>
<li><a href="https://wiki.php.net/rfc/union_types_v2">Union Types 2.0</a></li>
<li><a href="https://wiki.php.net/rfc/mixed_type_v2">Mixed Type v2</a></li>
<li><a href="https://wiki.php.net/rfc/static_return_type">Static return type</a></li>
<li><a href="https://wiki.php.net/rfc/magic-methods-signature">Ensure correct signatures of magic methods</a></li>
<li><a href="https://wiki.php.net/rfc/make_ctor_ret_void">Make constructors and destructors return void</a> (WIP)</li>
</ul>
<p>We can see there is a handful of changes <strong>towards more strict and reliable types</strong>. We are moving from docblocks to in-code types.</p>
<p><strong>We can expect</strong> similar future for constants. Maybe even sooner before <code>TypedArrays[]</code> will be added.</p>
<p><strong>In 2015, we wished for typed properties, and in 2020 we have union strictly typed properties</strong>. We can go for typed constants now.</p>
<blockquote class="blockquote text-center mt-5 mb-5">
Check trends to predict code syntax,<br>
and write future compatible code your children will thank you for.
</blockquote>
<p><br></p>
<h2 id="let-computer-work-for-you">Let Computer work For You</h2>
<p><a href="/blog/2020/01/13/why-is-first-instant-feedback-crucial-to-developers/">The sooner you discover the error</a>, the better.</p>
<p>Do you use continuous integration (Github Actions, Gitlab CI, Travis CI...) and PHPStan? Add <a href="https://github.com/symplify/coding-standard#constant-type-must-match-its-value">PHPStan rule that checks <code>@var</code> definition vs the real value</a>.</p>
<pre><code class="language-diff"> &lt;?php

 final class SomeClass
 {
     /**
      * @var string
      */
-    private const ORDER = 'first';
+    private const ORDER = 1;
 }</code></pre>
<p>If this change occurs in pull-request, the CI will tell you it's not consistent with the <code>@var</code> type.</p>
<p>This way, you'll be <strong>aware of the type change right before the merge</strong>, which is much better than 2 years later after 4 hours of debugging. Trust me.</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/06/22/why-class-constants-should-be-typed</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 22 Jun 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/06/22/why-class-constants-should-be-typed#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to create a Monorepo from Existing Repositories in 7 Steps ]]></title>
                <link>https://tomasvotruba.com/blog/2020/06/15/how-to-create-monorepo-from-existing-repositories-in-7-steps</link>
                <description><![CDATA[ <p>It seems like PHP companies are opening to <strong>the most comfortable way to manage multiple projects and packages at once</strong>.
<br>
<br>
I've heard questions like &quot;how do we make monorepo if have like 15 repositories?&quot; <strong>3 times just last month</strong> - from the Czech Republic, Croatia, and the Netherlands.
<br>
<br>
I'm so happy to see this because lazy dev = happy dev, happy dev = easy code to read.
<br>
So how to start a monorepo if you already have existing repositories?</p> ]]></description>
                <content:encoded><![CDATA[ <p><strong>Disclaimer</strong>: are you're into git history? Read <a href="https://www.shopsys.com/how-to-merge-15-repositories-to-1-monorepo-keep-their-git-history-and-add-project-base-as-well-6e124f3a0ab3">How to Merge 15 Repositories to 1 Monorepo, Keep their Git History and add Project-Base as Well?</a>.</p>
<p>In practice, keeping git history before merging <strong>is not worth the invested time</strong>. Why?</p>
<ul>
<li>A) It takes you 4-6 weeks to figure out how <code>git</code> works in merging to different paths</li>
<li>B) Then it takes you 1-2 weeks to balance all packages together code-wise - pull-request, that change paths anyway, move code, refactor it, merge classes, etc.</li>
</ul>
<p>If you want to bump your company about a massive pile of money for low gain and want it, go for A + B.</p>
<p>I'm an honest and pragmatic developer, and my customers want to deliver features, not to play around technology sandbox, so we <strong>always take path B</strong>.</p>
<p><br></p>
<p>Now that's clear, let's <strong>dive in to merge practice</strong>.</p>
<p><br>
<br></p>
<h2 id="what-repositories-do-you-have">What Repositories do you Have?</h2>
<p>The right time to think about monorepo is usually around 5 repositories. The longer you wait, the more you'll add to your future developers - exponentially. Companies typically get the idea around 15 repositories - we'll work with only 2, but apply the same for whatever count.</p>
<p>First repository: <code>lazy-company/ecoin-payments</code></p>
<p>With following code:</p>
<pre><code class="language-bash">/src
/test
composer.json
ecs.php
phpstan.neon
phpunit.xml
rector-ci.php</code></pre>
<p>Second repository: <code>lazy-company/drone-delivery</code></p>
<p>With following code:</p>
<pre><code class="language-bash">/src
/test
composer.json
ecs.php
phpstan.neon
phpunit.xml
rector-ci.php</code></pre>
<h2 id="1-create-a-monorepo-repository">1. Create a Monorepo repository</h2>
<p>Go to your Gitlab or Github and create a new repository. Name it <code>lazy-company/lazy-company</code> (by convention) or <code>lazy-company/lazy-company-monorepo</code> (in case the previous is taken).</p>
<p>Clone it locally.</p>
<h2 id="2-copy-repositories-to-code-packages-code">2. Copy Repositories to <code>/packages</code></h2>
<p>Don't worry, no git harakiri. Just copy paste your other repositories to <code>/packages</code> directory:</p>
<pre><code class="language-bash">/packages
    /ecoin-payments
        /src
        /test
        composer.json
        ecs.php
        phpstan.neon
        phpunit.xml
        rector-ci.php
    /drone-delivery
        /src
        /test
        composer.json
        ecs.php
        phpstan.neon
        phpunit.xml
        rector-ci.php</code></pre>
<p>Not bad, right?</p>
<h2 id="3-merge-all-code-composer-json-code-to-root-one">3. Merge all <code>composer.json</code> to Root One</h2>
<p>In the root directory, we only have the directory with all packages:</p>
<pre><code class="language-bash">/packages</code></pre>
<p>But where is <code>composer.json</code>? We can <del>create it manually</del> use a CLI tool that does it for us - <a href="https://github.com/symplify/monorepo-builder">MonorepoBuilder</a>.</p>
<p>Use <a href="/blog/2019/12/02/how-to-box-symfony-app-to-phar-without-killing-yourself/">prefixed version</a> to avoid dependency conflicts with your packages.</p>
<pre><code class="language-bash">composer require symplify/monorepo-builder-prefixed --dev</code></pre>
<p>Now that we have <a href="/blog/2018/10/08/new-in-symplify-5-create-merge-and-split-monorepo-with-1-command/">this power-tool for working</a> with monorepo, we can do:</p>
<pre><code class="language-bash">vendor/bin/monorepo-builder merge</code></pre>
<p>And...</p>
<img src="/assets/images/posts/2020/monorepo_builder_merge.png" class="img-thumbnail">
<p>Damn, what is this?</p>
<h2 id="4-balance-external-dependencies">4. Balance External Dependencies</h2>
<p>We have to look into <code>composer.json</code> files to find out what happened:</p>
<pre><code class="language-json">{
    "name": "lazy-company/ecoin-payments",
    "require": {
        "symfony/http-kernel": "^4.4|^5.0"
    }
}</code></pre>
<p>and</p>
<pre><code class="language-json">{
    "name": "lazy-company/drone-delivery",
    "require": {
        "symfony/http-kernel": "^3.4|^4.4"
    }
}</code></pre>
<p>We have 2 packages that require <strong>different versions of the same dependency</strong>. One allows Symfony 3; the other does not, but can run on Symfony 5.</p>
<p>What version do they share?</p>
<ul>
<li><code>^4.4</code></li>
</ul>
<p>The number <strong>must be identical for all packages</strong>. One package cannot have <code>^4.3</code>, and the other <code>^4.4</code>.</p>
<pre><code class="language-diff"> {
     "name": "lazy-company/ecoin-payments",
     "require": {
-        "symfony/http-kernel": "^4.4|^5.0"
+        "symfony/http-kernel": "^4.4"
     }
 }</code></pre>
<p>and:</p>
<pre><code class="language-diff"> {
     "name": "lazy-company/drone-delivery",
     "require": {
-        "symfony/http-kernel": "^3.4|^4.4"
+        "symfony/http-kernel": "^4.4"
     }
 }</code></pre>
<h3 id="the-easiest-common-version-problem">The Easiest, Common Version Problem</h3>
<p>We have to figure out <strong>the package version that would be easier to use</strong>. Sometimes the new version requires some refactoring.</p>
<p>In current project I migrate 15 packages, that have these requirements:</p>
<ul>
<li>A: &quot;symfony/http-kernel&quot;: &quot;^5.0&quot;</li>
<li>B: &quot;symfony/http-kernel&quot;: &quot;^3.4&quot;</li>
<li>C: &quot;symfony/http-kernel&quot;: &quot;^2.8&quot;</li>
</ul>
<p>If we pick <code>^3.4</code>, we have to make sure the code of A and C packages will be updated or downgraded to that version. You get the idea.</p>
<p><br></p>
<p>When we have all versions synced, we can run the merge command:</p>
<pre><code class="language-bash">vendor/bin/monorepo-builder merge</code></pre>
<p>Tadá!</p>
<p>We should see something like this:</p>
<pre><code class="language-json">{
    "require": {
        "symfony/http-kernel": "^4.4"
    },
    "require-dev": {
        "symplify/monorepo-builder-prefixed": "^8.0"
    },
    "replace": {
        "lazy-company/drone-delivery": "self.version",
        "lazy-company/ecoin-payments": "self.version"
    }
}</code></pre>
<p>Do you? Good!</p>
<p><br></p>
<p>What is the <code>replace</code> section? We'll use it in step 5 ↓</p>
<h2 id="5-balance-mutual-dependencies">5. Balance Mutual Dependencies</h2>
<p>It's standard that packages depend on each other. Drone delivery is a service a customer pays for - with bitcoins. So we need it here:</p>
<pre><code class="language-json">{
    "name": "lazy-company/drone-delivery",
    "require": {
        "symfony/http-kernel": "^4.4",
        "lazy-company/ecoin-payments": "^2.0"
    }
}</code></pre>
<p>What if 2 packages require a different version of the same package?</p>
<ul>
<li>A. &quot;lazy-company/ecoin-payments&quot;: &quot;^2.0&quot;</li>
<li>B. &quot;lazy-company/ecoin-payments&quot;: &quot;^3.0&quot;</li>
</ul>
<p>Do we apply the same approach as in step 4? <strong>No</strong>. Instead of the most accessible common version, we'll go with <strong>the latest version</strong> - <code>^3.0</code>.</p>
<p>These numbers also tell us what the first monorepo release version will be. It has to be a <a href="https://semver.org">major version</a> because there will be BC breaks: so ^4.0.</p>
<p><br></p>
<h3 id="what-about-that-code-replace-code">What about that <code>replace?</code></h3>
<p>Here we also use the <a href="https://getcomposer.org/doc/04-schema.md#replace"><code>replace</code> composer feature</a>.</p>
<p>If we run <code>composer install</code> in monorepo, it will install all dependencies of <code>lazy-company/drone-delivery</code>. This package needs <code>lazy-company/ecoin-payments</code> (the other package). Normally, the composer would go to Packagist and download the package to <code>/vendor</code>. But that might end-up in collision:</p>
<pre><code class="language-bash">/packages/ecoin-payments/src # some code
/vendor/lazy-company/ecoin-payments/src # same code?</code></pre>
<p>The <code>replace</code> option tells the composer not to download anything because the <code>lazy-company/ecoin-payments</code> is already in <code>/packages/ecoin-payments/src</code>.</p>
<pre><code class="language-diff"> /packages/ecoin-payments/src
-/vendor/lazy-company/ecoin-payments/src</code></pre>
<h2 id="6-merge-static-analysis-tools-to-run-on-root-only">6. Merge Static Analysis tools to Run on Root Only</h2>
<p>All right, we have working <code>composer.json</code> with united versions. That was the most challenging part, so great job!</p>
<p>No, we need to <a href="/cleaning-lady-checklist">clean configs</a> of tools that help us with daily development:</p>
<ul>
<li>ECS</li>
<li>PHPStan</li>
<li>Rector</li>
<li>...</li>
</ul>
<p>Instead of many configs, paths, setups, and rules, there is only 1 source of Truth - root configs.</p>
<pre><code class="language-diff"> /packages
     /ecoin-payments
         /src
         /test
         composer.json
-        ecs.php
-        phpstan.neon
         phpunit.xml
-        rector-ci.php
     /drone-delivery
         /src
         /test
         composer.json
-        ecs.php
-        phpstan.neon
         phpunit.xml
-        rector-ci.php
+ecs.php
+phpstan.neon
+rector-ci.php</code></pre>
<p>This step is pretty easy... well, it depends.</p>
<p><strong>What is the thing that can happen?</strong> One of your packages has PHPStan level 1, but all others have PHPStan 8.</p>
<p>We can either take time and update the PHPStan level 1 to 8 or lower all to 1. I'd go with <em> drop all to 1</em> options now, and do this after creating the monorepo. If we mix too many tasks at once, we can prolong <em>build a monorepo</em> tasks for weeks.</p>
<p><br></p>
<p>Pro-tip: do you want to make sure all versions of all dependencies of all <code>composer.json</code> files have united version?</p>
<pre><code class="language-bash">vendor/bin/monorepo-builder validate</code></pre>
<h2 id="7-merge-tests-to-root-code-phpunit-xml-code">7. Merge tests to root <code>phpunit.xml</code></h2>
<p>Very similar to step 6, just with unit tests.</p>
<pre><code class="language-diff"> /packages
     /ecoin-payments
         /src
         /test
         composer.json
-        phpunit.xml
     /drone-delivery
         /src
         /test
         composer.json
-        phpunit.xml
 ecs.php
 phpstan.neon
 rector-ci.php
+phpunit.xml</code></pre>
<p>Update paths in <code>phpunit.xml</code> and prepare a common environment for all tests.</p>
<p><br></p>
<p>In the end, we have to be able to run:</p>
<pre><code class="language-bash">vendor/bin/phpunit</code></pre>
<p>And see the result of all tests.</p>
<p>Everything else will be more complicated than it has to, will annoy us, and demotivate us from actually writing the tests. <strong>So make it easy and simple</strong>.</p>
<p><br></p>
<p>If you're serious about monorepo testing, read <a href="/blog/2018/11/22/how-to-test-monorepo-in-3-layers/">How to Test Monorepo in 3 Layers</a>.</p>
<h2 id="final-touches">Final Touches</h2>
<p>Don't forget to add <code>.gitignore</code> with <code>/vendor</code>. Then <code>git push</code> and we're finished.</p>
<p>Congrats!</p>
<p><br></p>
<h2 id="where-to-go-next">Where to go next?</h2>
<p>Be sure to read each post from <a href="/clusters/#monorepo-from-zero-to-hero/">Monorepo: From Hero to Zero</a>.</p>
<p>Then go to your Gitlab or Github and make your <code>company/company-monorepo</code> package. It's easier when you start.</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/06/15/how-to-create-monorepo-from-existing-repositories-in-7-steps</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-08-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Aug 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/06/15/how-to-create-monorepo-from-existing-repositories-in-7-steps#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Drop RobotLoader and let Composer Deal with Autoloading ]]></title>
                <link>https://tomasvotruba.com/blog/2020/06/08/drop-robot-loader-and-let-composer-deal-with-autoloading</link>
                <description><![CDATA[ <p>Using 2 tools for one thing, in this case 2 packages to autoload classes, are sign of an architecture smell. Many applications I see contain RobotLoader for historical reasons. I will borrow this from psychology: pathological behavioral patterns tear us down in the present, but were useful in past.
<br><br>
The best way to deal with them is acknowledge their purpose and then, let them go and enjoy the gift of present.</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="where-is-robotloader-useful">Where is RobotLoader Useful</h2>
<p><a href="https://doc.nette.org/en/auto-loading#toc-nette-loaders-robotloader">RobotLoader</a> is a Nette Component that is used to autoload classes. Its killer feature is simple: <strong>in whatever file it is and whatever the class name is, I will load it</strong>. You can have 20 classes in 1 file or classes located in various locations, they won't hide.</p>
<h2 id="before-composer-appeared-it-was-the-best">Before Composer appeared, it was The Best</h2>
<p>RobotLoader was a very useful tool in times before Composer, because <strong>there were not so many efficient tools for loading classes</strong>.</p>
<p>Also, when people could not agree upon where to put their classes, how to name them, whether use or don't use namespace and how many classes to put in one file, we can say <strong>this tool saved a lot of argument-hours</strong>.</p>
<p>After many discussions, followed by the first standard, <a href="http://www.php-fig.org/psr/psr-0">PSR-0</a>, people agreed upon <a href="http://www.php-fig.org/psr/psr-4">PSR-4</a>, a more mature replacement of PSR-0.</p>
<h2 id="why-it-s-not-anymore">Why it's not Anymore</h2>
<p>Have your heard about PSR-4? It is a <em>PHP Standard Recommendation</em> about naming and location of the classes. This says you completely nothing, but in the simplest form it means:</p>
<p><strong>1 class</strong> (or interface/trait) = <strong>1 file</strong></p>
<p><strong>class name</strong> = <strong>file name</strong>.php</p>
<p><strong>namespace\class name</strong> = <strong>directory/file name</strong>.php</p>
<pre><code class="language-bash"># class =&gt; file
MyClass =&gt; MyClass.php
App\MyClass =&gt; App/MyClass.php
App\Presenter\MyClass =&gt; App/Presenter/MyClass.php</code></pre>
<p>I know I can rely on this in 99% of places when <code>composer.json</code> is used.</p>
<p>When I see <code>App\Presenter\MyClass</code> I  it's located in <code>App/Presenter/MyClass.php</code> file.</p>
<p>And this is the place where <strong>RobotLoader</strong> (or any custom ultimate loader) <strong>fails</strong>. I came around many applications where classes are located at random. And I had to use my brain to find them. But I don't want to focus my mental activity on thinking about their location, <strong>I want to develop my application</strong>.</p>
<h2 id="how-to-move-to-composer-in-a-nette-application">How to move to Composer in a Nette application?</h2>
<p>There are 2 levels of how to achieve this.</p>
<h3 id="level-1-change-your-composer">Level 1: Change your Composer</h3>
<p>The first level requires 3 small steps.</p>
<h4 id="1-tune-code-composer-json-code-autoloading">1. Tune <code>composer.json</code> Autoloading</h4>
<pre><code class="language-json">{
    "require": {
        "..."
    },
    "autoload": {
        "psr-4": {
            "App\\Forms\\": "app/forms",
            "App\\Model\\": "app/model",
            "App\\Presenters\\": "app/presenters",
            "App\\Router\\": "app/router"
        }
    }
}</code></pre>
<p>This means, all classes residing in <code>App\\Forms</code> namespace have to be located in <code>app/forms</code> directory.</p>
<p>One important rule - it works in <strong>case-sensitive</strong> manner.</p>
<p>So this will work:</p>
<pre><code class="language-bash">App\Presenters\HomepagePresenter =&gt; app/presenters/HomepagePresenter.php</code></pre>
<p>But this will not:</p>
<pre><code class="language-bash">App\Presenters\HomepagePresenter =&gt; app/presenters/homepagePresenter.php</code></pre>
<h4 id="2-disable-robotloader">2. Disable RobotLoader</h4>
<p>Now you can clean up your <code>app/bootstrap.php</code>:</p>
<pre><code class="language-php">// $configurator-&gt;createRobotLoader()
//      -&gt;addDirectory(__DIR__)
//      -&gt;register();</code></pre>
<p>But RobotLoader is still silently enabled for presenters. We don't want that either now:</p>
<pre><code class="language-yaml"># app/config/config.neon
application:
    scanDirs: false</code></pre>
<h4 id="3-refresh-composer-autoloading">3. Refresh Composer Autoloading</h4>
<p>And tell Composer, to regenerate its autoloader:</p>
<pre><code class="language-bash">composer dump-autoload</code></pre>
<p>Note: This command is run by default after <code>composer update</code>, <code>composer require ...</code> and similar commands. Since we'd manually changed our <code>autoload</code> section, we had to run it manually.</p>
<p>Now try our application and it should run.</p>
<p><strong>You are finished and all your classes are loaded by Composer.</strong> Congratulations!</p>
<h3 id="level-2-rename-directories-to-capital-case-to-respect-psr-4">Level 2: Rename Directories to capital case, to Respect PSR-4</h3>
<p>There is one more level I do with my applications, so my <code>composer.json</code> is nice and clear. But this is optional. Do it only if you'd like to write better code with lower WTF factor!</p>
<p>Turn this:</p>
<pre><code class="language-bash">/app
    /forms
    /model
    /presenters
    /routing
    /...</code></pre>
<p>Into this:</p>
<pre><code class="language-bash">/app
    /Forms
    /Model
    /Presenters
    /Routing
    /...</code></pre>
<p>After these steps, you can simplify your <code>autoload</code> section as such:</p>
<pre><code class="language-json">{
    "autoload": {
        "psr-4": {
            "App\\": "app"
        }
    }
}</code></pre>
<p>Don't forget to run:</p>
<pre><code class="language-bash">composer dump-autoload</code></pre>
<p>And you've unlocked Level 2.</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/06/08/drop-robot-loader-and-let-composer-deal-with-autoloading</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 08 Jun 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-06-01UTC00:00:000</updated>
                    <atom:updated>Mon, 01 Jun 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Mon, 01 Jun 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/06/08/drop-robot-loader-and-let-composer-deal-with-autoloading#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ @inject or @required will Get You Any Services Fast ]]></title>
                <link>https://tomasvotruba.com/blog/2020/06/01/inject-or-required-will-get-you-any-service-fast</link>
                <description><![CDATA[ <p>It is official. Symfony 5.1 <a href="https://symfony.com/blog/new-in-symfony-5-1-autowire-public-typed-properties">adds property injection to public properties</a>.
Now, <code>@inject</code> or <code>@required</code> annotation above property or setter method is the fastest way to get any dependency on any service in your Symfony or Nette project.
<br><br>
Use it everywhere you can... or not?</p> ]]></description>
                <content:encoded><![CDATA[ <p>This post is about one of the practices that give me work as a legacy cleaning lady. Read carefully - you can decide if your project will be the next client or you'll build reliable code that is fun to work with.</p>
<p><br></p>
<p>Do you <strong>like long repeated code with the same meaning over and over again</strong>?</p>
<p><br></p>
<p>Why write long and tedious constructors in 25 lines...</p>
<pre><code class="language-php">&lt;?php

use Twig\Environment;
use Latte\Engine;

final class TemplateFactory
{
    /**
     * Symfony way
     * @var Environment
     */
    private $environment;

    /**
     * Nette way
     * @var Engine
     */
    private $engine;

    public function __construct(Environment $environment, Engine $engine)
    {
        $this-&gt;environment = $environment;
        $this-&gt;engine = $engine;
    }
}</code></pre>
<p>...when you can do property injection with only <strong>17 lines</strong> and same effect:</p>
<pre><code class="language-php">&lt;?php

use Twig\Environment;
use Latte\Engine;

final class TemplateFactory
{
    /**
     * @required
     */
    public Environment $environment;

    /**
     * @var Engine
     * @inject
     */
    public $engine;
}</code></pre>
<p>Let me show you what you are inviting to your code by the second choice.</p>
<h2 id="1-public-property-service-override">1. Public Property - Service Override?</h2>
<p>At the start of the project, it's very easy to see what is right and what is wrong. But as time goes by, <strong>people will start to use everything they can to add a feature or fix the bug as fast possible</strong>. I do that all the time.</p>
<pre><code class="language-php">&lt;?php

use Twig\Environment;

final class EmailSender
{
    /**
     * @var TemplateFactory
     */
    private $templateFactory;

    /**
     * @var Environment
     */
    private $emailOnlyEnvironment;

    public function __construct(TemplateFactory $templateFactory, Environment $emailOnlyEnvironment)
    {
        $this-&gt;templateFactory = $templateFactory;
        $this-&gt;emailOnlyEnvironment;
    }

    public function sendInvoiceEmail(string $emailTo)
    {
        // hm... we need that custom Twig service here because it has extra macros/filters that are used only in emails

        // how can we do that?

        // ah, this will do
        $this-&gt;templateFactory-&gt;engine = $this-&gt;emailOnlyEnvironment;

        $template = $this-&gt;templateFactory-&gt;create();
        // ...
    }
}</code></pre>
<h3 id="would-you-accept-this-code-in-code-review">Would You Accept this Code in Code-Review?</h3>
<ul>
<li>What service is in the <code>$this-&gt;templateFactory-&gt;engine</code> property?</li>
<li>How many weeks will it take to forget this <del>trick</del> hack?</li>
<li>How many will be the <code>TemplateFactory</code> used for emails, and how many for web templates?</li>
</ul>
<h3 id="practise-makes-perfect">Practise Makes Perfect</h3>
<p>Do you think this is a good practice? If so, I dare you: add such <strong>service override feature</strong> to your code and code as nothing happened. After 30 days, get back here and let me know in the comments how did your colleagues liked it.</p>
<h2 id="2-circular-reference-for-blind-people">2. Circular Reference for Blind People?</h2>
<p>Let's have a simple contest. Who will be first?</p>
<p>This example is oversimplified - 2 classes are easy to debug. Recent projects I work with have 1000-2000 classes... so for real-life use case imagine this is 1000x longer example.</p>
<pre><code class="language-php">&lt;?php

use Twig\Environment;

final class EmailSender
{
    /**
     * @inject
     * @var TemplateFactory
     */
    public $templateFactory;
}</code></pre>
<p>We need to send an email to admin if template engine rendering fails.</p>
<pre><code class="language-php">&lt;?php

use Twig\Environment;

final class CustomEnvironment extends Environment
{
    /**
     * @inject
     * @var EmailSender
     */
    public $emailSender;

    public function renderTemplate(string $template)
    {
        try {
            // ...
        } catch (Throwable) { // new PHP 8.0 syntax ^^
            $this-&gt;emailSender-&gt;sendRenderFailedMessageToAdmin();
        }
    }
}</code></pre>
<h3 id="would-you-accept-this-code-in-code-review">Would You Accept this Code in Code-Review?</h3>
<ul>
<li>How do you know what service is where when?</li>
<li>What could happen in the case of race-condition?</li>
<li>What stops you from using <code>StaticMethods::everywhere()</code>?</li>
<li>How does the dependency tree look like now?</li>
</ul>
<p>Some frameworks container will tell you there is circular dependency and fail with an exception. Some would let it silently slip.</p>
<p>Either way, your code is now opened to issue, when at <strong>2 different times, there are 2 different values in one property</strong>. Similar issue to previous one, just more <em>fun</em> to debug.</p>
<h2 id="why-we-have-code-inject-required-code-anyway-and-when-to-use-it">Why we Have <code>@inject/@required</code> anyway and When to Use it?</h2>
<p>Nette is trying to limit this by suggestion, that <code>@inject</code> should be <a href="https://doc.nette.org/en/3.0/di-usage#toc-which-way-should-i-choose"><strong>used only in presenters</strong></a>. No surprise, that project I work with now have it in almost every dependency of every presenter.</p>
<p>Also, it takes about 20 lines of PHP code to enable this in every service. It might still be in one of the top 5 e-commerce projects in The Czech Republic.</p>
<p><a href="https://symfony.com/doc/current/service_container/injection_types.html#immutable-setter-injection">Symfony has similar feature</a>, but without any scope limitation, as far as I know</p>
<p><br></p>
<p>What can you do about it?</p>
<p>Well, in complicated times of circular dependencies, public property override and service juggling, it helps to get back to the basics: <strong>what is the best use case for <code>@required</code>/<code>@inject</code>?</strong></p>
<ul>
<li>Getting a dependency? <strong>No</strong></li>
<li><a href="https://ocramius.github.io/blog/eliminating-visual-debt">Eliminating visual dept</a>? <strong>No</strong></li>
<li>Using the <em>my-favorite</em> framework the fullest? <strong>No</strong></li>
</ul>
<p>Why add such a feature, if there is no reason to use it?</p>
<p><br></p>
<p>The main reason for this feature is to prevent <strong>constructor injection hell</strong>.</p>
<p>David Grudl <a href="https://phpfashion.com/di-a-predavani-zavislosti">wrote about it 8 years ago</a> (in Czech):</p>
<pre><code class="language-php">&lt;?php

class Barbar extends Foobar
{
   private $logger;

   function __construct(HttpRequest $httpRequest, Router $router, Session $session, Logger $logger)
   {
      parent::__construct($httpRequest, $router, $session);
      $this-&gt;logger = $logger;
   }
}</code></pre>
<p>You can also find other <a href="https://www.rhyous.com/2016/09/27/constructor-injection-hell">sources in English</a>.</p>
<p>But programmers don't know about constructor injection hell. Why? Simply because there <a href="https://blog.codinghorror.com/the-just-in-time-theory">was no exception in the code, when they used <code>@inject</code></a>. We just use features that were given to us by the framework.</p>
<blockquote class="blockquote text-center">
    "Everything which is not forbidden,
     <br>
     is allowed"
</blockquote>
<p><br></p>
<h2 id="rule-of-thumb-abstract-parent-only">Rule of Thumb: Abstract Parent Only</h2>
<p>Saying that the place <code>@inject</code>/<code>@required</code> is designed for is dependency in <code>abstract</code> class. But not every <code>abstract</code> class! Just those that have children with more dependencies, that would require to put <code>parent::__construct()</code> repeated in every child.</p>
<pre><code class="language-php">&lt;?php

abstract class AbstractRepository
{
    protected EventDispatcherInterface $eventDispatcher;

    /**
     * @required
     */
    public function injectEventDispatcher(EventDispatcherInterface $eventDispatcher)
    {
        $this-&gt;eventDispatcher = $eventDispatcher;
    }
}</code></pre>
<pre><code class="language-php">&lt;?php

final class ProductRepository extends AbstractRepository
{
    protected ProductEntityFactory $productEntityFactory;

    public function __construct(ProductEntityFactory $productEntityFactory)
    {
        $this-&gt;productEntityFactory = $productEntityFactory;
        // no parent::__construct() in every repository - yay!
    }
}</code></pre>
<p><em class="fas fa-fw fa-check text-success fa-lg"></em></p>
<p><em>Note: prefer &quot;inject&quot; method over public property to lower risk of 2 bugs mentioned in the start of the post.</em></p>
<p>That's it! And soon, hopefully, I'll be out of work.</p>
<p><br></p>
<p>Now, all we need is <strong>to create a PHPStan rule</strong>, that allows <code>@inject</code>/<code>@required</code> (and setter method alternatives) in <code>abstract</code> classes. Then you can forget this post and be safe for eternity.</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/06/01/inject-or-required-will-get-you-any-service-fast</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/06/01/inject-or-required-will-get-you-any-service-fast#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ The Bulletproof Event Naming For Symfony Event Dispatcher ]]></title>
                <link>https://tomasvotruba.com/blog/2020/05/25/the-bulletproof-event-naming-for-symfony-event-dispatcher</link>
                <description><![CDATA[ <p>I wrote <a href="/blog/2019/08/05/standalone-symfony-event-dispatcher-from-the-scratch/">intro to Symfony\EventDispatcher</a> and how to use it with simple event.
<br><br>
But when it comes to dispatching events, you can choose from 4 different ways. Which one to choose and why? Today I will show you pros and cons of them to make it easier for you.</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="1-start-with-em-stringly-em">1. Start with <em>Stringly</em></h2>
<p>You can start with simple <em>string named event</em>:</p>
<pre><code class="language-php">$postEvent = new PostEvent($post);
$this-&gt;eventDispatcher-&gt;dispatch('post_added', $postEvent);</code></pre>
<p>Simple for start and easy to use for one place and one event.</p>
<p>One day I started to use in more places:</p>
<pre><code class="language-php">$postEvent = new PostEvent($post);
$this-&gt;eventDispatcher-&gt;dispatch('post_add', $postEvent);</code></pre>
<p>All looked good, but <strong>the subscriber didn't work</strong>. Fun time with event subscribers debugging was about to come.</p>
<p>Hour has passed. Event subscriber was registered as a service, tagged, collected by dispatcher... but I still couldn't find the issue. So I showed it to my colleague:</p>
<p><em>Oh, you've got &quot;post_add&quot; there, but there should be &quot;post_added&quot;.</em></p>
<p>YAY! I copied the previous subscriber with &quot;post_added&quot; but <strong>I made a typo</strong> while dispatching event.</p>
<p>There must be a cure for this, I wished.</p>
<h2 id="2-group-file-with-events-names-as-constants">2. Group File with Events Names as Constants</h2>
<p>Then I got inspired by Symfony <a href="https://github.com/symfony/symfony/blob/d203ee33954f4e0c5b39cdc6224fe4fb96cac0c3/src/Symfony/Component/Console/ConsoleEvents.php"><code>ConsoleEvents</code> class</a> that collects all events from one domain in constants.</p>
<pre><code class="language-php">final class PostEvents
{
    /**
     * This event is invoked when post is added.
     * It is called here @see \App\Post\PostService::add().
     * And @see \App\Events\PostAddedEvent class is passed.
     *
     * @var string
     */
    public const ON_POST_ADDED = 'post_added';

    /**
     * This event is invoked when post is published.
     * It is called here @see \App\Post\PostService::published().
     * And @see \App\Events\PostPublishedEvent class is passed.
     *
     * @var string
     */
    public const ON_POST_PUBLISHED = 'post_published';
}</code></pre>
<p>Our first example will change from <em>stringly</em> to <em>strongly</em> typed:</p>
<pre><code class="language-php">$postAddedEvent = new PostAddedEvent($post);
$this-&gt;eventDispatcher(PostEvents::ON_POST_ADDED, $postAddedEvent)</code></pre>
<p>Also subscriber becomes typo-proof:</p>
<pre><code class="language-php">final class TagPostSubscriber implements SubscriberInterface
{
    public static function getSubscribedEvents(): array
    {
        return [PostEvents::ON_POST_ADDED =&gt; 'tagPost'];
    }

    public function tagPost(PostAddedEvent $postAddedEvent): void
    {
        // ...
    }
}</code></pre>
<h3 id="pros">Pros</h3>
<ul>
<li>All events are in one place.</li>
<li>Easy to orientate for new programmer what events he or she can use.</li>
<li>IDE helps you with constant autocompletion.</li>
</ul>
<h3 id="cons">Cons</h3>
<ul>
<li>One class to store all events <strong>breaks <a href="https://github.com/wataridori/solid-php-example/blob/master/2-open-closed-principle.php">open-closed principle</a></strong>.
<ul>
<li>To add new event I have to put it here as well - human memory vulnerable.</li>
</ul></li>
<li>Your have to come up with <strong>long annotation description above constant</strong>:
<ul>
<li>where is used (one place or all),</li>
<li>link the event class with IDE-compatible notation, e.g. <code>EventClass</code> doesn't work in PHPStorm, but <code>@see EventClass</code> does</li>
</ul></li>
</ul>
<p>The more events you have the harder is this to maintain properly. With 5th event you might end up like this:</p>
<pre><code class="language-php">final class PostEvents
{
    /**
     * This event is invoked when post is published.
     * It is called here @see \App\Post\PostService::published().
     * And @see \App\Events\PostPublishedEvent class is passed.
     *
     * @var string
     */
    public const ON_POST_PUBLISHED = 'post_published';

    // 3 more nicely annotated events...

    public const ON_POST_CHANGED = 'changed';
}</code></pre>
<p>I wanted to respect open-closed principle, so global class was a no-go.</p>
<p>Maybe, I could put those...</p>
<h2 id="3-constant-names-in-particular-event-classes">3. Constant Names in Particular Event Classes</h2>
<p>Like this:</p>
<pre><code class="language-php">final class PostAddedEvent
{
    /**
     * @var string
     */
    public const NAME = 'post_added';

    /**
     * @var Post
     */
    private $post;

    public function __construct(Post $post)
    {
        $this-&gt;post = $post;
    }
}</code></pre>
<p>Our example is now <em>strongly</em> typed and <strong>respects open-closed principle</strong>:</p>
<pre><code class="language-php">$postAddedEvent = new PostAddedEvent($post);
$this-&gt;eventDispatcher(PostAddedEvent::NAME, $postAddedEvent)</code></pre>
<p>Like this!</p>
<h3 id="pros">Pros</h3>
<p><strong>All the above +</strong></p>
<ul>
<li>Easy to refactor event name.</li>
<li>No more human error in event name typos.</li>
</ul>
<h3 id="cons">Cons</h3>
<ul>
<li>You still need a human brain computation to keep <code>constant NAME = '...'</code> unique per-class.</li>
<li>Beautiful place for error and long nights of debugging.</li>
</ul>
<p><strong>Take a step back</strong>: what is my goal?</p>
<p>I look for an identifier that is:</p>
<ul>
<li><strong>unique per class</strong></li>
<li><strong>constant</strong> (in both meanings if possible)</li>
<li><strong>IDE friendly</strong></li>
<li><strong>coupled to Event class</strong> in any way</li>
<li>doesn't allow me to make naming errors and typos</li>
</ul>
<p>Can you see it? I think you do :)</p>
<h2 id="4-class-based-event-naming">4. Class-based Event Naming</h2>
<pre><code class="language-php">$postAddedEvent = new PostAddedEvent($post);
$this-&gt;eventDispatcher(PostAddedEvent::class, $postAddedEvent)</code></pre>
<p>It could not be simpler and meets all the conditions!</p>
<h3 id="pros">Pros</h3>
<p>All 4 reasons above +</p>
<ul>
<li><strong>It's typo-proof</strong></li>
<li>It uses PHP <strong>native <code>::class</code> support</strong>.</li>
<li>It's addictively easy.</li>
</ul>
<h2 id="which-type-do-you-like">Which Type Do You Like?</h2>
<p>This is my story for event naming evolution. But what is yours - <strong>which event naming system do you use</strong>? I'm curious and ready to be wrong, so please let me know in the comments if you like it or do it any different way.</p>
<h3 id="taking-it-step-further">Taking it Step Further</h3>
<p><a href="http://enumag.cz">Enumag</a> suggested such different way by removing first argument:</p>
<pre><code class="language-php">public function dispatch(Event $event): void
{
    $this-&gt;eventDispatcher-&gt;dispatch(get_class($event), $event);
}</code></pre>
<p><strong>And exactly this is <a href="https://symfony.com/blog/new-in-symfony-4-3-simpler-event-dispatching">possible since Symfony 4.3</a></strong> (2019):</p>
<pre><code class="language-php">$postAddedEvent = new PostAddedEvent($post);
$this-&gt;eventDispatcher($postAddedEvent);

// or in case we don't need to get changed content from the event

$this-&gt;eventDispatcher-&gt;dispatch(new PostAddedEvent($post));</code></pre>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/05/25/the-bulletproof-event-naming-for-symfony-event-dispatcher</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-05-01UTC00:00:000</updated>
                    <atom:updated>Fri, 01 May 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Fri, 01 May 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/05/25/the-bulletproof-event-naming-for-symfony-event-dispatcher#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ The Future of Pehapkari Meetups and Training - You ]]></title>
                <link>https://tomasvotruba.com/blog/2020/05/18/the-future-of-pehapkari-meetups-and-trainings-you</link>
                <description><![CDATA[ <p>Last 2 months gave lot of time to reflect my activities, work and hobbies. One of the topic I think about a lot is our Czech PHP Community - <a href="https://pehapkari.cz">Pehapkari</a>. I felt like last year I'm not giving it as much energy as before. But why?</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="why-were-pehapkari-born">Why were Pehapkari born?</h2>
<p>In 2014, the only place to talk about PHP in the Czech Republic, was Nette forum. A place to bring all people of PHP, regardless their framework choice was missing. That's why Pehapkari (first year <em>Symfonisti</em>) were born.</p>
<p>Today, <strong>in 2020</strong> we have <a href="http://pehapkari.slack.com">Pehapkari Slack with 1600+ members</a>, where <strong>you can ask about anything you want. Instantly. Now. In Czech.</strong></p>
<p>Online works on itself, that's great. It took a <a href="https://pehapkari.cz/blog/2016/03/03/kolik-lidi-je-potreba-k-vytvoreni-jedne-komunity">huge effort of 25 people  to get there</a>. But <strong>what about offline</strong>? In 2019 we've organized ~10 meetups and 14 trainings, both in Prague. The rest of meetups is handled by companies themselves, e.g. PeckaDesign and Oxyshop in Brno by or DigitalSolutions in Pardubice.</p>
<p><br></p>
<p>Thank you all for your participation in our meetings over the past 5 years.</p>
<p>&quot;<em>That looks good. The most IT communities could dream of such activity. So what happened?</em></p>
<h2 id="my-priorities-have-changed-in-last-3-years">My Priorities Have changed in Last 3 years</h2>
<p>When I started community in 2015, I worked as part-time programmer to fund it. I got few open-source projects, mostly Czech Republic-related.</p>
<p>Now, 5 years later, I got a bit more on my plate.</p>
<ul>
<li>last 3 years I work on <a href="https://github.com/rectorphp/rector">Rector</a> - PHP community likes and uses it more and more (recently <a href="https://www.drupal.org/blog/accelerating-drupal-9-module-and-theme-readiness-with-automated-patches">Drupal officially announced</a> - it a upgrade tool for 8 → 9) - it takes almost part-time to maintain project on GitHub</li>
<li>contributing to open-source and writing posts takes more time to make it beneficial to world PHP community</li>
<li>I travel abroad to conferences and meetups, that bites off another piece of time and energy cake</li>
<li>also, my main language switched from Czech to English</li>
</ul>
<p>Saying that, I don't have as much time and energy to keep community running, as it needs. I won't be organizing more meetups or trainings, except those pre-contracted.</p>
<h2 id="do-you-want-meetups-and-training-to-continue">Do you want Meetups and Training to Continue?</h2>
<p><strong>I do, that's why I'm writing this post.</strong></p>
<p>I could continue in <em>stand-by</em> state for another year or two, make meetups now and then. I could say it's due to Corona. But I don't think that's <strong>responsible to the PHP Community, that <a href="https://pehapkari.cz/blog/2016/03/03/kolik-lidi-je-potreba-k-vytvoreni-jedne-komunity">you helped me to build</a></strong> - to you. I've seen few communities to slowly vanish in history, because founders were focused somewhere else, but didn't offer community member to take over.</p>
<p>So I'm offering you to take over my place and continue to grow, where I can't.</p>
<p><br></p>
<p><strong>Do you want to take over meetups?</strong></p>
<ul>
<li>Let me know. I'll try to pass you my know-how and give access to website, Twitter and Facebook.</li>
</ul>
<p><strong>Do you want to take over training from me?</strong></p>
<ul>
<li>Same thing, contact me and if we match, it's your direction.</li>
</ul>
<p><br></p>
<p><strong>I hope Czech PHP community strives in online or offline, and we continue to meet each other, find friends and help each other grow, as we did till now.</strong> I really wish that.</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/05/18/the-future-of-pehapkari-meetups-and-trainings-you</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/05/18/the-future-of-pehapkari-meetups-and-trainings-you#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Upgrade to Symplify 8 - From Fixers to Rector Rules ]]></title>
                <link>https://tomasvotruba.com/blog/2020/05/11/how-to-upgrade-to-symplify-8-from-fixers-to-rector-rules</link>
                <description><![CDATA[ <p>Symplify 8 is going to be released in the 2nd half of May. But as in Symfony, you can get ready for future version today.
<br><br>
<a href="/blog/2020/05/04/how-to-upgrade-to-symplify-8-from-sniffs-to-phpstan-rules/">In the previous post we upgraded Coding Standard from Sniffs to PHPStan</a>. Today we finish with 2nd half - <strong>from Fixers to Rector rules</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <p>When you run <a href="https://github.com/symplify/easy-coding-standard">ECS</a> with version 7.3+:</p>
<pre><code class="language-bash">vendor/bin/ecs check</code></pre>
<p>You might see such notices right before your code gets checked:</p>
<pre><code class="language-bash">PHP Notice:  Fixer "..." is deprecated. Use "..." instead</code></pre>
<h2 id="why-were-these-fixer-dropped">Why were These Fixer Dropped?</h2>
<p>You'll find answer to this question <a href="/blog/2020/05/04/how-to-upgrade-to-symplify-8-from-sniffs-to-phpstan-rules/">in previous post</a>. To extend answer specifically for this post: Fixer and Rector do the same job - <strong>they change code based on specific recipe</strong>.</p>
<h3 id="what-is-the-difference">What is the Difference?</h3>
<ul>
<li>Fixer works with <a href="https://www.php.net/manual/en/function.token-get-all.php">tokens</a> → which is <strong>great for spaces and <code>{}()</code> positions</strong> etc.,</li>
<li>Rector works with abstract syntax tree → <strong>great for refactoring, method/property position changes</strong>, rename across the code base, etc.</li>
</ul>
<p>Now we know <em>why</em>. Let's look <em>how</em> to deal with that.</p>
<h2 id="what-to-do-with-these-deprecations">What to do With These Deprecations?</h2>
<p>So what does it mean? Remove all the rules from <code>ecs.php</code> and let go?</p>
<p>No, <strong>all you need to do is switch to Rector rules</strong>. It's better working and more reliable since it works with context and not token positions. So at first, you might see new changes in your code.</p>
<h2 id="how-to-handle-upgrade-in-30-minutes">How to Handle Upgrade in 30 minutes?</h2>
<p>There are dozen deprecated fixers in total. Let's take it one by one.</p>
<p>First - if you don't have Rector, install it:</p>
<pre><code class="language-bash">composer require rector/rector --dev</code></pre>
<h2 id="1-no-empty-doc-block">1. No Empty Doc Block</h2>
<p>The <code>RemoveEmptyDocBlockFixer</code> rule basically copied behavior of native <code>NoEmptyPhpdocFixer</code>, so just it instead:</p>
<pre><code class="language-diff"> &lt;?php

 // ecs.php

 declare(strict_types=1);

 use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

 return static function (ContainerConfigurator $containerConfigurator): void {
     $services = $containerConfigurator-&gt;services();
-    $services-&gt;set(Symplify\CodingStandard\Fixer\Commenting\RemoveEmptyDocBlockFixer::class);
+    $services-&gt;set(PhpCsFixer\Fixer\Phpdoc\NoEmptyPhpdocFixer::class);
 };</code></pre>
<h2 id="2-preg-delimiter-character">2. Preg Delimiter Character</h2>
<p>The <code>PregDelimiterFixer</code> was checking consistent preg delimiter, in this case <code>#</code>:</p>
<pre><code class="language-diff"> class SomeClass
 {
     public function run()
     {
-        preg_match('~value~', $value);
+        preg_match('#value#', $value);
     }
 }</code></pre>
<p>Instead of <del><code>PhpCsFixer\Fixer\ControlStructure\PregDelimiterFixer</code></del> fixer:</p>
<p>↓</p>
<p>use Rector rule:</p>
<pre><code class="language-php">&lt;?php

// rector.php

declare(strict_types=1);

use Rector\CodingStyle\Rector\FuncCall\ConsistentPregDelimiterRector;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();
    $services-&gt;set(ConsistentPregDelimiterRector::class)
        // default
        -&gt;arg('delimiter', '#');
};</code></pre>
<h2 id="3-required-must-be-followed-by-absolute-path">3. Required Must be followed by Absolute Path</h2>
<pre><code class="language-diff"> class SomeClass
 {
     public function run()
     {
-        require 'autoload.php';
+        require __DIR__ . '/autoload.php';
     }
 }</code></pre>
<p>Instead of <del><code>PhpCsFixer\Fixer\ControlStructure\RequireFollowedByAbsolutePathFixer</code></del> fixer,</p>
<p>↓</p>
<p>use Rector rule:</p>
<pre><code class="language-php">&lt;?php

// rector.php

declare(strict_types=1);

use Rector\CodingStyle\Rector\Include_\FollowRequireByDirRector;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();
    $services-&gt;set(FollowRequireByDirRector::class);
};</code></pre>
<h2 id="4-match-exception-variable-name-to-its-type">4. Match Exception variable name to its Type</h2>
<pre><code class="language-diff"> class SomeClass
 {
     public function run()
     {
         try {
             // ...
-        } catch (SomeException $typoException) {
-            $typoException-&gt;getMessage();
+        } catch (SomeException $someException) {
+            $someException-&gt;getMessage();
         }
     }
 }</code></pre>
<p>Instead of <del><code>PhpCsFixer\Fixer\Naming\CatchExceptionNameMatchingTypeFixer</code></del> Fixer:</p>
<p>↓</p>
<p>use Rector rule:</p>
<pre><code class="language-php">&lt;?php

// rector.php

declare(strict_types=1);

use Rector\CodingStyle\Rector\Catch_\CatchExceptionNameMatchingTypeRector;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();
    $services-&gt;set(CatchExceptionNameMatchingTypeRector::class);
};</code></pre>
<h2 id="5-match-property-and-variable-to-its-type">5. Match Property and Variable to its Type</h2>
<pre><code class="language-diff"> class SomeClass
 {
     /**
      * @var EntityManager
      */
-    private $eventManager;
+    private $entityManager;
-    public function __construct(EntityManager $eventManager)
+    public function __construct(EntityManager $entityManager)
     {
-        $this-&gt;eventManager = $eventManager;
+        $this-&gt;entityManager = $entityManager;
     }
 }</code></pre>
<p>Instead of <del><code>Symplify\CodingStandard\Fixer\Naming\PropertyNameMatchingTypeFixer</code></del> Fixer</p>
<p>↓</p>
<p>use Rector rule:</p>
<pre><code class="language-php">&lt;?php

// rector.php

declare(strict_types=1);

use Rector\Naming\Rector\Class_\RenamePropertyToMatchTypeRector;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();
    $services-&gt;set(RenamePropertyToMatchTypeRector::class);
};</code></pre>
<h2 id="6-set-default-values-to-bool-and-array-type-to-prevent-undefined-value">6. Set Default Values to bool and array Type to Prevent Undefined Value</h2>
<pre><code class="language-diff"> class SomeClass
 {
     /**
      * @var bool
      */
-    private $isDisabled;
+    private $isDisabled = false;

     /**
      * @var int[]
      */
-    private $values;
+    private $values = [];

     public function isEmpty()
     {
         return $this-&gt;values === [];
     }
 }</code></pre>
<p>Instead of:</p>
<ul>
<li><del><code>Symplify\CodingStandard\Fixer\Property\BoolPropertyDefaultValueFixer</code></del></li>
<li><del><code>Symplify\CodingStandard\Fixer\Property\ArrayPropertyDefaultValueFixer</code></del></li>
</ul>
<p>↓</p>
<p>use Rector rules:</p>
<pre><code class="language-php">&lt;?php

// rector.php

declare(strict_types=1);

use Rector\CodingStyle\Rector\Class_\AddArrayDefaultToArrayPropertyRector;
use Rector\SOLID\Rector\Property\AddFalseDefaultToBoolPropertyRector;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();
    $services-&gt;set(AddFalseDefaultToBoolPropertyRector::class);
    $services-&gt;set(AddArrayDefaultToArrayPropertyRector::class);
};</code></pre>
<h2 id="7-use-code-class-code-over-strings-names">7. Use <code>::class</code> over Strings Names</h2>
<p>This feature is here since PHP 5.5, and it's a massive help for static analysis and instant migrations.</p>
<pre><code class="language-diff"> class AnotherClass
 {
 }

 class SomeClass
 {
     public function run()
     {
-        return 'AnotherClass';
+        return \AnotherClass::class;
     }
 }</code></pre>
<p>Instead of <del><code>Symplify\CodingStandard\Fixer\Php\ClassStringToClassConstantFixer</code></del> Fixer:</p>
<p>↓</p>
<p>use Rector rule:</p>
<pre><code class="language-php">&lt;?php

// rector.php

declare(strict_types=1);

use Rector\Php55\Rector\String_\StringClassNameToClassConstantRector;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();
    $services-&gt;set(StringClassNameToClassConstantRector::class);
};</code></pre>
<h2 id="8-order-property-by-complexity-private-methods-by-use">8. Order Property by Complexity, Private Methods by Use</h2>
<p>How do you order your methods? Random?</p>
<p><strong>Be sure to read <a href="/blog/2018/11/01/how-teach-your-team-private-method-sorting-in-3-mins/">How to Teach Your Team Private Method Sorting in 3 mins</a>.</strong></p>
<p>Instead of:</p>
<ul>
<li><del><code>Symplify\CodingStandard\Fixer\Order\PrivateMethodOrderByUseFixer</code></del></li>
<li><del><code>Symplify\CodingStandard\Fixer\Order\PropertyOrderByComplexityFixer</code></del></li>
</ul>
<p>↓</p>
<p>use Rector rules:</p>
<pre><code class="language-php">&lt;?php

// rector.php

declare(strict_types=1);

use Rector\Order\Rector\Class_\OrderPrivateMethodsByUseRector;
use Rector\Order\Rector\Class_\OrderPropertyByComplexityRector;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();
    $services-&gt;set(OrderPrivateMethodsByUseRector::class);
    $services-&gt;set(OrderPropertyByComplexityRector::class);
};</code></pre>
<h2 id="9-specific-order-by-parent-contract">9. Specific Order By Parent Contract</h2>
<p>Do you implement one interface over and over? Do you have dozens of such classes and want their public methods to have a specific order?</p>
<pre><code class="language-diff"> final class SomeFixer implements FixerInterface
 {
-    public function isCandidate()
+    public function getName()
     {
     }

-    public function getName()
+    public function isCandidate()
     {
         // ...
     }
 }</code></pre>
<p>Instead of <del><code>Symplify\CodingStandard\Fixer\Order\MethodOrderByTypeFixer</code></del> Fixer:</p>
<p>↓</p>
<p>use Rector rule:</p>
<pre><code class="language-php">&lt;?php

// rector.php

declare(strict_types=1);

use Rector\Order\Rector\Class_\OrderPublicInterfaceMethodRector;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();
    $services-&gt;set(OrderPublicInterfaceMethodRector::class)
        -&gt;call('configure', [[
            OrderPublicInterfaceMethodRector::METHOD_ORDER_BY_INTERFACES =&gt; [
                'FixerInterface' =&gt; [
                    'getName',
                    'isCandidate',
                ]
            ]
        ]]);
};</code></pre>
<h2 id="10-make-classes-code-final-code-if-you-can">10. Make Classes <code>final</code>, if You Can</h2>
<p>This will be the biggest added value, as tokens have no idea if your class is extended by another class.</p>
<p>Rector knows that, so be ready for more solid code after you run it.</p>
<p>Instead of <del><code>Symplify\CodingStandard\Fixer\Solid\FinalInterfaceFixer</code></del> Fixer:</p>
<p>↓</p>
<p>use Rector rule:</p>
<pre><code class="language-php">&lt;?php

// rector.php

declare(strict_types=1);

use Rector\SOLID\Rector\Class_\FinalizeClassesWithoutChildrenRector;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();
    $services-&gt;set(FinalizeClassesWithoutChildrenRector::class);
};</code></pre>
<p><br></p>
<p>And that's it. Now you're ready!</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/05/11/how-to-upgrade-to-symplify-8-from-fixers-to-rector-rules</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-08-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Aug 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/05/11/how-to-upgrade-to-symplify-8-from-fixers-to-rector-rules#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Upgrade to Symplify 8 - From Sniffs to PHPStan Rules ]]></title>
                <link>https://tomasvotruba.com/blog/2020/05/04/how-to-upgrade-to-symplify-8-from-sniffs-to-phpstan-rules</link>
                <description><![CDATA[ <p>Since Symplify 7.3, you might notice a few deprecation notices in your coding standards. As Symplify 8 release is <a href="/blog/2017/10/30/what-can-you-learn-from-menstruation-and-symfony-releases/">synced with Symfony cycle</a>, both will be released at the end of May.
<br>
<br>
What to do with these deprecations? Why were these sniffs dropped? How to handle upgrades in 1 hour?</p> ]]></description>
                <content:encoded><![CDATA[ <p>When you run <a href="https://github.com/symplify/easy-coding-standard">ECS</a> with version 7.3+:</p>
<pre><code class="language-bash">vendor/bin/ecs check</code></pre>
<p>You might see such notices right before your code gets checked:</p>
<pre><code class="language-bash">PHP Notice:  Sniff "..." is deprecated. Use "..." instead</code></pre>
<h2 id="why-were-these-sniffs-dropped">Why were These Sniffs Dropped?</h2>
<p>Symplify 7 used lots of sniffs based on coding standard <a href="https://www.php.net/manual/en/function.token-get-all.php">tokens</a>. In time they were made, they were as good. <a href="/blog/2018/10/25/why-ast-fixes-your-coding-standard-better-than-tokens/#shifting-the-scope">Tokens are best at spaces, abstract syntax tree is best at logical code structure</a>.</p>
<p>E.g. <code>TraitNameSniff</code> check name of traits and makes sure the name ends with &quot;Trait&quot;:</p>
<pre><code class="language-php">&lt;?php

// hey, this should be "ProductTrait"
trait Product
{
}</code></pre>
<p>Do you see any spaces or token positions? No, it's just:</p>
<ul>
<li>find a trait</li>
<li>check its name</li>
</ul>
<p>So writing this rule in tokens is the wrong tool chosen. Why? With tokens, you need to make sure:</p>
<ul>
<li>trait token is found</li>
<li>there are no spaces after trait token</li>
<li>detect the name</li>
<li>for other rules, resolve its fully qualified name based on the namespace and use imports (real hell with tokens)</li>
</ul>
<p>But <strong>why waste time on re-inventing the wheel</strong>, when we can use a tool that handles tedious work for us?
It's better to use <em>abstract syntax tree</em> technology, in this case <a href="https://phpstan.org">PHPStan</a>.</p>
<p><br></p>
<p><strong>That's why</strong> all the &quot;AST&quot; sniffs were migrated to PHPStan rules.</p>
<h2 id="what-to-do-with-these-deprecations">What to do With These Deprecations?</h2>
<p>So what does it mean? Remove all the rules from <code>ecs.php</code> and let go?</p>
<p>No, <strong>all you need to do is switch to PHPStan rules</strong>. It's better working and more reliable since it works with context and not token positions. So at first, you might discover a few new reported errors here and there.</p>
<h2 id="how-to-handle-upgrade-in-1-hour">How to Handle Upgrade in 1 hour?</h2>
<p>There are 14 deprecated sniffs in total. Don't worry, while it might seem like a considerable number, the replacement is a matter of an hour.</p>
<p>Have you used a full Symplify set?</p>
<pre><code class="language-php">
// ecs.php

declare(strict_types=1);

use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
use Symplify\EasyCodingStandard\Configuration\Option;use Symplify\EasyCodingStandard\ValueObject\Set\SetList;

return static function (ContainerConfigurator $containerConfigurator): void {
    $parameters = $containerConfigurator-&gt;parameters();
    $parameters-&gt;set(Option::SETS, [SetList::SYMPLIFY]);
};</code></pre>
<p>Then you won't see any deprecations, because rules were removed from the config for you.
Still, I recommend adding these rules to <code>phpstan.neon</code>.</p>
<h2 id="1-abstract-trait-and-interface-naming-sniffs">1. Abstract, Trait and Interface Naming Sniffs</h2>
<p>These rules were removed:</p>
<ul>
<li><del><code>Symplify\CodingStandard\Sniffs\Naming\AbstractClassNameSniff</code></del></li>
<li><del><code>Symplify\CodingStandard\Sniffs\Naming\TraitNameSniff</code></del></li>
<li><del><code>Symplify\CodingStandard\Sniffs\Naming\InterfaceNameSniff</code></del></li>
</ul>
<p>and replaced by:</p>
<p>↓</p>
<pre><code class="language-bash">composer require --dev slam/phpstan-extensions</code></pre>
<pre><code class="language-yaml"># phpstan.neon
rules:
    - SlamPhpStan\ClassNotationRule</code></pre>
<h2 id="2-cognitive-complexity">2. Cognitive Complexity</h2>
<p>The <a href="/blog/2018/05/21/is-your-code-readable-by-humans-cognitive-complexity-tells-you/">only <del>sniff</del> rule your coding standard should have</a>... just got better.</p>
<p>The orifinal sniffs were removed:</p>
<ul>
<li><del><code>Symplify\CodingStandard\Sniffs\CleanCode\CognitiveComplexitySniff</code></del></li>
<li><del><code>Symplify\CodingStandard\Sniffs\CleanCode\ClassCognitiveComplexitySniff</code></del></li>
</ul>
<p>and replaced by more avanced AST in form of PHPStan rules:</p>
<p>↓</p>
<pre><code class="language-yaml"># phpstan.neon
includes:
    - vendor/symplify/coding-standard/packages/cognitive-complexity/config/cognitive-complexity-rules.neon

# if you use default value, you can skip this section
parameters:
    symplify:
        max_cognitive_complexity: 10
        max_class_cognitive_complexity: 60</code></pre>
<h2 id="3-make-sure-classes-used-in-param-var-and-return-exists">3. Make sure Classes used in @param, @var and @return Exists</h2>
<ul>
<li><del><code>Symplify\CodingStandard\Sniffs\Commenting\AnnotationTypeExistsSniff</code></del></li>
</ul>
<p>Just drop it. PHPStan level 0 handles this.</p>
<h2 id="4-forbidden-static-explicit-static">4. Forbidden Static → Explicit Static</h2>
<p>Static functions <a href="/blog/2019/04/01/removing-static-there-and-back-again/">are best way to slowly create technical dept</a>. But sometimes it's tough to code without them.</p>
<p>So instead of forbidding them:</p>
<ul>
<li><del><code>Symplify\CodingStandard\Sniffs\CleanCode\ForbiddenStaticFunctionSniff</code></del></li>
</ul>
<p>↓</p>
<p>Just be honest about them:</p>
<pre><code class="language-yaml"># phpstan.neon
rules:
    - Symplify\CodingStandard\Rules\NoClassWithStaticMethodWithoutStaticNameRule</code></pre>
<p>The same way you see a &quot;trait&quot; in a file name and know it's a trait,
this rule makes sure that classes with static methods have &quot;static&quot; in its name.</p>
<p>I've been using it for 4 days, and oh, what a shame I feel when I want to use a &quot;Static&quot; &quot;service&quot;. It <strong>makes me think twice both about the design and consequences</strong>.</p>
<h2 id="5-forbidden-parent-class">5. Forbidden Parent Class</h2>
<p>Even though it's repeated over, again and again, that composition beats inheritance, the PHP code I see is full of it.</p>
<p>Sometimes the only way to <a href="/blog/2017/10/16/how-to-use-repository-with-doctrine-as-service-in-symfony/">promote so-far-the-best practise</a>, is to enforce it.</p>
<ul>
<li><del><code>Symplify\CodingStandard\Sniffs\CleanCode\ForbiddenParentClassSniff</code></del></li>
</ul>
<p>↓</p>
<pre><code class="language-yaml"># phpstan.neon
rules:
    - Symplify\CodingStandard\Rules\ForbiddenParentClassRule

parameters:
    symplify:
        forbidden_parent_classes:
            - 'Doctrine\ORM\EntityRepository'</code></pre>
<h2 id="6-use-custom-exceptions-over-basic-ones">6. Use Custom Exceptions over Basic Ones</h2>
<ul>
<li><del><code>Symplify\CodingStandard\Sniffs\Architecture\ExplicitExceptionSniff</code></del></li>
</ul>
<p>↓</p>
<pre><code class="language-yaml"># phpstan.neon
rules:
    - Symplify\CodingStandard\Rules\NoDefaultExceptionRule</code></pre>
<h2 id="7-prefer-one-class-over-another">7. Prefer One Class over Another</h2>
<ul>
<li><del><code>Symplify\CodingStandard\Sniffs\Architecture\PreferredClassSniff</code></del></li>
</ul>
<p>↓</p>
<pre><code class="language-yaml"># phpstan.neon
parameters:
    symplify:
        old_to_preffered_classes:
            DateTime: 'Nette\Utils\DateTime'

rules:
    - Symplify\CodingStandard\Rules\PreferredClassRule</code></pre>
<h2 id="8-no-duplicated-short-classes">8. No Duplicated Short Classes</h2>
<ul>
<li><del><code>Symplify\CodingStandard\Sniffs\Architecture\DuplicatedClassShortNameSniff</code></del></li>
</ul>
<p>↓</p>
<pre><code class="language-yaml"># phpstan.neon
rules:
    - Symplify\CodingStandard\Rules\NoDuplicatedShortClassNameRule</code></pre>
<h2 id="9-use-explicit-return-over-code-amp-code-reference">9. Use explicit Return over <code>&amp;</code> Reference</h2>
<ul>
<li><del><code>Symplify\CodingStandard\Sniffs\CleanCode\ForbiddenReferenceSniff</code></del></li>
</ul>
<p>↓</p>
<pre><code class="language-yaml"># phpstan.neon
rules:
    - Symplify\CodingStandard\Rules\NoReferenceRule</code></pre>
<h2 id="10-don-t-leave-code-dump-code-function-in-the-code">10. Don't leave <code>dump()</code> Function in the Code</h2>
<ul>
<li><del><code>Symplify\CodingStandard\Sniffs\Debug\DebugFunctionCallSniff</code></del></li>
</ul>
<p>↓</p>
<pre><code class="language-yaml"># phpstan.neon
rules:
    - Symplify\CodingStandard\Rules\NoDebugFuncCallRule</code></pre>
<h2 id="11-respect-naming-of-your-parents">11. Respect Naming of Your Parents</h2>
<ul>
<li><del><code>Symplify\CodingStandard\Sniffs\Naming\ClassNameSuffixByParentSniff</code></del></li>
</ul>
<p>↓</p>
<pre><code class="language-yaml"># phpstan.neon
rules:
    - Symplify\CodingStandard\Rules\ClassNameRespectsParentSuffixRule

parameters:
    symplify:
        parent_classes:
            - Rector</code></pre>
<p>And that's it! You've just migrated all deprecated sniffs to PHPStan rules. Upgrade to Symplify 8 will be a piece of cake for you.</p>
<p><br></p>
<p><a href="/blog/2020/05/11/how-to-upgrade-to-symplify-8-from-fixers-to-rector-rules/">In the next post, we'll look on the 2nd half</a> - <strong>how to migrate fixers into Rector rules</strong>.</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/05/04/how-to-upgrade-to-symplify-8-from-sniffs-to-phpstan-rules</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-08-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Aug 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/05/04/how-to-upgrade-to-symplify-8-from-sniffs-to-phpstan-rules#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Forget Complex Migrations, Use Cleaning Lady Checklist ]]></title>
                <link>https://tomasvotruba.com/blog/2020/04/27/forget-complex-migrations-use-cleaning-lady-checklist</link>
                <description><![CDATA[ <p>Migration of legacy code base is a complex process. If we <a href="/blog/2020/04/13/how-to-migrate-spaghetti-to-304-symfony-5-controllers-over-weekend/">migrate spaghetti</a>, <a href="/blog/2019/08/26/how-we-migrated-54-357-lines-of-code-nette-to-symfony-in-2-people-under-80-hours/">one framework to another</a> or <a href="/blog/2019/12/09/how-to-get-rid-of-technical-debt-or-what-we-would-have-done-differently-2-years-ago/">remove dead-code from 120 k-lines project</a>.
<br>
<br>
<em>It's long, it's hard, it takes an expert to do it...</em> that's bullshit. <strong>It should be simple, easy to understand and clear.</strong> Like the code we strive to write.
<br>
<br>
How <strong>could any programmer start migration today</strong> without any daunting studying?</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="simplicity-beats-unread-knowledge">Simplicity beats Unread Knowledge</h2>
<p>I wrote few sum-up posts about migrations in general:</p>
<ul>
<li><a href="/blog/2019/12/16/8-steps-you-can-make-before-huge-upgrade-to-make-it-faster-cheaper-and-more-stable/">8 Steps You Can Make Before Huge Upgrade to Make it Faster, Cheaper and More Stable</a></li>
<li><a href="/blog/2019/12/23/5-things-i-improve-when-i-get-to-new-repository/">5 Things I Improve when I Get to new Repository</a></li>
</ul>
<p>If you have 6 and 4 minutes to read them, read them. They sum up the experience that you can apply to most PHP projects.
But most people don't have 10 minutes to spare.</p>
<p><br></p>
<p>I don't. <strong>I have 30 seconds to solve my problem</strong>.</p>
<p><br></p>
<blockquote class="blockquote text-center">
    "If you can't explain it simply,<br>
    you don't understand it well enough."

    <footer class="blockquote-footer">Albert Einstein</footer></blockquote>
<p><br></p>
<h2 id="look-for-a-pattern">Look for a Pattern</h2>
<p>When there is a new project to migrate or upgrade, I cooperate with the in-house team to perform the migration together.</p>
<p>After 15-20 such projects, I've noticed a pattern:</p>
<ul>
<li>same steps <strong>repeat</strong> over and over again</li>
<li>those steps can be <strong>split into smaller steps</strong></li>
<li>these steps can be <strong>done me or by the team</strong> (usually 50:50)</li>
<li>they're <strong>must have before Rector migration</strong> I have to handle</li>
<li>somebody wrote a great post about <em>Why</em> or <em>How</em> to do these steps, so even <a href="/blog/2020/03/02/we-do-not-need-senior-developers-we-need-senior-code-bases/">a junior</a> can handle them</li>
<li>I mention these steps in 1st step - project feedback over and over again</li>
</ul>
<p><br></p>
<p>I was running towards sunset this Saturday, and a simple idea came to me. It felt great and made sense, so I sprint back to my home to scratch it down and <a href="https://twitter.com/VotrubaT/status/1254188338581471232">shared it with you</a>.</p>
<p><br></p>
<p>2 hours later... voilá 🎉</p>
<p><a href="/cleaning-lady-checklist"></p>
<img src="/assets/images/posts/2020/checklist_overview.png" alt="" class="img-thumbnail">
<p></a></p>
<h2 id="how-to-use-it">How to use it?</h2>
<ul>
<li>Fill in your project and <strong>activate it</strong></li>
<li><strong>Check what you've done</strong> (or what you don't need)</li>
<li>The name of project ~= namespace for cache storage, so items are stored per project</li>
<li>It uses local storage of your browser, so no-one will steal your data</li>
</ul>
<p><a href="/cleaning-lady-checklist"></p>
<img src="/assets/images/posts/2020/checklist_howto.gif" alt="" class="img-thumbnail">
<p></a></p>
<p><br></p>
<p>KISS!</p>
<p><br></p>
<p>The checklist is my first non-PHP application in years, and I need your feedback to make it better.</p>
<p><strong>Let me know how you use it or what steps you miss</strong>.
Keep in mind these steps should generally be relevant to most PHP projects.</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/04/27/forget-complex-migrations-use-cleaning-lady-checklist</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 27 Apr 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/04/27/forget-complex-migrations-use-cleaning-lady-checklist#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Hydrate Arrays to Objects via Constructor ]]></title>
                <link>https://tomasvotruba.com/blog/2020/04/20/how-to-hydrate-arrays-to-objects-via-constructor</link>
                <description><![CDATA[ <p>One technology evolution sparks naturally another one. When electricity became accessible to masses, a huge industry of home-electric tools became possible. Like this tool, I currently write on.
<br><br>
The same thing happens in software, just exponentially faster. Like tokens and AST sparked <a href="/blog/2018/10/22/brief-history-of-tools-watching-and-changing-your-php-code/">tools that change your code</a>.
<br><br>
Recently, I introduced <a href="/blog/2020/03/16/statie-is-dead-long-live-symfony-static-dumper/">Symfony Static Dumper</a> that uses YAML to store data in your Symfony application. You where this goes... how can <strong>we turn this YAML into objects</strong>?</p> ]]></description>
                <content:encoded><![CDATA[ <p><em>Disclaimer: this post is not about array vs. object performance. If you still prefer arrays, check this <a href="https://www.slideshare.net/nikita_ppv/php-performance-trivia/31">talk by Nikita Popov</a> that changed my mind.</em></p>
<p><br></p>
<p>This post is about the luxury of <strong>object IDE autocompletion</strong> everywhere in your code. And how to make it happen, <strong>when all you have in the start are arrays</strong> (JSON, YAML...).</p>
<p><br></p>
<p>Do you work with Doctrine entities? Then you're probably used to <a href="/blog/2017/10/16/how-to-use-repository-with-doctrine-as-service-in-symfony/">use Repository service</a> and Entity object:</p>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace Pehapkari\Blog\Repository;

use App\Entity\Post;
use Doctrine\Persistence\ObjectRepository;
use Doctrine\ORM\EntityManagerInterface;

final class PostRepository
{
    private ObjectRepository $repository;

    public function __construct(EntityManagerInterface $entityManager)
    {
        $this-&gt;repository = $entityManager-&gt;getRepository(Post::class);
    }

    /**
     * @return Post[]
     */
    public function fetchAll(): array
    {
        return $this-&gt;repository-&gt;fetchAll();
    }
}</code></pre>
<p>Then we can <strong>use reliable objects</strong> everywhere in application, like controllers:</p>
<pre><code class="language-php">final class BlogController
{
    // ...

    public function __invoke(): Response
    {
        return $this-&gt;render('blog/post.twig', [
            'posts' =&gt; $this-&gt;postRepository-&gt;fetchAll(),
        ]);
    }
}</code></pre>
<p>And we also have <strong>autocomplete in TWIG templates</strong> (thanks to <a href="/blog/2018/08/23/9-features-of-symfony-plugin-you-should-not-miss-in-gifs/">amazing</a> <a href="/blog/2019/01/28/2-files-that-your-symfony-application-misses">Symfony plugin</a>/):</p>
<img src="/assets/images/posts/2020/easy_hydrator_twig.png" class="img-thumbnail">
<h2 id="what-now-with-all-the-arrays">What now with all the Arrays?</h2>
<p>Each local PHP community produces videos, livestreams, or talk recordings. We make such videos too, and we store <a href="https://github.com/pehapkari/pehapkari.cz/blob/master/config/_data/youtube_videos.yaml">them in YAML</a>. How can we get objects from that?</p>
<p>Let's use the most straightforward example possible.</p>
<h3 id="1-the-data">1. The Data</h3>
<pre><code class="language-yaml">parameters:
    videos:
        -
            title: 'How to Hydrate objects to Arrays'
            created_at: '2020-04-20'</code></pre>
<h3 id="2-the-value-object">2. The Value Object</h3>
<p>In the application, we want to use an object:</p>
<ul>
<li>with strict and reliable types,</li>
<li>autocompletion of methods</li>
<li>and clear API (e.g., values of this object should no be changed).</li>
</ul>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\ValueObject;

use DateTimeInterface;

final class Video
{
    private string $name;

    private DateTimeInterface $createdAt;

    public function __construct(string $name, DateTimeInterface $createdAt)
    {
        $this-&gt;name = $name;
        $this-&gt;createdAt = $createdAt;
    }

    public function getName(): string
    {
        return $this-&gt;name;
    }

    public function getCreatedAt(): DateTimeInterface
    {
        return $this-&gt;createdAt;
    }
}</code></pre>
<h3 id="3-the-goal">3. The Goal</h3>
<p>We want our application to be:</p>
<ul>
<li>open <strong>to future database switch</strong></li>
<li><strong>and have readable code</strong> for new developers - <a href="/blog/2020/03/09/art-of-letting-go/">less patterns is better</a></li>
</ul>
<p>Saying that, the code should look like <strong>1:1 to repositories</strong> we know from Doctrine:</p>
<pre><code class="language-php">final class VideoController
{
    // ...

    public function __invoke(): Response
    {
        return $this-&gt;render('video/videos.twig', [
            'videos' =&gt; $this-&gt;videoRepository-&gt;fetchAll(),
        ]);
    }
}</code></pre>
<h2 id="yaml-json-an-array">YAML, JSON... an array?</h2>
<p>You can hydrate input of guzzle, arrays from YAML <em>database</em>, or just local data in your PHP code.</p>
<p>This is how we solved our use case:</p>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Repository;

use App\ValueObject\Video;
use Symplify\EasyHydrator\ArrayToValueObjectHydrator;

final class VideoRepository
{

    /**
     * @var Video[]
     */
    private $videos = [];

    public function __construct(
        array $videos,
        ArrayToValueObjectHydrator $arrayToValueObjectHydrator
    ) {
        $this-&gt;videos = $arrayToValueObjectHydrator-&gt;hydrateArrays($videos, Video::class);
    }

    /**
     * @return Video[]
     */
    public function fetchAll(): array
    {
        return $this-&gt;videos;
    }
}</code></pre>
<p>What is <code>Symplify\EasyHydrator\ArrayToValueObjectHydrator</code>? Its from new package <a href="https://github.com/symplify/easy-hydrator">symplify/easy-hydrator</a> that hydrates arrays to object. Easy.</p>
<p><br></p>
<h2 id="1-step-to-use-easy-hydrator">1 Step to Use Easy Hydrator</h2>
<pre><code class="language-bash">composer require symplify/easy-hydrator</code></pre>
<p>With Symfony Flex and <a href="https://github.com/symplify/symplify/blob/b41034f21c52105d9bb27160fdc189eaac140b98/packages/easy-hydrator/composer.json#L5">type in <code>composer.json</code></a>, this section became boring.</p>
<p>Then require <code>Symplify\EasyHydrator\ArrayToValueObjectHydrator</code> in the constructor and use it anywhere.</p>
<h2 id="4-features-of-easy-hydrator">4 Features of Easy Hydrator</h2>
<h3 id="1-handles-code-datetime-code-and-code-int-code-retypes">1. Handles <code>DateTime</code> and <code>int</code> retypes</h3>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

final class Person
{
    // ...
    public function __construct(string $name, int $age, DateTimeInterface $metAt)
    {
        // ...
    }
}

$person = $this-&gt;arrayToValueObjectHydrator-&gt;hydrateArray([
    'name' =&gt; 'Tom',
    // will be retyped to int
    'age' =&gt; '30',
    // will be retyped to DateTimeInterface
    'metAt' =&gt; '2020-02-02',
], Person::class);</code></pre>
<h3 id="2-php-7-4-support">2. PHP 7.4 support</h3>
<p>Typed properties + initialized are must-have. PHP 7.4 is around for ~6 months now, and people use this feature.</p>
<p>I also looked at <a href="https://github.com/Ocramius/GeneratedHydrator">Ocramius/GeneratedHydrator</a> and tried to use it, but it doesn't work with PHP 7.4 objects correctly.</p>
<h3 id="3-constructor-injection-only">3. Constructor Injection Only</h3>
<p>This package tries to be 1:1 with the rest of the clean code, so <strong>hydrated object must use constructor injection</strong>. Private property reflection magic won't work here.</p>
<h3 id="4-easy">4. Easy</h3>
<p>This package hydrates arrays to object via constructor. Nothing more, nothing less.
It's for easy and clear use.</p>
<p>I use it in 3 PHP projects now and works great. Also we could get rid of <em>fake object</em> that only autocomplete twig and stopped relying on <code>$video['title']</code> or <code>$video['name']</code> guessing all over the code. Win win :)</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/04/20/how-to-hydrate-arrays-to-objects-via-constructor</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/04/20/how-to-hydrate-arrays-to-objects-via-constructor#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Migrate Spaghetti to 304 Symfony 5 Controllers Over Weekend ]]></title>
                <link>https://tomasvotruba.com/blog/2020/04/13/how-to-migrate-spaghetti-to-304-symfony-5-controllers-over-weekend</link>
                <description><![CDATA[ <p>During Easter weekend, usually, people take a break and have a rest. Instead, we used these 4 days of <em>holiday</em> to migrate the 304-controller application. At least that was the goal on Friday.
<br><br>
Me in my colleague in the migrated project accepted the challenge. We got into many minds and code-traps. We'd like to share this experience with you and <strong>inspire those who are still stuck on non-MVC code</strong> and think it might take weeks or even months to switch to a framework.</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="what-is-the-goal">What is the Goal?</h2>
<p><em class="fas fa-fw mt-4 fa-times text-danger"></em> <strong>We didn't want a  hybrid</strong> with static dependency injection container, legacy controller, request separation for new website and for old website. It only creates more legacy code than in the beginning.</p>
<p><em class="fas fa-fw mt-4 fa-star-half text-warning"></em> <strong>We were ok with</strong> keeping original business logic code untouched. We will handle spaghetti decoupling to Controller and Twig in the next phase. This was just a 1st step of many.</p>
<p><em class="fas fa-fw mt-4 fa-check text-success"></em> <strong>We wanted</strong> to be able to use Symfony dependency injection, Twig templates, Controller rendering, Symfony Security, Events, Repository, connection to database, <code>.env</code>, Flex, Bundles, YAML configs, <a href="/blog/2020/02/17/local-packages-3-years-later/">local packages</a>.</p>
<p><em class="fas fa-fw mt-4 fa-check text-success"></em> <strong>We wanted automate</strong> everything that is possible to automate.</p>
<p><em class="fas fa-fw mt-4 fa-check text-success"></em> <strong>We wanted to run</strong> on Symfony 5.0 and PHP 7.4.</p>
<p><em class="fas fa-fw mt-4 fa-check text-success"></em> <strong>We wanted to write</strong> any future code as if in any other Symfony application without going back.</p>
<p><br></p>
<p>Well, we wanted a full-stack framework, as you can find in <a href="https://github.com/symfony/demo">symfony/demo</a>.</p>
<p>Isn't that too much for one weekend? 😂</p>
<blockquote class="blockquote text-center">
"Only those who attempt the absurd can achieve the impossible."

<footer class="blockquote-footer">Albert Einstein</footer></blockquote>
<p>Honestly, I'm just <strong><a href="https://blog.codinghorror.com/how-to-be-lazy-dumb-and-successful">freaking lazy</a></strong> to do work for a longer time than a few days (in a row).</p>
<h2 id="the-application-in-the-start">The Application in The Start</h2>
<p>So how does the application look like?</p>
<p><a href="https://symfony.com/doc/current/controller.html">Symfony documentation describes</a> <strong>a controller</strong> as <em>a PHP function you create that reads information from the Request object and creates and returns a Response object</em>. In our case, the &quot;Request object&quot; was an entry URL, &quot;Response object&quot; was spaghetti rendered as <code>echo "string";</code>.</p>
<p>Saying that the application had:</p>
<ul>
<li>304 &quot;controllers&quot;</li>
<li>templating done directly in the file with inlined PHP in HTML</li>
<li>base <em>layout</em> done with <code>include "header.php";</code></li>
<li>2 good old HTML frames, one for the menu - the other for the rest of application</li>
</ul>
<p><br></p>
<p>Typical <em>controller</em> looked like this:</p>
<pre><code class="language-php">&lt;?php
// contact.php

include 'header.php';

$content = get_data_from_database();

// 500 lines of spaghetti code

echo $content;</code></pre>
<h2 id="first-make-a-plan">First: Make a Plan</h2>
<p>The migration pull-request itself is just <strong>half of the work</strong>. First, we had to have <a href="/blog/2019/12/16/8-steps-you-can-make-before-huge-upgrade-to-make-it-faster-cheaper-and-more-stable/">coding standards, PSR-4 autoloading, PHPStan on level 8</a> etc. When I say PHPStan on level 8, we skipped those errors with 50+ cases.</p>
<p>The next half is <a href="/blog/2019/08/26/how-we-migrated-54-357-lines-of-code-nette-to-symfony-in-2-people-under-80-hours/">to have a full team on board</a> and have <strong>a clear plan</strong>.</p>
<h2 id="php-template-in-symfony-5">PHP Template in Symfony 5?</h2>
<p>We had a goal, so what's the plan? First, we wanted to switch PHP + HTML to controllers. Maybe we could use something like <a href="https://symfony.com/doc/4.4/templating/PHP.html">PHP templates</a> + render them with a controller?</p>
<p>The idea is great, except <strong>PHP templates were deprecated</strong> in Symfony 4 and <strong>removed</strong> in Symfony 5:</p>
<img src="/assets/images/posts/2020/symfonize_php_template_nope.png" class="img-thumbnail mt-3 mb-3">
<h2 id="raw-symfony-application">Raw Symfony Application</h2>
<p>Hm, so what now? If it too huge, take something smaller. First, we need to actually have a Symfony project:</p>
<ul>
<li>
<p>remove <code>vendor</code></p>
</li>
<li>
<p>remove <code>composer.lock</code></p>
</li>
<li>
<p>install Symfony dependencies:</p>
</li>
</ul>
<pre><code class="language-bash">composer require symfony/asset symfony/cache symfony/console symfony/dotenv \
    symfony/flex symfony/framework-bundle symfony/http-foundation symfony/http-kernel \
    symfony/twig-bridge symfony/twig-bundle \
    symplify/autodiscovery symplify/autowire-array-parameter symplify/flex-loader \
    symplify/package-builder twig/twig doctrine/cache symfony/security-core \
    symfony/security-bundle symfony/security-csrf doctrine/orm doctrine/doctrine-bundle \
    doctrine/annotations doctrine/common doctrine/dbal symfony/error-handler symfony/form</code></pre>
<ul>
<li>don't forget <code>dev</code> too:</li>
</ul>
<pre><code class="language-bash">composer require --dev symfony/maker-bundle symfony/web-profiler-bundle</code></pre>
<p>Few fixes of bundles installation that Flex missed, adding database credential to <code>.env.local</code> file to login into the database, and we're ready to continue <strong>with an uplifted spirit of success</strong>.</p>
<img src="/assets/images/posts/2020/symfonize_raw_run.png" class="img-thumbnail mt-3 mb-3">
<p>Soon to be <strong>demolished again by new problems</strong> we never faced before... Let's look at the controllers.</p>
<p><br></p>
<p>We wanted to use <a href="https://github.com/rectorphp/rector">Rector</a> to convert all the files to classic Symfony controllers.</p>
<p>The simple rule is: <code>&lt;filename&gt;.php</code></p>
<ul>
<li>route name: <code>filename</code></li>
<li>route path: <code>filename</code></li>
</ul>
<h2 id="what-will-be-inside-controller">What Will Be Inside Controller?</h2>
<p>Just simply copy-paste the spaghetti code first, maybe that will be enough:</p>
<pre><code class="language-php">&lt;?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Response;

final class ContactController extends AbstractController
{
    /**
     * @Route(path="contact", name="contact")
     */
    public function __invoke(): Response
    {
        $content = get_data_from_database();
        // 500 lines of spaghetti code

        // this won't work, we need to return Response object :/
        echo $content;
    }
}</code></pre>
<p>If the content would be echoed <strong>just once</strong>, we could use:</p>
<pre><code class="language-php">$content = get_data_from_database();
// 500 lines of spaghetti code

return new \Symfony\Component\HttpFoundation\Response($content);</code></pre>
<p>But there is <code>echo</code> all over the place - like <strong>50 times in those 500 lines of spaghetti code</strong>.</p>
<p><br></p>
<p>Then we remembered, there are <code>ob_*</code> functions <strong>that collect echoed content, but don't show it</strong>. If we wrap the spaghetti and get content with <code>ob_get_contents()</code> in the end, it might work.</p>
<pre><code class="language-php">ob_start();

// 500 lines of spaghetti code

$content = (string) ob_get_contents();
ob_end_clean();
return new \Symfony\Component\HttpFoundation\Response($content);</code></pre>
<p><br></p>
<p>4 hours of writing a Rector rule for the migration and voilá - we had <strong>304 new Symfony controllers</strong>:</p>
<pre><code class="language-php">&lt;?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Response;

final class ContactController extends AbstractController
{
    /**
     * @Route(path="contact", name="contact")
     */
    public function __invoke(): Response
    {
        ob_start();

        $content = get_data_from_database();
        // 500 lines of spaghetti code

        $content = (string) ob_get_contents();
        ob_end_clean();
        return new Response($content);
    }
}</code></pre>
<p>That wasn't that hard. Let's run the website to enjoy the fruits of Eden:</p>
<img src="/assets/images/posts/2020/symfonize_first_crash.png" class="img-thumbnail mt-3 mb-3">
<p>Hm, maybe we should <strong>update all the links from <code>contact.php</code> to <code>contact</code> routes</strong> in every PHP file too. Also, all 304 links to all controller we just converted.</p>
<h2 id="how-to-get-base-template-into-templates">How to get Base Template into Templates?</h2>
<p>Now when you entered <code>https://localhost:8000/contact</code>, you saw the raw page. From cool Symfony controller, but still a raw page. <strong>We wanted to use Twig templates</strong>, so we could enjoy filters, helpers, global variables, assets, etc.</p>
<p><br></p>
<p>This was our goal:</p>
<pre><code class="language-php">&lt;?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Response;

final class ContactController extends AbstractController
{
    /**
     * @Route(path="contact", name="contact")
     */
    public function __invoke(): Response
    {
        return $this-&gt;render('controller/contact.twig');
    }
}</code></pre>
<p>In the end, that <code>__invoke</code> method is actually in every controller <strong>in this exact format</strong>. But we still <strong>miss one piece of the puzzle</strong>.</p>
<p>We also wanted to use normal <code>base.twig</code>, as we're used to in every MVC project:</p>
<pre><code class="language-twig">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
      {# some assets #}
   &lt;/head&gt;
   &lt;body&gt;
      &lt;div class="row"&gt;
         &lt;div class="col-4"&gt;
            {% include "_snippet/menu.twig" %}
         &lt;/div&gt;
         &lt;div class="col-8"&gt;
              {% block main %}
              {% endblock %}
           &lt;/div&gt;
       &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>What's inside the <code>controller/contact.twig</code>?</p>
<pre><code class="language-twig">{% extends "base.twig" %}

{% block main %}
    PHP? Spaghetti? Magic?
{% endblock %}</code></pre>
<p>How would <strong>you solve it</strong>? If you find a better way, let us know in the comments.</p>
<p><strong>Remember</strong>: no PHP in Twig templates and no going back to Symfony 4.</p>
<p><br>
<br>
<br></p>
<p>We came up with this trick:</p>
<pre><code class="language-twig">{% extends "base.twig" %}

{% block main %}
    {{ render(controller('App\\Controller\\ContractController::content')) }}
{% endblock %}</code></pre>
<p>In each controller there will be not only the <code>__invoke()</code> method, but also the <code>content</code> method:</p>
<pre><code class="language-php">&lt;?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Response;

final class ContactController extends AbstractController
{
    /**
     * @Route(path="contact", name="contact")
     */
    public function __invoke(): Response
    {
        return $this-&gt;render('controller/contact.twig');
    }

    /**
     * @Route(path="contact_content", name="contact_content")
     */
    public function content(): Response
    {
        ob_start();

        $content = get_data_from_database();
        // 500 lines of spaghetti code

        $content = (string) ob_get_contents();
        ob_end_clean();
        return new Response($content);
    }
}</code></pre>
<p>With this approach, we have all we wanted:</p>
<p><em class="fas fa-fw mt-4 fa-check text-success"></em> <strong>We can</strong> use Symfony dependency injection, Twig templates, Controller rendering, Symfony Security, Events, Repository, connection to database, <code>.env</code>, Flex, Bundles, YAML configs, <a href="/blog/2020/02/17/local-packages-3-years-later/">local packages</a>.</p>
<p><em class="fas fa-fw mt-4 fa-check text-success"></em> <strong>We can to write</strong> any future code as if in any other Symfony application without going back.</p>
<p><br></p>
<p>To add chery on top, we added Symfony login:</p>
<img src="/assets/images/posts/2020/symfonize_logged_in.png" class="img-thumbnail mt-3 mb-3">
<p>And that's it!</p>
<h3 id="blind-paths-to-avoid">Blind Paths to Avoid</h3>
<ul>
<li>don't go to Symfony 5.1-dev, stay with <strong>stable Symfony 5.0</strong> - the install of dev packages is very slow both on CI and locally</li>
<li>don't go to Symfony 4 just to use PHP templates; it's just postponing the problem + adding more legacy code</li>
<li>don't rush to PHP 7.4 before migration is finished, for the migration start <strong>PHP 7.2</strong> is good enough (ECS and Rector need it as minimal version)</li>
</ul>
<h3 id="caveats">Caveats</h3>
<ul>
<li>do <a href="/blog/2019/12/16/8-steps-you-can-make-before-huge-upgrade-to-make-it-faster-cheaper-and-more-stable/">8 Steps You Can Make Before Huge Upgrade to Make it Faster, Cheaper and More Stable</a> first</li>
<li><strong>have a strict deadline</strong> - our original plan was the end of May, but when Easter came, we couldn't resist</li>
<li><strong>don't fall in the bait of manual refactoring</strong> of that one thing in the code you don't like - <strong>stay focused on the migration</strong> and improve code when the 1st step is finished and merged</li>
<li><strong>have a buddy</strong>, that helps you psychically when you're stuck - without a friend, this might turn into a nightmare of being stuck in circles; even only talking about the problem helps - it's better if it's somebody outside your normal work (consultant, old collegaue), so they're not stuck in your legacy project mindset</li>
<li><strong>be ok with broken code</strong> for a while, it's normal even with small changes</li>
<li>don't deploy code to the production, merge the PR as soon as possible, but test the application on a separate server at least for a week</li>
</ul>
<h2 id="the-final-plan">The Final Plan</h2>
<ul>
<li>install Symfony dependencies</li>
<li>add <code>bin/console</code>, <code>src/AppKernel.php</code> and <code>public/index.php</code> files</li>
<li>run base Symfony homepage</li>
<li>add credentials to <code>.env.local</code> and login to database</li>
<li>prepare migration rule to Symfony controllers and let Rector
<ul>
<li>migrate controllers</li>
<li>create <code>*</code> templates</li>
<li>create <code>*_content.twig</code> templates</li>
</ul></li>
<li>let Rector dump changed files into <code>old_controller_files.json</code></li>
<li>load data from <code>old_controller_files.json</code> and
<ul>
<li>use <code>preg_replace</code> in all files to replace <code>contact.php</code> to <code>contact</code>, files names to routes</li>
<li>delete old files</li>
</ul></li>
<li>delete <code>old_controller_files.json</code></li>
</ul>
<p><br></p>
<p>We made many mistakes, took many blind paths, so you don't have to (you can take new blind paths), but in the end, we made it from Friday till Monday - <strong>in 4 days</strong>:</p>
<img src="/assets/images/posts/2020/symfonize_merged.png" class="img-thumbnail mt-3 mb-3">
<p><strong>Are you still on a legacy project?</strong> What's your excuse that prevents your change for better?</p>
<p>If you have more questions, e.g., technical ones about the automated parts, let us know in the comments. We'll try to answer as best as we can.</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/04/13/how-to-migrate-spaghetti-to-304-symfony-5-controllers-over-weekend</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/04/13/how-to-migrate-spaghetti-to-304-symfony-5-controllers-over-weekend#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Find Dead Symfony Routes ]]></title>
                <link>https://tomasvotruba.com/blog/2020/04/06/how-to-find-dead-symfony-routes</link>
                <description><![CDATA[ <p>Almost half a year ago, I spotted a post called <a href="https://laravel-news.com/route-usage-package-for-laravel">Route Usage Package for Laravel</a>. It's nice to have to see what routes are used and how often.
<br>
<br>
But when dealing with legacy code, knowing <strong>dead routes will save you dozens of hours in refactoring</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="why-are-dead-routes-important-for-your-code">Why are Dead Routes Important for Your Code?</h2>
<p>If you know that 20 % is never used, you can <strong>drop it and ease your maintenance</strong>. Also, it's a must-have pre-step <a href="/blog/2019/12/16/8-steps-you-can-make-before-huge-upgrade-to-make-it-faster-cheaper-and-more-stable/">to code migrations</a>.</p>
<p><strong>Static analysis</strong> can help you with <a href="/blog/2019/03/18/how-to-detect-dead-php-code-in-code-review-in-7-snippets/">dead code that is never used</a> and with <a href="/blog/2019/03/14/remove-dead-public-methdos-from-your-code/">public methods that are never called</a>, e.g.:</p>
<pre><code class="language-diff">-$discount = $this-&gt;getDiscount();
 $productCategory = $this-&gt;categoryRepository-&gt;findCategoriesByProduct(
     $product-&gt;getCategory()
 );
 $discount = $this-&gt;getDiscount();</code></pre>
<p><br></p>
<blockquote class="blockquote text-center">
    10-20 % of code in most PHP code bases<br>
    is dead and can be deleted.
</blockquote>
<p>In this <a href="/blog/2019/12/09/how-to-get-rid-of-technical-debt-or-what-we-would-have-done-differently-2-years-ago/">case study from Spaceflow</a> project we worked in summer 2019, <strong>we removed ~20 % of the code... and nobody noticed</strong>.</p>
<img src="/assets/images/posts/2019/spaceflow_10_points/13.png" class="img-thumbnail">
<h2 id="static-analysis-of-dead-code-is-not-enough">Static Analysis of Dead Code is Not Enough</h2>
<p>It's quite easy to find dead calls, but when it comes to controller and API endpoints, it's a different game. Controller methods are public and are called by a framework.</p>
<p><strong>Static analysis won't tell us, which controller is used and which not.</strong> Also, the controller might call 2-3 other services... and they might call other services... and those could be dead too... <strong>welcome fractal of dead code we have to maintain.</strong> What now?</p>
<p>We'll have to use similar approach we used for <a href="/blog/2019/11/11/from-0-doc-types-to-full-type-declaration-with-dynamic-analysis/">From 0 Doc Types to Full Type Declaration</a>.</p>
<img src="/assets/images/posts/2020/dead_routes_branch.jpg" class="img-thumbnail mt-4 mb-2">
<p><em>Such branch is in your code... somewhere. Would you still water it for next couple years?</em></p>
<h2 id="coffee-shop-static-vs-dynamic-analysis">Coffee Shop - Static vs. Dynamic Analysis</h2>
<p>Imagine you're a coffee franchise owner. Not just 1, but 30 coffee houses. Suddenly, there comes corona, and shops have to be locked down.
Luckily, you have an emergency fund to keep them running... well, just 15 of them. <strong>Which one you choose to close?</strong></p>
<p>Coffee shop with a property of specific size, location, number of chairs, and toilets - that's static analysis. It won't help us here. What if the shop with the smallest area is making more money than the biggest one?</p>
<p>Let's use <strong>dynamic analysis</strong> here - you <strong>measure data in time</strong> and decide based on it. E.g., income for last year from all of them compared to expenses to run them.</p>
<h2 id="2-steps-to-add-route-usage-to-your-symfony-app">2 Steps to add Route Usage to Your Symfony App</h2>
<p>Inspired by the Laravel package, I've made a <a href="https://github.com/migrify/symfony-route-usage">Symfony Route Usage</a>.</p>
<h3 id="1-install-it">1. Install it</h3>
<pre><code class="language-bash">composer require migrify/symfony-route-usage</code></pre>
<h3 id="2-enable-bundle">2. Enable Bundle</h3>
<pre><code class="language-php">// config/bundles.php
return [
    Migrify\SymfonyRouteUsage\SymfonyRouteUsageBundle::class =&gt; ['all' =&gt; true],
];</code></pre>
<p><br></p>
<p>Collect data for a couple of weeks (depends on the size of your site) and see for yourself, <strong>what routes have been used</strong>:</p>
<pre><code class="language-bash">bin/console show-route-usage</code></pre>
<p>↓</p>
<img src="/assets/images/posts/2020/dead_routes_used_routes.png" class="img-thumbnail mt-4 mb-2">
<p><br></p>
<h2 id="what-routes-have-never-been-used">What Routes Have Never Been Used?</h2>
<p>Just run:</p>
<pre><code class="language-bash">bin/console show-dead-routes</code></pre>
<p>↓</p>
<img src="/assets/images/posts/2020/dead_routes_dead_routes.png" class="img-thumbnail mt-4 mb-2">
<p><br></p>
<p><strong>What about the performance?</strong> Pehapkari website takes 72 ms to load, of which 10 ms (13 %) is Symfony Route Visit. If that would be too much for your website, add partial logging by overloading <a href="https://github.com/migrify/symfony-route-usage/blob/master/src/EventSubscriber/LogRouteUsageEventSubscriber.php">the subscriber</a> - e.g., every 100th or 1000th request.</p>
<p><br></p>
<p>This package is freshly baked. Do you have some ideas how to make it better? Let me know ↓</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/04/06/how-to-find-dead-symfony-routes</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-04-01UTC00:00:000</updated>
                    <atom:updated>Wed, 01 Apr 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Wed, 01 Apr 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/04/06/how-to-find-dead-symfony-routes#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Don&#039;t Show Your Privates to Public ]]></title>
                <link>https://tomasvotruba.com/blog/2020/03/30/dont-show-your-privates-to-public</link>
                <description><![CDATA[ <p>With typed properties in PHP 7.4, there comes <strong>a natural tendency for using properties as public</strong>. The type check is already there, right? It's a dangerous path that opens the door to static code with public properties everywhere, that is asking for a change in any place.
<br>
<br></p>
<p>But is that ok to show privates to the public?</p> ]]></description>
                <content:encoded><![CDATA[ <p>Last week you probably spotted <strong><a href="https://wiki.php.net/rfc/constructor_promotion">RFC: Constructor Promotion</a></strong> proposed by my favorite mentor <a href="https://github.com/nikic">Nikita Popov</a>. This RFC counters <em>public property by default</em> approach and <strong>reduces the redundant code at the same time</strong>.</p>
<p><br></p>
<p>Another counter point for public properties or methods nailed <a href="https://thephp.cc/company/consultants/stefan-priebsch">Stefan Priebsch</a>:</p>
<img src="/assets/images/posts/2020/privates_meme.jpg" class="img-thumbnail">
<h2 id="how-many-public-methods-has-your-project">How Many Public Methods Has Your Project?</h2>
<p>That meme had just 1 public method. But what about real projects?</p>
<p>To get <strong>real numbers from a real project</strong>, I run <a href="https://matthiasnoback.nl/2019/09/using-phploc-for-quick-code-quality-estimation-part-1">phploc</a> to measure size of <a href="https://github.com/rectorphp/rector">Rector's code</a>.</p>
<pre><code class="language-bash">phploc src packages rules --exclude tests</code></pre>
<p>These are <strong>the results</strong>:</p>
<pre><code class="language-bash">Size
  Non-Comment Lines of Code (NCLOC)              99033 (85.46%)

Structure
  Methods                                         5185
    Visibility
      Public Methods                              3516 (67.81%)</code></pre>
<p><br></p>
<p>Let's put 100 children in one square:</p>
<img src="/assets/images/posts/2020/privates_100_children.jpg" class="img-thumbnail">
<p>This <strong>is 3 500 children</strong>:</p>
<img src="/assets/images/posts/2020/privates_3500_children.jpg" class="img-thumbnail">
<p>There is <a href="https://github.com/rectorphp/rector/blob/master/docs/AllRectorsOverview.md">~480 Rector rules</a>, each has 3 public methods required by interface contract. That's 1 500 public contract methods. Even if we remove thos, 3 500 - 1 500, we still have <strong>over 2 000 public methods</strong>:</p>
<img src="/assets/images/posts/2020/privates_2000_children.jpg" class="img-thumbnail">
<p>Good luck with getting all your 2 000 children to university... or bed ... or make them breakfast for them... for one day. No pressure, right?</p>
<h2 id="how-to-take-care-for-as-few-children-as-possible">How to Take Care for as Few Children as Possible?</h2>
<p>We want to reduce the number of public methods to a minimum. How?</p>
<h3 id="1-a-method-by-method-human-refactoring">1. A Method by Method Human Refactoring</h3>
<p>We can go for a method by method refactoring with careful analysis if the method should be public or private and how we can change it to private. <strong>It takes time, patience, attention, human performance and doesn't scale on massive projects.</strong> That's way too expensive.</p>
<p><em class="fas fa-fw fa-times text-danger fa-lg"></em></p>
<p>What simpler way can we apply today on an any-sized project? What low hanging fruit can we focus on?</p>
<h3 id="2-fake-public-method-detection">2. Fake Public Method Detection</h3>
<p>What is <em>fake public</em> method, property, or constant?</p>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

final class SomeController
{
    /**
     * @Route(path="/")
     */
    public function homepage()
    {
        return $this-&gt;prepareData();
    }

    public function prepareData(): array
    {
        return ['status' =&gt; 'quarantine'];
    }
}</code></pre>
<p>Can you see it?</p>
<pre><code class="language-diff">+public function prepareData(): array
-private function prepareData(): array</code></pre>
<p><em class="fas fa-fw fa-check text-success fa-2x"></em></p>
<p><br></p>
<p>Same applies for constants and properties, that is <strong>used only locally in the class they're defined in</strong>:</p>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

final class AirCleaner
{
    public const NAME = 'cleaner';

    public function getName()
    {
        return self::NAME;
    }
}</code></pre>
<pre><code class="language-diff">-public const NAME = 'cleaner';
+private const NAME = 'cleaner';</code></pre>
<p><em class="fas fa-fw fa-check text-success fa-2x"></em></p>
<p>The most common <em>false publics</em> are constants because they're <a href="https://wiki.php.net/rfc/class_const_visibility">last that got visibility in PHP 7.1</a>.</p>
<h2 id="why-should-we-care-about-privatization">Why Should We Care about Privatization?</h2>
<p>&quot;Nice intellectual exercise, Tom, but nothing more,&quot; you may think, and close this post and go back to your quarantine work.</p>
<p>But remember our children:</p>
<blockquote class="blockquote text-center">
    A public method is like a child: Once you've written it,<br>
    you are going to maintain it for the rest of its life.
</blockquote>
<p>What happens if we don't care about it? Well, <strong><code>public</code> element is designed to be used somewhere else.</strong></p>
<p>Same way <code>static</code> method is a method to be used everywhere (and <a href="/blog/2018/04/26/how-i-got-into-static-trap-and-made-fool-of-myself">then slowly kill you</a>/).</p>
<p><br></p>
<p>It's easy to spot now because we focus on ten lines of code, we knew that's a controller method only, and that's a clear miss-use. But in the real world, <strong>we don't have so much time to think about 10 lines of code</strong>.</p>
<p><br></p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">10 lines of code = 10 issues.<br><br>500 lines of code = "looks fine."<br><br>Code reviews.</p>— I Am Devloper (@iamdevloper) <a href="https://twitter.com/iamdevloper/status/397664295875805184?ref_src=twsrc%5Etfw">November 5, 2013</a></blockquote>
<p><br></p>
<p>Limited attention span is one of the reasons. We had plenty of such potential <em>legacy back doors</em> in Rector:</p>
<img src="/assets/images/posts/2020/privates_sample.png" class="img-thumbnail">
<h2 id="unused-method">Unused Method</h2>
<p>Another reason is that <strong>the method is completely unused</strong>, but PHPStorm won't tell you because it is <code>public</code>. When we turned this method into <code>private</code>, we saw it's unused, and we got rid of it:</p>
<img src="/assets/images/posts/2020/privates_sample_2.png" class="img-thumbnail">
<h2 id="not-used-method">Not-Used Method</h2>
<p>The effect of privatization is surprising. Take this case:</p>
<img src="/assets/images/posts/2020/privates_sample_3.png" class="img-thumbnail">
<p>How can the privatization of methods lead to more code? Easily. The method was <code>public</code>, but never used. After Rector run it was <code>private</code>, but never used and then removed... and that could work.</p>
<p>Actually, that was not a feature, it was a bug. <strong>This method should have been used many months ago.</strong> So we used it in the right place, the feature was complete, and potential future bug.</p>
<p><br></p>
<p>Do you want to know all the possible code changes?</p>
<p><a href="https://github.com/rectorphp/rector/pull/3084/commits/626287ec76ed16d15136115e1510b2154c2712a9" class="btn btn-dark btn-sm">
<em class="fab fa-github fa-fw"></em>
See pull-request
</a></p>
<h2 id="in-ci-pipeline-or-won-t-happen">In CI pipeline, or Won't Happen</h2>
<p>What now? Go to your code and check method one by one clicking on them in PHPStorm to <em>Find Usages</em>, if they're used somewhere else or <em>false public</em> and should be private. It will make your code much more robust and senior.</p>
<p>Just kidding. Just use new Rector set <code>privatization</code> locally and it to your CI:</p>
<pre><code class="language-bash">vendor/bin/rector process src --set privatization</code></pre>
<p>It has now 4 rules:</p>
<ul>
<li><strong>privatize local-only constant</strong></li>
<li><strong>privatize local-only property</strong></li>
<li><strong>privatize local-only method</strong></li>
<li><strong>privatize local getter to local property</strong></li>
</ul>
<p>Do you have an idea for another privatization rule? <a href="https://github.com/rectorphp/rector/issues/new?template=2_Feature_request.md">Let us know on GitHub</a>.</p>
<p>Stay lazy and alive!</p>
<p><br></p>
<p>Happy coding!</p>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/03/30/dont-show-your-privates-to-public</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/03/30/dont-show-your-privates-to-public#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Doctrine Entity Typed Properties With PHP 7.4 ]]></title>
                <link>https://tomasvotruba.com/blog/2020/03/23/doctrine-entity-typed-properties-with-php74</link>
                <description><![CDATA[ <p>Recently we've upgraded our <a href="https://pehapkari.cz">Czech PHP community website</a> to PHP 7.4. As a side effect, it broke most of our entities.
Do you love how making language more strict reveals weak points in your code just by using it?
<br>
<br>
Today we'll look at <strong>the impact of typed properties on weak points of Doctrine entities and how to solve them</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="the-collections">The Collections</h2>
<p>In the Czech PHP community, we have skilled trainers that share their knowledge with others on training. We help them to share the knowledge by handling the tedious organization processes for them and let them enjoy the training day itself.</p>
<p>Each trainer has many trainings, so the <code>Trainer</code> entity looks like this in PHP 7.3-:</p>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Entity;

use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;

/**
 * @ORM\Entity
 */
class Trainer
{
    /**
     * @ORM\OneToMany(targetEntity=Training::class, mappedBy="trainer")
     * @var Collection|Trainer[]
     */
    private $trainings = [];

    /**
     * @param Collection&lt;int, Training&gt;|Training[] $collection
     */
    public function setTrainings(array $collection): void
    {
        $this-&gt;trainings = $collection;
    }

    /**
     * @return Collection&lt;int, Training&gt;|Training[]
     */
    public function getTrainings(): iterable
    {
        return $this-&gt;trainings;
    }
}</code></pre>
<p>What can we say about this code?</p>
<ul>
<li>works in PHP 7.4</li>
<li>provides IDE enough information about types for autocomplete</li>
<li>makes PHPStan happy with types</li>
<li>...broke with PHP 7.4 typed properties :)</li>
</ul>
<p>How do we <strong>add property types without breaking everything</strong>?</p>
<h2 id="1-the-property">1. The Property</h2>
<p>In PHP 7.4, <strong>the property is the king</strong> - the rest of the code has to respect the type, and it's the default value. Let's start with that.</p>
<pre><code class="language-diff"> /**
  * @ORM\OneToMany(targetEntity=Training::class, mappedBy="trainer")
  * @var Collection|Trainer[]
  */
-private $trainings = [];
+private array $trainings = [];
+private iterable $trainings = [];
+private Collection $trainings = [];</code></pre>
<p>What is the type here?</p>
<ul>
<li>1) <code>array $trainings = [];</code></li>
<li>2) <code>iterable $trainings = [];</code></li>
<li>3) <code>Collection $trainings = [];</code></li>
</ul>
<p>Pick one...</p>
<p><br>
<br>
<br></p>
<pre><code class="language-diff"> /**
  * @ORM\OneToMany(targetEntity=Training::class, mappedBy="trainer")
  * @var Collection&lt;int, Trainer&gt;|Trainer[]
  */
-private $trainings = [];
+private Collection $trainings = [];</code></pre>
<p>This one worked the best (= code worked).</p>
<p>But PHP 7.4 now complains that the <code>Collection</code> object cannot be <code>[]</code> by default.</p>
<pre><code class="language-diff"> /**
  * @ORM\OneToMany(targetEntity=Training::class, mappedBy="trainer")
  * @var Collection&lt;int, Trainer&gt;|Trainer[]
  */
-private Collection $trainings = [];
+private Collection $trainings;</code></pre>
<p>But PHP 7.4 now complains that it's <code>null</code> by default, so it has to nullable.</p>
<blockquote class="blockquote text-center">
If it's not enforced, nobody cares.
</blockquote>
<p>Here is where <em>best practices</em> become defaults. Do you know the &quot;<a href="https://www.doctrine-project.org/projects/doctrine-orm/en/2.7/reference/best-practices.html#initialize-collections-in-the-constructor">initialize collections in the constructor</a>&quot; best practice?</p>
<img src="/assets/images/posts/2020/typed_doctrine_properties_best_practise.png" class="img-thumbnail">
<p>This was an optional improvement to help Doctrine work in a more realiable way. Well, it <em>was</em>.
Now we <strong>have to use it</strong> to make our code work:</p>
<pre><code class="language-diff"> &lt;?php

 declare(strict_types=1);

 namespace App\Entity;

 use Doctrine\Common\Collections\ArrayCollection;
+use Doctrine\Common\Collections\Collection;
 use Doctrine\ORM\Mapping as ORM;

 /**
  * @ORM\Entity
  */
 class Trainer
 {
     // ...

+    public function __construct()
+    {
+        $this-&gt;trainings = new ArrayCollection();
+    }

     // ...
 }</code></pre>
<p>All right, we have the correct type, it's initialized in the constructor.</p>
<p>Our property is ready!</p>
<p><br></p>
<h2 id="2-getter-method">2. Getter Method?</h2>
<pre><code class="language-php">&lt;?php

// ...

/**
 * @return Collection&lt;int, Training&gt;|Training[]
 */
public function getTrainings(): iterable
{
    return $this-&gt;trainings;
}</code></pre>
<p>What about the return type? Look at the property type:</p>
<pre><code class="language-diff"> &lt;?php

 /**
  * @return Collection&lt;int, Training&gt;|Training[]
  */
-public function getTrainings(): iterable
+public function getTrainings(): Collection
 {
     return $this-&gt;trainings;
 }</code></pre>
<p>And we're ready to go!</p>
<h2 id="3-setter-method">3. Setter Method?</h2>
<p>I bet you handled this already from the top of your head, so let's compare:</p>
<pre><code class="language-diff"> &lt;?php

 /**
  * @param Collection&lt;int, Training&gt;|Training[] $trainings
  */
-public function setTrainings(array $trainings): void
+public function setTrainings(Collection $trainings): void
 {
     $this-&gt;trainings = $trainings;
 }</code></pre>
<p><br></p>
<p>Do you want to see real code? Look at the full pull request:</p>
<p><a href="https://github.com/pehapkari/pehapkari.cz/pull/297/files"></p>
<img src="/assets/images/posts/2020/typed_doctrine_properties_collection.png" class="img-thumbnail">
<p></a></p>
<h2 id="easyadminbundle">EasyAdminBundle?</h2>
<p>Have you tried <a href="https://github.com/EasyCorp/EasyAdminBundle">EasyAdminBundle</a> to delegate your full administration? If not, give it go.</p>
<p><strong>It creates data grids, forms, edit/update/add/delete controllers. All this with simple and beautiful UX. All you need to do is define your entities and register them in YAML config.</strong> I love it!</p>
<p><br></p>
<p>Huge thanks to <a href="https://github.com/javiereguiluz">Javier Eguiluz</a>, creator and maintainer of this bundle, who's also behind amazing <strong>690&nbsp;issues</strong> of <a href="https://symfony.com/blog/category/a-week-of-symfony">Weeks of Symfony</a>.</p>
<p><br></p>
<p>To make this all happen, the design choice is to allow every property to be nullable. Some people disagree and try to make EasyAdminBundle work with value objects. But they fail by killing the simplicity and re-inventing admin again.</p>
<blockquote class="blockquote text-center">
There are no best solutions, there are just trade offs.
</blockquote>
<p>So what does <em>every property is nullable</em> mean for PHP 7.4 typed properties?</p>
<pre><code class="language-diff">&lt;?php

declare(strict_types=1);

namespace App\Entity;

use Doctrine\ORM\Mapping as ORM;

/**
 * @ORM\Entity
 */
class Training
{
    /**
     * @ORM\Id()
     * @ORM\GeneratedValue()
     * @ORM\Column(type="integer")
-    * @var int
     */
-   private $id;
+   private ?int $id = null;

    // ...
}</code></pre>
<p>Do you prefer code over text? <a href="https://github.com/pehapkari/pehapkari.cz/pull/297/files">Here is the PHP 7.4 upgrade pull-request</a>.</p>
<h2 id="upgrade-instantly-with-rector">Upgrade Instantly with Rector</h2>
<p>I did not do the upgrade pull-request myself (I'm way too lazy for that), <a href="https://getrector.org">Rector</a> did. Thanks to testing out Rector on Doctrine entities, its PHP 7.4 set got much more precise.</p>
<p><strong>Do you want to see how Rector can upgrade your code?</strong></p>
<pre><code class="language-bash">composer require rector/rector --dev
vendor/bin/rector process src --set php74 # add "--dry-run" to check first</code></pre>
<p>Tip: Do you want to update your <code>Collection</code> syntax for PHPStorm and PHPStan friendly?</p>
<pre><code class="language-bash">vendor/bin/rector process src --set doctrine-code-quality</code></pre>
<p>If you got any troubles, <a href="https://github.com/rectorphp/rector/issues/new/choose">let us know on GitHub</a>. That's all, folks.</p>
<p><br></p>
<p>Happy coding &amp; stay alive!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/03/23/doctrine-entity-typed-properties-with-php74</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 23 Mar 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-10-01UTC00:00:000</updated>
                    <atom:updated>Thu, 01 Oct 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Thu, 01 Oct 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/03/23/doctrine-entity-typed-properties-with-php74#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Statie is Dead, Long live Symfony Static Dumper ]]></title>
                <link>https://tomasvotruba.com/blog/2020/03/16/statie-is-dead-long-live-symfony-static-dumper</link>
                <description><![CDATA[ <p>Last week <a href="/blog/2020/03/09/art-of-letting-go/">I wrote about how Statie turned from a feature to a burden</a> and why we had to let it go.
<br>
<strong>What will replace it? How do you migrate?</strong></p> ]]></description>
                <content:encoded><![CDATA[ <p>Deprecations without replacements are like nails in the coffin of your forehead while reciting a poem about the beauty of life.</p>
<p>The <a href="github.com/tomasvotruba/friendsofphp.org">friendsofphp.org</a> and this blog <strong>still uses PHP and is deployed to GitHub pages</strong>. How is that possible without Statie?</p>
<p>From Statie, we <strong>fluently switch to brand new package - <a href="https://github.com/symplify/symfony-static-dumper">Symfony Static Dumper</a></strong>. A single command that <strong>generates HTML and CSS from your Symfony application.</strong></p>
<p><br></p>
<p>In short, it looks like this:</p>
<img src="/assets/images/posts/2020/dump_static_site_demo.gif" class="img-thumbnail">
<p><br></p>
<h2 id="killer-features">Killer Features?</h2>
<p>What I love the most about it, that the Symfony Static Dumper <strong>only handles the missing part - generate HTML and CSS</strong>. All the rest is up to you, your imagination. You code standard Symfony application, nothing special, nothing weird.</p>
<p>Do you want more advantages?</p>
<ul>
<li>no more Javascript to run the website <em class="fas fa-fw fa-lg fa-check text-success"></em></li>
<li>we can use most of the Symfony Ecosystem <em class="fas fa-fw fa-lg fa-check text-success"></em></li>
<li>we can use database, even Doctrine <em class="fas fa-fw fa-lg fa-check text-success"></em></li>
<li>develop normal Symfony application, then dump the HTML + CSS on deploy <em class="fas fa-fw fa-lg fa-check text-success"></em></li>
<li>standard Symfony app structure <em class="fas fa-fw fa-lg fa-check text-success"></em></li>
<li>use <code>{{ path('contact') }}</code> in templates <em class="fas fa-fw fa-lg fa-check text-success"></em></li>
<li>use Symfony plugin <em class="fas fa-fw fa-lg fa-check text-success"></em></li>
<li>single command use <em class="fas fa-fw fa-lg fa-check text-success"></em></li>
</ul>
<h2 id="how-to-migrate-from-statie-to-symfony-static-site-dumper">How to Migrate from Statie to Symfony Static Site Dumper?</h2>
<p>Do you still use Statie? Don't worry; we have a migration path for you.</p>
<h3 id="add-symfony-packages">Add Symfony Packages</h3>
<p>First, you need to install Symfony packages:</p>
<pre><code class="language-bash">composer require symfony/http-foundation symfony/asset symfony/twig-bridge symfony/twig-bundle symfony/flex symplify/flex-loader symplify/autodiscovery symfony/framework-bundle symfony/dotenv doctrine/cache erusev/parsedown-extra</code></pre>
<p>And replace the static generator:</p>
<pre><code class="language-bash">composer require symplify/symfony-static-dumper
composer remove symplify/statie</code></pre>
<h3 id="setup-basic-symfony-app">Setup Basic Symfony App</h3>
<ul>
<li>add <a href="https://github.com/symfony/demo/blob/master/config/bootstrap.php"><code>config/bootstrap.php</code></a></li>
<li>add <a href="https://github.com/symfony/demo/blob/master/bin/console"><code>bin/console</code></a></li>
<li>add <a href="https://github.com/TomasVotruba/friendsofphp.org/blob/master/src/HttpKernel/FopKernel.php"><code>src/HttpKernel/YourAppKernel.php</code></a></li>
</ul>
<h3 id="move-code-source-code">Move <code>/source</code></h3>
<ul>
<li>Templates to <code>/templates</code></li>
<li>Public content, e.g. <code>robots.txt</code> or <code>CNAME</code> to <code>/public</code></li>
</ul>
<h3 id="update-ci">Update CI</h3>
<pre><code class="language-diff">-vendor/bin/statie generate source
+bin/console dump-static-site</code></pre>
<h3 id="pages-to-controller-templates">Pages to Controller Templates</h3>
<p><strong>Before:</strong></p>
<pre><code class="language-twig">---
layout: "_layouts/default.twig"
title: "Thank You"
id: thank_you
commit_limit: 5
---

&lt;div class="container" id="contact"&gt;
    &lt;h1&gt;{{ title }}&lt;/h1&gt;

    &lt;p class="text-center bigger"&gt;&lt;/p&gt;
&lt;/div&gt;</code></pre>
<p><strong>After:</strong></p>
<pre><code class="language-twig">{# templates/thanky_you.twig #}
{% extends "default.twig" %}

{% block content %}
    &lt;div class="container" id="contact"&gt;
        &lt;h1&gt;{{ title }}&lt;/h1&gt;

        &lt;p class="text-center bigger"&gt;&lt;/p&gt;
    &lt;/div&gt;
{% endblock %}</code></pre>
<pre><code class="language-php">// src/Controller/ThankYouController.php
namespace YourWebsite\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

final class ThankYouController extends AbstractController
{
    /**
     * @Route(path="thank-you", name="thank_you")
     */
    public function __invoke(): Response
    {
        return $this-&gt;render('thank_you.twig', [
            'title' =&gt; 'Thank You',
            'id' =&gt; 'thank_you',
            'commit_limit' =&gt; 5,
        ]);
    }
}</code></pre>
<p>If you need more inspiration, look at these pull-requests:</p>
<ul>
<li><a href="https://github.com/TomasVotruba/tomasvotruba.com/pull/940">migration of TomasVotruba.com</a></li>
<li><a href="https://github.com/TomasVotruba/friendsofphp.org/pull/162">migration of FriendsOfPhp.org</a> - <a href="https://github.com/TomasVotruba/friendsofphp.org/pull/169">part #2</a></li>
</ul>
<h2 id="how-to-set-it-up">How to Set it Up?</h2>
<p>All the essential information is in <a href="https://github.com/symplify/symfony-static-dumper">README</a>.</p>
<p>Install the package via composer:</p>
<pre><code class="language-bash">composer require symplify/symfony-static-dumper</code></pre>
<p>Register services - no Flex, no bundles, just simple config:</p>
<pre><code class="language-yaml"># config/services.yaml
imports:
    - { resource: '../vendor/symplify/symfony-static-dumper/config/config.yaml' }</code></pre>
<p>And dump static website to <code>/output</code> directory:</p>
<pre><code class="language-bash">bin/console dump-static-website</code></pre>
<p>To see the website, just run the local server:</p>
<pre><code class="language-bash">php -S localhost:8001 -t output</code></pre>
<p>That's it!</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/03/16/statie-is-dead-long-live-symfony-static-dumper</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/03/16/statie-is-dead-long-live-symfony-static-dumper#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Art of Letting Go ]]></title>
                <link>https://tomasvotruba.com/blog/2020/03/09/art-of-letting-go</link>
                <description><![CDATA[ <p>Recently I come to a dead end with one of my projects. I felt it doesn't bring value to me, to people that use it, and to neither to the open-source community. I felt sour about it for the last 3 months, confused about what to do next.</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="it-works-for-a-time">It Works... For a Time</h2>
<p>When I created this project in 2016, it worked well. It worked well, and it brought me value. I enjoyed it, and it was exactly what I needed.
I was also frustrated by the previous tool I used - <a href="https://github.com/sculpin/sculpin">Sculpin</a> - that didn't work for PHP 7. <a href="https://github.com/symplify/statie">Statie</a> was a pet project for me, to <strong>code website in Markdown and PHP and publish it on the Internet</strong> via GitHub Pages for free.</p>
<p>The 0 $ was partial motivation, but <strong>I was astonished much more by the miracle of deploying the PHP app into HTML and CSS</strong>. In times of MVC frameworks build on Request and Response, it took me many days to shift my mind.</p>
<p>I had my first talk about Statie abroad, in Berlin I think, and I enjoyed it. Why? It was my first talk in English, and <a href="/blog/2018/07/23/5-signs-should-never-have-a-talk-abroad/">I was so scared</a> about the feedback and people will understand my poor English (at least what I thought about it).</p>
<p>I wrote a few posts about it and also used it for our community website <a href="https://pehapkari.cz">Pehapkari.cz</a> - proudly of a piece of art at that time. I mean, <strong>anyone could edit the website on GitHub</strong>, and it was <strong>deployed to production after merging the pull-request</strong> in a matter of 5 minutes. How long does it take to projects, you know?</p>
<p>Also, it didn't got much popularity:</p>
<p><a href="https://packagist.org/packages/symplify/statie/stats"></p>
<img src="/assets/images/posts/2020/letting_go_bad_stats.png" class="img-thumbnail">
<p></a></p>
<h2 id="change-is-knocking-on-the-door-one-step-at-a-time">Change is Knocking on The Door One Step at a Time</h2>
<p>The first signs are very subtle. Few of my PHP friends used Jekyll or Sculpin around 2017, then switched to projects not written in PHP - like <a href="https://gohugo.io">Hugo</a> or <a href="https://www.gatsbyjs.org">Gatsby</a>. I didn't think much of it.</p>
<p><br></p>
<p>Statie generated code from PHP. When you change the code, <strong>it runs full PHP command and regenerates the whole website</strong>, even if you change only one post. To make this fast, we used Javascript. Write code in PHP and use Javascript to run PHP to generated HTML and CSS... it started like scratching behind the ear with middle toes of both of your legs.</p>
<p><br></p>
<p>Our Pehapkari.cz community grew further than we first imagined. In Spring 2019, we started to need more than just a static website. We needed forms, cron jobs, and emails.</p>
<p>How can we make it happen? Symfony, DigitalOcean, and Docker came as a way to go. We <a href="https://github.com/pehapkari/pehapkari.cz/pull/47">switched from Statie to Symfony</a>. <strong>I was surprised how easy it was</strong>. It might seem right, but it was a bad sign for Statie.</p>
<img src="/assets/images/posts/2020/letting_go_pehapkari_switch.png" class="img-thumbnail">
<p><br></p>
<p>The next sign came in the Autumn of 2019. <a href="https://github.com/symplify/symplify/pull/1641">Statie dropped Latte support</a>, as it was buggy and didn't work well with JavaScript rebuild. What was Statie? A Symfony Kernel? Static Site Generator?</p>
<p><strong>A few months later, I felt like I'm running in circles</strong>. Something was wrong, but I didn't know what it was.</p>
<blockquote class="blockquote text-center mb-5 mt-5">
    What you know you can't explain, but you feel it. You've felt it your entire life,<br>
    that there's something wrong with the world.
    <br><br>
    You don't know what it is, but it's there,<br>
    like a splinter in your mind, driving you mad
</blockquote>
<h2 id="time-for-self-reflection">Time for Self-Reflection</h2>
<p>What now? One of the few things that help me in complicated situations with coding is Occam's razor.</p>
<img src="/assets/images/posts/2020/letting_go_occams_razor.jpg" class="img-thumbnail">
<p>I paused and asked myself a few questions.</p>
<p><br></p>
<p>What main purpose of Statie?</p>
<ul>
<li><em>To generate HTML and CSS web from Twig and some PHP.</em></li>
</ul>
<p><br></p>
<p>How do I use it?</p>
<ul>
<li><em>In a command line.</em></li>
</ul>
<p><br></p>
<p>Why was it so easy to switch to Symfony?</p>
<ul>
<li><em>Because they both run on Symfony Kernel, configs, Twig, DependencyInjection, and other Symfony components</em></li>
</ul>
<p><br></p>
<p>What is it similar too?</p>
<ul>
<li><em>Symfony application</em></li>
</ul>
<p><br></p>
<p>How is it unique to anything else on the market?</p>
<ul>
<li>...</li>
</ul>
<p><br></p>
<h3 id="unique-selling-point">Unique Selling Point</h3>
<p>A <em>unique selling point</em> is a term from a business. If investors want to get an idea about startup value, they ask CEOs what their product exceptional compared to the competition is. <strong>It can be convenient in coding as well</strong>. e.g., how does your private MVC differ from Symfony MVC? In only 5 %? Then it's obvious it would save you huge costs to switch to Symfony.
Occam's razor in practice.</p>
<p><br></p>
<p>Saying that the last question bugged me the most: <strong>How is it unique to anything else on the market?</strong></p>
<p><em>Well, it's like Symfony, but it generates static website. So I made a Symfony application that generates a static website? Isn't that what Symfony does anyway? When we visit a controller, it shows HTML and CSS after all, right? It's just not cached... but is it though?</em></p>
<p>I tried a simple demo a week ago. When I render Symfony controller to string... I got a bitter-sweet surprise: <strong>it's HTML</strong>.</p>
<blockquote class="blockquote text-center">
    Then I realized a simple truth: I wrote a Symfony clone all along.
</blockquote>
<img src="/assets/images/posts/2020/letting_go_double.jpg" class="img-thumbnail">
<h2 id="why-let-go">Why Let Go?</h2>
<p>You would say, &quot;why change something that works&quot;?</p>
<p>Sometimes, a <strong>new opportunity is waiting behind the corner</strong>. But to allow an opportunity to come, <strong>we have to make space for it first</strong>. If we'd stick with old phones or GSM, we block ourselves from using smartphones with an instant internet connection.</p>
<p><br></p>
<p>Remember not to have high expectations. The next thing doesn't have to be as impressive as it often seems. It's like with relationships with man or woman, a new friend, a new job or a new country you move in. If we let go of something that doesn't work for us, we can't expect the next thing to solve all our problems.</p>
<blockquote class="blockquote text-center">
    There are no solutions. There are only trade-offs.
</blockquote>
<p>It will be only better and <strong>that's good enough because that how we learn and grow</strong> &ndash; 1 % at a time.</p>
<img src="/assets/images/posts/2020/letting_go_better.png" class="img-thumbnail">
<h2 id="spread-the-code-you-want-to-see-in-the-world">Spread The Code you Want to See in The World</h2>
<p>I realized I made the project that worked before, <strong>but doesn't anymore</strong>. And that's the lesson for open-source I want to see in the world.
<strong>I don't want to spread bad habits amongst programmers who read my code</strong> when I already know it's wrong. I feel it's my personal responsibility to correct mistakes of past, moreover when <a href="/blog/2020/02/24/how-many-days-of-technical-debt-has-your-php-project/">the code teaches programmers</a>.</p>
<blockquote class="blockquote text-center">
    If something doesn't work and we feel there might be a better way,<br>
    we should pursue it, even though we don't know the outcome yet.
</blockquote>
<p><strong>What works today doesn't have to work in the future</strong>. And probably won't. New PHP framework may appear in 2020, and it will be so good that we'll all migrate to it in 2022. It would not be the first time.</p>
<h2 id="verify-your-feelings-with-experiment">Verify Your Feelings with Experiment</h2>
<p>Before all this really happened and I made sense to it, we have to <strong>test the assumption</strong>:</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Talking about Occam's razor... this is how Statie 20-lines implementation looks like in normal Symfony app 😱<br><br>Time to let go? <a href="https://t.co/1Fxk31wWaf">pic.twitter.com/1Fxk31wWaf</a></p>— Tomas Votruba (@VotrubaT) <a href="https://twitter.com/VotrubaT/status/1237437559254417408?ref_src=twsrc%5Etfw">March 10, 2020</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p><br></p>
<p><strong>If you don't know, test it, try it.</strong> Your feelings might be right, your feelings might be wrong, but only real test in real life will tell.</p>
<ul>
<li><a href="https://github.com/TomasVotruba/friendsofphp.org/pull/169/files">PR on friendsofphp.org</a></li>
</ul>
<p>In a few hours, I got a working generator and deploy on <a href="https://friendsofphp.org">friendsofphp.org</a>. It worked!</p>
<p><br></p>
<p>So I made a slightly bigger experiment on my blog website with over 230 posts.</p>
<ul>
<li><a href="https://github.com/TomasVotruba/tomasvotruba.com/pull/940">PR on tomasvotruba.com</a></li>
</ul>
<p>I got stuck with a route with an argument - a blog post detail - but after a few fixes, it worked too!</p>
<h2 id="the-letting-go-in-practise">The Letting Go in Practise</h2>
<p>Since that moment, I knew, Statie needs to be deprecated. To spread the miss-information, I had to <a href="https://github.com/TomasVotruba/tomasvotruba.com/pull/944">deprecate 8 posts</a> about Statie on my blog.</p>
<p>Also, before we burn bridges, <strong>there should be a path to follow</strong>. And that is <a href="https://github.com/symplify/symfony-static-dumper">Symfony Static Dumper</a> with only 550 lines of code (compared to Statie with over 4500 lines). A package that you plugin in Symfony app and works the same way Statie does.
I'll write about in the next post, which will focus only on migration.</p>
<p><a href="https://www.youtube.com/watch?v=moSFlvxnbgk"></p>
<img src="/assets/images/posts/2020/letting_go_frozen.jpg" class="img-thumbnail">
<p></a></p>
<p>If you haven't heard, the song is a blast!</p>
<p><br></p>
<p>Happy coding and stay healthy!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/03/09/art-of-letting-go</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 09 Mar 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/03/09/art-of-letting-go#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ We Do Not Need Senior Developers, We Need Senior Codebases ]]></title>
                <link>https://tomasvotruba.com/blog/2020/03/02/we-do-not-need-senior-developers-we-need-senior-code-bases</link>
                <description><![CDATA[ <p>&quot;We're looking for a Senior PHP Developer.&quot;</p>
<p>&quot;Are you a senior or a junior?&quot;</p>
<p>&quot;How many senior developers does your company have?&quot;
<br>
<br>
These and similar questions come to appear when you're looking for a job. The IT market says it needs more senior developers.
<br><br>
I think there is more than enough. What we need are <strong>senior codebases</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <p>Let's say we have 2 companies.</p>
<p><br></p>
<p><strong>Company A</strong> has:</p>
<ul>
<li>3 years old project</li>
<li>3 junior developers</li>
<li>1 senior developer</li>
</ul>
<p><br></p>
<p><strong>Company B</strong> has:</p>
<ul>
<li>1 year old project</li>
<li>1 junior developer</li>
<li>3 senior developers</li>
</ul>
<p><br></p>
<p>Which company would you pick as a better place for your next full-time work?</p>
<p><br></p>
<h2 id="does-level-and-amount-matter">Does Level and Amount Matter?</h2>
<p>I have no idea. Fortunately, <em>Bruce Lee</em> is here to help us:</p>
<blockquote class="blockquote text-center">
    "It's like a finger pointing away to the moon.<br>
    Don't concentrate on the finger or you will miss all that heavenly glory."

    <footer class="blockquote-footer">Bruce Lee</footer></blockquote>
<p>The number of developers is not <em>that</em> relevant, neither is the number of developers by their skill.</p>
<p>It's <strong>better to have 2 developers instead of 1</strong>, so that they give each other feedback and grow more robust codebase. It's not such a difference if it's 3+.</p>
<p><br></p>
<h2 id="reality-of-hiring-process">Reality of Hiring Process</h2>
<p>The <em>junior/senior</em> game is an essential part of the manipulative process during hiring in companies around me. I'll describe a model hiring situation, that was shared by my friends who were looking for a job, and that I can relate to also from my personal experience.</p>
<p>John is looking for a job. He found both companies A and B. <strong>After 5 years in the same environment, where he has became an expert, he's looking for somebody to learn from</strong> - a skilled senior developer who's gonna be willing to share their experience.</p>
<p>John says that he's more attracted to company B, which has 3 senior developers, compared to a company with just 1. For him, it's a clear choice. He signs a full-time contract with a three-month trial period.</p>
<p><br></p>
<p>Now let's pause. <strong>What misconceptions have you spotted?</strong> Here are 3:</p>
<ul>
<li>senior developer === senior teacher</li>
<li>senior developer === experienced developer</li>
<li>3 senior developers have more experience than 1 senior developer</li>
<li>you can learn only from people</li>
</ul>
<p>All 4 of those are <code>false</code>.</p>
<p><br></p>
<p>The story continues. During the first week John only learns to run the application and to work with it. It takes some time, but he thinks it's healthy because it's a huge project.</p>
<p>The second week he realizes the senior developers don't have time to teach him or share any of their experience because they're busy fixing bugs happening in the codebase. All 3 of them!</p>
<p>Third week he thinks about the meaning of the word <em>senior</em> in this company. It's not as much about experience or teaching, but rather <strong>about being in the company for many years and understanding the codebase</strong> better than anybody else.</p>
<p>It's not about teaching, experience, nor programming skills. John's expectations have not been met. <strong>John is disappointed</strong>. But who's to blame? Should he blame himself for his bad decision?</p>
<p><br></p>
<p>The company also had expectations. John told them he's a senior developer, but his work during the 1st and 2nd week was very slow. Company owners feel like John is lying to them just to get more money. Their expectations have not been met. <strong>They're disappointed</strong> too... But who's to blame? Should they blame themselves for hiring him?</p>
<h2 id="we-forget-what-s-the-most-important">We Forget What's the Most Important</h2>
<p>We talked about junior, senior developers, teaching, experience, expectations, humans...
Everything was so lovely and shiny at the start. We had a great team of great developers that were joined by another great developer.</p>
<p><strong>Where did it go wrong? What have we missed?</strong></p>
<h2 id="maturity-of-the-codebase">Maturity of The Codebase</h2>
<p>People can make you feel better, and coffee might be good, the office might be on the highest floor with a beautiful and sunny view, your salary can be the highest you've ever seen. *<em>But how does it relate to your everyday work?</em></p>
<p>You're not going to enjoy a coffee while watching over your city from the glass-floor view all day, you're going to work with the codebase.</p>
<p>That's why before I say I'll cooperate with any company, <strong>I need to see the codebase first</strong>.</p>
<p><br></p>
<p>Instead of asking 3 questions at the top of this post, we should focus on:</p>
<ul>
<li>&quot;How mature is your codebase?&quot;</li>
<li>&quot;From <em>junior</em> = spaghetti code with no rules to <em>senior</em> = DI, finalized classes with CI that checks everything that can be checked and <a href="/blog/2019/11/18/how-to-delegate-code-reviews-to-ci/">handles code-review</a>, the newest PHP and version of your favorite framework... where does the codebase stand?&quot;</li>
<li>&quot;How do I fit into that level with my level of expertise?&quot;</li>
</ul>
<p><br></p>
<h2 id="itinder-miss-match">ITinder Miss Match</h2>
<p>The most companies I met <strong>have junior codebases, but they look for senior developers</strong>. That's wrong and will lead mostly to John's story with its unhappy ending.</p>
<p><strong>Junior developers can work with junior codebase</strong> because they're not being slowed down by codebase that is lower than their skill.</p>
<p>When senior developers are hired to orientate in a terrible codebase, they can't apply their experience with clean code, and they can't build a robust application with their high standards. They have to dig through the legacy code and try to fix leaking pipes.</p>
<h2 id="senior-codebase-is-the-best-teacher">Senior Codebase is the Best Teacher</h2>
<blockquote class="blockquote text-center">
    Monkey see, monkey doo.
</blockquote>
<p>That's how our brain works; we're just like monkeys. We come to a new project, and we instinctively copy patterns we see. If there are <a href="https://blog.codinghorror.com/the-broken-window-theory">broken windows all over the code</a>, we make more broken windows.</p>
<p>Some people join your team, some people stay for a long time enough to be called <em>seniors</em>, and some will leave. <strong>The codebase remains</strong> as long as your company exists. That's why it deserves the best treatment.</p>
<p>People learn from your codebase, it's their best teacher.</p>
<p><br></p>
<p>Let's say you have 2 teachers in your life.</p>
<p><strong>Teacher A</strong>:</p>
<ul>
<li>is teaching children for 5 years</li>
<li>always worked in the same school</li>
<li>went to university</li>
<li>wears a suit</li>
<li>makes a great coffee</li>
</ul>
<p><br></p>
<p><strong>Teacher B</strong>:</p>
<ul>
<li>doesn't belong to any school</li>
<li>wears a jumper and dirty trousers</li>
<li>has 80% test coverage</li>
<li>sleeps well, because CI works for them</li>
<li>tries to be better every day</li>
<li>exercises and eats healthy food, so their insides look good</li>
<li>you learn just by looking at how they do things</li>
</ul>
<p><br></p>
<p><strong>What teacher would you pick?</strong></p>
<p><br></p>
<blockquote class="blockquote text-center">
Take care of your codebase, and your codebase will take care of you when you're older.
</blockquote>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/03/02/we-do-not-need-senior-developers-we-need-senior-code-bases</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/03/02/we-do-not-need-senior-developers-we-need-senior-code-bases#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How Many Days of Technical Debt Has your PHP Project ]]></title>
                <link>https://tomasvotruba.com/blog/2020/02/24/how-many-days-of-technical-debt-has-your-php-project</link>
                <description><![CDATA[ <p>Every project has technical dept. But how would you measure it? With <a href="/blog/2018/05/21/is-your-code-readable-by-humans-cognitive-complexity-tells-you/">cognitive complexity</a>? The age of the framework? Any other guess?
<br>
<br>
This year I've started to use CI service, which tells you the number in days. And it works pretty well... how many days Rector has? Keep on learning.</p> ]]></description>
                <content:encoded><![CDATA[ <p><a href="https://sonarcloud.io/dashboard?id=rectorphp_rector"></p>
<img src="/assets/images/posts/2020/sonar_rector.png" class="img-thumbnail">
<p></a></p>
<h2 id="how-reliable-is-technical-dept-metric">How Reliable is Technical Dept Metric?</h2>
<p>When I first analyzed Rector, <strong>top 5 worst classes had these in common</strong>:</p>
<ul>
<li>&quot;instanceof programming&quot;, e.g., 10-15 cases of <code>instanceof</code>, then do return some logic</li>
<li>30-50 lines long methods within 1 class</li>
<li>classes of length 200-500 lines</li>
<li>pain points I knew were there, but I was afraid to do something about it</li>
</ul>
<p>As the first experiment, I picked a class that had <strong>5 hours and 40 minutes</strong> of technical debt, and I gradually converted it to <a href="/blog/2018/06/14/collector-pattern-for-dummies/">collector pattern</a>.</p>
<p>Do you want to see <strong>real code</strong>? Look at <a href="https://github.com/rectorphp/rector/pull/2767/files#diff-23d92ff042a5c83870af8b8d30bbdd8d">this PR with <code>NodeTypeResolver</code> decoupling to 10 new classes</a>.</p>
<h2 id="i-thought-removing-legacy-would-be-fun">I Thought Removing Legacy Would be Fun...</h2>
<p>...but removing my legacy code was rather painful. I had to <a href="/blog/2018/05/21/is-your-code-readable-by-humans-cognitive-complexity-tells-you/">load huge methods</a> to my working memory, think about relations of huge monolithic class and try to split into the smallest standalone pieces.</p>
<p><strong>After 3 hours of work, I was exhausted</strong>, but CI was passing, and the god class was gone. I pushed my work, merged the PR to the <code>master</code>, and waited for SonarCloud analysis... <strong>from 5:40 I got into 2:40</strong>. What?</p>
<p>After all this work, only such a small improvement? Don't take me wrong; the code was much improved, I'm just used to work more effectively with Rector-wave refactoring approach... no more <a href="https://freek.dev/1518-automatically-convert-your-code-to-php-74-syntax-using-rector">from months to days</a>?</p>
<p>This process taught me a lesson:</p>
<blockquote class="blockquote mt-5 mb-5 text-center">
    The legacy code will always be there. Observe it, measure it and remove it.
    <br>
    The later you start, the more it hurts. No matter what.
</blockquote>
<p>Since then, <strong>I'm adding SonarCube on every project I work on</strong>, so I know (not just <em>feel</em>):</p>
<ul>
<li>what is the pain point,</li>
<li>and where should we put the effort...</li>
</ul>
<p>...<strong>to keep code base fit for years</strong></p>
<p><br></p>
<p>Do you wonder <strong>how many days you have on your back</strong>? 10, 50 or over 100? Add your first SonarCube check into the CI and share with us in comments ↓</p>
<h2 id="how-to-add-sonarcube-to-your-github-project-in-6-steps">How to add SonarCube to your Github Project in 6 Steps?</h2>
<p>SonarCube is free for open-source and has a 1-week trial for private projects. I tried the 1-week trial on one private project, and then I saw the debt... <strong>365</strong>, <del>hours</del> days... you have to love it :D.</p>
<h2 id="1-add-project-on-sonarcloud">1. Add Project on SonarCloud</h2>
<ul>
<li><a href="https://sonarcloud.io/projects/create">Create new project</a></li>
</ul>
<img src="/assets/images/posts/2020/sonar_step_1.png" class="img-thumbnail">
<h2 id="2-authorize-your-github-project">2. Authorize Your Github Project</h2>
<img src="/assets/images/posts/2020/sonar_step_2.png" class="img-thumbnail">
<p>Add the file and commit to <code>master</code>.</p>
<h2 id="3-add-github-action">3. Add Github Action</h2>
<p>We need to have a way to tell the Sonar that new code was pushed. That's what Github Actions are for.</p>
<p>Add new workflow:</p>
<pre><code class="language-yaml"># .github/workflows/sonarcube.yaml
name: Sonar

on: push

jobs:
    sonar_cloud:
        runs-on: ubuntu-latest
        steps:
            -   uses: actions/checkout@master
                with:
                    # sonar needs non-shallow clone
                    fetch-depth: 10000

            -   uses: sonarsource/sonarcloud-github-action@master
                env:
                    ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
                    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}</code></pre>
<p>As you can see, there are 2 tokens to authorize.</p>
<h3 id="how-to-get-tokens">How to get Tokens?</h3>
<ul>
<li><a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a> → <code>ACCESS_TOKEN</code></li>
<li><a href="https://sonarcloud.io/account/security">https://sonarcloud.io/account/security</a> → <code>SONAR_TOKEN</code></li>
</ul>
<h3 id="where-to-place-them">Where to place Them?</h3>
<p>Add both tokens to your <em>secrets</em> sections in your repository: <a href="https://github.com/TomasVotruba/tomasvotruba.com/settings/secrets">https://github.com/TomasVotruba/tomasvotruba.com/settings/secrets</a></p>
<h2 id="4-add-badge-for-quick-link-to-sonarcloud-analysis">4. Add Badge for Quick Link to SonarCloud Analysis</h2>
<p>What is analysis good for if you can't reach it from your <code>README</code>? Be sure to add it there, so you can enter it quickly and share your excellent results with others.</p>
<ul>
<li>You can use the standard link: <a href="https://sonarcloud.io/dashboard?id=TomasVotruba_tomasvotruba.com">SonarCube</a></li>
<li>But I went for <strong>fancier custom badge</strong> (where you can add your technical dept <strong>days</strong> number):</li>
</ul>
<pre><code class="language-markdown">[![SonarCube](https://img.shields.io/badge/SonarCube_Debt-%3C2-brightgreen.svg?style=flat-square)](https://sonarcloud.io/dashboard?id=TomasVotruba_tomasvotruba.com)</code></pre>
<p><a href="https://sonarcloud.io/dashboard?id=TomasVotruba_tomasvotruba.com"><img src="https://img.shields.io/badge/SonarCube_Debt-%3C2-brightgreen.svg?style=flat-square" alt="SonarCube" /></a></p>
<p>Almost done...</p>
<h2 id="5-where-is-the-code">5. Where is the Code?</h2>
<p>We still have to tell SonarCube where to look for the <code>src</code> code. To do this, we need to add <code>sonar-project.properties</code>.</p>
<pre><code class="language-bash"># sonar-project.properties
# see https://sonarcloud.io/documentation/project-administration/narrowing-the-focus/
sonar.organization=TomasVotruba
sonar.projectKey=tomasvotruba.com

# relative paths to the source, wildcards don't work
sonar.sources=src</code></pre>
<p>To get <code>organization</code> and and <code>projectKey</code>, just split the key (<code>TomasVotruba_tomasvotruba.com</code>) by <code>_</code>.</p>
<h2 id="6-remove-spam-bot">6. Remove Spam Bot</h2>
<p><strong>Do this AFTER the first analysis of <code>master</code> branch is completed.</strong> If you do it earlier, the Github Action will not work.</p>
<p><br></p>
<p>There is a price for all the excellent features... you need to tolerate SonarCube <strong>spam bot on every commit</strong>.</p>
<img src="/assets/images/posts/2020/sonar_spam.png" class="img-thumbnail">
<p><strong>I hated it</strong> and wanted to delete all this Sonar-spam from my repositories, but there is one solution out of it.</p>
<p>Go to <a href="https://github.com/settings/installations">Github installations</a>:</p>
<img src="/assets/images/posts/2020/sonar_step_3.png" class="img-thumbnail">
<p>And remove it:</p>
<img src="/assets/images/posts/2020/sonar_step_4.png" class="img-thumbnail">
<p>We only need it for the first contact. Instead of it, <strong>you can authorize with Github Actions</strong>.</p>
<p><br></p>
<p>And that should be it! (If not, let me know in comments.)</p>
<p><a href="https://sonarcloud.io/dashboard?id=TomasVotruba_tomasvotruba.com"></p>
<img src="/assets/images/posts/2020/sonar_final.png" class="img-thumbnail">
<p></a></p>
<p><br></p>
<h2 id="trouble-shooting">Trouble Shooting</h2>
<h3 id="quot-please-add-the-secret-github-token-to-the-github-action-for-sonarcloud-quot">&quot;Please add the secret GITHUB_TOKEN to the GitHub action for SonarCloud&quot;</h3>
<p>If you see this message, don'T try to add <code>GITHUB_TOKEN</code> to your Secrets in GitHub repository. It won't let you.
Instead, re-use already existing secret in your <code>.github/workflows/sonarcube.yaml</code>:</p>
<pre><code class="language-diff"># .github/workflows/sonarcube.yaml
# ...
             -   uses: sonarsource/sonarcloud-github-action@master
                 env:
                     ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
                     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
+                    GITHUB_TOKEN: ${{ secrets.SONAR_TOKEN }}</code></pre>
<p><br></p>
<h3 id="dual-analysis">Dual Analysis?</h3>
<p>When CI fails for having both automatic and Github Action analysis, go to your project on SonarCube and disable it:</p>
<img src="/assets/images/posts/2020/sonar_one_method.png" class="img-thumbnail">
<p><br></p>
<h3 id="quot-project-was-never-analyzed-a-regular-analysis-is-required-before-a-branch-analysis-quot">&quot;Project was never analyzed. A regular analysis is required before a branch analysis.&quot;</h3>
<p>I tried many paths, but I'm not aware of any specific solution for this. <strong>Delete</strong> project on Sonarcloud, <strong>hide</strong> local GitHub Action workflow and <strong>star over</strong>.</p>
<p><br></p>
<p><strong>Now you see your weakest points and <a href="https://joshkaufman.net/how-to-fight-a-hydra">Fight the Hydra</a> with courage!</strong></p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/02/24/how-many-days-of-technical-debt-has-your-php-project</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 24 Feb 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/02/24/how-many-days-of-technical-debt-has-your-php-project#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Local Packages 3 Years Later ]]></title>
                <link>https://tomasvotruba.com/blog/2020/02/17/local-packages-3-years-later</link>
                <description><![CDATA[ <p>The first public idea about local packages was <a href="/blog/2017/12/25/composer-local-packages-for-dummies/">published over 3 years ago</a> after 1 year of internal testing.
<br><br>
<strong>How do they stand in 2020? How people use it wrong?</strong> Are they still the best option to keep low complexity in huge projects?</p> ]]></description>
                <content:encoded><![CDATA[ <p>Just a reminder: <em>what are local packages</em>?</p>
<p>Local packages are decoupled parts of code, located in own <code>packages/&lt;package-name&gt;</code> directory:</p>
<pre><code class="language-bash">/app
/packages
    /file-system
        /src
            FileSystem.php
        /tests
            FileSystemTest.php
/vendor
composer.json</code></pre>
<p>And loaded in <code>composer.json</code> with its PSR-4 namespace:</p>
<pre><code class="language-json">{
    "require": {
        "favorite/framework": "^5.0"
    },
    "autoload": {
        "psr-4": {
            "App\\FileSystem\\": "packages/file-system/src"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "App\\FileSystem\\Tests\\": "packages/file-system/tests"
        }
    }
}</code></pre>
<p>Simple.</p>
<p><br></p>
<p>Do you want to <strong>know more</strong>? Look at <a href="/blog/2017/12/25/composer-local-packages-for-dummies/">Composer Local Packages for Dummies</a>.</p>
<h2 id="how-people-use-it-wrong">How People Use it Wrong?</h2>
<h3 id="1-forgetting-code-src-code-directory">1. Forgetting <code>/src</code> Directory</h3>
<pre><code class="language-bash">/packages
    /file-system
        FileSystem.php</code></pre>
<p><em class="fas fa-fw fa-2x fa-times text-danger"></em></p>
<p><br></p>
<pre><code class="language-bash">/packages
    /file-system
        /src
            FileSystem.php</code></pre>
<p><em class="fas fa-fw fa-2x fa-check text-success"></em></p>
<p><br></p>
<h3 id="2-single-autoload">2. Single Autoload</h3>
<pre><code class="language-json">{
    "autoload": {
        "psr-4": {
            "Packages\\": "packages"
        }
    }
}</code></pre>
<p><em class="fas fa-fw fa-2x fa-times text-danger"></em></p>
<p><br></p>
<pre><code class="language-json">{
    "autoload": {
        "psr-4": {
            "Packages\\SpecificPackage\\": "packages/specific-package/src"
        }
    }
}</code></pre>
<p><em class="fas fa-fw fa-2x fa-check text-success"></em></p>
<p><br></p>
<h3 id="3-a-mix-of-paths-and-namespace">3. A mix of Paths and Namespace</h3>
<pre><code class="language-bash">/packages
    /FileSystem
        /src
            FileSystem.php</code></pre>
<p><em class="fas fa-fw fa-2x fa-times text-danger"></em></p>
<p><br></p>
<pre><code class="language-bash">/packages
    /file-system
        /src
            FileSystem.php</code></pre>
<p><em class="fas fa-fw fa-2x fa-check text-success"></em></p>
<h3 id="4-code-composer-json-code-in-packages">4. <code>composer.json</code> in Packages</h3>
<pre><code class="language-bash">/packages
    /file-system
        /src
            FileSystem.php
        composer.json</code></pre>
<p><em class="fas fa-fw fa-2x fa-times text-danger"></em></p>
<p><br></p>
<pre><code class="language-bash">/packages
    /file-system
        /src
            FileSystem.php</code></pre>
<p>This is only useful in case of <a href="/blog/2018/10/08/new-in-symplify-5-create-merge-and-split-monorepo-with-1-command/">monorepo that splits packages</a>, e.g. Symfony, Symplify. Not for local packages.</p>
<p><em class="fas fa-fw fa-2x fa-check text-success"></em></p>
<h2 id="how-to-do-it-right">How to Do it Right?</h2>
<ul>
<li>Register each package as a standalone line in <code>composer.json</code>:</li>
</ul>
<pre><code class="language-json">{
    "autoload": {
        "psr-4": {
            "App\\FileSystem\\": "packages/file-system/src",
            "App\\Auth\\": "packages/auth/src"
        }
    }
}</code></pre>
<ul>
<li>Keep <code>/app</code> separated.</li>
<li>Use <code>dash-format</code> for directory paths.</li>
<li>Use <code>CamelCase</code> for namespaces.</li>
<li>Use <code>packages/&lt;package-name&gt;/src</code> and <code>packages/&lt;package-name&gt;/tests</code> directory convention.</li>
<li>Use single root <code>composer.json</code> to autoload them all.</li>
<li>Use single root <code>phpunit.xml</code> to run test on them all.</li>
</ul>
<pre><code class="language-xml">&lt;phpunit
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="vendor/phpunit/phpunit/phpunit.xsd"
    bootstrap="vendor/autoload.php"
&gt;
    &lt;testsuites&gt;
        &lt;testsuite name="main"&gt;
            &lt;directory&gt;tests&lt;/directory&gt;
            &lt;directory&gt;packages/*/tests&lt;/directory&gt;
        &lt;/testsuite&gt;
    &lt;/testsuites&gt;

    &lt;filter&gt;
        &lt;whitelist addUncoveredFilesFromWhitelist="false"&gt;
            &lt;directory&gt;src&lt;/directory&gt;
            &lt;directory suffix=".php"&gt;packages/*/src&lt;/directory&gt;
        &lt;/whitelist&gt;
    &lt;/filter&gt;
&lt;/phpunit&gt;</code></pre>
<h2 id="feedback-after-3-years-of-usage-in-companies">Feedback After 3 Years of Usage in Companies</h2>
<p>I've started to test this in Lekarna.cz, 6 years old project, where they still use it.
<a href="https://www.elasticr.cz">Elasticr</a> and <a href="https://recruitis.io">Recruit.is</a> adopted local packages in ~2018, still using it.</p>
<p>The code is much cleaner, comfortable to dive in, and refactor.</p>
<p><strong>If you're careful about all the issues above, there is nothing to stop you from making it work!</strong> Give it a try, your future team will thank you.</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/02/17/local-packages-3-years-later</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 17 Feb 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/02/17/local-packages-3-years-later#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Test Monorepo After Split Before Actual Split ]]></title>
                <link>https://tomasvotruba.com/blog/2020/02/10/how-to-test-monorepo-after-split-before-actual-split</link>
                <description><![CDATA[ <p>In 14 months old post <a href="/blog/2018/11/22/how-to-test-monorepo-in-3-layers/#3-after-split-testing">How to Test Monorepo in 3 Layers</a> we talked about testing monorepo in 3 layers. So you can be sure every package works as it should.
<br>
<br>
3 layers are testing in a monorepo, testing package directory, and testing after a split.
<strong>The latter takes a huge amount of time</strong>. The time we don't have to spare in 2020.
<br>
<br>
<strong>How can we make it faster while keeping the test quality high?</strong></p> ]]></description>
                <content:encoded><![CDATA[ <p>Do you use Github Actions on your Github projects? Well, if you do, <strong><a href="/blog/2020/01/27/switch-travis-to-github-actions-to-reduce-stress/">it might cut your commit feedback loop</a> from 17 minutes to just 3</strong> and make you super productive by accident.</p>
<p>We now use Github Actions on Symplify and Rector for over a month, and in January 2020, it helped us <a href="https://twitter.com/VotrubaT/status/1220126675436032005">to merge amazing 177 pull-requests</a>.</p>
<h2 id="warning-cleaning-up-might-cause-you-to-spot-more-bottle-necks">Warning: Cleaning Up Might Cause you to Spot more Bottle Necks</h2>
<p>That's why so few developers like to tidy up. It usually only shows worse and worse mess in the code.</p>
<p>The worse mess in our code was the 3rd layer of monorepo testing - <strong>after split tests</strong>.</p>
<p>We had to wait till the full monorepo is split (+ 5 minutes), and CI runs on each split package (+ 2 minutes). So instead of 3 minutes, we're now back on 10 minutes. Also, the split testing can <strong>only happen after the PR is merged into the <code>master</code> branch</strong>.</p>
<p>Do your 1st and 2nd layer pass? All good? <strong>You have to wait till the split to find out it's not all good</strong>. Doh.</p>
<h2 id="short-reminder-what-is-the-3rd-layer-of-monorepo-testing">Short Reminder: What is the 3rd layer of Monorepo Testing?</h2>
<p>Let's say you run:</p>
<pre><code class="language-bash">git clone git@github.com:symfony/console.git

composer install
# all needed dependencies are installed, symfony/* and all external in /vendor directory

vendor/bin/phpunit</code></pre>
<p>And that's all! The standard way of testing packages.</p>
<p><strong>But</strong> with monorepo, the symfony/console is just one of directories in <a href="https://github.com/symfony/symfony">big monorepo symfony/symfony repository</a>:</p>
<pre><code class="language-bash">symfony/src/Symfony/Component/Console
symfony/src/Symfony/Component/EventDispatcher
symfony/src/Symfony/Component/HttpKernel
...</code></pre>
<p>To run unit tests on symfony/console only, we'd have to call PHPUnit on the directory:</p>
<pre><code class="language-bash">vendor/bin/phpunit -d symfony/src/Symfony/Component/Console</code></pre>
<p>But there is no:</p>
<pre><code class="language-bash">symfony/src/Symfony/Component/Console/vendor/*</code></pre>
<p><strong>So we can't test it</strong>. That's why we have to <strong>wait after the split is done</strong> and trigger tests in a split repository - <code>symfony/console</code> the way we did at first:</p>
<pre><code class="language-bash">git clone git@github.com:symfony/console.git

# all needed dependencies are installed, symfony/* and all external
composer install

vendor/bin/phpunit</code></pre>
<p>You can read more about it <a href="/blog/2020/02/10/how-to-test-monorepo-after-split-before-actual-split/">in original post</a>.</p>
<p><br></p>
<h2 id="status-quo-it-sucks-but-it-s-the-best-testing">Status Quo: It Sucks, but it's the Best Testing</h2>
<p>3rd layer of monorepo testing sucks</p>
<ul>
<li>it takes + 10 minutes</li>
<li>it doesn't test pull-requests - it's like tests without CI basically</li>
<li>it confusing to have few tests in one repository and one repository</li>
</ul>
<p>It's so bad that <strong>the most monorepo projects don't have this 3rd layer</strong> - Symfony nor Laravel. And I don't blame them. I was about to drop it too because having feedback about one line of code from 2 sides with entirely different settings hurts my brain.</p>
<p>The problem is, <strong>this 3rd layer testing is the closest to the reality of how these packages are used</strong>. So missing it will cause you headaches with bugs, so simple to find by users of your packages that you won't believe them.</p>
<h2 id="could-it-be-possible-with-github-actions">Could it be possible with GitHub Actions?</h2>
<p>This bottleneck got me thinking... what do we need to simulate?</p>
<pre><code class="language-bash">git clone git@github.com:symfony/console.git

# all needed dependencies are installed, symfony/* and all external
composer install

vendor/bin/phpunit</code></pre>
<p>Just locally for every package.</p>
<blockquote class="blockquote text-center mt-5 mb-5">
    Albert Einstein always taught me:
    <br>
    "think in patterns, my young padawan",
    <br>
    so I knew there must be a way.
</blockquote>
<p><del>Then I suddenly knew what to do!</del></p>
<p><br></p>
<p>I won't lie, it took me 3-4 hours of trial and error and many toilet <em>eureka</em> visits to figure out the working model. What went wrong at first?</p>
<ul>
<li><strong>Symlink cannot be used</strong>, because real/relative paths are different from standard package testing</li>
<li><strong>All packages can't run in one workflow</strong>, because it's super slow</li>
<li><strong>We cannot use shared vendor</strong>, the dependencies are conflicting</li>
</ul>
<h3 id="so-what-worked">So What Worked?</h3>
<ul>
<li>Every package <code>composer.json</code> had to require mutually dependencies (e.g <code>symplify/easy-coding-standard</code> requires <code>symplify/package-builder</code>) with <code>*</code></li>
<li>Every other package had to require other packages via <a href="https://getcomposer.org/doc/05-repositories.md#path">composer <em>path</em> repository</a>:</li>
</ul>
<img src="/assets/images/posts/split_before_split.png" class="img-thumbnail">
<p><br></p>
<p>There was <strong>one more pit to fall into</strong>. How many repositories we have to add here?</p>
<pre><code class="language-diff"> {
     "require": {
-         "symplify/package-builder": "^7.3"
+         "symplify/package-builder": "*"
     }
 }</code></pre>
<p>Just this one, right?</p>
<pre><code class="language-diff">+"repositories": [
+        {
+            "type": "path",
+            "url": "../../packages/package-builder",
+            "options": {
+                "symlink": false
+            }
+        }
+}</code></pre>
<p>Well, I assumed so, but this would eventually download <code>symplify/package-builder</code> with local version, *<em>but all the rest of `symplify/</em>` packages from packagist**. In the end we'll have a mess like:</p>
<ul>
<li><code>symplify/package-builder</code> - local <em class="fas fa-fw fa-check text-success"></em></li>
<li><code>symplify/autowire-array-parameter</code> - from packagist before split !== different code that we use <em class="fas fa-fw fa-times text-danger"></em></li>
</ul>
<p>We have to <strong>add all the possible local repositories</strong>, so the package always has the local version of the code.</p>
<h2 id="showcase-symplify-workflow">Showcase: Symplify Workflow</h2>
<p>It makes sense, but it sounds like a lot of manual work, right? Not for long!</p>
<p><br></p>
<p>You know me too well, me and <em>manual work</em> don't get on very well with each other.</p>
<p><strong>I made a command for MonorepoBuilder that does all the work above for us</strong>:</p>
<pre><code class="language-bash">vendor/bin/monorepo-builder localize-composer-paths</code></pre>
<p>All we need to do is run it before <code>composer update</code>.</p>
<p><br></p>
<p>This simple idea is running split tests in 14 Symplify packages. How?</p>
<ul>
<li>switch to the package directory</li>
<li>modify paths to use local path packages <strong>without</strong> symlink to prevent path false positives</li>
<li>install dependencies</li>
<li>run <code>vendor/bin/phpunit</code> there</li>
</ul>
<pre><code class="language-yaml"># .github/workflows/after_split_testing.yaml
name: After Split Testing

jobs:
    after_split_testing:
        runs-on: ubuntu-latest
        steps:
            -   uses: actions/checkout@v2
            -   uses: shivammathur/setup-php@v1
                with:
                    php-version: 7.4
                    coverage: none

            -   run: |
                    composer install --no-progress

                    # this is the magic
                    packages/monorepo-builder/bin/monorepo-builder localize-composer-paths

                    # testing one package
                    cd packages/easy-coding-standard

                    # download dependencies
                    composer update --no-progress

                    # run tests
                    vendor/bin/phpunit</code></pre>
<p>And that's it! <strong>1 extra new line in workflow</strong> is a worth hour of human-hours a week on one project.</p>
<p><br></p>
<p>See <a href="https://raw.githubusercontent.com/symplify/symplify/151b7a6be28a26fcb94252d91e4c3d061eec7617/.github/workflows/after_split_testing.yaml">full workflow</a> prevent repeating code.</p>
<p><strong><a href="https://github.com/symplify/symplify/pull/1755">See full pull-request</a></strong>.</p>
<p>A reminder: <strong>this all is possible thanks to super-fast Github Actions</strong> with 20 concurrent workers. On Travis with only 3 workers, this might take extra 15-25 minutes, which is utterly annoying.</p>
<p><br></p>
<p>Happy speed coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/02/10/how-to-test-monorepo-after-split-before-actual-split</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/02/10/how-to-test-monorepo-after-split-before-actual-split#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to run Rector and PHPStan on Huge Project in 3 Seconds with PHPStorm ]]></title>
                <link>https://tomasvotruba.com/blog/2020/02/03/how-to-run-rector-and-phpstan-on-huge-project-in-3-seconds-with-phpstorm</link>
                <description><![CDATA[ <p>Today we'll look at the command line and run performance heavy dev tools like Rector or PHPStan on our projects. I'm guessing that it takes more than 10 seconds to run whatever project you use.
<br>
<br>
How would you like it be <strong>less than 3 seconds with just one click</strong> in PHPStorm?</p> ]]></description>
                <content:encoded><![CDATA[ <p>Let's say we have a reasonably big codebase, like Rector, with over 70 000 lines of code. Projects I consult lately usually fit into 200-600 000 lines of code, though. But let's take Rector as the baseline, as that's the project we have data for.</p>
<p>We add a new feature, change test, fix a bug, 300 added lines, 200 removed.</p>
<p>Now, <strong>we want to run Rector and PHPStan to make sure the code is clean and working</strong>. So we run PHPStan:</p>
<img src="/assets/images/posts/2020/external_tools_normal_phpstan.gif" class="img-thumbnail">
<p>And wait...</p>
<p><br>
<br>
<br></p>
<p>...<strong>40 seconds</strong>!</p>
<p><br></p>
<h2 id="how-do-we-hack-it">How do we Hack It?</h2>
<p>It takes so long. We might adapt and <strong>push it into the remote repository and let the CI server handle it</strong>. After all, it's often much faster than our local laptop. I used this approach at big codebases so far.</p>
<p>Another way is to copy the directory path and run tool only on it:</p>
<pre><code class="language-bash">vendor/bin/phpstan analyse src/SomeDirectory
vendor/bin/rector process src/SomeDirectory</code></pre>
<p>But we have to:</p>
<ul>
<li>copy directory path or type it</li>
<li>open command line</li>
<li>type whole command we usually use</li>
<li>remove argument we typically use</li>
<li>add our directory argument</li>
<li>click to run it</li>
</ul>
<p>Instant flow killer :(</p>
<h2 id="too-slow-go-home">Too Slow? Go Home!</h2>
<p>When I talk with developers, this is one of the main reasons they don't use such tools. It takes too long to get feedback from them. It destroys their focus on the features.</p>
<blockquote class="blockquote text-center mt-5 mb-5">
Frustration is always the sign we should ask this question:
<br>
How can we do better?
</blockquote>
<p><br></p>
<h2 id="narrow-scope-increase-focus">Narrow Scope → Increase Focus</h2>
<p>Last week <a href="https://twitter.com/mikes_honza">Honza</a> showed me PHPStorm tip that fits <a href="/blog/2020/01/27/switch-travis-to-github-actions-to-reduce-stress/">into instant feedback loop flow</a> I discovered recently.</p>
<p><a href="https://twitter.com/mikes_honza/status/1222557580507127811"></p>
<img src="/assets/images/posts/2020/external_tools_tweet.png" class="img-thumbnail">
<p></a></p>
<p><strong>It might trim off some more frustration</strong> in your daily work and turn you into a flow developer as a result. The bigger your codebase, the more it might help you get under 3 seconds.</p>
<p><br></p>
<h2 id="how-does-it-work">How does it Work?</h2>
<p>You run <strong>the tool only on a selected directory in the left tree</strong>.</p>
<ul>
<li>Without the command line.</li>
<li>Without changing paths.</li>
<li>Without copy-pasting.</li>
</ul>
<h3 id="domain-directory-separation">Domain Directory Separation</h3>
<p>This approach requires us to keep a decoupled structure, e.g., with to <a href="/blog/2017/12/25/composer-local-packages-for-dummies/">local packages</a> or domain-driven design.</p>
<p>What does it mean? That our code that handles security is not all over the place in <code>/src</code> directory but in standalone <code>packages/Security</code> directory. So if we work with security, we <del>only</del> mostly work in that directory.</p>
<h2 id="how-to-configure-external-tool-in-phpstorm">How to Configure External Tool in PHPStorm?</h2>
<p>In PHPStorm open:</p>
<ul>
<li>Settings →</li>
<li>Tools →</li>
<li>External Tools</li>
</ul>
<p><br></p>
<p>Click on <em>+</em>:</p>
<img src="/assets/images/posts/2020/external_tool_add.png" class="img-thumbnail">
<p><br></p>
<p><strong>Name the tool and configure parameters</strong></p>
<ul>
<li>Program: <code>$ProjectFileDir$/vendor/bin/rector</code></li>
<li>Arguments: <code>process $FilePathRelativeToProjectRoot$</code></li>
<li>Working directory: <code>$ProjectFileDir$</code></li>
</ul>
<img src="/assets/images/posts/2020/external_tools_one.png" class="img-thumbnail">
<p><br></p>
<p>Save.</p>
<h2 id="how-to-use-it">How to Use It?</h2>
<p>Pick the directory you want to process in the file tree.</p>
<p>Run action.</p>
<p>Type &quot;Rector&quot; or &quot;PHPStan&quot; and hit enter:</p>
<img src="/assets/images/posts/2020/external_tools_rector.gif" class="img-thumbnail">
<p><br></p>
<p>Kaboom :) That's it!</p>
<p><br></p>
<p>Happy flow coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/02/03/how-to-run-rector-and-phpstan-on-huge-project-in-3-seconds-with-phpstorm</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 03 Feb 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/02/03/how-to-run-rector-and-phpstan-on-huge-project-in-3-seconds-with-phpstorm#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Switch Travis to GitHub Actions to Reduce Stress ]]></title>
                <link>https://tomasvotruba.com/blog/2020/01/27/switch-travis-to-github-actions-to-reduce-stress</link>
                <description><![CDATA[ <p>In the previous post, we looked at <a href="/blog/2020/01/13/why-is-first-instant-feedback-crucial-to-developers/">Why is First Instant Feedback Crucial to Developers?</a>.
<br><br>
We know why now we look at <em>how</em>. How exactly migrate all jobs from Travis to GitHub Actions, <strong>reduce stress from long feedback loops</strong> and live a more healthy life as a programmer.
<br><br>
Yes, in code samples :)</p> ]]></description>
                <content:encoded><![CDATA[ <p>In this post, we'll look at examples of migration. I'll share my good and bad times with GitHub Action for my last 3 weeks using it on 5 open-source repositories with over 25 packages.</p>
<h2 id="the-speed">The Speed</h2>
<blockquote class="blockquote text-center">
    From ~15 minutes to just 3 minutes.
</blockquote>
<p>I mean, that's a crazy improvement of 80 %. You can read about in <a href="/blog/2020/01/13/why-is-first-instant-feedback-crucial-to-developers/">the previous post</a>, so let's move on.</p>
<h2 id="the-developer-s-joy">The Developer's Joy</h2>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Github Actions just make everything so easy... <br><br>We merged 177 PR in <a href="https://twitter.com/rectorphp?ref_src=twsrc%5Etfw">@rectorphp</a> in the last month.<br><br>Instant feedback is killer feature for you devs. Don't let them wait...<a href="https://t.co/hP9Epe2CZW">https://t.co/hP9Epe2CZW</a> <a href="https://t.co/0Md9iIisXm">pic.twitter.com/0Md9iIisXm</a></p>— Tomas Votruba (@VotrubaT) <a href="https://twitter.com/VotrubaT/status/1220126675436032005?ref_src=twsrc%5Etfw">January 22, 2020</a></blockquote>
<p>Cocaine, Facebook, Twitter, and Instagram work the same way. A short feedback loop of dopamine.</p>
<p>The significant advantage of GitHub is that at the end of your addiction is not an endless loop in the brain, but <strong>higher productivity of your project</strong>.</p>
<h2 id="simple-unit-test-in-multiple-php-versions">Simple Unit Test in Multiple PHP Versions</h2>
<p>We'll jump right into the most common case - unit tests.</p>
<p>In <strong>Travis CI</strong>, we had to:</p>
<ul>
<li>install dependencies,</li>
<li>set PHP versions</li>
<li>and run unit tests.</li>
</ul>
<pre><code class="language-yaml"># .travis.yml
os: linux

language: php

php:
    - '7.2'
    - '7.3'
    - '7.4'

before_install:
    # turn off XDebug
    - phpenv config-rm xdebug.ini

install:
    - composer install --no-progress

jobs:
    include:
        -
            stage: test
            name: "Unit Tests"
            script:
                - vendor/bin/phpunit --testsuite main</code></pre>
<p>In <strong>GitHub Action</strong> the same process look like this:</p>
<pre><code class="language-yaml"># .github/workflows/code_checks.yaml
name: Code_Checks

on:
    pull_request: null
    push:
        branches:
            - master

jobs:
    tests:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                php: ['7.2', '7.3', '7.4']

        name: PHP ${{ matrix.php }} tests
        steps:
            # basically git clone
            -   uses: actions/checkout@v2

            # use PHP of specific version
            -   uses: shivammathur/setup-php@v1
                with:
                    php-version: ${{ matrix.php }}
                    coverage: none # disable xdebug, pcov

            # if we 2 steps like this, we can better see if composer failed or tests
            -   run: composer install --no-progress

            -   run: vendor/bin/phpunit</code></pre>
<p>That's pretty huge for single and confusing to read at the same time, right?</p>
<p>All that clutter just for <code>vendor/bin/phpunit</code> to pass.</p>
<h2 id="re-use-code-in-github-actions-hell-no">Re-Use Code in Github Actions? Hell No!</h2>
<p>What is this?</p>
<pre><code class="language-yaml">-   uses: actions/checkout@v2</code></pre>
<p>Github Actions allow references to external <em>recipes</em>. It's usually just a set of actions, packages into a couple of lines in our workflow. You can see it on Github, e.g. <a href="https://github.com/actions/checkout">actions/checkout</a>. It's the recommended way to re-use code because there is no other way.</p>
<p>In reality: &quot;Do you want to re-use 5 lines of install and setup YAML code? Create a repository on Github, write 100 lines in JavaScript, and you're ready to go!&quot;</p>
<h3 id="no-dry">No DRY</h3>
<p>Saying that we'll either have to create custom workflow repository or get used to these lines being repeated over and over:</p>
<pre><code class="language-yaml">-   uses: actions/checkout@v2

-   uses: shivammathur/setup-php@v1
    with:
        php-version: '7.3'
        coverage: none # xdebug is used by default

-   run: composer install --no-progress</code></pre>
<p>After a bit of experimenting, I got used to it for now. Also, Github Actions don't have anything close to <strong>YAML Anchors</strong> or re-use of previous job configuration like we have in Travis, e.g., share <code>install</code> for every job:</p>
<pre><code class="language-yaml"># .travis.yml
install:
    - composer install --no-progress</code></pre>
<p>Do you want YAML Anchors in Github Actions? <a href="https://github.community/t5/GitHub-Actions/Support-for-YAML-anchors/td-p/30336">Let them know</a>.</p>
<p><br></p>
<p>Now that we have the worst feature of Github Actions behind us, <strong>let's look at the excellent stuff</strong>.</p>
<h2 id="power-of-external-workflows">Power of External Workflows</h2>
<p>On the other hand, external workflows can solve a lot for us. Mainly for us, who don't want to dev-ops experts forever CI there is.</p>
<p>How do you enable code coverage by PHPUnit? <strong>Change single line</strong>:</p>
<pre><code class="language-diff">jobs:
    test_coverage:
        runs-on: ubuntu-latest
        steps:
            -   uses: actions/checkout@v2

            -   uses: shivammathur/setup-php@v1
                with:
                    php-version: '7.3'
-                   coverage: none
+                   coverage: pcov

            - run: vendor/bin/phpunit --coverage-clover coverage.xml build/logs/clover.xml</code></pre>
<h2 id="coding-standards">Coding Standards</h2>
<p>What is the most common use case for CI? Run <em>single line</em> in this <em>specific PHP version</em> → e.g., run coding standards on PHP 7.2.</p>
<p>In <strong>Travis CI</strong>:</p>
<pre><code class="language-yaml">language: php

install:
    - composer install --no-progress

jobs:
    include:
        -
            name: ECS
            php: 7.2
            script:
                - composer check-cs</code></pre>
<p>In <strong>Github Actions</strong>:</p>
<pre><code class="language-yaml"># .github/workflows/code_checks.yaml
jobs:
    ecs:
        runs-on: ubuntu-latest
        steps:
            -   uses: actions/checkout@v2
            -   uses: shivammathur/setup-php@v1
                with:
                    php-version: 7.2
                    coverage: none # disable xdebug, pcov
            -   run: composer install --no-progress
            -   run: composer check-cs</code></pre>
<h2 id="learn-from-working-examples">Learn from Working Examples</h2>
<ul>
<li><a href="https://github.com/symplify/symplify/blob/373bbc80d73fd8c2777fdb5fb48386b456857b57/.github/workflows/code_checks.yaml"><code>code_checks.yaml</code> in symplify/symplify</a></li>
<li><a href="https://github.com/rectorphp/rector/blob/1f4b36dfedb1b07d8425093474fc5951358b0590/.github/workflows/code_checks.yml"><code>code_checks.yaml</code> in rectorphp/rector</a></li>
</ul>
<h2 id="bad-luck-organization-with-some-private-repositories">Bad Luck Organization with Some Private Repositories</h2>
<p>Some organizations don't have access to Github Actions because of some open-sources/private accounts.
This sucks a lot. I tried to have GitHub Actions on <a href="https://github.com/KnpLabs/DoctrineBehaviors/pull/494#issue-360222690">KnpLabs/DoctrineBehaviors</a>, but it's not possible unless the whole <em>KnpLabs</em> switches to some paid accounts. I spoke with support over a dozen emails, and it's wont fix.</p>
<p>How to work around this? If we create a new organization that is <strong>open-source only</strong>, it will work. Or we can just move the repository to an existing <strong>open-source only</strong> one.</p>
<h2 id="add-badge">Add Badge?</h2>
<p><strong>In Travis</strong>, you could add a badge for the whole build on a specific branch. It was nice that it skipped allowed failure.</p>
<p><strong>In GitHub Actions</strong>, it's different. <del>The badge covers <strong>1 specific workflow</strong>. This workflow should contain all the relevant jobs</del>.</p>
<p>Actually, on GitHub repository, there is only one badge for all:</p>
<img src="/assets/images/posts/github_actions_badge.png" class="img-thumbnail">
<h2 id="concurrent-jobs">Concurrent Jobs</h2>
<p><strong>Travis CI</strong> allow only <a href="https://travis-ci.com/plans">3 concurrent jobs</a>. This forces us to group similar checks like coding standard, static analysis, and Rector to one big job. If it failed, we had to look inside to find out which of these 3 areas is it.</p>
<p><strong>GitHub Actions</strong> allows you to run... wait for it <a href="https://help.github.com/en/actions/automating-your-workflow-with-github-actions/about-github-actions#usage-limits"><strong>20 jobs</strong></a>.</p>
<p>Thanks to that, we can have one job for each of:</p>
<ul>
<li><code>bin/console lint:yaml</code></li>
<li><code>bin/console lint:twig</code></li>
<li><code>bin/console lint:container</code></li>
</ul>
<p>When <code>bin/console lint:twig</code> fails, we know right in the pull-request it's something in our templates. That's good quality, precise feedback.</p>
<h2 id="where-should-we-stay-with-travis-ci">Where Should We Stay with Travis CI</h2>
<h3 id="local-git">Local Git</h3>
<p>GitHub Actions are tough to work with local git. I migrated Symplify/MonorepoBuilder and Symplfiy/ChangelogLinker to Github Actions, and it's only troubling.</p>
<h3 id="building-of-phar-and-push-to-another-repository">Building of PHAR and Push to Another Repository</h3>
<p>Another weakness is the inability to get the current tag. That's right. Getting something as simple as an existing tag is rocket science.</p>
<p>That's why we had to <a href="https://github.com/rectorphp/rector/blob/1f4b36dfedb1b07d8425093474fc5951358b0590/.travis.yml">revert <code>rector.phar</code> build and publish to Travis CI</a>.</p>
<h3 id="monorepo-split">Monorepo Split</h3>
<p>The monorepo split is the most massive performance operation on the whole CI. Also, GitHub actions have different git settings that break it — saying that it makes sense to have 20 parallel jobs on GitHub Actions and the heaviest on Travis. <strong>We kept <a href="https://github.com/symplify/symplify/blob/716eef260fcdf21362361cc9a3dab51a5a0408eb/.travis.yml#L9-L16">monorepo split</a> on Travis as the only job</strong> and it's now faster than ever.</p>
<p><br></p>
<p>I think that's due to the service being pretty new to the market. I hope these issues will be seen as primitive soon. For the rest of the features, <strong>I love GitHub Action</strong> and think you'll too after having feedback under 3 minutes after the last commit :).</p>
<p><br></p>
<p>Happy coding!</p>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/01/27/switch-travis-to-github-actions-to-reduce-stress</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 27 Jan 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/01/27/switch-travis-to-github-actions-to-reduce-stress#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Introducing PHAR for Easy Coding Standard ]]></title>
                <link>https://tomasvotruba.com/blog/2020/01/20/introducing-phar-for-easy-coding-standard</link>
                <description><![CDATA[ <p>Recently months there was huge jump in using ECS, <a href="https://packagist.org/packages/symplify/easy-coding-standard/stats">almost 4 000 downloads daily now</a>!
<br>
<br>
With this downloads growth, there is also growing demand for using it on older and older PHP projects. <strong>ECS brings huge value there, as it helps with migration of code and cleaning it up</strong>.
<br>
<br>
The problem is that ECS uses modern packages and it <strong>makes installation on old projects impossible</strong>.
<br>
<br>
Does it though in 2020?</p> ]]></description>
                <content:encoded><![CDATA[ <p><br></p>
<p>This is how installation on old project makes us angry:</p>
<img src="/assets/images/posts/ecs_prefixed.gif" class="img-thumbnail">
<p><strong>I don't like it when developers are frustrated by the limits of the system they use</strong>. My mission is quite the opposite - make a complex system simple and easy to use by anyone.</p>
<p>So I took a few-days effort and made a prefixed PHAR Easy Coding Standard version for legacy projects. You can see <a href="https://github.com/symplify/symplify/pull/1734">Pull Request on Github</a>.</p>
<p>The first release of the prefixed version is v7.2.2, so you can enjoy all the cool features like <a href="https://github.com/symplify/symplify/pull/1537"><code>only</code></a> and <a href="https://github.com/symplify/symplify/pull/1735"><code>paths</code> parameters</a>.</p>
<h3 id="add-code-prefixed-code-and-it-works">Add <code>-prefixed</code> and It Works</h3>
<p>Really. So instead of normal package installation:</p>
<pre><code class="language-bash">composer require symplify/easy-coding-standard --dev</code></pre>
<p>Use the <code>-prefixed</code> version:</p>
<pre><code class="language-bash">composer require symplify/easy-coding-standard-prefixed --dev</code></pre>
<p><strong>And you're ready to go!</strong></p>
<pre><code class="language-bash">vendor/bin/ecs</code></pre>
<h2 id="em-class-fas-fa-fw-fa-lg-fa-check-text-success-em"><em class="fas fa-fw fa-lg fa-check text-success"></em></h2>
<p><br></p>
<h2 id="what-are-prefixed-phars-and-how-they-work">What are Prefixed PHARs and How They Work?</h2>
<p>I will not bother you with technical details, but if you're working on PHP CLI app and you want to <strong>make it accessible to the majority of PHP developers</strong>, you can learn more here:</p>
<ul>
<li><a href="/blog/2019/12/02/how-to-box-symfony-app-to-phar-without-killing-yourself/">How to Box Symfony App to PHAR without Killing Yourself</a></li>
<li><a href="https://getrector.org/blog/2020/01/20/how-to-install-rector-despite-composer-conflicts">How to install Rector despite Composer Conflicts</a></li>
</ul>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/01/20/introducing-phar-for-easy-coding-standard</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/01/20/introducing-phar-for-easy-coding-standard#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Why is First Instant Feedback Crucial to Developers? ]]></title>
                <link>https://tomasvotruba.com/blog/2020/01/13/why-is-first-instant-feedback-crucial-to-developers</link>
                <description><![CDATA[ <p>Do you <em>open-source</em>? Then you now that instant feedback is crucial to your contributors. The same applies to private companies.
<br>
<br>
There are <strong>2 types of feedback</strong>: from human and machine.
<br>
<br>
Which and how can we improve?</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="lt-faster-slow-gt-reaction-t-result">&lt;Faster|Slow&gt; Reaction → <T>Result</h2>
<p>When they send PR to your project, and you let them wait for a week, they won't be so excited to process your code-review.</p>
<p>But when you react <strong>the same day or same hour</strong>, there is a significant change the PR will be updated and merged on the same day.</p>
<p>Honestly, <strong>maintainers are not human routers for Github notifications</strong>, and you have to be lucky to hit them at the same time you're online.</p>
<p><strong>How can we make feedback instant anyway?</strong></p>
<h2 id="more-than-5-minutes-we-ve-lost-a-contributor">More than 5 minutes? We've Lost a Contributor</h2>
<p>Do you know <a href="https://en.wikipedia.org/wiki/Time_to_first_byte">TTFB</a> - <em>time to first byte</em> - from front-end world?</p>
<p>There could be <strong>TTFF</strong> for pull-request: <em>time to first feedback</em>.</p>
<p>In my experience, when someone creates a PR to an open-source, <strong>they have carefully made time for it</strong>. In today's <a href="https://www.calnewport.com/blog/2017/11/30/on-the-complicated-economics-of-attention-capital">attention economy</a>, its the most expensive resource people have.</p>
<h2 id="example-how-an-hour-for-open-source-is-used">Example: How an Hour for Open-Source is used?</h2>
<p>Let's say you have started your dedicated hour to open-source a week.</p>
<p><strong>You send PR</strong> with your feature, the maintainer is not online, so you wait:</p>
<ul>
<li>5 minutes...</li>
<li>10 minutes...</li>
<li>13 minutes...</li>
<li>...and CI failed on test case</li>
</ul>
<p><strong>You fix the test</strong>, send new commit to the PR branch and wait:</p>
<ul>
<li>5 minutes...</li>
<li>10 minutes...</li>
<li>13 minutes...</li>
<li>...and CI fails on invalid coding standards</li>
</ul>
<p>Now you've spend <strong>40 minutes</strong> of your 60 minutes by:</p>
<ul>
<li>10 minutes making feature</li>
<li>4 fixing one test case</li>
<li><strong>26 minutes by waiting</strong></li>
</ul>
<p>That's <strong>65 % percent time wasted</strong>.</p>
<p>This makes me want to throw the computer out of the window, procrastinate, check my messages or another shallow work that ruins all my focus.</p>
<p><strong>True story</strong>, this was the situation for CI in Rector in 2019. It was soo frustrating. And I don't talk about <a href="/blog/2019/09/02/how-to-speedup-test-coverage-on-travis-by-95-percent/">code coverage with Xdebug that took us 33 minutes</a>.</p>
<p><br></p>
<h2 id="have-you-met-github-actions">Have you Met... Github Actions?</h2>
<p>A miracle came to my life. Exactly week ago <a href="https://github.com/staabm">Markus Staab</a> talked about the idea of trying Github Actions in Rector repository to ease work to Travis CI.</p>
<h3 id="what-are-github-actions">What are Github Actions?</h3>
<p>I've heard about Github Actions, but I didn't get the idea. Is it for deploy or a bot?</p>
<p>Now I know it's basically <em>Github CI</em> (honestly, they should rename it).</p>
<p>How does it work? Like in any other CI (Travis CI, Gitlab CI, Bitbucket CI, Circle CI, Jenkins...), we basically:</p>
<ul>
<li>configure some YAML file</li>
<li>push some code change to your git</li>
<li>and wait for a green or red light</li>
</ul>
<p>That's it! I used obvious choice for open-source - Travis CI - for the last 8 years, but <strong>the speed was bugging me</strong>.</p>
<p>When I saw <a href="https://github.com/rectorphp/rector/pull/2589/files">first pull-request by Markus</a>, I had no idea where this will end.</p>
<h2 id="travis-ci-and-github-actions-in-numbers">Travis CI and Github Actions in Numbers</h2>
<p>From all the metrics out there, these tell the main story:</p>
<p><strong>Travis CI</strong></p>
<ul>
<li><a href="https://travis-ci.com/plans">3 concurrent jobs</a></li>
<li>waits 1-4 minutes after commit, before it even starts</li>
</ul>
<p><strong>Github Actions</strong></p>
<ul>
<li><a href="https://help.github.com/en/actions/automating-your-workflow-with-github-actions/about-github-actions#usage-limits">20 concurrent jobs</a></li>
<li>starts all jobs in 20-30 seconds after the commit</li>
</ul>
<p><br></p>
<p>And how does the switch affected the Rector repository?</p>
<img src="/assets/images/posts/instant_feedback_travis_ci.jpg" class="img-thumbnail" style="max-width: 40em">
<p>↓</p>
<img src="/assets/images/posts/instant_feedback_github_actions.jpg" class="img-thumbnail" style="max-width: 40em">
<blockquote class="blockquote text-center">
    From ~15 minutes to just 3 minutes.
</blockquote>
<p><strong>I was amazed! Thank you, Mark, for making this happen.</strong></p>
<p><br></p>
<p>In the next post, we'll look at <strong>practical migration</strong> of common and less-common open-source features. We'll look at Github Actions' weaknesses and migrate a massive pipeline with 15 jobs.</p>
<p><br></p>
<p>Happy feedback looping!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/01/13/why-is-first-instant-feedback-crucial-to-developers</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 13 Jan 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/01/13/why-is-first-instant-feedback-crucial-to-developers#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Migrate Gedmo to KnpLabs ]]></title>
                <link>https://tomasvotruba.com/blog/2020/01/06/migrate-gedmo-to-knplabs</link>
                <description><![CDATA[ <p>With <a href="/blog/2019/09/09/how-we-upgraded-pehapkari-cz-from-symfony-4-to-5-in-25-days/">Symfony 5 upgrade</a>, we need any <em>working</em> Doctrine behaviors.
<br>
Month later, we have <a href="/blog/2019/12/30/doctrine-behaviors-2-0-reloaded/#how-do-you-migrate-from-gedmo-stof-to-knplabs-doctrinebehaviors">KnpLabs\DoctrineBehaviors 2.0</a> with full Symfony 5 support.
<br>
<br>
If you used older Doctrine Behaviors, you're covered with Rector migration path.
<br>
But what if you're using old broken Gedmo?
<br>
<br>
<strong>I'll show you how you can migrate Gedmo to KnpLabs</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <p>Pick behavior your want to migrate from Gedmo to KnpLabs:</p>
<ul>
<li><a href="#1-migrate-timestampable">1. Timestampable</a></li>
<li><a href="#2-migrate-sluggable">2. Sluggable</a></li>
<li><a href="#3-migrate-tree">3. Tree</a></li>
<li><a href="#4-migrate-translatable">4. Translatable</a></li>
<li><a href="#5-migrate-blameable">5. Blameable</a></li>
<li><a href="#6-migrate-loggable">6. Loggable</a></li>
<li><a href="#7-migrate-softdeletable">7. SoftDeletable</a></li>
</ul>
<p><br></p>
<p>If you <strong>use other Gedmo behavior that is not listed here</strong>, you might request or better add it to <a href="https://github.com/KnpLabs/DoctrineBehaviors">KnpLabs</a> repository via pull-request. I assure you I'll provide <a href="/blog/2019/12/30/doctrine-behaviors-2-0-reloaded/">stable maintenance support</a> for KnpLabs package. It's not that hard with CI on steroids it has now.</p>
<p><br></p>
<h2 id="1-migrate-timestampable">1. Migrate Timestampable</h2>
<h3 id="gedmo">Gedmo</h3>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Entity;

use Doctrine\ORM\Mapping as ORM;
use Gedmo\Timestampable\Traits\TimestampableEntity;

/**
 * @ORM\Entity
 */
class Meetup
{
    use TimestampableEntity;
}</code></pre>
<p>↓</p>
<h3 id="knplabs">KnpLabs</h3>
<ul>
<li>Replace trait with <code>Knp\DoctrineBehaviors\Model\Timestampable\TimestampableTrait</code></li>
<li>Add <code>Knp\DoctrineBehaviors\Contract\Entity\TimestampableInterface</code> interface</li>
</ul>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Entity;

use Doctrine\ORM\Mapping as ORM;
use Knp\DoctrineBehaviors\Model\Timestampable\TimestampableTrait;
use Knp\DoctrineBehaviors\Contract\Entity\TimestampableInterface;

/**
 * @ORM\Entity
 */
class Meetup implements TimestampableInterface
{
    use TimestampableTrait;
}</code></pre>
<h2 id="2-migrate-sluggable">2. Migrate Sluggable</h2>
<h3 id="gedmo">Gedmo</h3>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Entity;

use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;

/**
 * @ORM\Entity
 */
class Meetup
{
    /**
     * @Gedmo\Slug(fields={"name"})
     */
    private $slug;

    public function getSlug(): ?string
    {
        return $this-&gt;slug;
    }

    public function setSlug(?string $slug): void
    {
        $this-&gt;slug = $slug;
    }
}</code></pre>
<p>↓</p>
<h3 id="knplabs">KnpLabs</h3>
<ul>
<li>
<p>Add <code>Knp\DoctrineBehaviors\Model\Sluggable\SluggableTrait</code> trait</p>
</li>
<li>
<p>Add <code>Knp\DoctrineBehaviors\Contract\Entity\SluggableInterface</code> interface</p>
</li>
<li>
<p>Remove <code>getSlug()</code>/<code>setSlug()</code> method that is already in trait</p>
</li>
<li>
<p>Replace <code>* @Gedmo\Slug(fields={"name"})</code> with <code>getSluggableFields()</code> method that contains fields</p>
<p>E.g., from:</p>
<pre><code class="language-php">use Gedmo\Mapping\Annotation as Gedmo;

// ...

/**
 * @Gedmo\Slug(fields={"name", "surname"})
 */
private $slug;</code></pre>
<p>to</p>
<pre><code class="language-php">
/**
 * @return string[]
 */
public function getSluggableFields(): array
{
    return ['name', 'surname'];
}</code></pre>
</li>
</ul>
<p><br></p>
<p>In full code:</p>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Entity;

use Doctrine\ORM\Mapping as ORM;
use Knp\DoctrineBehaviors\Model\Sluggable\SluggableTrait;
use Knp\DoctrineBehaviors\Contract\Entity\SluggableInterface;

/**
 * @ORM\Entity
 */
class Category implements SluggableInterface
{
    use SluggableTrait;

    /**
     * @return string[]
     */
    public function getSluggableFields(): array
    {
        return ['name'];
    }
}</code></pre>
<h2 id="3-migrate-tree">3. Migrate Tree</h2>
<p>This one will be tricky, because:</p>
<ul>
<li>Gedmo supports <em>nested-set</em>, <em>closure-table</em> and <em>materialized-path</em>.</li>
<li>KnpLabs currently supports <a href="https://knplabs.com/en/blog/knp-doctrine-orm-behaviors">materialized path</a></li>
</ul>
<p>So if you're using anything but materialized path in Gedmo, you'll have to migrate PHP code (see below) + <strong>migrate your database data to materialized path</strong> (write your migration or Google one).</p>
<p><br></p>
<p>The PHP migration looks like this:</p>
<h3 id="gedmo">Gedmo</h3>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Entity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\Collection;
use Gedmo\Mapping\Annotation as Gedmo;

/**
 * @ORM\Entity
 * @Gedmo\Tree(type="nested")
 */
class Category
{
    /**
     * @Gedmo\TreeLeft
     * @ORM\Column(name="lft", type="integer")
     * @var int
     */
    private $lft;

    /**
     * @Gedmo\TreeRight
     * @ORM\Column(name="rgt", type="integer")
     * @var int
     */
    private $rgt;

    /**
     * @Gedmo\TreeLevel
     * @ORM\Column(name="lvl", type="integer")
     * @var int
     */
    private $lvl;

    /**
     * @Gedmo\TreeRoot
     * @ORM\ManyToOne(targetEntity="Category")
     * @ORM\JoinColumn(name="tree_root", referencedColumnName="id", onDelete="CASCADE")
     * @var Category
     */
    private $root;

    /**
     * @Gedmo\TreeParent
     * @ORM\ManyToOne(targetEntity="Category", inversedBy="children")
     * @ORM\JoinColumn(name="parent_id", referencedColumnName="id", onDelete="CASCADE")
     * @var Category
     */
    private $parent;

    /**
     * @ORM\OneToMany(targetEntity="Category", mappedBy="parent")
     * @var Category[]|Collection
     */
    private $children;

    public function getRoot(): self
    {
        return $this-&gt;root;
    }

    public function setParent(self $category): void
    {
        $this-&gt;parent = $category;
    }

    public function getParent(): self
    {
        return $this-&gt;parent;
    }
}</code></pre>
<p>↓</p>
<h3 id="knplabs">KnpLabs</h3>
<ul>
<li>Add <code>Knp\DoctrineBehaviors\Model\Tree\TreeNodeTrait</code> trait</li>
<li>Add <code>Knp\DoctrineBehaviors\Contract\Entity\TreeNodeInterface</code> interface</li>
<li>Remove all tree related properties and methods, since they're in trait now</li>
<li>Remove Gedmo annotations</li>
</ul>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Entity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\Collection;
use Knp\DoctrineBehaviors\Contract\Entity\TreeNodeInterface;
use Knp\DoctrineBehaviors\Model\Tree\TreeNodeTrait;

/**
 * @ORM\Entity
 */
class Category implements TreeNodeInterface
{
    use TreeNodeTrait;
}</code></pre>
<h2 id="4-migrate-translatable">4. Migrate Translatable</h2>
<h3 id="what-about-performance">What about Performance?</h3>
<p>I recall picking the behavior package for new Lekarna.cz 6 years ago. I was young, and a quantity was more than quality to me, so I was leaning towards Gedmo since it had more downloads.</p>
<p>But it's performance surprised me. Why? The translated item had 1:many dependency on translation table, so for every single item, it <strong>joined an X extra lines forever single translated column</strong>.</p>
<p>So even if you use Symfony 4 and <strong>everything works well</strong> for you, <strong>consider comparing performance with KnpLabs translations</strong>. Who knows, it might get your multi-lingual application <strong>10x faster</strong>.</p>
<p><br></p>
<h3 id="gedmo">Gedmo</h3>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Entity;

use Gedmo\Mapping\Annotation as Gedmo;
use Doctrine\ORM\Mapping as ORM;
use Gedmo\Translatable\Translatable;

/**
 * @ORM\Entity
 */
class Category implements Translatable
{
    /**
     * @Gedmo\Translatable
     * @ORM\Column(length=128)
     */
    private $title;

    /**
     * @Gedmo\Locale
     */
    private $locale;

    public function setTitle($title)
    {
        $this-&gt;title = $title;
    }

    public function getTitle()
    {
        return $this-&gt;title;
    }

    public function setTranslatableLocale($locale)
    {
        $this-&gt;locale = $locale;
    }
}</code></pre>
<p>↓</p>
<h3 id="knplabs">KnpLabs</h3>
<ul>
<li>Replace interface with <code>Knp\DoctrineBehaviors\Contract\Entity\TranslatableInterface</code></li>
<li>Add <code>Knp\DoctrineBehaviors\Model\Translatable\TranslatableTrait</code></li>
<li>Remove all translated fields and locale methods from main entity</li>
<li>Remove Gedmo annotations</li>
</ul>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Entity;

use Knp\DoctrineBehaviors\Model\Translatable\TranslatableTrait;
use Knp\DoctrineBehaviors\Contract\Entity\TranslatableInterface;

class Category implements TranslatableInterface
{
    use TranslatableTrait;
}</code></pre>
<p>So, where is the <em>title</em> property we need to translate? Every translated property is in the new <code>&lt;entity&gt;Translation</code> class.
This <strong>approach makes sure that the complexity of 1 item with dozens of translation stays 1:1</strong> = it's super fast!</p>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Entity;

use Knp\DoctrineBehaviors\Contract\Entity\TranslationInterface;
use Knp\DoctrineBehaviors\Model\Translatable\TranslationTrait;

class CategoryTranslation implements TranslationInterface
{
    use TranslationTrait;

    /**
     * @ORM\Column(length=128)
     */
    private $title;
}</code></pre>
<p>In short:</p>
<ul>
<li><em>Translatable</em> - the primary entity you use in your code</li>
<li><em>Translation</em> - the helper entity with translated items</li>
</ul>
<p>Usage stays the same:</p>
<pre><code class="language-php">$category-&gt;getTitle();</code></pre>
<p>That's all for the migration. Oh, you're still reading? Are you waiting for some easy solution to cover it all?</p>
<h2 id="5-migrate-blameable">5. Migrate Blameable</h2>
<h3 id="gedmo">Gedmo</h3>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Entity;

use Gedmo\Mapping\Annotation as Gedmo;
use Doctrine\ORM\Mapping as ORM;

/**
 * @ORM\Entity
 */
class Category
{
    /**
     * @Gedmo\Blameable(on="create")
     */
    private $createdBy;

    /**
     * @Gedmo\Blameable(on="update")
     */
    private $updatedBy;

    public function getCreatedBy()
    {
        return $this-&gt;createdBy;
    }

    public function getUpdatedBy()
    {
        return $this-&gt;updatedBy;
    }
}</code></pre>
<p>↓</p>
<h3 id="knplabs">KnpLabs</h3>
<ul>
<li>Add <code>Knp\DoctrineBehaviors\Contract\Entity\BlameableInterface</code> interface</li>
<li>Add <code>Knp\DoctrineBehaviors\Model\Blameable\BlameableTrait</code> trait</li>
<li>Remove Gedmo annotations</li>
</ul>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Entity;

use Doctrine\ORM\Mapping as ORM;
use Knp\DoctrineBehaviors\Contract\Entity\BlameableInterface;
use Knp\DoctrineBehaviors\Model\Blameable\BlameableTrait;

/**
 * @ORM\Entity
 */
class Category implements BlameableInterface
{
    use BlameableTrait;
}</code></pre>
<h2 id="6-migrate-loggable">6. Migrate Loggable</h2>
<h3 id="gedmo">Gedmo</h3>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Entity;

use Gedmo\Mapping\Annotation as Gedmo;
use Doctrine\ORM\Mapping as ORM;

/**
 * @ORM\Entity
 * @Gedmo\Loggable
 */
class Category
{
    /**
     * @Gedmo\Versioned
     * @ORM\Column(name="title", type="string", length=8)
     */
    private $title;
}</code></pre>
<p>↓</p>
<h3 id="knplabs">KnpLabs</h3>
<ul>
<li>Add <code>Knp\DoctrineBehaviors\Model\Loggable\LoggableTrait</code> trait</li>
<li>Add <code>Knp\DoctrineBehaviors\Contract\Entity\LoggableInterface</code> interface</li>
<li>Remove Gedmo annotations</li>
</ul>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Entity;

use Doctrine\ORM\Mapping as ORM;
use Knp\DoctrineBehaviors\Model\Loggable\LoggableTrait;
use Knp\DoctrineBehaviors\Contract\Entity\LoggableInterface;

/**
 * @ORM\Entity
 */
class Category implements LoggableInterface
{
    use LoggableTrait;

    /**
     * @ORM\Column(name="title", type="string", length=8)
     */
    private $title;
}</code></pre>
<h2 id="7-migrate-softdeletable">7. Migrate SoftDeletable</h2>
<h3 id="gedmo">Gedmo</h3>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Entity;

use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;

/**
 * @Gedmo\SoftDeleteable(fieldName="deletedAt", timeAware=false, hardDelete=true)
 * @ORM\Entity
 */
class Category
{
    /**
     * @ORM\Column(name="deletedAt", type="datetime", nullable=true)
     */
    private $deletedAt;

    public function getDeletedAt()
    {
        return $this-&gt;deletedAt;
    }

    public function setDeletedAt($deletedAt)
    {
        $this-&gt;deletedAt = $deletedAt;
    }
}</code></pre>
<p>↓</p>
<h3 id="knplabs">KnpLabs</h3>
<ul>
<li>Add <code>Knp\DoctrineBehaviors\Contract\Entity\SoftDeletableInterface</code> interface</li>
<li>Add <code>Knp\DoctrineBehaviors\Model\SoftDeletable\SoftDeletableTrait</code> trait</li>
<li>Remove Gedmo annotations</li>
</ul>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Entity;

use Knp\DoctrineBehaviors\Contract\Entity\SoftDeletableInterface;
use Knp\DoctrineBehaviors\Model\SoftDeletable\SoftDeletableTrait;

class Category implements SoftDeletableInterface
{
    use SoftDeletableTrait;
}</code></pre>
<h2 id="instant-upgrade-what-you-can">Instant Upgrade what you Can</h2>
<p>All right, for all the behaviors listed above, there is a Rector set:</p>
<pre><code class="language-bash">composer require rector/rector --dev
vendor/bin/rector process src --set doctrine-gedmo-to-knplabs</code></pre>
<p>Instant upgrades never cover the whole migration path - e.g., they lack database migrations - but they're are always <strong>saving you 80 % of boring work</strong>.</p>
<p>If anything breaks, <a href="https://github.com/rectorphp/rector/issues/new?template=1_Bug_report.md">create and issue on Github</a> so you can enjoy fixed version soon.</p>
<p><br></p>
<p>Happy migration!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2020/01/06/migrate-gedmo-to-knplabs</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 06 Jan 2020 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2020/01/06/migrate-gedmo-to-knplabs#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Doctrine Behaviors 2.0 - Reloaded ]]></title>
                <link>https://tomasvotruba.com/blog/2019/12/30/doctrine-behaviors-2-0-reloaded</link>
                <description><![CDATA[ <p>In <a href="/blog/2019/09/09/how-we-upgraded-pehapkari-cz-from-symfony-4-to-5-in-25-days//">How we Upgraded Pehapkari.cz from Symfony 4 to 5 in 25 days</a> post, there is a section about Doctrine Behaviors in Symfony 5.
<br><br>
<strong>None of stof, gedmo, nor KnpLabs is working with Symfony 5</strong>. There are many issues in each of those projects asking for maintainers to merge PRs and tag it. One of those issues was heard, and the owner gave me maintainer access.
<br><br>
How does it look 3 weeks later?</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="from-first-excitement-rush-to-heavy-burden-of-responsibility">From First Excitement Rush to Heavy Burden of Responsibility</h2>
<p><a href="https://github.com/KnpLabs/DoctrineBehaviors">KnpLabs/DoctrineBehaviors</a> development was stuck since 2015. There were 10+ opened PRs to use interfaces over traits (to give classes clear contract), bug-fix PRs, and design improvements.</p>
<p>When I got a message from KnpLabs with an offer to maintain, I was super happy to say <a href="https://sivers.org/hellyeah">&quot;hell, yeah&quot;</a>. An excitement rush went through my veins. I could saw all the huge refactoring for better and how it helps the whole PHP community to move another step forward.</p>
<p>A moment later, when I realized what happened and how quickly, I started to be scared. The repository looked like a massive chunk of code that will need many design changes,  back compatibility breaks, etc. <strong>All the responsibility started to fall on my shoulders, and it was heavy</strong>.</p>
<p>I took it as challenge and started to <a href="/blog/2018/04/30/programming-climbing-a-huge-mountain/">climb mountain</a>, without knowing if or how this will end-up.</p>
<blockquote class="blockquote text-center">
    There were only 2 options:<br>finished tagged version 2 or burn-out in the process.
</blockquote>
<p>I took the risk.</p>
<h2 id="what-can-we-do-in-3-weeks">What Can We Do in 3 Weeks?</h2>
<ul>
<li><strong>39 merged pull-requests</strong></li>
<li><strong>93 closed issues</strong></li>
<li><strong>5 alpha/beta tag releases</strong></li>
<li>full support of Symfony 4.4 and 5</li>
</ul>
<p><br></p>
<img src="/assets/images/posts/doc_beha_pulse.png" class="img-thumbnail">
<p><br></p>
<p><strong>Added/removed lines per week:</strong></p>
<img src="/assets/images/posts/doc_beha_stats.png" class="img-thumbnail">
<h2 id="what-is-new-in-doctrine-behaviors-2-0">What is new in Doctrine Behaviors 2.0?</h2>
<p>All right, you get it. There were lots changes, but what exactly?</p>
<p>Let's start with the <em>sad part</em>.</p>
<h3 id="3-removed-behaviors">3 Removed Behaviors</h3>
<p>Tests did not cover some behaviors, nor described in README. When you look at them closely and write a test for them, you'll see <strong>they never worked</strong> or worked accidentally. I've cross-references these features with <a href="https://packagist.org/packages/gedmo/doctrine-extensions">gedmo/doctrine-extensions</a> and saw DoctrineBehaviors is the only package that has them, resp. pretend to have them.</p>
<p><br></p>
<p><strong>Saying that these 3 behaviors were dropped:</strong></p>
<p><a href="https://github.com/KnpLabs/DoctrineBehaviors/pull/473">Sortable</a></p>
<ul>
<li>it only updated all values to <code>1</code>, completely broken</li>
</ul>
<p><a href="https://github.com/KnpLabs/DoctrineBehaviors/pull/467">Geocodable</a></p>
<ul>
<li>it only worked on PostgreSQL with a specific function</li>
<li>has a conflict with km/miles</li>
<li>method API was very limited to a few narrow cases</li>
</ul>
<p><a href="https://github.com/KnpLabs/DoctrineBehaviors/pull/463">Filterable</a></p>
<ul>
<li>overcomplicated API 4 required methods for single simple filter</li>
<li>basically <code>findBy*()</code> magic on steroids, better use explicit non-magic methods with clear naming</li>
</ul>
<p><strong>It is recommended to implement them yourself that suite your specific needs</strong>.</p>
<p><br></p>
<p>Now that the sad part is behind us let's look at new features.</p>
<h3 id="from-trait-to-interface">From Trait to Interface</h3>
<p>This work was initiated <strong>by <a href="https://github.com/bocharsky-bw">bocharsky-bw</a> and <a href="https://github.com/lemoinem">@lemoinem</a></strong> back in 2016. Thank you both for clear PRs, it was quite easy for me to see changes and apply them to new and drastically different code <a href="https://github.com/KnpLabs/DoctrineBehaviors/pull/442">in this single PR</a>.</p>
<p><strong>The idea is simple</strong>: instead of traits that are problematic to detect by <code>instanceof</code> or <code>is_a()</code>, use interface for method and class contract.</p>
<p><br></p>
<p>What does it mean? This is <em>trait-first</em> approach:</p>
<pre><code class="language-php">&lt;?php

namespace App\Entity;

use Doctrine\ORM\Mapping as ORM;
use Knp\DoctrineBehaviors\Model\Timestampable\TimestampableTrait;

/**
 * @ORM\Entity
 */
class Product
{
    use TimestampableTrait;
}</code></pre>
<p>You use traits, so you don't have to create properties (<code>$createdBy</code> and <code>$updatedBy</code> in this case) manually. There are also 2 split traits for methods and properties, so the code above equals:</p>
<pre><code class="language-php">&lt;?php

namespace App\Entity;

use Doctrine\ORM\Mapping as ORM;
use Knp\DoctrineBehaviors\Model\Timestampable\TimestampablePropertiesTrait;
use Knp\DoctrineBehaviors\Model\Timestampable\TimestampableMethodsTrait;

/**
 * @ORM\Entity
 */
class Product
{
    use TimestampablePropertiesTrait;
    use TimestampableMethodsTrait;
}</code></pre>
<p>But what happens if you remove trait and want to override methods?</p>
<pre><code class="language-php">&lt;?php

namespace App\Entity;

use Doctrine\ORM\Mapping as ORM;

/**
 * @ORM\Entity
 */
class Product
{
}</code></pre>
<p>Well, there is no contract by an interface, so we have no idea to fix this, we introduced interfaces:</p>
<pre><code class="language-php">&lt;?php

namespace App\Entity;

use Doctrine\ORM\Mapping as ORM;
use Knp\DoctrineBehaviors\Contract\Entity\TimestampableInterface;

/**
 * @ORM\Entity
 */
class Product implements TimestampableInterface
{
}</code></pre>
<p>Now PHPStorm tells you what methods it needs. You can use your code or a trait to cover them.</p>
<p>It also easy to detect an object that uses this behavior, which significantly improved performance and architecture at the same time:</p>
<pre><code class="language-php">use Knp\DoctrineBehaviors\Contract\Entity\TimestampableInterface;

// object
$isTimestampableEntity = $entity instanceof TimestampableInterface;

// string class name
$isTimestampableEntity = is_a($entityClass, TimestampableInterface::class, true);</code></pre>
<h3 id="translation-now-needs-id">Translation now needs Id</h3>
<p>All the behaviors didn't add any id properties. Except for translation, where the id was added with this ugly magic method (mind the <code>@deprecated</code> note):</p>
<img src="/assets/images/posts/doc_beha_id_magic.png" class="img-thumbnail">
<p>The <a href="https://github.com/KnpLabs/DoctrineBehaviors/issues/154">inconsistency</a> <a href="https://github.com/KnpLabs/DoctrineBehaviors/issues/415">was</a> <a href="https://github.com/KnpLabs/DoctrineBehaviors/pull/158">problematic</a>. In short: it was buggy and hard to use your id property because DoctrineBehaviors tried to <em>guess</em> what id you probably want.</p>
<p>The fix was suggested <a href="https://github.com/KnpLabs/DoctrineBehaviors/pull/421">early 2019</a>, but the final fix was <a href="https://github.com/KnpLabs/DoctrineBehaviors/pull/480/files">merged in 2020</a>.</p>
<p>What does it mean for your entities? <strong>You need to add their own id</strong>:</p>
<pre><code class="language-diff"> &lt;?php

 namespace App\Entity;

 use Knp\DoctrineBehaviors\Contract\Entity\TranslatableInterface;
 use Knp\DoctrineBehaviors\Model\Translatable\TranslatableTrait;

 /**
  * @ORM\Entity
  */
 class TranslatableEntityTranslation implements TranslationInterface
 {
     use TranslationTrait;

+    /**
+     * @ORM\Id
+     * @ORM\Column(type="integer")
+     * @ORM\GeneratedValue(strategy="AUTO")
+     * @var int
+     */
+    private $id;</code></pre>
<h3 id="scalar-types">Scalar Types</h3>
<p>Scalar types make bugs more comfortable to discover, e.g., when a subscriber is broken, and it does not add value, return null will result in a fatal error.</p>
<p>That's why all the traits have scalar param and return types:</p>
<pre><code class="language-diff"> trait TimestampableMethodsTrait
 {
-    /**
-     * @return DateTimeInterface
-     */
-    public function getCreatedAt()
+    public function getCreatedAt(): DateTimeInterface
     {
         return $this-&gt;createdAt;
     }
 }</code></pre>
<p>Migration path for these types will be provided based on feedback, so <strong>in case you override these methods manually, you won't have to complete the types</strong>.</p>
<h3 id="code-quality-changes">Code Quality Changes</h3>
<p>Feature improvements are essential. But to make them fast and stable, the <a href="/blog/2019/12/23/5-things-i-improve-when-i-get-to-new-repository/"><strong>code quality has the same importance</strong></a>.</p>
<blockquote class="blockquote text-center">
    Energy saved on manual maintenance<br>
    can be used to improve features.
</blockquote>
<p>How has been code quality improved?</p>
<ul>
<li><a href="https://github.com/KnpLabs/DoctrineBehaviors/pull/435/files">ECS was added with PSR-12 coding standard check</a></li>
<li><a href="https://github.com/KnpLabs/DoctrineBehaviors/pull/470"><code>CHANGELOG.md</code> is fully generated</a></li>
<li><a href="https://github.com/KnpLabs/DoctrineBehaviors/commit/3b17cdf656b5f904c4222c559d78bbd17217881a">tests now respect PSR-4</a></li>
<li><a href="https://github.com/KnpLabs/DoctrineBehaviors/pull/445">Rector CI now checks dead code, code quality and Nette\Utils</a></li>
<li><a href="https://github.com/KnpLabs/DoctrineBehaviors/pull/436">PHPStan now checks the static analysis</a></li>
</ul>
<h2 id="community-driven">Community Driven</h2>
<p>Without the PHP community, packages are just chunks of code. Community around the package, city, or a meetup group is what makes it specials, gives it power and motivation to grow.</p>
<p><strong>I'd love to thank <a href="https://github.com/laurentHCM">@laurentHCM</a> and <a href="https://github.com/nicolashachet">@nicolashachet</a></strong> for the testing process of version 2 and instant migration with Rector. For their patience to report issues, test new Rector rules, and trying to solve all the packages conflicts desperately.</p>
<p>You gave me <strong>the motivation</strong> that helped me to overcome difficult moments when I got lost in the code.</p>
<h2 id="how-to-migrate-from-version-1-to-2">How to Migrate From version 1 to 2?</h2>
<p>What is the biggest problem of any significant refactoring? The backward compatibility (<em>BC</em>) breaks:</p>
<ul>
<li>Class rename?</li>
<li>Trait renamed?</li>
<li>Return type added?</li>
<li>Param type added?</li>
</ul>
<p><strong>Roughly over 80-120 BC breaking changes</strong> were performed between versions 1 and 2.</p>
<p>Imagine you have 20 such entities in your code, using 4 behavior traits, and now you have to:</p>
<ul>
<li>complete interfaces</li>
<li>complete param types</li>
<li>complete return types</li>
<li>rename traits</li>
<li>add an id to every translation entity</li>
</ul>
<p><strong> I'd be angry at any project, who would do such change, without providing one-click upgrade path</strong>.</p>
<p><br></p>
<p>That's why during such BC breaking changes <strong>I've prepared <a href="https://github.com/KnpLabs/DoctrineBehaviors/blob/master/upgrade/rector/doctrine-behaviors-20.yaml">instant upgrade Rector set</a> you can run on your code</strong>:</p>
<pre><code class="language-yaml">composer require rector/rector --dev
vendor/bin/rector process src --config vendor/knplabs/doctrine-behaviors/upgrade/rector/doctrine-behaviors-20.yaml</code></pre>
<p>Single command turns to upgrade from 1 to 2 from days to few dozens of minutes.</p>
<h2 id="how-does-it-compare-to-gedmo-stof">How does it Compare to Gedmo/Stof?</h2>
<p>Are you a stof/gedmo user? Then you're familiar <a href="https://github.com/stof/StofDoctrineExtensionsBundle/issues">with Symfony 5 issues</a> around it. Don't worry. The KnpLabs\DoctrineBehaviors 2 was developed bearing you in mind.</p>
<p>KnpLabs\DoctrineBehaviors don't support softdeletable and non-materialized tree path <em>yet</em>, but the rest of the features are covered.</p>
<h3 id="how-do-you-migrate-from-gedmo-stof-to-knplabs-doctrinebehaviors">How do you Migrate from Gedmo/Stof to KnpLabs\DoctrineBehaviors?</h3>
<p>Read <a href="/blog/2020/01/06/migrate-gedmo-to-knplabs/">Migrate Gedmo to KnpLabs</a> post to find the answer.</p>
<p><br></p>
<p>That's all for me. Use it, bend it, break it, and report issues or pull-request so that we can make migration path together even smoother.</p>
<p><br></p>
<p><strong>I wish you happy new year 2020 full of huge adventures not only in code!</strong></p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/12/30/doctrine-behaviors-2-0-reloaded</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 30 Dec 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/12/30/doctrine-behaviors-2-0-reloaded#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ 5 Things I Improve when I Get  to new Repository ]]></title>
                <link>https://tomasvotruba.com/blog/2019/12/23/5-things-i-improve-when-i-get-to-new-repository</link>
                <description><![CDATA[ <p>I started to write this post as follow up for <a href="/blog/2019/12/16/8-steps-you-can-make-before-huge-upgrade-to-make-it-faster-cheaper-and-more-stable/">clean and sustainable code</a> post. In the middle of writing, I've realized I have this approach to ever repository I meet.
<br>
<br>
Imagine it like a working desk. But not your usual stable place where you work every day. <strong>Instead, you are assigned to a new desk of a former employee, who worked in the company for 5 years and as a bonus - it was the CTO</strong>. For you, it's a mess.
<br>
<br>
What is the first thing we do? We'll <strong>prepare it for hard work</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <p>I get to 2-3 new projects/week and during the last couple of years I've noticed <strong>I repeat the same preparing process before work itself</strong>. It makes me much more effective and creates a very intuitive environment to work in.</p>
<h2 id="1-set-1-spacing-rule">1. Set 1 Spacing Rule</h2>
<p>Without this file, every file has a different number of spaces, tabs, line-endings... and everything else we can't see.</p>
<p>Well, until you have errors like:</p>
<ul>
<li><em>YAML syntax error</em></li>
<li><em>Mix of tabs and spaces</em></li>
</ul>
<p>Or <em>creatively</em> structured code like:</p>
<pre><code class="language-php">&lt;?php

class SomeClass
{
public function someMethod()
{
}
}</code></pre>
<p>We don't need these problems, it's the computers' job.</p>
<p><strong>This takes 1 minute to set up and commit</strong>:</p>
<pre><code class="language-yaml"># .editorconfig
root = true

[*]
charset = utf-8
end_of_line = lf
insert_final_newline = true
trim_trailing_whitespace = true
indent_style = space
indent_size = 4</code></pre>
<div class="text-center">
    <em class="fas fa-4x fa-check text-success margin-auto"></em>
</div>
<p><br></p>
<h2 id="2-make-sure-vendor-is-in-code-vendor-code">2. Make Sure vendor is in <code>vendor</code></h2>
<p>The easier miss-location, that works as default on some operation systems, is this:</p>
<pre><code class="language-json">{
    "config": {
        "vendor-dir": "Vendor"
    }
}</code></pre>
<p>It might be a great feeling to be creative for various reasons, but <strong>most PHP tools are not ready for this</strong>, e.g. PHPStan and Rector fail here.</p>
<p>Unless there is some supercritical issue, I always make it a standard way:</p>
<pre><code class="language-diff">-{
-    "config": {
-        "vendor-dir": "Vendor"
-    }
-}</code></pre>
<div class="text-center">
    <em class="fas fa-4x fa-check text-success margin-auto"></em>
</div>
<p><br></p>
<h2 id="3-move-code-to-code-src-code">3. Move Code to <code>/src</code></h2>
<p>In times old so I can't remember, code was located randomly. Then PSR-0 came, then PSR-4. <a href="/blog/2019/12/16/8-steps-you-can-make-before-huge-upgrade-to-make-it-faster-cheaper-and-more-stable/#1-psr-4-standard">Many tools depend on PSR-4</a>, so another standard naturally came to my toolset.</p>
<blockquote class="blockquote text-center mt-5 mb-3">
    Keep source code in <code>/src</code>.
</blockquote>
<p>That means only source code needed for production, so:</p>
<ul>
<li><strong>no migrations</strong></li>
<li><strong>no fixtures</strong></li>
<li><strong>no test helpers</strong></li>
<li><strong>no coding standard utils</strong></li>
<li><strong>no Rector utils</strong></li>
<li><strong>no templates</strong></li>
<li><strong>no translations</strong></li>
<li><strong>no configs</strong></li>
<li><strong>no bin files</strong></li>
<li><strong>no helpers bash scripts</strong></li>
<li><strong>no cool git repository tricks</strong></li>
</ul>
<p>Once we rule in place know that every command, that works with PHP code will get only one argument: <code>src</code></p>
<pre><code class="language-bash">vendor/bin/ecs c src
vendor/bin/phpstan a src
vendor/bin/rector p src</code></pre>
<div class="text-center">
    <em class="fas fa-4x fa-check text-success margin-auto"></em>
</div>
<p><br></p>
<h2 id="4-directory-name-directory-content">4. Directory Name = Directory Content</h2>
<p>Saying the one above, I apply the same for other content:</p>
<ul>
<li>binary files? → <code>bin</code></li>
<li>files used in continues integration? → <code>ci</code></li>
<li>configs? → <code>configs</code></li>
<li>templates? → <code>templates</code></li>
<li>translations? → <code>translations</code></li>
<li>database migrations? → <code>migration</code></li>
</ul>
<p>...and so on.</p>
<p>You may know it as:</p>
<blockquote class="blockquote text-center mt-5 mb-3">
    1 level architecture.
</blockquote>
<p>It's very intuitive to use, based on UX, DX and well... <strong>human brain. We tend to choose simpler solutions over complex ones</strong>. Often it leads to crappy application design.</p>
<p>I have a special case for Rector, coding standards, PHPStan rules, utils that helps in development, but aren't part of the project itself → <code>utils/&lt;project&gt;/src</code></p>
<div class="text-center">
    <em class="fas fa-4x fa-check text-success margin-auto"></em>
</div>
<p><br></p>
<h2 id="5-code-fs-code-code-ps-code-code-pu-code-2-chars-shortcuts-for-tools-that-help-me">5. <code>fs</code>, <code>ps</code>, <code>pu</code>... 2 Chars Shortcuts for Tools that Help Me</h2>
<pre><code class="language-bash">fs
ps
pu</code></pre>
<p>6 characters, even &quot;characters&quot; has 10 characters.</p>
<p>I can't imagine to code without them. What are they?</p>
<pre><code class="language-bash">vendor/bin/ecs check src tests --fix
vendor/bin/phpstan analyse src tests
vendor/bin/phpunit</code></pre>
<p>Well, now you know <a href="/blog/2019/11/25/the-single-best-skill-to-master-command-line/">I use aliases in my bash</a>. It's <strong>the ultimate <em>skill</em></strong>, because your brain gets much more space to think.</p>
<blockquote class="blockquote text-center mt-5 mb-5">
    "But every project has different directories.<br>
    Do you use some uber hack alias for every single project?"
</blockquote>
<p>That's right, in one project it is:</p>
<pre><code class="language-bash">vendor/bin/ecs check src tests --fix</code></pre>
<p>in another it is:</p>
<pre><code class="language-bash">vendor/bin/ecs check src packages tests --fix</code></pre>
<p>Well, this how my bash aliases look like:</p>
<pre><code class="language-bash">alias fs="composer fix-cs"
alias ps="composer phpstan"
alias pu="vendor/bin/phpunit"</code></pre>
<p><strong>I never change them</strong>. So where is the dynamic part?</p>
<p>Have you heard of <a href="https://blog.martinhujer.cz/have-you-tried-composer-scripts">composer scripts</a>?</p>
<p>In every project I came to, I set up dev dependencies and scripts first:</p>
<pre><code class="language-json">{
    "require-dev": {
        "symplify/easy-coding-standard": "^7.1",
        "phpstan/phpstan": "^0.12",
        "phpunit/phpunit": "^8.5"
    },
    "scripts": {
        "fix-cs": "vendor/bin/ecs check bin src tests --fix --ansi",
        "phpstan": "vendor/bin/phpstan analyse bin src tests --ansi --error-format symplify"
    }
}</code></pre>
<p>That way I can modify directories right in <code>composer.json</code>.</p>
<p>So <strong>when I do any change in the code</strong>:</p>
<ul>
<li>I open 3 terminals in PHPStorm console</li>
<li>I run 3 scripts in parallel = <strong>it's faster and I can focus better on 1 tool</strong></li>
<li>I know what came wrong and re-run only the broken part</li>
</ul>
<pre><code class="language-bash">fs
ps
pu</code></pre>
<p>As a side benefit, continuous integration is easier to set up and maintain:</p>
<pre><code class="language-yaml"># travis.yml
jobs:
    include:
        -
            stage: test
            name: ECS
            script:
                - composer check-cs

        -
            name: PHPStan
            script:
                - composer phpstan</code></pre>
<p>Is there one new directory <code>utils</code> to check? Just update <code>composer.json</code>:</p>
<pre><code class="language-diff"> {
     "require-dev": {
         "symplify/easy-coding-standard": "^7.1",
         "phpstan/phpstan": "^0.12",
         "phpunit/phpunit": "^8.5"
     },
     "scripts": {
-        "fix-cs": "vendor/bin/ecs check bin src tests --fix --ansi",
+        "fix-cs": "vendor/bin/ecs check bin src tests utils --fix --ansi",
-        "phpstan": "vendor/bin/phpstan analyse bin src tests --ansi --error-format symplify"
+        "phpstan": "vendor/bin/phpstan analyse bin src tests utils --ansi --error-format symplify"
    }
}</code></pre>
<p>This way I also see, <strong>what directories contain PHP code, that needs to be checked</strong>.</p>
<div class="text-center">
    <em class="fas fa-4x fa-check text-success margin-auto"></em>
</div>
<p><br></p>
<blockquote class="blockquote text-center mt-5 mb-3">
    "If you want to go quickly, go alone.<br>
    If you want to go far, go together."
</blockquote>
<p><br></p>
<p>Happy Xmass Coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/12/23/5-things-i-improve-when-i-get-to-new-repository</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 23 Dec 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/12/23/5-things-i-improve-when-i-get-to-new-repository#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ 8 Steps You Can Make Before Huge Upgrade to Make it Faster, Cheaper and More Stable ]]></title>
                <link>https://tomasvotruba.com/blog/2019/12/16/8-steps-you-can-make-before-huge-upgrade-to-make-it-faster-cheaper-and-more-stable</link>
                <description><![CDATA[ <p>&quot;How much will cost upgrade from Symfony 3 to Symfony 4 with Rector?&quot;
<br><br>
Similar questions fill my personal and <a href="https://getrector.org/contact">Rector email</a> in the last 3 months. It's hard to give a reasonable answer without actually seeing the repository, so I reply with follow-up questions to get get more details.
<br><br>
Yet, I've discovered there are few repeated patterns, that make the upgrade easier and that <strong>most projects can do by themselves</strong> before migration starts.</p> ]]></description>
                <content:encoded><![CDATA[ <p>These points make any code migration faster and easier. It also <strong>decreases the time required to understand the code</strong> by a person who sees the code for the very first time.</p>
<p>Based on my experience with 10+ legacy projects of size 100 k-800 k lines, these points can be applied generally.</p>
<h2 id="1-psr-4-standard">1. PSR-4 Standard</h2>
<p>What are the benefits of using <a href="https://www.php-fig.org/psr/psr-4">PSR-4</a> standard? If you use it, all classes are <strong>unique</strong>, <strong>autoloaded</strong> and <strong>easy to relate to file path</strong>. We need that for effective coding - so we don't have to care about it - and thus also for effective migrations.</p>
<p>If you have PSR-4 standard applied, your <code>composer.json</code> looks like this:</p>
<pre><code class="language-json">{
    "autoload": {
        "psr-4": {
            "App\\": "src"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "App\\Tests\\": "tests"
        }
    }
}</code></pre>
<ul>
<li>No <code>classmap</code>, no <code>files</code></li>
<li>No <a href="/blog/2020/06/08/drop-robot-loader-and-let-composer-deal-with-autoloading/">Nette\RobotLoader</a> magic autoloading</li>
<li>No <a href="https://stackoverflow.com/a/31847204/1348344">extra autoloading</a> for PHPUnit</li>
<li>No <a href="https://github.com/sebastianbergmann/phpunit/blob/c27ac794f809a73bb04bcd4cdd0c33f3265921a4/src/Runner/StandardTestSuiteLoader.php#L39">PHPUnit magic autoloading</a></li>
</ul>
<p>If you meet all these conditions... wait, you need to make sure, there is also no code like:</p>
<pre><code class="language-php">class Some_Fake_Namespace_Class
{
}</code></pre>
<p>...nor manual file requirements...</p>
<pre><code class="language-php">require __DIR__ . '/libs/SomeFramework/File.php';</code></pre>
<p>...nor <a href="https://github.com/rectorphp/rector/blob/master/docs/AllRectorsOverview.md#multipleclassfiletopsr4classesrector">multiple classes in one file</a>...</p>
<pre><code class="language-php">class SomeException extends Exception
{
}

class SomeOtherException extends Exception
{
}</code></pre>
<p>...nor incorrect namespace/class case...</p>
<pre><code class="language-php"># app/lowercased/SomeController.php
namespace App\Lowercased;

class Somecontroller
{
}</code></pre>
<p>Should be:</p>
<pre><code class="language-diff">-app/lowercased/SomeController.php
+app/Lowercased/SomeController.php</code></pre>
<pre><code class="language-diff">-class Somecontroller
+class SomeController</code></pre>
<blockquote class="blockquote text-center mt-5 mb-3">
    If you meet all this conditions,<br>
    the migration is <strong>~20 % cheaper</strong>.
</blockquote>
<div class="text-center">
    <em class="fas fa-4x fa-check text-success margin-auto"></em>
</div>
<h2 id="2-explicit-php-version">2. Explicit PHP Version</h2>
<p>What? Every project has a PHP version... that's obvious for many projects, but there is still that can go wrong. How?</p>
<pre><code class="language-json">{
    "require": {
        "php": "^7.1"
    },
    "config": {
        "platform": {
            "php": "7.2"
        }
    }
}</code></pre>
<p>So... which is it?</p>
<pre><code class="language-json">{
    "require": {
        "php": "7.1"
    }
}</code></pre>
<p>Is that locked for PHP 7.1 for some reason... is it though?</p>
<pre><code class="language-json">{
    "require": {
        "php": "^5.6|^7.2"
    }
}</code></pre>
<p>2 major versions... is that an open-source? Btw, you should not be at PHP 5.6 at all, <a href="https://www.php.net/supported-versions.php">it's dead</a>.</p>
<pre><code class="language-json">{
    "require": {
    }
}</code></pre>
<p>Ups! Make some up your mind. It's gonna be so weird to read this: it's the most common situation.</p>
<p>Is it in the Docker? No way! Docker is not version control. It only runs what you allow it to. Are you sure it handles PHP 4?</p>
<blockquote class="blockquote text-center mt-5 mb-3">
    If you meet one major PHP version,<br>
    the migration is <strong>~5 % cheaper</strong>.
</blockquote>
<div class="text-center">
    <em class="fas fa-4x fa-check text-success margin-auto"></em>
</div>
<h2 id="3-easycoding-standard-with-basic-sets">3. EasyCoding Standard with Basic Sets</h2>
<p>Why are coding standards needed for the migration? The AST libraries that Rector uses aren't well-suited to make code look nice and consistent, so it's better to let coding standard tools do that.</p>
<p>The basic <a href="https://github.com/symplify/easy-coding-standard">ECS</a> setup we use looks like:</p>
<pre><code class="language-php">&lt;?php

// ecs.php

declare(strict_types=1);

use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
use Symplify\EasyCodingStandard\Configuration\Option;use Symplify\EasyCodingStandard\ValueObject\Set\SetList;

return static function (ContainerConfigurator $containerConfigurator): void {
    $parameters = $containerConfigurator-&gt;parameters();
    $parameters-&gt;set(Option::SETS, [
        SetList::PSR_12,
        SetList::PHP_70,
        SetList::PHP_71,
        SetList::CLEAN_CODE,
        SetList::COMMENTS,
        // very nice to have ↓
        SetList::SYMPLIFY,
    ]);
};</code></pre>
<p>Run it:</p>
<pre><code class="language-bash">composer require symplify/easy-coding-standard --dev
vendor/bin/ecs check src --fix</code></pre>
<blockquote class="blockquote text-center mt-5 mb-3">
    If you meet all the basic coding standard sets,<br>
    the migration is <strong>~5 % cheaper</strong>.
</blockquote>
<div class="text-center">
    <em class="fas fa-4x fa-check text-success margin-auto"></em>
</div>
<h2 id="4-phpstan-on-level-8">4. PHPStan on Level 8</h2>
<p>Coding style is one of <em>smoke testing</em> layers. It means it runs all over your code, without being explicitly told to. From that, the static analysis is just one step away.</p>
<pre><code class="language-bash">composer require phpstan/phpstan
vendor/bin/phpstan analyse src --level 0</code></pre>
<p>It's better to start small, then go high (like with any other drugs):</p>
<pre><code class="language-bash">vendor/bin/phpstan analyse src --level 1
vendor/bin/phpstan analyse src --level 2
...
vendor/bin/phpstan analyse src --level 8</code></pre>
<p>There are many Rector rules, <a href="https://github.com/rectorphp/rector/blob/master/docs/AllRectorsOverview.md#addclosurereturntyperector">that help you with rules jumping</a>.</p>
<blockquote class="blockquote text-center mt-5 mb-3">
    If you make PHPStan to level 8 and passing,<br>
    the migration is <strong>~15 % cheaper</strong>.
</blockquote>
<div class="text-center">
    <em class="fas fa-4x fa-check text-success margin-auto"></em>
</div>
<h2 id="5-newbie-composer-install-under-2-hours">5. Newbie Composer Install Under 2 Hours</h2>
<p>This is how we usually run a good-quality project:</p>
<pre><code class="language-bash">git clone your-project.git

# install backend dependencies
composer install

# install frontend dependencies
npm install</code></pre>
<ul>
<li>create local database</li>
<li>create <code>.env.local</code> with local database credentials</li>
</ul>
<pre><code class="language-bash"># run database migration
bin/console doctrine:migrations:migrate

# run Symfony 5 project
php -S localhost:8000 -t public</code></pre>
<p>That's it. It takes 15-30 minutes to run <a href="http://github.com/pehapkari/pehapkari.cz">pehapkari.cz</a> project locally, if you see it first.</p>
<p><br></p>
<p>The projects we meet are often hosted on Bitbucket, Github or Gitlab. Someone needs to add your SSH key there.</p>
<p><strong>If it takes more than a day, something is wrong</strong>:</p>
<ul>
<li>
<p>Sometimes there is <a href="https://getcomposer.org/doc/articles/handling-private-packages-with-satis.md">Satis</a> for handling private packages.</p>
</li>
<li>
<p>Sometimes there is an SVN.</p>
</li>
</ul>
<p>One project took me 2 weeks to ask for SSH keys 3 different people by 7 mails, 4 callings, one VPN... I still can't run <code>composer install</code>.</p>
<p><strong>Flawless install under 2 hours is a luxury.</strong></p>
<blockquote class="blockquote text-center mt-5 mb-3">
    If you make <code>composer install</code> under 2 hours,<br>
    the migration is <strong>~5 % cheaper</strong>.
</blockquote>
<div class="text-center">
    <em class="fas fa-4x fa-check text-success margin-auto"></em>
</div>
<h2 id="6-70-code-coverage">6. 70 % Code Coverage</h2>
<p>When we come to a completely new project, <strong>we need instant feedback, if we break something</strong>. It would be nice to have 100 % code coverage, but even my open-source project rates as high as 75 %.</p>
<p><strong>It's like having CTO who rose the project constantly at your side for any change you make.</strong></p>
<p>We don't care if it's functional, integration or unit tests - we just need the coverage to be sure nothing is wrong with the code. Without tests, <strong>any change in the code is like shooting blindfolded in the dark without hands at a target that is both invisible, moving and Shrodinger's cat</strong>.</p>
<p>On the other hand, if you have a code coverage over 80 % percent, even change of <a href="/blog/2019/08/26/how-we-migrated-54-357-lines-of-code-nette-to-symfony-in-2-people-under-80-hours/">the framework can be as fast as 80 hours</a>.</p>
<blockquote class="blockquote text-center mt-5 mb-3">
    If you make it pass ~70 % code coverage,<br>
    the migration is <strong>~50 % cheaper</strong>.
</blockquote>
<div class="text-center">
    <em class="fas fa-4x fa-check text-success margin-auto"></em>
</div>
<h2 id="7-not-versioned-vendor">7. Not Versioned Vendor</h2>
<p>I know it sounds crazy again, but it's not. Many projects we get have 2 <code>vendor</code> directories. One is versioned by <code>composer.json</code> and the other is versioned... <em>somehow</em>.</p>
<p>Why use <a href="https://github.com/cweagans/composer-patches">composer patches</a> or custom forks, if you can version packages locally. It's fast, it's healthy, it's all you wish for.</p>
<p>But getting packages out of <em>local vendor</em> is the real adventure. We need to compare every file in both directories, <del>discover</del> guess the version, <del>test</del> hope it's the right one, prevent from duplications with <em>real vendor</em> and so on.</p>
<blockquote class="blockquote text-center mt-5 mb-3">
    If you don't version your <code>vendor</code>,<br>
    the migration is <strong>~10 % cheaper</strong>.
</blockquote>
<div class="text-center">
    <em class="fas fa-4x fa-check text-success margin-auto"></em>
</div>
<h2 id="8-solid-gitlab-ci">8. Solid Gitlab CI</h2>
<p>What if you have all the items above? When is the last time you've checked them? You don't know?</p>
<p>If the answer is not &quot;at every commit&quot;, it's not good enough. You need to have CI. And I don't mean Bitbucket CI.</p>
<p>Why? It's not that Bitbucket CI is worse than Gitlab CI or GitHub actions. It's the ecosystem support. <strong>The Gitlab CI has the longest support for CI of a private project there is.</strong></p>
<p>That means:</p>
<ul>
<li>a lot of tutorials</li>
<li>a lot of people who know how to configure it</li>
<li>a lot of custom Docker tutorials</li>
<li>community support in case of troubles</li>
</ul>
<p>As a side bonus, <strong>it's free for private projects with unlimited users</strong> and 2 000 build minutes per month (I've never reached that).</p>
<blockquote class="blockquote text-center mt-5 mb-3">
    If you use Gitlab CI on every commit,<br>
    the migration is <strong>~10 % cheaper</strong>.
</blockquote>
<div class="text-center">
    <em class="fas fa-4x fa-check text-success margin-auto"></em>
</div>
<h2 id="worth-it">Worth It?</h2>
<img src="/assets/images/posts/2019/before/time.png" class="img-thumbnail">
<p>Let's say your goal is to migrate the whole framework or switch a legacy framework for a modern one. If you had skills, time and money to do that, you'd probably be there. <strong>It takes the experience with many legacy migrations to there effectively without years of time and full-rewrite.</strong></p>
<p>But... these steps above don't depend on such experience. You can implement in your in-house team. <strong>Such work will reduce work on our side and make your code solid on your side with not such a big overhead</strong>.</p>
<p>Just pick one and start slowly.</p>
<p><br></p>
<p>Happy coding!</p>
<p><br></p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/12/16/8-steps-you-can-make-before-huge-upgrade-to-make-it-faster-cheaper-and-more-stable</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/12/16/8-steps-you-can-make-before-huge-upgrade-to-make-it-faster-cheaper-and-more-stable#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Get Rid of Technical Debt or What We Would Have Done Differently 2 Years ago ]]></title>
                <link>https://tomasvotruba.com/blog/2019/12/09/how-to-get-rid-of-technical-debt-or-what-we-would-have-done-differently-2-years-ago</link>
                <description><![CDATA[ <p>We talked about cleaning legacy code with Rector 2 months ago on <a href="https://www.meetup.com/friends-of-php-prague/events/265615371">40th meetup of PHP friends in Prague</a>.
<br>
Who is <em>we</em>? Me and CTO of the <a href="https://spaceflow.io/en">company I worked for</a>, a great leader and technical expert who taught me a lot, <a href="https://www.linkedin.com/in/milanmimra">Milan Mimra</a>.
<br>
<br>
The talk was not full of shallow tips, nor <a href="/blog/2019/08/26/how-we-migrated-54-357-lines-of-code-nette-to-symfony-in-2-people-under-80-hours/">about framework migration</a>. Instead, <strong>we talked about small decisions that were made 2 years. Decisions, which took 3 months to get rid of</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <p><strong>Do you speak Czech?</strong> Go check <a href="https://docs.google.com/presentation/d/1QSpTVqmtXpE8RvB73cYDBrDYpuChjp_Uz3sLJhLnLXo/edit?usp=sharing">64 slides</a> and <a href="https://www.facebook.com/pehapkari/videos/vl.404478763568491/399224180756304/?type=1">watch the talk video recording on Facebook</a> (it is 60 minutes long and the picture is broken from ~27th minute, but the audio is good).</p>
<p><a href="https://www.facebook.com/pehapkari/videos/vl.404478763568491/399224180756304/?type=1"></p>
<img src="/assets/images/posts/2019/spaceflow_10_points/main.png" class="img-thumbnail col-12 col-md-8">
<p></a></p>
<p><br></p>
<p><strong>For all the rest of you who speak English better or don't want to copy-paste code instead of watching the video, I'm writing this post.</strong> So you can learn from our pain and make your brand new mistakes :)</p>
<h2 id="the-size-del-does-del-doesn-t-matter">The Size <del>Does</del> Doesn't Matter</h2>
<p>This talk was about my work as <em>cleaning lady</em> in a project, that <strong>wanted to improve their PHP codebase across the whole application</strong>. Any PHP projects I recently consulted would benefit from these changes, so keep reading even if you already run on the latest version of your favorite framework.</p>
<p>Instant upgrades effectivity doesn't depend on project size, but people still want size numbers, so there you go:</p>
<ul>
<li>Symfony 4.* backend for mobile application</li>
<li>253 endpoints = routes</li>
<li>105 000 lines of code (bigger than <a href="https://medium.com/@javiereguiluz/30-of-laravel-code-is-symfony-a49dcf30e809">Symfony with ~90 000 lines</a>)</li>
</ul>
<p><br></p>
<p>From all the work we've done, <strong>we've picked 10 most important changes that brought code quality to another level</strong>.</p>
<h2 id="1-advance-your-coding-standard">1. Advance Your Coding Standard</h2>
<img src="/assets/images/posts/2019/spaceflow_10_points/01.png" class="img-thumbnail col-12 col-md-8">
<p>When people say &quot;we use coding standard&quot;, it usually means &quot;we use only PSR-2 but nothing more&quot;.</p>
<p>That's like saying &quot;we use Symfony&quot; when you're using only controllers.</p>
<h3 id="why-you-should-use-it">Why You Should use It?</h3>
<ul>
<li>the best code improvements in exchange for massively improved code - for 10 minutes, life-time code check</li>
<li>it's very easy to start using it if you don't use it yet</li>
<li>further refactoring with Rector or analysis with PHPStorm or PHPStan is more robust</li>
</ul>
<img src="/assets/images/posts/2019/spaceflow_10_points/02.png" class="img-thumbnail col-12 col-md-8">
<p>It's better to start slow, so the first things we did was:</p>
<ul>
<li>moving from string <code>"SomeClass"</code> to <code>SomeClass::class</code></li>
<li>coding standard enforced line-ending - not just sniff, but a fixer</li>
<li><a href="/blog/2019/01/24/how-to-kill-parents/">finalized (almost) everything</a></li>
<li>accidental fatal error check of an empty array</li>
</ul>
<img src="/assets/images/posts/2019/spaceflow_10_points/04.png" class="img-thumbnail col-12 col-md-8">
<h3 id="how-to-apply">How to Apply?</h3>
<p>Just run <a href="https://github.com/symplify/easy-coding-standard">ECS</a> with following set:</p>
<pre><code class="language-php">&lt;?php

// ecs.php

declare(strict_types=1);

use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
use Symplify\CodingStandard\Fixer\LineLength\LineLengthFixer;
use PhpCsFixer\Fixer\ClassNotation\FinalClassFixer;

return static function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();

    // keep line-length max. 120 chars long
    $services-&gt;set(LineLengthFixer::class)
        -&gt;call('configure', [[
            'lineLength' =&gt; 120
        ]]);

    // every non-Entity non-abstract class must be final - you have to skip those that are used + have children, like this ↓
    $services-&gt;set(FinalClassFixer::class);
};</code></pre>
<p>And the result?</p>
<img src="/assets/images/posts/2019/spaceflow_10_points/03.png" class="img-thumbnail col-12 col-md-8">
<h2 id="2-single-class-single-place">2. Single Class = Single Place</h2>
<img src="/assets/images/posts/2019/spaceflow_10_points/05.png" class="img-thumbnail col-12 col-md-8">
<p>Have you heard about PSR-4? Well, so did many people before you, but it's very to forget it thanks to:</p>
<ul>
<li>PHPUnit magic autoload - you can place your tests anywhere, PHPUnit will find them</li>
<li><a href="/blog/2020/06/08/drop-robot-loader-and-let-composer-deal-with-autoloading/">Nette\RobotLoader</a> - load anything from anywhere, for free</li>
<li>composer &quot;classmap&quot; - just load the directory, who cares</li>
<li>DDD - Domain Driven Design - apparently, one of the most favorite principles is to put all files in one directory, templates, configs, services, objects... just put it there</li>
</ul>
<img src="/assets/images/posts/2019/spaceflow_10_points/06.png" class="img-thumbnail col-12 col-md-8">
<p>This all helps a lot to messy applications. As basic as this rule seems, I must sadly say that <strong>lack of PSR-4 is one of the biggest problems of legacy applications</strong>.</p>
<h3 id="forget-service-autodiscovery-use-ze-handz">Forget Service Autodiscovery, Use Ze Handz!</h3>
<p>To add more salt into the wound, now imagine <strong>you want to use some sort of services autoregistration</strong> (and you should, unless you want to kill your project slowly). That means you tell your dependency injection container &quot;load these services from this directory&quot;.</p>
<p>One of such <a href="/blog/2017/05/07/how-to-refactor-to-new-dependency-injection-features-in-symfony-3-3/">implementaions is PSR-4 autodiscovery in Symfony</a>:</p>
<p><a href="/blog/2017/05/07/how-to-refactor-to-new-dependency-injection-features-in-symfony-3-3/"></p>
<img src="/assets/images/posts/2019/spaceflow_10_points/08.png" class="img-thumbnail col-12 col-md-8">
<p></a></p>
<p>Such a simple yet powerful idea... which all the Symfony applications I've seen so far struggle. There Symfony 4 and 5 projects, where programmers still have to write each service manually.</p>
<img src="/assets/images/posts/2019/spaceflow_10_points/07.png" class="img-thumbnail col-12 col-md-8">
<p>I wonder, isn't there something better to do? Like <strong>writing unique PHP code</strong> that cannot be automated?</p>
<p>So that's what we did:</p>
<img src="/assets/images/posts/2019/spaceflow_10_points/09.png" class="img-thumbnail col-12 col-md-8">
<h3 id="how-to-apply">How to Apply?</h3>
<p>This one requires lof ot manual configuration tweaking of <a href="https://github.com/rectorphp/rector">Rector</a> rules, but you can run basic migration with following set:</p>
<pre><code class="language-php">&lt;?php

// rector.php

declare(strict_types=1);

use Rector\Autodiscovery\Rector\FileSystem\MoveServicesBySuffixToDirectoryRector;
use Rector\PSR4\Rector\Namespace_\NormalizeNamespaceByPSR4ComposerAutoloadRector;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();
    $services-&gt;set(MoveServicesBySuffixToDirectoryRector::class);

    // configure `composer.json` to desired way
    $services-&gt;set(NormalizeNamespaceByPSR4ComposerAutoloadRector::class);
};</code></pre>
<h2 id="3-make-your-ci-fast-or-die-trying">3. Make Your CI Fast or Die Trying</h2>
<img src="/assets/images/posts/2019/spaceflow_10_points/10.png" class="img-thumbnail col-12 col-md-8">
<p>This is rather a general tip than a specific migration.</p>
<p><strong>In the beginning we had</strong>:</p>
<ul>
<li>slow database test</li>
<li>Doctrine fixtures that were added on every integration test</li>
</ul>
<p>Not only CI but also local testing was slow. That leads to <strong>frustration</strong> due to <strong>loooooooooong feedback loop</strong>. In reality, it means check test = having a coffee or go smoking. And you don't want to hurt your team intentionally like that, do you?</p>
<p><br></p>
<p>So after a lot of work <strong>we had super fast CI that</strong>:</p>
<ul>
<li>loaded database just once</li>
<li>reference fixtures via IDs in constants instead of in-Database references</li>
<li>checked coding standards in standalone job</li>
<li>checked static analysis in standalone job</li>
<li>checked Rector in standalone job</li>
</ul>
<img src="/assets/images/posts/2019/spaceflow_10_points/11.png" class="img-thumbnail col-12 col-md-8">
<h2 id="4-remove-what-you-don-t-use">4. Remove What You Don't Use</h2>
<img src="/assets/images/posts/2019/spaceflow_10_points/12.png" class="img-thumbnail col-12 col-md-8">
<p>I see you now thinking &quot;we don't have any dead code, or PHPStorm would tell us&quot;. No, it wouldn't, at least no in level the static analysis can.</p>
<p>How do we know? Well, we were you in the start... &quot;no, we don't have any dead code&quot;:</p>
<img src="/assets/images/posts/2019/spaceflow_10_points/13.png" class="img-thumbnail col-12 col-md-8">
<p>The moment you realize:</p>
<ul>
<li>the code is broken</li>
<li>you have to fix it</li>
<li>you have to maintain it</li>
<li>oh, it's used in tests</li>
<li>good</li>
<li>wait...</li>
<li><strong>it's used only in the test but nowhere else!</strong></li>
</ul>
<img src="/assets/images/posts/2019/spaceflow_10_points/14.png" class="img-thumbnail col-12 col-md-8">
<p>God, don't do this manually! Automate ↓</p>
<pre><code class="language-php">&lt;?php

// rector.php

declare(strict_types=1);

use Rector\Core\Configuration\Option;
use Rector\DeadCode\Rector\Class_\RemoveUnusedDoctrineEntityMethodAndPropertyRector;
use Rector\Set\ValueObject\SetList;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return function (ContainerConfigurator $containerConfigurator): void {
    $parameters = $containerConfigurator-&gt;parameters();
    $parameters-&gt;set(Option::SETS, [
        SetList::DEAD_CODE,
    ]);

    $services = $containerConfigurator-&gt;services();
    $services-&gt;set(RemoveUnusedDoctrineEntityMethodAndPropertyRector::class);
    // + some extra private rules :)
};</code></pre>
<p><strong>Soon, you'll be 10-20 % slimmer and you'll fit into your favorite bathing suite :)</strong></p>
<p>Also, you'll avoid skipping code-reviews:</p>
<img src="/assets/images/posts/2019/spaceflow_10_points/15.png" class="img-thumbnail col-12 col-md-8">
<h2 id="5-make-your-ground-base-del-rock-del-diamond-solid">5. Make Your Ground Base <del>Rock</del> Diamond SOLID</h2>
<img src="/assets/images/posts/2019/spaceflow_10_points/16.png" class="img-thumbnail col-12 col-md-8">
<p>Have you ever seen code like this?</p>
<img src="/assets/images/posts/2019/spaceflow_10_points/17.png" class="img-thumbnail col-12 col-md-8">
<p>I'd never expect <code>string</code> turn into <code>null</code>, but it happened anyway. <strong>Silently</strong>. And not just from this function.</p>
<p><strong>We wanted this code to throw an exception and tell us what's wrong</strong>. Right in the place where it happened, not just &quot;string expect, null given&quot; later.</p>
<p>There is a <a href="https://github.com/thecodingmachine/safe">Safe package</a> that can partially protect you, but it's rather general and with a generic exception.</p>
<h3 id="nette-solid">Nette SOLID</h3>
<p>But there is even better one - <a href="https://github.com/nette/utils">Nette\Utils</a>:</p>
<img src="/assets/images/posts/2019/spaceflow_10_points/18.png" class="img-thumbnail col-12 col-md-8">
<p>How to get it into your code? Easy:</p>
<pre><code class="language-php">&lt;?php

// rector.php

declare(strict_types=1);

use Rector\Core\Configuration\Option;
use Rector\Set\ValueObject\SetList;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return function (ContainerConfigurator $containerConfigurator) : void {
    $parameters = $containerConfigurator-&gt;parameters();
    $parameters-&gt;set(Option::SETS, [
        SetList::NETTE_UTILS_CODE_QUALITY,
    ]);
};</code></pre>
<h2 id="6-config-spam">6. Config SPAM</h2>
<img src="/assets/images/posts/2019/spaceflow_10_points/19.png" class="img-thumbnail col-12 col-md-8">
<p>We already wrote that config suffers from manual services registration spam. But there is more...</p>
<img src="/assets/images/posts/2019/spaceflow_10_points/20.png" class="img-thumbnail col-12 col-md-8">
<img src="/assets/images/posts/2019/spaceflow_10_points/21.png" class="img-thumbnail col-12 col-md-8">
<p>This is <strong><a href="/blog/2018/11/12/will-autowired-arrays-finally-deprecate-tags-in-symfony-and-nette/">famous Symfony tag spam</a></strong>.</p>
<ul>
<li>not needed</li>
<li>overly promoted in documentation</li>
<li>thus at the end used by everybody</li>
<li>making application stupidly complex and hard to maintain and extend in the end</li>
</ul>
<p>Another typical issues is <strong><a href="/blog/2018/11/05/do-you-autowire-services-in-symfony-you-can-autowire-parameters-too/">manual parameter spam</a></strong>.</p>
<h3 id="add-spam-filter">Add Spam Filter</h3>
<p>We don't like spam, do you? So we dropped all this crap and used 2 compiler passes to make it KISS:</p>
<ul>
<li><a href="https://github.com/symplify/package-builder#autowire-array-parameters"><code>AutowireArrayParameterCompilerPass</code></a></li>
<li><a href="https://github.com/symplify/package-builder#autobind-parameters"><code>AutoBindParametersCompilerPass</code></a></li>
</ul>
<p>↓</p>
<img src="/assets/images/posts/2019/spaceflow_10_points/22.png" class="img-thumbnail col-12 col-md-8">
<h2 id="7-remove-all-the-copy-paste-legacy">7. Remove All the Copy-Paste Legacy</h2>
<img src="/assets/images/posts/2019/spaceflow_10_points/23.png" class="img-thumbnail col-12 col-md-8">
<p>We all know how the story goes:</p>
<ul>
<li>&quot;They did it&quot;</li>
<li>&quot;I just maintain it&quot;</li>
<li>&quot;It's faster to copy-paste it...&quot;</li>
<li><strong>&quot;I don't have time to fix it now...&quot;</strong></li>
<li>3 years later...</li>
<li>&quot;Oh my, what's this? How do we get out of it? <strong>Rewrite?</strong>&quot;</li>
</ul>
<p>In our case, it was json, written as a string:</p>
<img src="/assets/images/posts/2019/spaceflow_10_points/24.png" class="img-thumbnail col-12 col-md-8">
<p>It was hard to maintain, even read or change a value in that mess. We had many bugs just because of invalid quote concat, missed closing quote or new-line issues. <strong>We needed to use a normal array like most people do</strong>, but it was spread in over 70 use cases, some of them nesting array into 5 levels.</p>
<p>What now?</p>
<p>Easy, we made a Rector rule for that:</p>
<pre><code class="language-php">&lt;?php

// rector.php

declare(strict_types=1);

use Rector\CodingStyle\Rector\String_\ManualJsonStringToJsonEncodeArrayRector;use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();
    $services-&gt;set(ManualJsonStringToJsonEncodeArrayRector::class);
};</code></pre>
<img src="/assets/images/posts/2019/spaceflow_10_points/25.png" class="img-thumbnail col-12 col-md-8">
<h2 id="8-know-all-your-properties">8. Know ALL Your Properties</h2>
<img src="/assets/images/posts/2019/spaceflow_10_points/26.png" class="img-thumbnail col-12 col-md-8">
<p>I already wrote about this here: <a href="/blog/2019/07/29/how-we-completed-thousands-of-missing-var-annotations-in-a-day/">How we Completed Thousands of Missing @var Annotations in a Day</a></p>
<p><strong>This is super important to make instant refactoring reliable!</strong></p>
<h2 id="9-enter-anywhere">9. Enter Anywhere?</h2>
<img src="/assets/images/posts/2019/spaceflow_10_points/27.png" class="img-thumbnail col-12 col-md-8">
<p>I already wrote about it... twice:</p>
<ul>
<li><a href="/blog/2019/05/16/don-t-ever-use-listeners/">Don't Ever use Symfony Listeners</a></li>
<li><a href="/blog/2019/07/22/how-to-convert-listeners-to-subscribers-and-reduce-your-configs/">How to Convert Listeners to Subscribers and Reduce your Configs</a></li>
</ul>
<img src="/assets/images/posts/2019/spaceflow_10_points/28.png" class="img-thumbnail col-12 col-md-8 mt-5">
<p><strong>Clean, simple, PHP without config magic!</strong></p>
<h2 id="10-switch-id-to-uuid">10. Switch ID to UUID?</h2>
<p>This was the biggest problem in the whole project. First, it used classic <code>int</code> ids. Then uuid was about to be used (for whatever good reasons), but for the lack of refactoring time only, new entities used it. So part of the old approach, part of the new approach. Sometimes one class uses one of those and another of those.</p>
<p><strong>Total mess, maintanece of 2 huge layers and negative effective on input/output layer</strong>, because it had to be consistent. There cannot be a situation where user sees urls like:</p>
<pre><code class="language-bash">/building/edit/1
/building/edit/b9a33908-56c8-431f-a159-e4bec344e56c</code></pre>
<p>And not only the user but also external API, mobile applications, invoice systems, etc.</p>
<p>This was a real challenge for the whole team - it included database, Doctrine refactoring rules, external service unification refactoring and also changing PHP types all over the application.</p>
<p>From this <a href="https://github.com/rectorphp/rector/tree/master/config/set/doctrine"><code>id-to-uuid</code> set was born</a>. Use at own risk, but it might be worth it, <strong>since it can save you months</strong> of work while your team can keep delivering features.</p>
<p><br></p>
<h2 id="benefits">Benefits?</h2>
<p>And that's all folks, all we made happen in 3 months work of... 1 person.
We wanted to show you, that all big changes don't have to be &quot;whole-team-2-years-refactoring-super-expensive-no-features&quot;.</p>
<p>It can be <strong>smooth, step by step, closed incremental iterations, done by one full-time person</strong>.</p>
<p>Now the code is:</p>
<ul>
<li>200 % more readable</li>
<li>instead of 3 locations, the class now only has 1 location</li>
<li>the database has 1 way to use ids instead of 2</li>
<li>configs are 95 % smaller</li>
<li>is 40 % safer thanks to exceptions of <code>null</code>/<code>false</code></li>
<li>most of the time the developer doesn't visit configs at all and can focus on PHP code of the feature instead</li>
</ul>
<p>And moreover:</p>
<ul>
<li><strong>it has 80 % fewer anti-patterns, so any new developer will produce high-quality code by default, just by reading the already written code</strong></li>
</ul>
<p><br></p>
<blockquote class="blockquote text-center mt-5 mb-5">
    This is Inspiration and Proof, it Can Be Done. Now Yours is Choice to Make:
    <br>
    What Are You Going to Clean Tomorrow in Your Code Base?
</blockquote> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/12/09/how-to-get-rid-of-technical-debt-or-what-we-would-have-done-differently-2-years-ago</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 09 Dec 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-08-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Aug 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/12/09/how-to-get-rid-of-technical-debt-or-what-we-would-have-done-differently-2-years-ago#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Box Symfony App to PHAR without Killing Yourself ]]></title>
                <link>https://tomasvotruba.com/blog/2019/12/02/how-to-box-symfony-app-to-phar-without-killing-yourself</link>
                <description><![CDATA[ <p>Do you have a Symfony Application like Composer and you want to ship it as a PHAR?
Composer is actually pretty simple - just see the <a href="https://github.com/composer/composer/blob/master/src/Composer/Compiler.php"><code>Compiler</code></a> class.
<br><br>
<strong>But what if</strong> you use Symfony Dependency Injection with PSR-4 <strong>autodiscovery</strong> like <a href="https://github.com/rectorphp/rector">Rector</a> does? Well, better be ready for <strong>nasty traps</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <p><em>Note: all these tips take 5 minutes to apply (in total), but took us ~6 hours to discover. I'd like to thank Jan Linhart from Mautic, Kerrial Becket Newham and Ivan Kvasnica for cooperation that made <a href="https://github.com/rectorphp/rector/pull/2373">this happen</a>.</em></p>
<p>Rector <a href="https://github.com/rectorphp/rector/issues/177">needs prefixed PHAR</a> for the same reasons PHPStan does.</p>
<p>Let's say your <code>composer.json</code> looks like this:</p>
<pre><code class="language-json">{
    "require": {
        "symfony/console": "2.8"
    }
}</code></pre>
<p>If you want to install Rector:</p>
<pre><code class="language-bash">composer require rector/rector --dev</code></pre>
<p>You'll end up with an error:</p>
<pre><code class="language-bash">rector/rector cannot be installed, because it requires symfony/* ^3.4|^4.4... but you have 2.8</code></pre>
<p>This leads to many issues reported on Github, mostly <a href="https://github.com/rectorphp/rector/issues/177">grouped around this one</a>.</p>
<h2 id="php-version-conflicts">PHP Version Conflicts</h2>
<p>If you have PHP 5.6, you'll get a different error:</p>
<pre><code class="language-bash">rector/rector needs at least PHP 7.2, you have PHP 5.6</code></pre>
<p>That's where Docker becomes useful. Yet, it still <strong>doesn't solve the Symfony 2.8 in your project vs Symfony 4.4 in Rector project issue</strong>.</p>
<p>That's why <strong>prefixed <code>rector.phar</code> is needed</strong>. With such a file, you don't care about Rector's dependencies, you just use it.</p>
<h2 id="how-does-quot-scoping-quot-work">How Does &quot;Scoping&quot; Work?</h2>
<p>Basically any <code>Symfony\Component\Console\Command</code> becomes <code>UniquePrefix\Symfony\Component\Console\Command</code>. That way there will never be conflicts between your code without prefix and unique Rector code.</p>
<h2 id="box-scope-industry-standard">Box + Scope Industry Standard</h2>
<p>To make it happen, we <strong>don't need to re-invent the wheel</strong>. There are 2 amazing tools maintained and developed by <a href="https://github.com/theofidry">Théo Fidry</a> (thank you!):</p>
<ul>
<li><a href="https://github.com/humbug/box">box</a> - a tool that creates PHAR (~= PHP zip) from an input directory</li>
<li><a href="https://github.com/humbug/php-scoper">php-scoper</a> - box <em>plugin</em> that adds namespace prefix to all the files</li>
</ul>
<p>It takes around 10 seconds to scope + wraps 5 000 files of Rector to <code>rector.phar</code>. <strong>This speed is amazing.</strong></p>
<h3 id="nobody-ever-used-symfony-in-phar-before">Nobody Ever used Symfony in PHAR Before</h3>
<p>These 2 tools work very well for PHP-based <em>manual</em> containers like PHPStan has. But fails for Symfony autodiscovery that uses globs. It's not the fault of these tools, but rather Symfony, because nobody ever tested it to compiled PHAR :).</p>
<p><strong>Where and how to overcome it?</strong> There are 4 steps you need to watch out for:</p>
<h2 id="1-from-code-excluded-code-files-to-globs">1. From <code>excluded</code> files to Globs</h2>
<p>If you have following config:</p>
<pre><code class="language-yaml">services:
    Rector\TypeDeclaration\:
        resource: '../src'
        exclude:
            - '../src/ValueObject/SpecificFile.php'</code></pre>
<p>You'll end up with an error:</p>
<pre><code class="language-bash">Directory "../src/ValueObject/SpecificFile.php" was not found.</code></pre>
<p>Where does it come from? It's an error from <a href="https://github.com/symfony/symfony/blob/c62bb82e27974ef4e389da523f0de451b6632266/src/Symfony/Component/Finder/Finder.php#L589">Symfony/Finder</a>.</p>
<p>But how did Symfony got there? Well, the Symfony takes missing files from <a href="https://github.com/symfony/symfony/blob/c62bb82e27974ef4e389da523f0de451b6632266/src/Symfony/Component/DependencyInjection/Loader/FileLoader.php#L162">&quot;excluded&quot; as directory</a> and the rest is history.</p>
<p>My super random guess is for missing local <code>phar://</code> prefix.</p>
<h3 id="how-to-fix-it">How to Fix it?</h3>
<p>Just change the relative path to each file to glob (<code>*</code>) and move your files there:</p>
<pre><code class="language-diff"> services:
     Rector\TypeDeclaration\:
         resource: '../src'
         exclude:
-          - '../src/ValueObject/SpecificFile.php'
+          - '../src/ValueObject/*'</code></pre>
<h3 id="positive-side-effect">Positive Side-Effect</h3>
<p>In the end, it was architecture improvement, as we had to move files to a generic directory, that clearly states it's not a service - here <code>ValueObject</code>.</p>
<h2 id="2-symfony-autodiscovery-slash-fail">2. Symfony Autodiscovery Slash Fail</h2>
<p>This one give me an headache, but is simple to fix:</p>
<pre><code class="language-diff"> services:
     Rector\TypeDeclaration\:
-        resource: '../src/'
+        resource: '../src'</code></pre>
<h2 id="3-sha1-cannot-be-verified">3. SHA1 cannot be Verified...</h2>
<p>This one is not strictly related to Symfony, but it happened while we shipped <code>box.phar</code>:</p>
<pre><code class="language-bash">Error: Fatal error: Uncaught PharException: phar "compiler/build/box.phar" SHA1
the signature could not be verified: broken signature in ...</code></pre>
<p>What the <code>box.phar</code> worked locally but doesn't work on Travis?</p>
<p>I re-downloaded files many times and it worked in other CI. WTF?</p>
<p>Is that corrupted version of <code>box.phar</code>? I tried version before/after, still the same error.</p>
<p><br></p>
<p>2 hours later...</p>
<p><br></p>
<p>Damn. Spaces? Line-ending? <strong>Yes!</strong></p>
<p>The solution is to remove this from <code>.gitattributes</code>:</p>
<pre><code class="language-diff">-# Set default behavior, in case of users, don't have core.autocrlf set.
-* text=auto
-* text eol=lf</code></pre>
<p>Because <a href="https://stackoverflow.com/questions/24763948/git-warning-lf-will-be-replaced-by-crlf">it changed line-endings</a> in the <code>box.phar</code> on commit and thus made it valid locally, but broken remotely on Travis CI.</p>
<h2 id="4-don-t-do-multiple-code-bin-code-files">4. Don't do Multiple <code>bin</code> Files</h2>
<p>Rector had multiple bin files, just to split the complexity:</p>
<ul>
<li><code>bin/rector</code> that included
<ul>
<li><code>bin/autoload.php</code></li>
<li><code>bin/container.php</code></li>
</ul></li>
</ul>
<p>The Box takes only the file in <code>compser.json</code> &gt; <code>bin</code> section, so the latter 2 were missed. I tried to change configuration many times, but it mostly failed on malformed paths.</p>
<h3 id="how-to-solve-it">How to solve it?</h3>
<p>Now we have just <strong>single file</strong>:</p>
<ul>
<li><code>bin/rector</code></li>
</ul>
<p>With use strict typed classes written on the bottom of the file and use them in the same file. Also, nice side effects as we moved from many-functions to few classes.</p>
<p><br></p>
<p>Do you want to know more about Box + Scoper automated Travis CI deploy in practice?</p>
<p><a href="https://github.com/rectorphp/rector/pull/2373" class="btn btn-dark mt-3 mb-3">
<em class="fab fa-github fa-fw"></em>
Check this PR on Rector
</a></p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/12/02/how-to-box-symfony-app-to-phar-without-killing-yourself</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 02 Dec 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/12/02/how-to-box-symfony-app-to-phar-without-killing-yourself#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ The Single Best Skill to Master Command Line ]]></title>
                <link>https://tomasvotruba.com/blog/2019/11/25/the-single-best-skill-to-master-command-line</link>
                <description><![CDATA[ <p>I have a confession to make. I'm very poor with memory stuff. My brain is using neurons to mostly process data, instead of keeping them.
<br><br>
I'm very poor with memory stuff. So I use shortcuts, both in brain and code, that make me look smart. I don't like remember stuff, <strong>I won't enjoy them and use them</strong>.
<br><br>
Accidentally, <strong>my poor memory makes me the most productive programmer in the room</strong>. And you can be too. How?</p> ]]></description>
                <content:encoded><![CDATA[ <p>I had the Symfony &amp; Git training last Friday. We were using a single <code>master</code> branch on Gitlab and multiple programmers send their pull-requests into. We needed to pull and rebase after the feature was merged into the <code>master</code>.</p>
<p>How did they do it? It was similar to:</p>
<pre><code class="language-bash">- git checkout -b new-branch

# oh, there is some code in this branch
- git checkout .
- git checkout -b new-branch

# working and making some file changes
- git add .
- git commit -m Some message

# damn I forgot quotes
- git commit -m "Some message"
- git checkout master

# damn I forgot to push
- git push
# what branch? oh damn, this one of course
- git push new-branch

# now I can merge it and I can get new master version
- git checkout master
- git pull

# oh, I made accidentally some change
- git add .
- git commit -m "add master changes"
- git pull

# oh, I've heard this is better with some lease or what
- git pull --with-lease

# oh finally I have local code here
- git branch

# damn that branch is still here :/
- git branch -d new-branch

# damn, why is this the only big letter here?
- git branch -D new-branch</code></pre>
<p>...30 minutes later they're done. But <strong>does it have to take so long</strong>?</p>
<p><br></p>
<p>I keep getting the same feedback from most of my trainings:</p>
<blockquote class="blockquote">
"Wow you're fast at coding".
</blockquote>
<p>And I keep replying:</p>
<blockquote class="blockquote">
"I'm not, I'm just much lazier than you."
</blockquote>
<p><br></p>
<p>What does that mean? If you'd record my keyboard for the process above, it would look more like this:</p>
<pre><code class="language-bash">nb new-branch
gc "Some Message"
p
cmp
db new-branch
rema
gc
p
pul
gc
...</code></pre>
<p>You get the idea. For you, it looks like a cat is walking my keyboard, or I'm having a party at home with way too much wine. <em>For you.</em></p>
<p><strong><em>For me</em> it's a path of 2-3 neurons, that invoke some operation I want to achieve.</strong></p>
<h2 id="the-alias-file">The Alias File</h2>
<p>Secret is in <code>~/.aliases</code> file (<code>~</code> = user home directory), that looks like this:</p>
<pre><code class="language-bash"># ~/.aliases
alias a="sudo subl .aliases"

alias gc="git commit -m $1"
alias db="git branch -D $1"
alias pul="git fetch -p &amp;&amp; git pull --rebase"</code></pre>
<p>That's it! This single hack makes me so productive.</p>
<h2 id="what-do-i-use-for-cli">What do I use for CLI?</h2>
<h3 id="oh-my-zen-shell">Oh My Zen shell</h3>
<p>I use this on Ubuntu for the last 8 years (thanks to Michal Svec for helping me with it). It's a smart shell you can install from here - <a href="https://github.com/ohmyzsh/ohmyzsh">oh-my-zsh</a>.</p>
<h2 id="how-to-add-aliases">How to Add Aliases?</h2>
<p>Load your aliases in the main file:</p>
<pre><code class="language-bash"># ~/.zshrc
source $HOME/.aliases</code></pre>
<p>There are various shells, so specific file names might differ.</p>
<p>Now type &quot;a&quot; and voilá - <strong>the file with aliases is open</strong>!</p>
<h2 id="restart-console-after-adding-a-new-alias">Restart Console After Adding a New Alias</h2>
<p>Let's say we type new alias:</p>
<pre><code class="language-bash"># ~/.aliases
alias gf="git push --force"</code></pre>
<p>And save the file. Now we get back to our and type:</p>
<pre><code class="language-bash">gf
# zsh: command not found: gf</code></pre>
<p>What?</p>
<p>Well, the file <code>~/.aliases</code> has to reloaded to make it work.
The best way to do it is to close and open the console window.</p>
<h2 id="honor-one-woman-tip">Honor One Woman Tip</h2>
<p>You honor one woman, you honor one console. I've noticed some programmer use multiple consoles at the same time:</p>
<ul>
<li>PHPStorm console</li>
<li>Windows console</li>
<li>bash console</li>
</ul>
<p>When I work, I always go for <strong>PHPStorm console</strong>. In rare moments like performance heavy operations outside the project scope, I got with the terminal. But I still keep preferring having opened just one.</p>
<p>That way I can:</p>
<ul>
<li><strong>focus on one project</strong></li>
<li><strong>have a single image in my head</strong> - compared to various console design of IDE and your OS</li>
<li><strong>have one shortcut to open it</strong></li>
</ul>
<p>One, one, one.</p>
<blockquote class="blockquote">
If it's two, it's too long.
</blockquote>
<h2 id="memory-overflow-tip-don-t-be-greedy-with-shortcuts">Memory Overflow Tip: Don't Be Greedy with ShortCuts</h2>
<p><strong>Shortcuts are like cocaine</strong>. They can make you ultimately faster in small doses, but if you take too much of them, your brain will fall apart.</p>
<p>Pick around 10-20 shortcuts. Then every <del>now and then</del> 3 months look at and validate <strong>if they still suit you</strong>.</p>
<p><strong>Always alias your shortcuts you use everyday</strong>. The one above are just examples, but maybe you don't commit that much, or you don't use git at all. Maybe you work with the server.</p>
<p>So instead of</p>
<pre><code class="language-bash">ssh my-username@theserveryouuse.com</code></pre>
<p>you 'll get with <code>sms</code> (ssh, my, server)</p>
<p><br></p>
<p>That's what helped me, to always pick the first letter of the work.</p>
<ul>
<li>git pull? → <strong>gp</strong></li>
<li>git commit? → <strong>gc</strong></li>
<li>composer update? → <strong>cu</strong></li>
<li>rebase on master → <strong>rema</strong></li>
</ul>
<p>Keep it simple and your brain gets it :)</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/11/25/the-single-best-skill-to-master-command-line</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 25 Nov 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/11/25/the-single-best-skill-to-master-command-line#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Delegate Code Reviews to CI ]]></title>
                <link>https://tomasvotruba.com/blog/2019/11/18/how-to-delegate-code-reviews-to-ci</link>
                <description><![CDATA[ <p>Are you doing code reviews? No? Yes?
<br>
<br>
<strong>In both cases, you won't have too</strong>. Just add a couple of YAML lines to your CI.</p> ]]></description>
                <content:encoded><![CDATA[ <p>I'm very grateful that Rector is getting traction lately. More and more PHP developers save dozens of hours by running simple CLI commands on their codebases.</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Just upgraded <a href="https://twitter.com/phpunit?ref_src=twsrc%5Etfw">@phpunit</a> from 4.0 to 8.4 with <a href="https://twitter.com/rectorphp?ref_src=twsrc%5Etfw">@rectorphp</a> in 3 seconds with one command. It's worth knowing this tool. Thanks <a href="https://twitter.com/VotrubaT?ref_src=twsrc%5Etfw">@VotrubaT</a> 👏 <a href="https://t.co/o3ESvJRsJ7">pic.twitter.com/o3ESvJRsJ7</a></p>— Arkadiusz Kondas (@ArkadiuszKondas) <a href="https://twitter.com/ArkadiuszKondas/status/1196349896690950144?ref_src=twsrc%5Etfw">November 18, 2019</a></blockquote>
<p><br></p>
<p>It's a lot. But you want more laziness, right?</p>
<p><br></p>
<p><strong>Rector can do much more without you even running it</strong>.</p>
<h2 id="what-do-you-review-in-code">What do you Review in Code?</h2>
<p>If you do code-review, what do you mostly do?</p>
<ol>
<li>
<p><strong>Look for patterns</strong>, explain them, report them everywhere or just somewhere and hope the other person will fix them all.</p>
</li>
<li>
<p><strong>Discuss the design</strong> and why and what should be done about it.</p>
</li>
</ol>
<p>Well, the 2nd cannot be automated, unless you're able to put it in clear step-by-step, e.g SOLID laws in procedural code. So you still have to do that, sorry.</p>
<h2 id="dead-fat-code">Dead Fat Code</h2>
<p>But 1st step can be easily automated. How? Well, let's take a dead code for example.
In the last <a href="/blog/2019/07/29/how-we-completed-thousands-of-missing-var-annotations-in-a-day/">project I've helped to improve with Rector</a>, there were 2 years of dead-code piled up. A dead that you have to:</p>
<ul>
<li>test</li>
<li>maintain</li>
<li>debug if broken</li>
<li>review if changed anything related to it</li>
</ul>
<p><strong>So many human-hours wasted</strong>. In the end, we <strong>removed over 12 % of &quot;dead fat code&quot;</strong>. Wouldn't it be better if that fat would never be got it?</p>
<h2 id="add-rector-in-ci-in-3-steps">Add Rector in CI in 3 Steps</h2>
<ol>
<li>Install Rector</li>
</ol>
<pre><code class="language-bash">composer require rector/rector --dev</code></pre>
<ol start="2">
<li>Create <code>rector-ci.php</code> config just for code-reviews</li>
</ol>
<pre><code class="language-php">&lt;?php

// rector.php

declare(strict_types=1);

use Rector\Core\Configuration\Option;
use Rector\Set\ValueObject\SetList;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return static function (ContainerConfigurator $containerConfigurator): void {
    $parameters = $containerConfigurator-&gt;parameters();
    $parameters-&gt;set(Option::SETS, [SetList::DEAD_CODE]);
};</code></pre>
<ol start="3">
<li>And add to your CI bash</li>
</ol>
<pre><code class="language-bash">vendor/bin/rector process src --config rector-ci.php --dry-run</code></pre>
<h2 id="how-to-add-rector-ci-to-your-favorite-ci">How to add Rector CI to your Favorite CI?</h2>
<p>I've prepared a demo with PHP code and a testing pipeline for all widely used CI services.</p>
<ul>
<li><a href="#1-github-actions">GitHub Actions</a></li>
<li><a href="#2-github-travis-ci">GitHub + Travis CI</a></li>
<li><a href="#3-gitlab-ci">Gitlab CI</a></li>
<li><a href="#4-bitbucket">BitBucket</a></li>
</ul>
<p><br></p>
<p>There you'll find all the configuration you need to <strong>let your CI do code-reviews</strong>.</p>
<h3 id="1-github-actions">1. GitHub Actions</h3>
<p><br></p>
<p><a href="http://github.com/tomasvotruba/rector-ci-demo" class="btn btn-info">Repository</a>
<a href="https://github.com/GenieTim/rector-ci-demo/commit/346486384586f327531efff12b8367bbdaf817ad/checks?check_suite_id=320630971#step:4:2" class="btn btn-success ml-3">CI Feedback</a></p>
<pre><code class="language-yaml"># .github/workflows/php.yml
name: Rector Code Review

on: [push]

jobs:

    build:
        runs-on: ubuntu-latest

        steps:
        - uses: actions/checkout@v1

        - name: Validate composer.json and composer.lock
          run: composer validate

        - name: Install dependencies
          run: composer install --prefer-dist --no-progress --no-suggest

        - name: Code Review
          run: ./vendor/bin/rector process --config rector-ci.php --dry-run</code></pre>
<h3 id="2-github-travis-ci">2. GitHub + Travis CI</h3>
<p><br></p>
<p><a href="http://github.com/tomasvotruba/rector-ci-demo" class="btn btn-info">Repository</a>
<a href="https://travis-ci.com/TomasVotruba/rector-ci-demo/jobs/258286278#L320"  class="btn btn-success ml-3">CI Feedback</a></p>
<pre><code class="language-yaml"># .travis.yml
os: linux
language: php

php:
    - '7.2'

install:
    # install composer dependencies for all stages
    - composer install --prefer-dist --no-ansi --no-interaction --no-progress

jobs:
    include:
        -
            stage: test
            name: "Tests"
            script:
                - vendor/bin/phpunit

        -
            stage: test
            name: "Code Review"
            script:
                - vendor/bin/rector process --config rector-ci.php --dry-run</code></pre>
<p><br></p>
<h3 id="3-gitlab-ci">3. Gitlab CI</h3>
<pre><code class="language-yaml"># .gitlab-ci.yml
# inspired from https://docs.gitlab.com/ee/ci/examples/php.html

# see https://github.com/RobBrazier/docker-php-composer
image: robbrazier/php:7.2

before_script:
    # install composer dependencies for all stages
    - composer install --prefer-dist --no-ansi --no-interaction --no-progress

stages:
    - test

tests:
    stage: test
    script:
        - vendor/bin/phpunit

code-review:
    stage: test
    script:
        - vendor/bin/rector process --config rector-ci.php --dry-run</code></pre>
<h3 id="4-bitbucket">4. Bitbucket</h3>
<p><br></p>
<p><a href="https://bitbucket.org/tomas-votruba/rector-ci-demo/src/master/" class="btn btn-info">Repository</a>
<a href="https://bitbucket.org/tomas-votruba/rector-ci-demo/addon/pipelines/home#!/results/3" class="btn btn-success ml-3">CI Feedback</a></p>
<pre><code class="language-yaml"># bitbucket-pipelines.yml
# see https://github.com/RobBrazier/docker-php-composer
image: robbrazier/php:7.2

pipelines:
    default:
        - step:
              name: "Build"
              script:
                  - composer install --prefer-dist --no-ansi --no-interaction --no-progress

              artifacts:
                  - build/**
                  - vendor/**
                  - composer.json # beacause of scripts
                  - composer

        # @see https://confluence.atlassian.com/bitbucket/parallel-steps-946606807.html
        - parallel:
              - step:
                    name: "Tests"
                    caches:
                        - composer
                    script:
                        - vendor/bin/phpunit

              # Run Rector CI
              - step:
                    name: "Code Review"
                    caches:
                        - composer
                    script:
                        - vendor/bin/rector process src --config rector-ci.php</code></pre>
<h2 id="what-sets-to-start-with">What sets to Start With?</h2>
<p>Here are my favorite sets I apply first:</p>
<pre><code class="language-php">&lt;?php

// rector.php

declare(strict_types=1);

use Rector\Core\Configuration\Option;
use Rector\Set\ValueObject\SetList;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return static function (ContainerConfigurator $containerConfigurator): void {
    $parameters = $containerConfigurator-&gt;parameters();
    $parameters-&gt;set(Option::SETS, [
        SetList::CODING_STYLE,
        SetList::CODE_QUALITY,
        SetList::DEAD_CODE,
        SetList::NETTE_UTILS_CODE_QUALITY,
    ]);
};</code></pre>
<p>But you don't have to stop there. Pick <strong>any of <a href="https://github.com/rectorphp/rector/tree/master/config/set">100+ sets</a></strong> that Rector provides.</p>
<p><br>
<br></p>
<p>That's it!</p>
<p>Oh... one more thing. You don't have to resolve all the Rector reported flaws manually, <strong>just remove the <code>--dry-run</code> option</strong> and run it locally before pushing:</p>
<pre><code class="language-bash">vendor/bin/rector process src --config rector-ci.php</code></pre>
<p><br></p>
<p>Enjoy your coffee!</p>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/11/18/how-to-delegate-code-reviews-to-ci</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 18 Nov 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/11/18/how-to-delegate-code-reviews-to-ci#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ From 0 Doc Types to Full Type Declaration with Dynamic Analysis ]]></title>
                <link>https://tomasvotruba.com/blog/2019/11/11/from-0-doc-types-to-full-type-declaration-with-dynamic-analysis</link>
                <description><![CDATA[ <p>I wrote <a href="/blog/2019/07/29/how-we-completed-thousands-of-missing-var-annotations-in-a-day/">How we Completed Thousands of Missing @var Annotations in a Day</a>. If you have at least some annotations, you can use Rector to do the dirty work.
<br>
<br>
To be honest, open-source is the top 1 % code there is, but out <strong>in the wild of <del>legacy</del> established PHP companies, it's a miracle to see just one <code>string</code> type declaration</strong>.
<br>
<br>
Are these projects lost? Do you have to quit them? And what if the annotations are lying?</p> ]]></description>
                <content:encoded><![CDATA[ <p>I had a great trip with a friend of mine <a href="https://github.com/DaveLiddament">Dave Liddament</a> after <a href="https://2019.phpday.it">PHP Day 2019 in Verona</a>. During Venice sightseeing in beautiful wild rain, we had a short coffee break to talk about Rector. Dave was amazed by what Rector can do for the developer, with such a few lines of YAML config.</p>
<p>As a proper curious developer, <strong>he challenged me with series</strong> of &quot;Can it do...?&quot; or &quot;How can it...?&quot; questions.</p>
<p><br></p>
<p>The one we spent almost an hour on one was:</p>
<p><strong>&quot;How can Rector help with type declarations, if there are no docblocks and no type hints?&quot;</strong></p>
<pre><code class="language-php">&lt;?php

class SomeClass
{
    public function run($value)
    {
        return $value;
    }
}</code></pre>
<p>First I was cold stone and said: &quot;That's far beyond static analysis. That's a job for a human, Rector can't help here&quot;.</p>
<p>I vividly recall I was sure was <em>this is impossible</em> (← now this line my motto pick project that is interesting enough, lol).</p>
<p><br></p>
<p>But David sticks with it questioning:</p>
<ul>
<li>&quot;If we know there is <strong>always a string coming inside and nothing else</strong>, we could do this:&quot;</li>
</ul>
<pre><code class="language-diff"> &lt;?php

 class SomeClass
 {
-    public function run($value)
+    public function run(string $value): string
     {
         return $value;
     }
 }</code></pre>
<ul>
<li>&quot;Well... yes, you're right.&quot;</li>
</ul>
<h2 id="detect-every-argument-type">Detect Every Argument Type</h2>
<p>I started to see a very small candle at the end of the tunnel and said:</p>
<ul>
<li>&quot;We could do some kind of logging types that come to the method. Collect enough data and decide based on that.&quot;</li>
</ul>
<p>There is a similar technique for dead-code analysis - <a href="https://github.com/krakjoe/tombs">tombs</a>. But the problem is, <strong>it's not written in PHP</strong>. And if it's not written in the language we use, we are not able to extend it or fix it. That's why PHPStorm plugins written Java take so long to catch up with framework releases.</p>
<p>We wanted to have the code just once in the whole application. If possible in the end and collect all the method calls and their arguments. We tried to use <code>register_shutdown_function</code> and <code>debug_trace</code> for it. But after some time spends hacking them, we gave up.</p>
<p>So it will have to be good old <strong>static call under each class method</strong>, something like:</p>
<pre><code class="language-diff"> &lt;?php

 class SomeClass
 {
    public function run($value)
    {
+       TypeCollector::collect($value, __METHOD__, 0);
        return $value;
    }
 }</code></pre>
<h2 id="what-about-performance">What about Performance?</h2>
<p><code>file_put_contents()</code> takes <a href="https://www.php.net/manual/en/function.file-put-contents.php#105421">~10 ms for 10 000 writes</a> writes, so writing in filesystem might work.</p>
<p>Still, it's safer to use <strong>feature toggles</strong> or direct <strong>small fraction of traffic</strong> to a standalone server with these static methods.</p>
<h2 id="how-long-should-we-collect-data">How Long Should we Collect Data?</h2>
<p>This needs to be tested in the wild. It depends on many factors, for a blogging platform, it can be a week of data.
For a payment system, a month would be better, maybe more to be sure.</p>
<p>Also, the same way we collect data first <strong>with feature toggle/traffic fraction</strong>, we can test added types after they're added to the code.</p>
<h2 id="the-simple-idea">The Simple Idea</h2>
<p>To make the idea more solid, we looked for the edge cases:</p>
<ul>
<li>&quot;Wait, so we just collect types and then analyze them?&quot;</li>
<li>&quot;Yes, if there are 10 000 calls for the method and it gets a string in 100 % cases, it's a <code>string</code>.&quot;</li>
<li>&quot;But, if 5 % of them is null... it will be nullable <code>?string</code>&quot;</li>
<li>&quot;Exactly, and if it's 5 different types, there is nothing we can do.&quot;</li>
<li>&quot;I see, but the point is to complete everything that can be completed, based on data and experience instead of docblock that can contain anything.&quot;</li>
</ul>
<p>The idea is pretty clear, right?</p>
<h2 id="how-can-we-bring-it-to-all-php-developers-in-need">How can we bring it to all PHP developers in Need?</h2>
<p>It all seemed like a nice brain exercise for our brains... but we looked for <strong>practical appliance that would help every PHP developer in the world</strong>.</p>
<p>To automate this process fully, we came with 4 automated steps:</p>
<ul>
<li>
<ol>
<li>Add type collector to all public class and trait methods</li>
</ol>
<pre><code class="language-diff"> &lt;?php

 class SomeClass
 {
    public function run($value)
    {
+       TypeCollector::collect($value, __METHOD__, 0);
        return $value;
    }
 }</code></pre>
</li>
<li>
<ol start="2">
<li>Collect data for a 1-4 weeks</li>
</ol>
</li>
<li>
<ol start="3">
<li>Complete collected types that can be added</li>
</ol>
<pre><code class="language-diff"> &lt;?php

 class SomeClass
 {
-    public function run($value)
+    public function run(string $value)
     {
         TypeCollector::collect($value, __METHOD__, 0);
         return $value;
     }
 }</code></pre>
</li>
<li>
<ol start="4">
<li>Remove type collector</li>
</ol>
<pre><code class="language-diff"> &lt;?php

 class SomeClass
 {
     public function run(string $value)
     {
-        TypeCollector::collect($value, __METHOD__, 0);
         return $value;
     }
 }</code></pre>
</li>
</ul>
<p>This was May 2019 and it was just an idea. Now, 6 months later, I'm proud to say this <strong>4-step process is now possible</strong>.
I've  <a href="https://github.com/rectorphp/rector/pull/2264/files">merged the PR into Rector</a> just a few minutes ago.</p>
<p>↓</p>
<h3 id="step-1-add-type-collector">Step 1 - Add Type Collector</h3>
<pre><code class="language-php">&lt;?php

// rector.php

declare(strict_types=1);

use Rector\DynamicTypeAnalysis\Rector\ClassMethod\DecorateMethodWithArgumentTypeProbeRector;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();
    $services-&gt;set(DecorateMethodWithArgumentTypeProbeRector::class);
};</code></pre>
<pre><code class="language-bash">vendor/bin/rector process src</code></pre>
<h3 id="step-2-wait-for-it">Step 2 - Wait for it...</h3>
<h3 id="step-3-complete-collected-types">Step 3 - Complete Collected Types</h3>
<pre><code class="language-php">&lt;?php

// rector.php

declare(strict_types=1);

use Rector\DynamicTypeAnalysis\Rector\ClassMethod\AddArgumentTypeWithProbeDataRector;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();
    $services-&gt;set(AddArgumentTypeWithProbeDataRector::class);
};</code></pre>
<pre><code class="language-bash">vendor/bin/rector process src</code></pre>
<h3 id="step-4-remove-type-collector">Step 4 - Remove Type Collector</h3>
<pre><code class="language-php">&lt;?php

// rector.php

declare(strict_types=1);

use Rector\DynamicTypeAnalysis\Rector\StaticCall\RemoveArgumentTypeProbeRector;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();
    $services-&gt;set(RemoveArgumentTypeProbeRector::class);
};</code></pre>
<pre><code class="language-bash">vendor/bin/rector process src</code></pre>
<p><br></p>
<h2 id="it-s-not-perfect-but-done">It's not Perfect, But Done</h2>
<p>In all means, it's not perfect. There is still missing support for arrays, nested arrays, type co/ntra/variance, return types, union types, etc. <strong>But it's ready to be tested and prototype works</strong> (at least that's what unit tests say).</p>
<p>Now it's up to you. Make your code-base filled with real data it already uses. No guessing, no hoping, <strong>just science fully-automated</strong>.</p>
<p><br></p>
<p>Last but not least, thank you <a href="https://github.com/DaveLiddament">Dave</a> for a great afternoon and sorry it took me so long to publish this.</p>
<p><br></p>
<p>Happy lazy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/11/11/from-0-doc-types-to-full-type-declaration-with-dynamic-analysis</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-08-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Aug 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/11/11/from-0-doc-types-to-full-type-declaration-with-dynamic-analysis#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Still on PHPUnit 4? Come to PHPUnit 8 Together in a Day ]]></title>
                <link>https://tomasvotruba.com/blog/2019/11/04/still-on-phpunit-4-come-to-phpunit-8-together-in-a-day</link>
                <description><![CDATA[ <p>Last month I was on <a href="https://twitter.com/akrabat/status/1181998973588037632">PHPSW meetup</a> in Bristol UK with Rector talk. To be honest, <a href="/blog/2019/08/26/how-we-migrated-54-357-lines-of-code-nette-to-symfony-in-2-people-under-80-hours/">Nette to Symfony migration under 80 hours</a> was not a big deal there.
<br><br>
To my surprise, <strong>upgrading PHPUnit tests was</strong>. So I was thinking, let's take it from the floor in one go, from PHPUnit 4 to the latest PHPUnit 8.</p> ]]></description>
                <content:encoded><![CDATA[ <img src="/assets/images/posts/2019/phpunit/tweet.png" class="mt-4 mb-4">
<h2 id="1-planning">1. Planning</h2>
<p>Before we dive into the upgrading of our tests, we need to <strong>look at minimal PHP version</strong> required by each PHPUnit.
The <a href="https://github.com/sebastianbergmann/phpunit/wiki/Development-and-Release-Process">PHPUnit release process</a> states, <strong>that each new PHPUnit major version requires a newer minor PHP version</strong>.</p>
<p>What does that mean?</p>
<table class="table table-bordered table-responsive"><thead class="thead-inverse"><tr><th>PHPUnit</th>
            <th>Required PHP version</th>
            <th>Relase Year</th>
        </tr></thead><tr><td>PHPUnit 4</td>
        <td>PHP 5.3-5.6</td>
        <td>2015</td>
    </tr><tr><td>PHPUnit 5</td>
        <td>PHP 5.6-7.4</td>
        <td>2016</td>
    </tr><tr><td>PHPUnit 6</td>
        <td>PHP 7.0-7.4</td>
        <td>2017</td>
    </tr><tr><td>PHPUnit 7</td>
        <td>PHP 7.1-7.4</td>
        <td>2018</td>
    </tr><tr><td>PHPUnit 8</td>
        <td>PHP 7.2-7.4</td>
        <td>2019</td>
    </tr></table>
<p>We need to plan and combine the PHP upgrade.</p>
<p>This is <strong>the full path</strong> we'll go through:</p>
<ul>
<li>upgrade PHP 5.3 → 5.6</li>
<li>upgrade PHPUnit 4 → 5</li>
<li>upgrade PHP 5.6 → 7.0</li>
<li>upgrade PHPUnit 5 → 6</li>
<li>upgrade PHP 7.0 → 7.1</li>
<li>upgrade PHPUnit 6 → 7</li>
<li>upgrade PHP 7.1 → 7.2</li>
<li>upgrade PHPUnit 7 → 8</li>
</ul>
<p><em>Note: To keep this post simple, we'll focus on PHPUnit upgrade only here. But it's possible you'll need to use Rector for PHP upgrades between PHPUnit upgrade steps too.</em></p>
<h2 id="2-single-version-upgrade-1-pull-request">2. Single Version Upgrade = 1 pull-request</h2>
<p>Do you enjoy <em>the rush</em> of changing a thousand files at once? It drives to do even more and more changes.</p>
<p>The same thing happens with upgrading code - we upgrade PHP and tests passes, great! Let's do upgrade PHPUnit. Oh, maybe we could refactor this method so it's more readable. Oh, now this other method looks silly, let's clean that up too...</p>
<img src="/assets/images/posts/2019/phpunit/explode.jpg" class="img-thumbnail">
<p><span class="text-danger">
<strong>STOP!</strong>
</span></p>
<p>This is the easiest way <strong>to get stuck</strong> in broken tests, with dug up pieces of code all over the project, overheat our brain in <a href="/blog/2018/05/21/is-your-code-readable-by-humans-cognitive-complexity-tells-you/">huge cognitive complexity</a> and <del>give up</del> rage quit the upgrade saying &quot;it's hard as they say&quot;.</p>
<h3 id="the-golden-rule-of-successful-upgrade">The Golden Rule of Successful Upgrade</h3>
<ul>
<li>one minor version at a time</li>
<li>one pull-request at a time</li>
<li>tested, our CI passes</li>
<li><strong>only after the PR is merged, we go to next minor version</strong></li>
</ul>
<p>Unless you're upgrading 10 test files, of course. But in the rest of the case, this approach would save me many failed attempts in the paths. That's why <strong>planning is the most important step of all</strong> for huge upgrade operations.</p>
<h2 id="3-phpunit-4-to-5">3. PHPUnit 4 to 5</h2>
<h3 id="from-code-getmock-code-to-code-getmockbuilder-code">From <code>getMock()</code> to <code>getMockBuilder()</code></h3>
<pre><code class="language-diff"> &lt;?php

 final class MyTest extends PHPUnit_Framework_TestCase
 {
     public function test()
     {
-        $someClassMock = $this-&gt;getMock('SomeClass');
+        $someClassMock = $this-&gt;getMockBuilder('SomeClass')-&gt;getMock();
     }
 }</code></pre>
<p><br></p>
<p>These changes can be delegated to Rector:</p>
<pre><code class="language-bash">composer require phpunit/phpunit "^5.0" --dev
vendor/bin/rector process tests --set phpunit50</code></pre>
<h2 id="4-phpunit-5-to-6">4. PHPUnit 5 to 6</h2>
<p>This is the release where <strong>PHPUnit got namespaces</strong>, yay! Well, yay for the project, nay for the upgrades.</p>
<h3 id="from-underscore-to-slash">From Underscore to Slash</h3>
<p>Although there is a lot of underscore &lt;=&gt; slash aliases for a smoother upgrade, it will be removed in the future PHPUnit version, so we better deal with it right now.</p>
<p>First, we need to replace all:</p>
<pre><code class="language-diff">-PHPUnit_Framework_TestCase
+\PHPUnit\Framework\TestCase # mind the pre-slash "\"</code></pre>
<p>Without pre-slash, your code might fail.</p>
<p><a class="btn btn-primary" href="https://3v4l.org/5Sjjh">
See 3v4l.org to understand why
</a></p>
<p><br></p>
<p>Second, replace the rest of the <code>PHPUnit_*</code> classes with a namespace. Listeners, test suites, exceptions... etc.
This is hell for us human, luckily easy-pick for Rector.</p>
<h3 id="add-code-doesnotperformassertions-code-to-test-with-no-assertion">Add <code>doesNotPerformAssertions</code> to test With no Assertion</h3>
<pre><code class="language-diff">+    /**
+     * @doesNotPerformAssertions
+     */
     public function testNoError()
     {
         new SomeObject(25);
     }</code></pre>
<h3 id="code-setexpectedexception-code-to-code-expectexception-code"><code>setExpectedException()</code> to <code>expectException()</code></h3>
<p>And not only that! Also, split arguments to own method:</p>
<pre><code class="language-diff"> &lt;?php

 class MyTest extends \PHPUnit\Framework\TestCase
 {
     public function test()
     {
-        $this-&gt;setExpectedException('SomeException', $message, 101);
+        $this-&gt;expectException('SomeException');
+        $this-&gt;expectExceptionMessage($message);
+        $this-&gt;expectExceptionCode(101);
     }
 }</code></pre>
<p>Also <code>setExpectedExceptionRegExp()</code> was removed.</p>
<h3 id="code-expectedexception-code-to-code-expectexception-code"><code>@expectedException</code> to <code>expectException()</code></h3>
<p>These changes are a real challenge for simple human attention:</p>
<pre><code class="language-diff">-expectedException
+expectException</code></pre>
<p>Mind the missing &quot;ed&quot;.</p>
<pre><code class="language-diff"> &lt;?php

 class MyTest extends \PHPUnit\Framework\TestCase
 {
-    /**
-     * @expectedException SomeException
-     */
     public function test()
     {
+        $this-&gt;expectException('SomeException');
     }
 }</code></pre>
<p><br></p>
<p>These changes can be delegated to Rector:</p>
<pre><code class="language-bash">composer require phpunit/phpunit "^6.0" --dev
vendor/bin/rector process tests --set phpunit60</code></pre>
<h2 id="5-phpunit-6-to-7">5. PHPUnit 6 to 7</h2>
<h3 id="remove-quot-test-quot-prefix-on-data-providers">Remove &quot;test&quot; prefix on Data Providers</h3>
<p>I have no idea how tests and data provider methods were detected before this:</p>
<pre><code class="language-diff"> &lt;?php

 class WithTestAnnotation extends \PHPUnit\Framework\TestCase
 {
     /**
-     * @dataProvider testProvideDataForWithATestAnnotation()
+     * @dataProvider provideDataForWithATestAnnotation()
      */
     public function test()
     {
         // ...
     }

-    public function testProvideDataForWithATestAnnotation()
+    public function provideDataForWithATestAnnotation()
     {
         return ['123'];
     }
 }</code></pre>
<h3 id="rename-code-scenario-code-annotation-to-code-test-code">Rename <code>@scenario</code> annotation to <code>@test</code></h3>
<pre><code class="language-diff"> &lt;?php

 class WithTestAnnotation extends \PHPUnit\Framework\TestCase
 {
     /**
-     * @scenario
+     * @test
      */
     public function test()
     {
         // ...
     }
 }</code></pre>
<h3 id="change-code-withconsecutive-code-arguments-to-iterable">Change <code>withConsecutive()</code> Arguments to Iterable</h3>
<p>This rather small change can cause a huge headache. It's <a href="https://github.com/sebastianbergmann/phpunit/commit/72098d80f0cfc06c7e0652d331602685ce5b4b51">a fix of silent false positive</a>.</p>
<p>How would you fix the following code, if you know that the argument of <code>withConsecutive()</code> must be iterable (array, iterator...)?</p>
<pre><code class="language-php">&lt;?php

class SomeClass
{
    public function run($one, $two)
    {
    }
}

class SomeTestCase extends \PHPUnit\Framework\TestCase
{
    public function test()
    {
        $someClassMock = $this-&gt;createMock(SomeClass::class);
        $someClassMock
            -&gt;expects($this-&gt;exactly(2))
            -&gt;method('run')
            -&gt;withConsecutive(1, 2, 3, 5);
    }
}</code></pre>
<p>Like this?</p>
<pre><code class="language-diff">--&gt;withConsecutive(1, 2, 3, 5);
+-&gt;withConsecutive([1, 2, 3, 5]);</code></pre>
<p>Well, the tests would pass it, but it would be another silent positive. Look at <code>SomeClass::run()</code> method. How many arguments does it have?</p>
<p>Two. So we need to create array chunks of size 2.</p>
<pre><code class="language-diff">--&gt;withConsecutive(1, 2, 3, 5);
+-&gt;withConsecutive([1, 2], [3, 5]);</code></pre>
<p><br></p>
<p>These changes can be delegated to Rector:</p>
<pre><code class="language-bash">composer require phpunit/phpunit "^7.0" --dev
vendor/bin/rector process tests --set phpunit70
vendor/bin/rector process tests --set phpunit75</code></pre>
<h2 id="6-phpunit-7-to-8">6. PHPUnit 7 to 8</h2>
<h3 id="ignore-cache-file">Ignore Cache File</h3>
<p>The <a href="https://github.com/sebastianbergmann/phpunit/pull/3147">optional caching of test results</a> added in PHPUnit 7.3 is not enabled by default. We need to add the cache file to <code>.gitignore</code>:</p>
<pre><code class="language-txt"># .gitignore
.phpunit.result.cache</code></pre>
<h3 id="remove-type-code-dataname-code-in-code-phpunit-framework-testcase-code-constructor-override">Remove type <code>$dataName</code> in <code>PHPUnit\Framework\TestCase</code> Constructor Override</h3>
<pre><code class="language-diff"> &lt;?php

 abstract class MyAbstractTestCase extends \PHPUnit\Framework\TestCase
 {
-    public function __construct(?string $name = null, array $data = [], string $dataName = '')
+    public function __construct(?string $name = null, array $data = [], $dataName = '')
     {
     }
 }</code></pre>
<h3 id="replace-code-assertcontains-code-with-specific-code-assertstringcontainsstring-code-method">Replace <code>assertContains()</code> with Specific <code>assertStringContainsString()</code> Method</h3>
<pre><code class="language-diff"> &lt;?php

 final class SomeTest extends \PHPUnit\Framework\TestCase
 {
     public function test()
     {
-        $this-&gt;assertContains('foo', 'foo bar');
+        $this-&gt;assertStringContainsString('foo', 'foo bar');

-        $this-&gt;assertNotContains('foo', 'foo bar');
+        $this-&gt;assertStringNotContainsString('foo', 'foo bar');
     }
 }</code></pre>
<h3 id="replace-code-assertinternaltype-code-with-specific-methods">Replace <code>assertInternalType()</code> with Specific Methods</h3>
<p>This change <a href="https://github.com/sebastianbergmann/phpunit/commit/a406c85c51edd76ace29119179d8c21f590c939e">is huge</a>.</p>
<p><strong>2 methods were removed, 22 methods are added.</strong></p>
<pre><code class="language-diff"> &lt;?php

 final class SomeTest extends \PHPUnit\Framework\TestCase
 {
     public function test()
     {
-        $this-&gt;assertInternalType('string', $value);
+        $this-&gt;assertIsString($value);
     }
 }</code></pre>
<h3 id="change-code-assertequals-code-method-parameters-to-new-specific-methods">Change <code>assertEquals()</code> method Parameters to new Specific Methods</h3>
<pre><code class="language-diff"> final class SomeTest extends \PHPUnit\Framework\TestCase
 {
     public function test()
     {
         $value = 'value';
-        $this-&gt;assertEquals('string', $value, 'message', 5.0);
+        $this-&gt;assertEqualsWithDelta('string', $value, 5.0, 'message');

-        $this-&gt;assertEquals('string', $value, 'message', 0.0, 20);
+        $this-&gt;assertEquals('string', $value, 'message', 0.0);

-        $this-&gt;assertEquals('string', $value, 'message', 0.0, 10, true);
+        $this-&gt;assertEqualsCanonicalizing('string', $value, 'message');

-        $this-&gt;assertEquals('string', $value, 'message', 0.0, 10, false, true);
+        $this-&gt;assertEqualsIgnoringCase('string', $value, 'message');
     }
 }</code></pre>
<h3 id="last-code-code-is-now-namespaced">Last <code>_</code> is now Namespaced</h3>
<p>This removes the last piece of back-compatible underscore class:</p>
<pre><code class="language-diff">-PHPUnit_Framework_MockObject_MockObject
+PHPUnit\Framework\MockObject\MockObject</code></pre>
<h3 id="replace-code-assertarraysubset-code-with">Replace <code>assertArraySubset()</code> with</h3>
<p>This method was removed <a href="https://github.com/sebastianbergmann/phpunit/issues/3494">because of its vague behavior</a>.
The proposed solution is <a href="https://github.com/rdohms/phpunit-arraysubset-asserts">rdohms/phpunit-arraysubset-asserts</a> polyfill.</p>
<pre><code class="language-diff"> &lt;?php

 namespace Acme\Tests;

+use DMS\PHPUnitExtensions\ArraySubset\Assert;

 final class AssertTest extends \PHPUnit\Framework\TestCase
 {
     public function testPreviouslyStaticCall(): void
     {
-        $this-&gt;assertArraySubset(['bar' =&gt; 0], ['bar' =&gt; '0'], true);
+        Assert::assertArraySubset(['bar' =&gt; 0], ['bar' =&gt; '0'], true);
     }
 }</code></pre>
<p>To use this package and upgrade to it, run:</p>
<pre><code class="language-bash">composer require --dev dms/phpunit-arraysubset-asserts
vendor/bin/rector process tests --set phpunit80-dms</code></pre>
<h3 id="add-code-void-code-to-code-phpunit-framework-testcase-code-methods">Add <code>void</code> to <code>PHPUnit\Framework\TestCase</code> Methods</h3>
<p>This one hits 2 common methods we often use:</p>
<pre><code class="language-diff">-setUp()
+setUp(): void</code></pre>
<pre><code class="language-diff">-tearDown()
+tearDown(): void</code></pre>
<p>Also less common ones:</p>
<ul>
<li><code>setUpBeforeClass()</code></li>
<li><code>assertPreConditions()</code></li>
<li><code>assertPostConditions()</code></li>
<li><code>tearDownAfterClass()</code></li>
<li><code>onNotSuccessfulTest()</code></li>
</ul>
<p><br></p>
<p><strong>You need to run Rector before upgrading</strong> to PHPUnit 7. Otherwise, it will cause a fatal error.</p>
<p><a class="btn btn-primary" href="https://3v4l.org/1bD6H">
See 3v4l.org to know why
</a></p>
<p><br></p>
<pre><code class="language-bash">vendor/bin/rector process tests --set phpunit80
composer require phpunit/phpunit "^8.0" --dev</code></pre>
<p><br></p>
<p>In the end, you should see at least PHPUnit 8.5+:</p>
<pre><code class="language-bash">vendor/bin/phpunit --version
$ PHPUnit 8.5.15 by Sebastian Bergmann and contributors.</code></pre>
<p>That's it! Congrats!</p>
<p><br></p>
<p><strong>Did you find a change that we missed here?</strong> Share it in comments, so we can make this upgrade path complete and smooth for all future readers. Thank you for the whole PHP community!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/11/04/still-on-phpunit-4-come-to-phpunit-8-together-in-a-day</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 04 Nov 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/11/04/still-on-phpunit-4-come-to-phpunit-8-together-in-a-day#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ All You Always Wanted to Know About Monorepo But Were Afraid To Ask ]]></title>
                <link>https://tomasvotruba.com/blog/2019/10/28/all-you-always-wanted-to-know-about-monorepo-but-were-afraid-to-ask</link>
                <description><![CDATA[ <p>Do you want to know what is monorepo and why/when you should use it?
Do you look for brief source that will answer your questions in simple and understandable manner?
<br>
This is it.</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="what-is-monorepo">What is Monorepo?</h2>
<p>A repository <strong>that contains multiple packages</strong> or projects. Those projects can, but <strong>don't have to be related</strong>. Most famous monorepo pioneers are Google, Facebook and Twitter.</p>
<p>The most famous monorepos in PHP are Symfony, Laravel, Symplify, Sylius, Yii2 or Shopsys.</p>
<hr>
<h2 id="monorepo-vs-multirepo">Monorepo vs. Multirepo</h2>
<h3 id="single-repo-or-split-repo">Single-repo or split-repo?</h3>
<p>Monorepo is split into many single-repos, e.g. <a href="https://github.com/symfony/symfony">Symfony/Symfony</a> is split into <a href="https://github.com/symfony/console">Symfony/Console</a>, <a href="https://github.com/symfony/validator">Symfony/Validator</a> etc. Each single-repo repository is read-only. You can change its code via pull-request to the monorepo.</p>
<h3 id="many-repo">Many-repo</h3>
<p>The other approach to manage multiple repositories. 1 package = 1 own repository. Each package has it's own development, tagging and even maintainers. E.g. <a href="https://github.com/doctrine">Doctrine 2</a> or <a href="https://github.com/nette">Nette 2</a>.</p>
<h3 id="monolith">Monolith</h3>
<p>Monolith ≠ monorepo. Monolith is huge amount of coupled code of 1 application that is hell to maintain.</p>
<hr>
<h2 id="why-is-monorepo-so-awesome">Why is Monorepo so Awesome?</h2>
<ul>
<li>
<p>Simplified organization</p>
</li>
<li>
<p>Easy to coordinate changes across modules.</p>
</li>
<li>
<p>Simplified dependencies</p>
</li>
<li>
<p>Single lint, build, test and release process</p>
</li>
<li>
<p>Tooling</p>
</li>
<li>
<p>Single place to report issues</p>
</li>
<li>
<p>Cross-project changes</p>
</li>
<li>
<p>Tests across modules are run together → finds bugs that touch multiple modules easier</p>
</li>
</ul>
<p><em>These are cherry-picked reasons from legendary <a href="https://danluu.com/monorepo">Advantages of Monolithic Version Control</a>. Read it to get deeper insight.</em></p>
<hr />
<h2 id="tools-that-make-using-monorepo-easy">Tools that make using Monorepo Easy</h2>
<ul>
<li>
<p><a href="https://github.com/symplify/monorepobuilder">Symplify/MonorepoBuilder</a> - simpler, written in PHP</p>
<ul>
<li>init, setup and auto-split monorepo in minutes - great for start from scratch</li>
</ul>
</li>
<li>
<p><a href="https://github.com/shopsys/monorepo-tools">shopsys/monorepo-tools</a> - advanced, shell scripts</p>
<ul>
<li>init, setup and auto-split monorepo in minutes - great for start from scratch</li>
<li>merges history of multiple repos to one and more - great for start for code with many repositories with long history</li>
</ul>
</li>
</ul>
<h2 id="what-to-read-next">What to Read Next?</h2>
<ul>
<li><a href="/clusters/#monorepo-from-zero-to-hero/">Monorepo: From Zero to Hero (2018)</a></li>
<li><a href="https://dl.acm.org/citation.cfm?id=2854146">Why Google stores billions of lines of code in a single repository (2016)</a></li>
<li><a href="https://developer.atlassian.com/blog/2015/10/monorepos-in-git">Monorepos in Git (2015)</a></li>
<li><a href="https://github.com/korfuri/awesome-monorepo">korfuri/awesome-monorepo</a></li>
</ul> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/10/28/all-you-always-wanted-to-know-about-monorepo-but-were-afraid-to-ask</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 28 Oct 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/10/28/all-you-always-wanted-to-know-about-monorepo-but-were-afraid-to-ask#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Why Software Articles Must be CI Tested ]]></title>
                <link>https://tomasvotruba.com/blog/2019/09/16/why-software-articles-must-be-ci-tested</link>
                <description><![CDATA[ <p>I know many great articles that go right to the point. I use their code examples and they work. But when I recommend these articles to people I mentor, I realize the articles are already 2 years old and their code samples probably do not work any more.</p>
<p><br>
From hero to zero. Today I will show you how to <strong>keep content alive lot longer with a minimal effort.</strong></p> ]]></description>
                <content:encoded><![CDATA[ <p>Do you know <a href="https://github.com/sindresorhus/awesome">Awesome lists</a>? If not, go to check them. They collect best sources about a certain topic. When I try to learn something new, I usually start on Github looking for &quot;awesome <technology>&quot;. I recommend at least briefly to check them.</p>
<p>The idea behind Awesome list is to have resources that:</p>
<ul>
<li><strong>are up-to-date with modern technologies</strong></li>
<li><strong>are the best in the field</strong></li>
<li><strong>are easy to learn by beginners</strong></li>
</ul>
<h2 id="how-quot-awesome-doctrine-quot-was-born">How &quot;Awesome Doctrine&quot; was Born</h2>
<p>When I was working with Nette, I met <strong>Doctrine ORM</strong> thanks to <a href="https://filip-prochazka.com">Filip Procházka</a> and his great <a href="https://github.com/Kdyby">Kdyby</a> open-source boom.</p>
<p>One day I decided to learn more about Doctrine. Documentation looked like a manual for experts rather than something I could learn from. I was also curious <strong>how people use Doctrine in real applications, how to overcome performance issues, some cool features and pro tips</strong>.</p>
<p>I was already familiar with <a href="https://github.com/ziadoz/awesome-php">Awesome PHP</a> by <a href="https://github.com/ziadoz">ziadoz</a>, so I looked for &quot;Awesome Doctrine&quot;.</p>
<p>0 results. Really? Why nobody made this? It's so obvious this would be useful.</p>
<p>Ah, it's my job then. And the joyful hell started.</p>
<h3 id="many-sources-on-many-versions">Many Sources on Many Versions</h3>
<p>I was lucky to find many articles about Doctrine. One about Filters, others about Events or Criteria. But when I tried to use the code, it often didn't work. After digging I found out there was version 1.0, which was completely different.</p>
<blockquote>
<p>Tip: When you write a post about software, mention the version you're referring to – even if it only has one at the moment.</p>
</blockquote>
<p>So I liked the concept in article and wanted to use it, but I didn't know what is different in version 2.4. I closed it.</p>
<p>I also read <a href="https://www.zdrojak.cz/clanky/doctrine-2-uvod-do-systemu">Czech series on Zdroják</a> written by <a href="https://www.jantichy.cz">Jan Tichy</a>. It could give me great insights, but it was about Doctrine 2-beta. I closed it.</p>
<h3 id="what-to-put-in-the-list">What to put in the list?</h3>
<p>I've decided to focus on sources released in that year. When articles and Doctrine version are the same - Doctrine 2.4 - it will be great source to learn from.</p>
<p>Idea was good, <a href="https://github.com/biberlabs/awesome-doctrine">List</a> was done. I was happy until...</p>
<h3 id="doctrine-2-5-was-out">...Doctrine 2.5 was out!</h3>
<p>So now each of the 20 sources on the list got a bit deprecated.</p>
<p>Oh, so that's why nobody made it in the first place :).</p>
<p>Now I also understand why many programmers hate new versions of software and want to stick with version they already know. It makes sense in such conditions.</p>
<h2 id="quot-awesome-symfony-quot">&quot;Awesome Symfony&quot;</h2>
<p>Before I realized it makes no sense to make a list of sources, because next year I could drop most of them, I make <a href="https://github.com/Pehapkari/awesome-symfony-education">Awesome list for Symfony</a>.</p>
<p>New Symfony version is released every single year, so the list is even more outdated than Doctrine.</p>
<p><strong>So what this leads to?</strong></p>
<h2 id="running-in-circles">Running in Circles</h2>
<p>If I get back to the <strong>useful source</strong> idea from the beginning.</p>
<ul>
<li><strong>are up-to-date with modern technology</strong></li>
<li><strong>are the best in the field</strong></li>
<li><strong>are easy to learn by beginners</strong></li>
</ul>
<p>To make this happen, I would have to create &quot;Awesome * List&quot; every year.
To make that happen, each article would have to be checked for compatibility with each new version and updated if needed.</p>
<p>That would mean around 50 articles on Doctrine every year. <strong>And all this work just to keep status quo</strong>. In big communities like Symfony and Laravel, this happens, but I still consider it too much wasted work (constructive ideas coming bellow).</p>
<p>So sources are useful upon their release but become more and more outdated every year. Writing article in such environment would be as useless as writing 100% test coverage for Christmas campaign microsite.</p>
<p>Thus, motivation to write software article is getting low, even when software is being released. - I call this <em>Know How Sharing Lag</em>.</p>
<h2 id="this-sounds-like-legacy-code">This Sounds like Legacy Code</h2>
<p>Let's say we have application with legacy code. It brings me money and I want to keep it alive and growing as long as possible.</p>
<p>...</p>
<p>Mm, I should write tests and start refactoring?</p>
<p>Could this be possible to integrate into a blog or website?</p>
<h3 id="dream-big">Dream Big</h3>
<p>It would have to be:</p>
<ul>
<li><strong>integrated in blog</strong>, because another external source would deprecate - thanks Statie</li>
<li><strong>composer supported</strong> - thanks Github Pages and Travis</li>
<li><strong>open-source hosted</strong>, so the author won't burn out on yearly fixes - thanks Github Pages</li>
<li><strong>CI supported</strong> - thanks Travis</li>
<li><strong>tested daily</strong> - thanks Travis Cron Jobs (Beta)</li>
</ul>
<p>This idea was created in late 2015 with no solution ahead. I want to thank <a href="https://twitter.com/enumag">Jáchym Toušek</a> for consulting this idea and making <a href="https://github.com/enumag/enumag.cz/commit/3efc82717b9965bb19a2609e4caddc0c5467552d">the first prototype</a>.</p>
<p>And that's why and how <em>tested articles</em> were born.</p>
<p><br></p>
<p><strong>How does tested article look like?</strong> <a href="https://github.com/pehapkari/pehapkari.cz/commit/85b69950b32c39b9e972582720a23a18a1adc4be">See this commit</a>. It will last for years, will work on Symfony 4, 5, 6...</p>
<p><strong>Feel free to send one.</strong> We'll make sure it will make it into 2018 and beyond.</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/09/16/why-software-articles-must-be-ci-tested</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 16 Sep 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/09/16/why-software-articles-must-be-ci-tested#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How we Upgraded Pehapkari.cz from Symfony 4 to 5 in 25 days ]]></title>
                <link>https://tomasvotruba.com/blog/2019/09/09/how-we-upgraded-pehapkari-cz-from-symfony-4-to-5-in-25-days</link>
                <description><![CDATA[ <p>A month ago, Symfony 5 has been released. Upgrading of such a small web as our community website <strong>must be easy</strong>, right?
<br>
<br>
Well, that's what we thought. <strong>Were we right or wrong?</strong></p> ]]></description>
                <content:encoded><![CDATA[ <p>This post is based on the real problems we faced when we upgraded our website. <strong>It is full of experience</strong> with pieces of explanation, real code snippets in diffs, painful frustration of Symfony ecosystem and bright light at the end of the tunnel.</p>
<p><br></p>
<p>Are you ready? Let's dive in ↓</p>
<p><br></p>
<h2 id="1-easy-picks">1. Easy picks</h2>
<h3 id="twig-2-3">Twig 2 → 3</h3>
<p>Before, you could connect <code>for</code> with <code>if</code> like this:</p>
<pre><code class="language-twig">{% for post in posts if post.isPublic() %}
    {{ post.title }}
{% endfor %}</code></pre>
<p>Now <a href="https://twig.symfony.com/doc/3.x/filters/filter.html">the <code>filter</code></a> has to be used:</p>
<pre><code class="language-twig">{% for post in posts|filter(post =&gt; post.isPublic()) %}
    {{ post.title }}
{% endfor %}</code></pre>
<p><em>Thanks <a href="https://www.reddit.com/r/PHP/comments/ef2nit/how_we_upgraded_pehapkaricz_from_symfony_4_to_5/fbzyhsl">Patrik for the tip</a></em></p>
<h2 id="2-rector-helps-you-with-php">2. Rector Helps You with PHP</h2>
<p>Do you want to know, what is needed for the upgrade to Symfony 5? <a href="https://github.com/symfony/symfony/blob/5.0/UPGRADE-5.0.md">Just read upgrade notes</a> in Symfony repository.</p>
<p>For PHP stuff, use <a href="https://github.com/rectorphp/rector">Rector</a>:</p>
<pre><code class="language-bash"># install Rector
composer require rector/rector --dev

# or in case of conflicts
composer require rector/rector-prefixed --dev</code></pre>
<p>Rector has minimal sets, meaning each minor version is standalone and independent.
What does that mean? For upgrading from Symfony 4 to 5, you need to <strong>run all the minor version sets</strong>:</p>
<pre><code class="language-bash">vendor/bin/rector process bin src packages --set symfony41</code></pre>
<p>Verify, check that CI passes and then continue with following Symfony minor versions:</p>
<pre><code class="language-bash">vendor/bin/rector process bin src packages --set symfony42
vendor/bin/rector process bin src packages --set symfony43
vendor/bin/rector process bin src packages --set symfony44
vendor/bin/rector process bin src packages --set symfony50</code></pre>
<h2 id="3-update-code-composer-json-code-before-code-composer-update-code">3. Update <code>composer.json</code> before <code>composer update</code></h2>
<h3 id="easy-admin-bundle">Easy Admin Bundle</h3>
<pre><code class="language-diff"> {
     "require": {
-        "alterphp/easyadmin-extension-bundle": "^2.1",
+        "alterphp/easyadmin-extension-bundle": "^3.0",
    }
}</code></pre>
<h3 id="doctrine">Doctrine</h3>
<pre><code class="language-diff"> {
     "require": {
-        "doctrine/cache": "^1.8",
+        "doctrine/cache": "^1.10",
-        "doctrine/doctrine-bundle": "^1.11",
+        "doctrine/doctrine-bundle": "^2.0",
-        "doctrine/orm": "^2.6",
+        "doctrine/orm": "^2.7",
     }
 }</code></pre>
<h3 id="doctrine-behaviors">Doctrine Behaviors</h3>
<pre><code class="language-diff"> {
     "require": {
-        "stof/doctrine-extensions-bundle": "^1.3",
-        "knplabs/doctrine-behaviors": "^1.6"
+        "knplabs/doctrine-behaviors": "^2.0"
     }
 }</code></pre>
<h3 id="sentry">Sentry</h3>
<pre><code class="language-diff"> {
     "require": {
-        "sentry/sentry-symfony": "^3.2",
+        "sentry/sentry-symfony": "^3.4",
     }
 }</code></pre>
<h3 id="twig-extensions-were-removed">Twig Extensions were Removed</h3>
<pre><code class="language-diff"> {
     "require": {
-        "twig/extensions": "^1.5"
     }
 }</code></pre>
<p>This might be scary at first, depends on how many of those functions have you used.</p>
<p>Look at the <a href="https://github.com/twigphp/Twig-extensions">README on Github</a> to find out more:</p>
<div class="text-center">
    <img src="/assets/images/posts/2019/symfony5_twig_extension_readme.png" class="img-thumbnail"></div>
<h2 id="4-symfony-packages-in-code-composer-json-code">4. Symfony Packages in <code>composer.json</code></h2>
<p>Do you use Flex and config <code>*</code> version?</p>
<pre><code class="language-json">{
    "require": {
        "symfony/console": "*",
        "symfony/event-disptacher": "*"
    },
    "extra": {
        "symfony": {
            "require": "^4.4"
        }
    }
}</code></pre>
<p>Not sure why, but in some cases, it failed and <strong>blocked from the upgrading</strong>. <strong>I had to switch to explicit version per package, to resolve it:</strong></p>
<pre><code class="language-diff"> {
     "require": {
-        "symfony/console": "*",
+        "symfony/console": "^4.4",
-        "symfony/event-disptacher": "*"
+        "symfony/event-disptacher": "^4.4"
-    },
+    }
-    "extra": {
-        "symfony": {
-            "require": "^4.4"
-        }
-    }
 }</code></pre>
<p>Then switch to Symfony 5:</p>
<pre><code class="language-diff">-"symfony/asset": "^4.4",
+"symfony/asset": "^5.0",
-"symfony/console": "^4.4",
+"symfony/console": "^5.0",

// etc.</code></pre>
<p>But some packages are released out of <a href="/blog/2019/10/28/all-you-always-wanted-to-know-about-monorepo-but-were-afraid-to-ask/">monorepo cycle</a>:</p>
<pre><code class="language-diff">-"symfony/maker-bundle": "^1.14",
+"symfony/maker-bundle": "^1.13",</code></pre>
<p>All right, now you run...</p>
<pre><code class="language-bash">composer update</code></pre>
<p>...and get new packages with Symfony 5... or probably a lot of composer version conflicts.</p>
<h3 id="symfony-packages-wtfs-in">Symfony Packages WTFs in</h3>
<p>In Symfony 5, some packages were <strong>removed</strong>:</p>
<pre><code class="language-diff">-"symfony/error-renderer": "^4.4",</code></pre>
<pre><code class="language-diff">-"symfony/web-server-bundle": "^4.4",</code></pre>
<p><br></p>
<p>Some packages were <strong>replaced by new ones</strong>:</p>
<pre><code class="language-diff">-"symfony/error-debug": "^4.4",
+"symfony/error-handler": "^5.0",</code></pre>
<p><br></p>
<p>And some package <strong>were split into more smaller ones</strong>:</p>
<pre><code class="language-diff">-"symfony/security": "^4.4",
+"symfony/security-core": "^5.0",
+"symfony/security-http": "^5.0",
+"symfony/security-csrf": "^5.0",
+"symfony/security-guard": "^5.0",</code></pre>
<h2 id="5-rector-ecs-and-phpstan">5. Rector, ECS, and PHPStan</h2>
<p>These were production dependencies, but what about dev ones?
Both have the same rules - they need to allow Symfony 5 installation.</p>
<p>The safest way is to use <a href="https://github.com/rectorphp/rector/issues/177">prefixed versions</a>, which don't care about a Symfony version:</p>
<pre><code class="language-diff">-"phpstan/phpstan": "^0.11",
+"phpstan/phpstan": "^0.12",
-"rector/rector": "^0.5",
+"rector/rector-prefixed": "^0.6",</code></pre>
<p><a href="https://github.com/symplify/easy-coding-standard">Easy Coding Standard</a>:</p>
<pre><code class="language-diff">-"symplify/easy-coding-standard": "^0.11",
+"symplify/easy-coding-standard": "^0.12",</code></pre>
<p><br></p>
<p>Update your <code>composer.json</code> to include a package that you need.</p>
<p>Then run:</p>
<pre><code class="language-bash">composer update</code></pre>
<p>Still conflicts?</p>
<h2 id="6-and-the-biggest-symfony-upgrade-blocker-is">6. And The Biggest Symfony Upgrade Blocker is...</h2>
<p>If you don't do open-source, you probably don't use the <code>git tag</code> feature. It seems that the tagging of a package is a very difficult process. Even packages with million downloads/month had the latest 15 months ago.</p>
<h3 id="what-are-tags-for">What are Tags For?</h3>
<p>Let's say you want to use <code>symplify/easy-coding-standard</code> that supports Symfony 5. Here is the deal:</p>
<ul>
<li>the latest <code>symplify/easy-coding-standard</code> version 6 doesn't support it</li>
<li><code>symplify/easy-coding-standard</code> dev-master (~= what you see on GitHub) supports it</li>
<li>but it's not tagged yet and composer forbids to install dev version; e.g. <a href="https://github.com/getsentry/sentry-symfony">sentry-symfony</a> at time of writing this post</li>
<li>so you'd have to require its dev version and force composer to install it</li>
</ul>
<pre><code class="language-json">{
    "require-dev": {
        "symplify/easy-coding-standard": "dev-master"
    },
    "prefer-stable": true,
    "minimum-stability": "dev"
}</code></pre>
<ul>
<li>it's a hackish solution, but it <em>somehow</em> works</li>
</ul>
<p>Now imagine one of your package you require requires some other package, that requires another package, that doesn't allow Symfony 5 in tagged version, but in <code>master</code>. Well, you've just finished.</p>
<p>That's why it's very important to know to tag a package regularly:</p>
<pre><code class="language-bash">git tag v2.0.0
git push --tags</code></pre>
<p>That's all! Still, many packages support Symfony 5 in the master but are not tagged yet... to be true, not once for the last 2 years. Why? <strong>The human factor</strong>, maintainers are afraid of negative feedback, of back-compatibility breaks, lack of test coverage takes their confidence, etc.</p>
<h2 id="tagging-cancer-of-php-ecosystem">Tagging Cancer of PHP Ecosystem</h2>
<p>These packages block Symfony 5 upgrade for months:</p>
<ul>
<li><a href="https://github.com/stof/StofDoctrineExtensionsBundle/releases">stof/gedmo extension</a> (last release in 2017)</li>
<li><a href="https://github.com/KnpLabs/DoctrineBehaviors/releases">knplabs/doctrine-behaviors</a> (last stable release in 2018)</li>
<li><a href="https://github.com/Behat/Transliterator/releases">behat/transliterator</a> (last release in 2017) - this <a href="https://github.com/Behat/Transliterator/pull/29#issuecomment-567873541">comment sums it up very nicely</a></li>
</ul>
<div class="text-center">
    <img src="/assets/images/posts/2019/symfony5_nice_comment.png"></div>
<h3 id="united-we-stand">United We Stand</h3>
<p>This will be resolved in the future by an open-source monorepo approach, but we're not there yet.</p>
<p>In the meantime, please <strong>complain at issues</strong>, ask for help and <strong>offer to become maintainer</strong> until it changes (or until somebody forks it and tags the fork).</p>
<p>One good example for all - I complained and offered help at <code>knplabs/doctrine-behaviors</code>, got maintainer rights in 3 hours and <a href="https://github.com/KnpLabs/DoctrineBehaviors/pulse/monthly">made + merged 30 pull-request in the last month</a>.</p>
<p>You see, it works :)</p>
<h2 id="7-still-conflicts">7. Still Conflicts?</h2>
<p>Ok, so you have the right version of packages, everything is stable and allows Symfony 5. Yet still, the composer says &quot;conflicts, cannot install x/y&quot;.</p>
<p>To my surprise, the composer is very bad at solving complex conflicts. Composer <strong>reports false positive and blocks your install</strong>, because of installing packages in <code>/vendor</code> or overly strict <code>composer.lock</code>. I spent 30-60 minutes trying to figure out what the heck is conflicting on every Symfony training I had in the last 2 months. Now I'm able to do it in 3 minutes.</p>
<p><strong>How?</strong></p>
<ul>
<li>remove <code>/vendor</code></li>
<li>remove <code>composer.lock</code></li>
<li>run <code>composer update</code></li>
</ul>
<p>It works so well I do it more often than resolving conflicts manually.</p>
<h2 id="8-cleanup-code-bundles-php-code">8. Cleanup <code>bundles.php</code></h2>
<ul>
<li>Doctrine Cache was only <a href="https://github.com/doctrine/DoctrineCacheBundle/releases/tag/1.4.0">released for Symfony 4.4 and is not supported for any further version</a>.</li>
</ul>
<pre><code class="language-diff"> return [
-    Doctrine\Bundle\DoctrineCacheBundle\DoctrineCacheBundle::class =&gt; ['all' =&gt; true],
 ];</code></pre>
<p>Switch the dead gedmo/stof doctrine extensions for the maintained <a href="https://github.com/KnpLabs/DoctrineBehaviors">KnpLabs/DoctrineBehaviors</a>. I'll write a standalone post about this migration, once a stable version is out (check me, pls :)).</p>
<pre><code class="language-diff"> return [
-    Stof\DoctrineExtensionsBundle\StofDoctrineExtensionsBundle::class =&gt; ['all' =&gt; true],
 ];</code></pre>
<p>We also had some troubles with Switfmailer Bundle:</p>
<pre><code class="language-diff"> return [
-    Symfony\Bundle\SwiftmailerBundle\SwiftmailerBundle::class =&gt; ['all' =&gt; true],
 ]</code></pre>
<p>The <a href="https://symfony.com/blog/new-in-symfony-4-3-mailer-component">Mailer component</a> will take over Swiftmailer in the future, so this is just a start.</p>
<h2 id="9-clear-code-config-packages-code">9. Clear <code>config/packages</code></h2>
<pre><code class="language-diff"> # config/packages/framework.yaml
 framework:
     ...
-    templating:
-        engines: ["twig"]</code></pre>
<p>Don't forget to remove all extension configs. In our case it was:</p>
<pre><code class="language-diff">-config/packages/stof_doctrine_extensions.yaml
-config/packages/swiftmailer.yaml
-config/packages/dev/swiftmailer.yaml
-config/packages/test/swiftmailer.yaml
-config/packages/twig_extensions.yaml
-config/routes/dev/twig.yaml</code></pre>
<p>Small update of the EasyAdmin bundle:</p>
<pre><code class="language-diff"> # config/routes/easy_admin.yaml
 easy_admin_bundle:
-    resource: '@EasyAdminBundle/Controller/AdminController.php'
+    resource: '@EasyAdminBundle/Controller/EasyAdminController.php'</code></pre>
<blockquote class="blockquote text-center">
    And that's all folks!<br>
    Got any questions?
</blockquote>
<div class="text-center">
    All the know-how is taken from practical pull-request, that was under strict Travis control:

    <br><img src="/assets/images/posts/2019/symfony5_pr.png" class="img-thumbnail"><br>

    Feel free to explore it, ask, read comments or share your problems.
    <br><a href="https://github.com/pehapkari/pehapkari.cz/pull/243/files" class="btn btn-dark mb-5 mt-3">
        <em class="fab fa-github"></em>
         
        Check the PR on Github
    </a>
</div>
<p><br></p>
<h2 id="have-we-missed-something">Have we Missed Something?</h2>
<p>Of course, we did! Every application has a different set of <em>blocking</em> dependencies and different sets of used Symfony features that might have changed.</p>
<p>Share your issues in comments or edit this post on Github to make list complete!</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/09/09/how-we-upgraded-pehapkari-cz-from-symfony-4-to-5-in-25-days</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/09/09/how-we-upgraded-pehapkari-cz-from-symfony-4-to-5-in-25-days#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Speedup Test Coverage on Travis by 95 % ]]></title>
                <link>https://tomasvotruba.com/blog/2019/09/02/how-to-speedup-test-coverage-on-travis-by-95-percent</link>
                <description><![CDATA[ <p>It was late in the night. He was looking at CI builds to make sure everything is ready for a morning presentation.
<br>
<br>
<strong>The build took over 45 minutes</strong>. What was wrong? He was scared, took a deep breath, and looked at Travis build detail anyway.
<br>
<br>
&quot;What? Code coverage? All the stress for this?&quot;
<br>
<strong>&quot;We should remove it,&quot;</strong> he thought, &quot;CI should give fast feedback... or is there another way?&quot;</p> ]]></description>
                <content:encoded><![CDATA[ <p>Do you find this story resembling your daily job? We had the same problem. We tolerated for 2 years, but in 2020 we looked for a better way.</p>
<img src="/assets/images/posts/2019/faster-coverage/coverage_slow.png">
<h2 id="status-quo-xdebug">Status Quo: Xdebug</h2>
<p>The most common way in the open-source nowadays is Xdebug with Coveralls. <a href="http://coveralls.io">Coveralls.io</a> is an open-source, free service, that consumes your PHPUnit coverage data, and turns them into one significant number.</p>
<p>That's how can have sexy coverage badge in your repository:</p>
<img src="https://img.shields.io/coveralls/symplify/symplify/master.svg?style=flat-square">
<p>How do we make it happen on Travis?</p>
<pre><code class="language-yaml">script:
    - vendor/bin/phpunit --coverage-clover coverage.xml</code></pre>
<p>In the job context:</p>
<pre><code class="language-yaml"># .travis.yml
jobs:
    include:
        -
            stage: coverage
            php: 7.3
            name: Test Coverage
            script:
                - vendor/bin/phpunit --coverage-clover coverage.xml
                # Coveralls.io
                - wget https://github.com/php-coveralls/php-coveralls/releases/download/v2.1.0/php-coveralls.phar
                - php php-coveralls.phar --verbose</code></pre>
<h2 id="2-faster-with-phpdbg">2. Faster with phpdbg</h2>
<p>I've learned about phpdbg from this <a href="https://kizu514.com/blog/phpdbg-is-much-faster-than-xdebug-for-code-coverage">short and clear post by KIZU 514</a>.</p>
<p>One-line, no-install setup:</p>
<pre><code class="language-yaml">script:
    - phpdbg -qrr -d memory_limit=-1 vendor/bin/phpunit --coverage-clover coverage.xml</code></pre>
<p>In full job:</p>
<pre><code class="language-yaml"># .travis.yml
jobs:
    include:
        -
            stage: coverage
            php: 7.3
            name: Test Coverage
            script:
                - phpdbg -qrr -d memory_limit=-1 vendor/bin/phpunit --coverage-clover coverage.xml
                # Coveralls.io
                - wget https://github.com/php-coveralls/php-coveralls/releases/download/v2.1.0/php-coveralls.phar
                - php php-coveralls.phar --verbose</code></pre>
<p><strong>Mind the <code>-d memory_limit=-1</code>.</strong> The memory was exhausted very soon. We would care if this was a production code. But CI is build, run and throw away container, so allowing unlimited memory is ok.</p>
<h2 id="3-even-faster-with-pcov">3. Even Faster with PCOV</h2>
<p>It's better to have PHPUnit 8+, but what if <a href="/blog/2019/11/04/still-on-phpunit-4-come-to-phpunit-8-together-in-a-day/">don't have it yet</a>? You can <a href="https://kizu514.com/blog/pcov-is-better-than-phpdbg-and-xdebug-for-code-coverage">read about PCOV here</a>, we'll get right to the business.</p>
<p>2-lines run with setup:</p>
<pre><code class="language-yaml">script:
    - pecl install pcov
    - vendor/bin/phpunit --coverage-clover coverage.xml</code></pre>
<p>In jobs context:</p>
<pre><code class="language-yaml"># .travis.yml
jobs:
    include:
        -
            stage: coverage
            php: 7.3
            name: Test Coverage
            script:
                - pecl install pcov
                - vendor/bin/phpunit --coverage-clover coverage.xml
                # Coveralls.io
                - wget https://github.com/php-coveralls/php-coveralls/releases/download/v2.1.0/php-coveralls.phar
                - php php-coveralls.phar --verbose</code></pre>
<p><strong>PCOV took only 1,5 minutes</strong>, that's great!</p>
<p>The coverage number changed from 77 % to 73 %. However, <a href="https://github.com/krakjoe/pcov#differences-in-reporting">PCOV provides the higher accuracy than phpdbg</a> which cannot correctly detect implicit return paths.</p>
<h2 id="final-results">Final Results</h2>
<ul>
<li>Xdebug - 37 minutes, 77,5 % code coverage</li>
<li>phpdbg - 3 minutes, 77,1 % code coverage</li>
<li>pcov - 1,5 minutes, 73 % code coverage</li>
</ul>
<p>...and the winner is:</p>
<p><br></p>
<p><strong>PCOV</strong> 🎉</p>
<p><br></p>
<p>It was the fastest one, while also providing code analysis similar to the mainstream Xdebug.</p>
<p><br></p>
<p>But that was <em>our specific</em> codebase. Be sure to try option 2. and 3. on your code, in one PR, to see <strong>what suits you</strong>.</p>
<h2 id="the-future">The Future?</h2>
<p>Derrick, the Xdebug author, <a href="https://derickrethans.nl/crafty-code-coverage.html">wrote about Xdebug 2.9</a> that should speed up 22 mins build into <strong>1.2 min</strong>.</p>
<p>It <a href="https://travis-ci.community/t/new-faster-xdebug-2-9-is-out/6372">might take some time to get it on Travis</a>, which has nov Xdebug 2.7.</p>
<p>We'll see :)</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/09/02/how-to-speedup-test-coverage-on-travis-by-95-percent</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 02 Sep 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/09/02/how-to-speedup-test-coverage-on-travis-by-95-percent#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How we Migrated 54 357-lines Application from Nette to Symfony in 2 People under 80 Hours ]]></title>
                <link>https://tomasvotruba.com/blog/2019/08/26/how-we-migrated-54-357-lines-of-code-nette-to-symfony-in-2-people-under-80-hours</link>
                <description><![CDATA[ <p>It would take us <strong>3 full-time months</strong> to rewrite this code in 2017. In February 2019, we did it <strong>in less than 3 weeks</strong> with the help of automated tools. Why and how?</p> ]]></description>
                <content:encoded><![CDATA[ <p><em>Similar post was originally published <a href="https://www.zdrojak.cz/clanky/50k-radku-z-nette-do-symfony">in Czech on Zdrojak.cz</a>, where it got colossal attention of the PHP community and hit a record of 56 comments. But when I talk about this migration with my English speaking PHP friends, it seems crazy to them, and they want to hear details - who, how, when, what exactly?</em></p>
<p><em>This post is for you (and for you of course, if you haven't read it on Zdroják).</em></p>
<div class="text-center">
<img src="/assets/images/posts/2019/fw-migration/nette-to-symfony.png"></div>
<h2 id="what-have-we-migrated">What Have We Migrated?</h2>
<p>Backend of <a href="https://entry.do">Entry.do</a> project - API application built on controllers, routing, Kdyby integrations of Symfony, Doctrine, and a few Latte templates. The application has been running in production for the last 4 years. We migrated from Nette 2.4 to Symfony&nbsp;4.2.</p>
<p>How big is it? If we don't count tests, migration, fixtures, etc., the application has <strong>270 PHP files</strong> in the length of <strong>54 357 lines</strong> (using <a href="https://github.com/sebastianbergmann/phploc">phploc</a>).</p>
<p>How many unique routes does it have? 20...? 50...? <strong>151!</strong>
Just to have an idea, the pehapkari.cz website has 35 routes.</p>
<h2 id="why">Why?</h2>
<p>The application used framework Nette, which worked and met the technical requirements. The primary motivation for the transcription was the dying ecosystem and the over-integration of Symfony. What does the &quot;dying ecosystem&quot; mean? Nette released just 1 minor version since July 2016, while Symfony had 6 releases during the same period.</p>
<div class="text-center mb-4">
    <img src="/assets/images/posts/2019/fw-migration/extensions.png"><br>
    80% of the extensions are just glue integrations of Symfony and Doctrine
</div>
<div class="text-center mb-4">
    <img src="/assets/images/posts/2019/fw-migration/nette-symfony.png"><br>
    Nette was just Controllers, Routing and Dependency-Injection
</div>
<p>Why use unmaintained integrations of <a href="https://github.com/kdyby">Kdyby</a> and <a href="https://github.com/zenify">Zenify</a>, that only integrate Symfony to Nette\DI, if Symfony is already there? The last new minor version of Nette was published 3 years ago. Symfony releases a new minor version every 6 months with new features that will make your work easier.</p>
<h2 id="how">How?</h2>
<p>I offered <a href="https://janmikes.cz">Honza Mikes</a> deal he couldn't refuse:</p>
<blockquote class="blockquote text-center">
"We will give it a week, and if we get stuck, we'll give up".
</blockquote>
<p>On January 27th, we met with his Nette application, and on February 13th, the Symfony application went to the staging server. <strong>In less than 17 days, we finished migration</strong>, and on February 14th, we celebrated a new production application in addition to Valentine's Day.</p>
<div class="text-center mb-4">
<img src="/assets/images/posts/2019/fw-migration/pull-request.png" class="img-thumbnail">
<p>The final size of migration pull-request</p>
</div>
<p>We talked about migration at the beginning of 2017 because the Nette ecosystem wasn't developing, and Symfony was technologically skipping it. At that time, however, the transition would last at least 80-90 days for full-time, which is insane, so we didn't go into it.</p>
<h2 id="tool-set">Tool Set</h2>
<p>In 2019 we already had a <strong>lot of tools to do the work for you</strong>:</p>
<ul>
<li>
<p>The first is <a href="https://github.com/rectorphp/rector">Rector</a>, a tool I made that can change any code that runs at least on PHP 5.3 from pattern A to pattern B. It can instantly update the code from PHP 5.3, 5.4, 5.5, 5.6... to 7.4, Symfony from 2.8 to 4.2, Laravel from static code to constructor injection, and more. You can add your own rules tailored to migrate your specific code, that can handle anything that PHP programmer can do (A → B) in a fraction of the time.</p>
</li>
<li>
<p>The second is <a href="https://github.com/migrify/neon-to-yaml">NeonToYaml</a> - as you can guess, it converts NEON syntax to YAML</p>
</li>
<li>
<p>The third assistant is <a href="https://github.com/migrify/latte-to-twig">LatteToTwigConverter</a> - it migrates Latte files to TWIG syntax</p>
</li>
</ul>
<p>During those <strong>17 days, we put in 80 hours of work</strong> for both of us together (= 40 hours each).</p>
<h2 id="20-of-good-old-manual-work">20 % of Good Old Manual Work</h2>
<p>Although we do not like it, we had to do 20 % of the migration manually.</p>
<p>One of the first steps was to move from <a href="/blog/2019/02/14/why-config-coding-sucks/">config programming to PHP programming</a>. Both frameworks try to promote their sugar syntax for Neon or YAML. It sounds cool to new programmers to write less code. Still, it's confusing, framework-specific, can be done in plain PHP anyway, and most importantly, static analysis and instant refactoring won't deal with it.</p>
<p>How does &quot;config programming&quot; look like?</p>
<pre><code class="language-yaml">services:
    - FirstService(@secondService::someMethod())</code></pre>
<p>Or also:</p>
<pre><code class="language-yaml">services:
    -
        class: 'Entrydo\Infrastructure\Payment\GoPay\NotifyUrlFactory'
        arguments:
            - '@http.request::getUrl()::getHostUrl()'</code></pre>
<p>What typical PHP pattern, that is framework-agnostic and almost everyone knows, can we use?</p>
<p>Factory!</p>
<pre><code class="language-php">&lt;?php

final class FirstServiceFactory
{
    /**
     * @var SecondService
     */
    private $secondService;

    public function __construct(SecondService $secondService)
    {
        $this-&gt;secondService = $secondService;
    }

    public function create()
    {
        return new SomeService($this-&gt;secondService);
    }
}</code></pre>
<h3 id="what-did-we-gained-with-this-refactoring">What did we Gained with This Refactoring?</h3>
<ul>
<li>Constructor injection!</li>
<li>Framework independence - when we migrate to another framework or pattern in 3 years, we don't have to deal with this file anymore.</li>
<li>Static analysis works</li>
<li>More testable code, thanks to PHP code instead of config</li>
<li>PHPStorm refactoring works</li>
<li>Rector works</li>
<li>It's a clear PHP code</li>
</ul>
<p><br></p>
<p>In Nette and Symfony, several things were different:</p>
<ul>
<li>ErrorPresenter → <a href="https://symfony.com/doc/current/event_dispatcher.html%23creating-an-event-subscriber">ExceptionSubscriber</a></li>
<li>Use <a href="https://symfony.com/doc/current/testing.html">SymfonyTestBundle</a> for tests</li>
<li>Moving Files to <a href="http://fabien.potencier.org/symfony4-directory-structure.html">Symfony 4 Single-Level Structure</a></li>
<li>Exchange of services in mock tests</li>
<li>In Nette, there is a Request/Response service, but in Symfony, it's an object</li>
<li>Rewrite extension configs to Flex configs</li>
</ul>
<h2 id="80-of-work-automated">80 % of Work Automated</h2>
<p>Automatic tools did another 80% of the pull-request you saw above. The first one was enough to write, the other one to set it up.</p>
<h2 id="neon-to-yaml">Neon to YAML</h2>
<p>Neon and YAML are de facto fields <a href="/blog/2018/03/12/neon-vs-yaml-and-how-to-migrate-between-them/">with minor differences in syntax</a>, but when it comes to services, each framework writes a little differently. Config with services had 316 lines in the services section. You don't want to migrate it manually, the Neon entities. Besides, just one error in related migration, and you can do it all over again.</p>
<p>I took few hours and wrote <a href="https://github.com/migrify/neon-to-yaml">Migrify/NeonToYaml</a>. Just pass the path to the <code>*.neon</code> file, and it will convert into a beautiful <code>*.yaml</code> file.</p>
<h2 id="php-migration">PHP Migration</h2>
<p>Again to the factory pattern - there were several custom Response classes in the code that inherited from Nette Response and added extra logic. We could edit them manually, but it was easier to extract them into the factory method:</p>
<pre><code class="language-diff"> &lt;?php

 class SomePresenter
 {
+    /**
+     * @var ResponseFactory
+     */
+    private $responseFactory;
+
+    public function __construct(ResponseFactory $responseFactory)
+    {
+        $this-&gt;responseFactory = $responseFactory;
+    }
+
     public function someAction()
     {
-        return new OKResponse($response);
+        return $this-&gt;responseFactory-&gt;createJsonResponse($response);
     }
 }</code></pre>
<p><a href="https://janmikes.cz">Honza</a> created new <code>NewObjectToFactoryCreateRector</code> rule that handled this.</p>
<h2 id="what-else-was-left">What else was left?</h2>
<ul>
<li>Move the routing from <code>RouterFactory</code> to particular Controller actions</li>
<li>Rename <code>Request</code> and <code>Response</code> classes + including their codes (<code>POST</code>, <code>GET</code>, <code>200</code>...)</li>
<li>Rename classes and methods on <code>Nette\DI\Container</code>, <code>Nette\Configurator</code>, <code>Nette\Application\IPresenter</code> etc,</li>
<li>Changing parent classes on Controllers,</li>
<li>Renaming Controllers to <code>*Controller</code> (they use &quot;Presenter&quot; naming in Nette)</li>
<li>Move namespaces from <code>App\Presenter</code> to <code>App\Controller</code></li>
</ul>
<p>The most changes were in controllers:</p>
<pre><code class="language-diff"> &lt;?php declare (strict_types = 1);

-namespace App\Presenter;
+namespace App\Controller;

-use Nette\Application\AI\Presenter;
+use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
-use Nette\Http\Request;
+use Symfony\Component\HttpFoundation\Request;

-final class SomePresenter extends Presenter
+final class SomeController extends AbstractController
 {
-    public static function someAction()
+    public static function someAction(Request $request)
     {
-        $header = $this-&gt; httpRequest-&gt; getHeader('x');
+        $header = $request-&gt; headers-&gt; get('x');

-        $method = Request::POST;
+        $method = Request::METHOD_HPOST
     }
 }</code></pre>
<h2 id="syntax-sugar-syntax-hell">Syntax Sugar? Syntax Hell</h2>
<p>For a while, Kdyby\Translation screwed us with &quot;syntax sugar&quot;. In the Nette application, the listing of variables (Tom) worked for us:</p>
<ul>
<li>&quot;Hi, my name is Tom&quot;</li>
</ul>
<p>But in Symfony magically added <code>%%</code>:</p>
<ul>
<li>&quot;Hi, my name is% Tom%&quot;</li>
</ul>
<p>WTF? After 15 minutes we figured it out - Kdyby\Translation wrapped the variable name in &quot;%%&quot; for you - and fixed it:</p>
<pre><code class="language-diff"> &lt;?php

 class SomePresenter
 {
     public function someAction()
     {
         // Kdyby/Translation differnce to native Symfony/Translation
         $this-&gt;translations-&gt;translate('Hi, my name is %name%', [
-            'name' =&gt; 'Tom',
+            '%name%' =&gt; 'Tom'
         ]);
     }
 }</code></pre>
<p>Pretty cool, huh?</p>
<h2 id="rename-event-names">Rename Event Names</h2>
<p>We also cannot forget the rename of events from Contribute\Events to Symfony <a href="https://symfony.com/doc/current/reference/events.html%23kernel-events">KernelEvents</a>:</p>
<div class="text-center">
    <img src="/assets/images/posts/2019/fw-migration/event-rename.png"></div>
<h2 id="from-code-routerfactory-code-to-controller-code-route-code-annotation">From <code>RouterFactory</code> to Controller <code>@Route</code> annotation</h2>
<p>RouteFactory is <a href="https://github.com/nette/sandbox/blob/06a92123fb6a1d82de38037436ca06484afec8dc/app/Router/RouterFactory.php">single class</a> in Nette to define all routes for all controllers and their actions. In Symfony, this is quite the opposite. You define the routes directly at the Controller action. And to make matters worse, it <a href="https://symfony.com/doc/current/routing.html%23creating-routes">uses annotation</a>.</p>
<p>What with this? Well, one option is to move one route at a time - <strong>all 151</strong>. To make it even more challenging, we had our own <code>RestRoute</code> and our own <code>RouteList</code>, including POST/GET/..., which Nette doesn't have.</p>
<p>How does one change look like?</p>
<pre><code class="language-diff"> &lt;?php

 namespace App;

 use Entrydo\RestRouteList;
 use Entrydo\Restart;

 final class RouterFactory
 {
-    private const PAYMENT_RESPONSE_ROUTE = '/ payment / process';
     // 150 more!

     public function create()
     {
         $router = new RestRouteList();
-        $router[] = RestRoute::get(self::PAYMENT_RESPONSE_ROUTE, ProcessGPWebPayResponsePresenter::class);
          // 150 more!

          return $router;
      }
 }</code></pre>
<pre><code class="language-diff"> namespace App Presenter;

+use Symfony\Component\Routing\Annotation\Route;

 final class ProcessGPWebPayResponsePresenter
 {
+    /**
+     * @Route(path = "/payments/gpwebpay/process-response", methods="GET"})
+     */
     public function __invoke()
     {
         // ...
     }
 }</code></pre>
<p>Now do this 151 times... and make rebase-proof. When we first talked about the migration in 2017, we would make all these changes manually. <strong>Too lazy to work.</strong></p>
<p>And in 2019? For a few days, we were preparing the <code>nette-to-symfony</code> Rector set and then run it on the entire code base:</p>
<pre><code class="language-bash">composer require rector/rector -dev
vendor/bin/rector process app src --level nette-to-symfony</code></pre>
<p>And it is done  :)</p>
<p>Everything we've learned during the 17-day migration is in this set and this post. Just download Rector, and you can use the set straight away.</p>
<p>From Valentine's Day to the nette-to-symfony set, a complete migration from Nette Tester to PHPUnit and the migration of Nette Forms to Symfony Forms and Component to Controllers have been added.</p>
<h2 id="final-touches">Final Touches</h2>
<p>After a lot of static content changes, the code worked, and the tests went through, but it looked messy. Spaces were missing, fully qualified class names were not imported, etc.</p>
<p>You can use your own PHP_CodeSniffer and PHP-CS-Fixer set. We used the <a href="https://github.com/rectorphp/rector/blob/master/ecs-after-rector.php">Rector-prepared set of 7 rules</a> with <a href="https://github.com/symplify/easy-coding-standard">EasyCodingStandard</a>:</p>
<pre><code class="language-bash">vendor/bin/ecs check app src --config vendor/rector/rector/ecs-after-rector.php</code></pre>
<h2 id="it-s-not-about-the-work-it-s-about-the-knowledge">It's not about the Work, It's about the Knowledge</h2>
<p>And so we migrated a 4-years old Nette application of 54 357 lines under 80 hours to Symfony and put it into production. Most of the time took us debugging events and writing migration rules and tools. Now <strong>the same application would take us (or you) 10 hours top to migrate</strong>.</p>
<p><br></p>
<p>As you can see, any application can be migrated from one framework to another under a month. Dare us!</p>
<p><br></p>
<p>Happy migrating!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/08/26/how-we-migrated-54-357-lines-of-code-nette-to-symfony-in-2-people-under-80-hours</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 26 Aug 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-06-01UTC00:00:000</updated>
                    <atom:updated>Mon, 01 Jun 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Mon, 01 Jun 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/08/26/how-we-migrated-54-357-lines-of-code-nette-to-symfony-in-2-people-under-80-hours#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Do We Have More than 1024 PHP Groups in The World? ]]></title>
                <link>https://tomasvotruba.com/blog/2019/08/19/do-we-have-more-than-1024-php-groups-in-the-world</link>
                <description><![CDATA[ <p>In April 2018, I started a side project to list meetups in Europe near Prague. <strong>PHP meetups are so much fun</strong>, and I didn't find any single-page with a map that would list them. At the start, this site had a small table, with 10 meetups a month, very <em>modern</em> black/white Times New Roman design, and <em>advanced</em> human-manual updating.
<br><br>
Since then, I got feedback from dozens of friends and users with these WTFs and ideas - they helped me add a feature now and then, polish design with emoji and Bootstrap, <strong>automate everything and even crawl over 150 URLs</strong>. I bought <a href="https://friendsofphp.org">friendsofphp.org</a> domain, and the project became a single standalone page.
<br><br>
Today, it's a much bigger project with over...</p> ]]></description>
                <content:encoded><![CDATA[ <p>...well, see for yourself:</p>
<div class="text-center">
    <a href="https://friendsofphp.org/">
        <img src="/assets/images/posts/2019/friends/preview.png"></a>
</div>
<blockquote class="blockquote text-center">
    1, 2, 3... <strong>1023 groups</strong>
</blockquote>
<p>I bet there is one group out there that isn't listed yet. It might have a local non-PHP name like <a href="https://friendsofphp.org/groups/#france">&quot;AFUP&quot; community in France</a>.</p>
<p>Whoever finds this group wins 🍺!</p>
<h2 id="the-most-active-region">The Most Active Region</h2>
<p>I assumed the Czech Republic or Germany is the most active in Europe. I was wrong! Look at Benelux with <strong>over 20 meetups in a month</strong>!</p>
<p>It would be easy to get lost among all these pins, so we put 2 more colors in.</p>
<div class="text-center">
    <img src="/assets/images/posts/2019/friends/colors-before-after.png" class="img-thumbnail"><p>Before → After</p>
    <p>
        Traffic lights to save your eyes:
        <strong>
            <span class="text-success">next 7 days</span>
            | <span class="text-warning">next 14 days</span>
            | <span class="text-danger">next 30 days</span>
        </strong>
    </p>
</div>
<h2 id="6-more-cool-features">6 More Cool Features</h2>
<ul>
<li>
<p><strong>Local Storage</strong> - Isn't it annoying to open a map and always see the same location in Europe? What if you're from <em>complete your country</em> and you want to see your local meetups only? We got you covered - your last selected location is stored in your browser ✅</p>
</li>
<li>
<p><strong>Share Your map</strong></p>
<ul>
<li>&quot;Hey John, check these meetups in Berlin...&quot;</li>
<li>&quot;How?&quot;</li>
<li>&quot;You have to zoom to this city and...&quot;</li>
<li>&quot;Where in Germany is it?&quot;</li>
<li>&quot;Oh wait, there is a share button, I'll send you a link.&quot;</li>
<li>&quot;Awesome&quot; ✅</li>
</ul>
</li>
<li>
<p><strong>Locate Yourself</strong> - No need to zoom your country - use your geo-location ✅. Works great on both laptops and smartphones.</p>
</li>
<li>
<p><strong>Mobile Ready</strong> - While you're traveling, you're (on your) mobile, and you need the meetup fast. The site runs on Bootstrap 4.1 and has hours of testing in different continents and poor connections ✅</p>
</li>
<li>
<p><strong>Single Site</strong> - No clicking, no menu. Just map and table ✅</p>
</li>
<li>
<p><strong>Move the Map → Table Filters</strong> - See what you need. As you move to the map, the table will transform - it shows you only meetups visible on the map ✅ . Try F5 - local storage still works.</p>
</li>
</ul>
<p>Any tips? <a href="https://github.com/TomasVotruba/friendsofphp.org/issues">Add new issue</a></p>
<h2 id="how-does-the-website-work">How Does the Website Work?</h2>
<p>Meetups are downloaded every day by Travis CRON job from Meetup.com for each group. You'll find them manually added in <a href="https://github.com/TomasVotruba/friendsofphp.org/blob/master/config/_data/groups.yaml">this YAML file in repository</a>. No surprise <strong>it runs on <a href="https://github.com/symplify/symfony-static-dumper">Symfony Static Dumper</a> and is fully <a href="https://github.com/tomasvotruba/friendsofphp.org">open-sourced on Github</a></strong>.</p>
<p>Although there <a href="https://www.meetup.com/meetup_api">Meetup API</a> often works as documented, it's impossible to find all PHP groups with it. There is <a href="https://github.com/meetup/api/issues/249">an issue</a> <strong>when you search for groups in a specific location, it ignores the area and sets back to your origin city</strong>. Pity, that exactly what we need here.</p>
<h3 id="what-now">What now?</h3>
<p>Maybe instead of API... a <strong>crawler could help</strong> - <a href="https://github.com/meetup/api/issues/249#issuecomment-427548572">and it did</a>:</p>
<pre><code class="language-php">&lt;?php

require __DIR__ . '/vendor/autoload.php';

use Symfony\Component\DomCrawler\Crawler;

// crawling Slovenia here: 'https://www.meetup.com/topics/php/si/'
$code = 'si';

$crawlUrl = 'https://www.meetup.com/topics/php/' . $code;
$crawler = new Crawler(file_get_contents($crawlUrl));

$meetupNames = [];
// headlines of found groups
foreach ($crawler-&gt;filterXPath('//span[@class="text--bold display--block"]') as $node) {
    $meetupNames[] = $node-&gt;textContent;
}

var_dump($meetupNames);</code></pre>
<p>After 4 hours of debugging broken API, I got this solution working in roughly 60 minutes.
Provide a list of codes for all countries in the world, and in a few minutes you have with <strong>800 new PHP groups</strong> ↓</p>
<div class="text-center">
    <img src="/assets/images/posts/2019/friends/groups-before-after.png" class="img-thumbnail"><p>Before → After</p>
</div>
<blockquote class="blockquote text-center">
   Lesson learned: use what works.
</blockquote>
<p>Events are stored with their location and rendered to Open Street Maps with fantastic <a href="https://leafletjs.com">Leaflet framework</a>. You don't have to know any Javascript. Documentation is that good.</p>
<h2 id="how-much-does-it-cost-to-travel-abroad-meetup">How much Does it Cost to Travel abroad Meetup?</h2>
<p>There is <a href="/blog/2018/07/23/5-signs-should-never-have-a-talk-abroad/">plenty of reasons not-to-go</a> visit PHP meetup abroad, but the one I hear the most <strong>are money</strong>.</p>
<p>To give you an idea, here <strong>are costs of my trips from Prague</strong> to cities nearby:</p>
<table class="table table-bordered"><thead class="table-inverse"><tr><th class="text-center">City</th>
            <th class="text-center">Travel Time</th>
            <th class="text-center">Travel $</th>
            <th class="text-center">Stay $</th>
            <th class="text-center">Total $</th>
        </tr></thead><tr><td><a href="https://www.meetup.com/PHP-USERGROUP-DRESDEN/">Dresden</a></td>
        <td>2 hours</td>
        <td>20 € </td>
        <td>~ <span class="text-muted">(go home the same day)</span></td>
        <td class="text-right"><strong>20 €</strong></td>
    </tr><tr><td><a href="https://www.meetup.com/viennaphp/">Vienna</a></td>
        <td>5 hours</td>
        <td>30 € </td>
        <td>30 € AirBnb / 0 $ friend from meetup</td>
        <td class="text-right"><strong>30-60 €</strong></td>
    </tr><tr><td><a href="https://www.meetup.com/Berlin-PHP-Usergroup/">Berlin</a></td>
        <td>5 hours</td>
        <td>50 €</td>
        <td>40 € AirBnb / 0 $ friend from meetup</td>
        <td class="text-right"><strong>40-90 €</strong></td>
    </tr></table>
<p>At the start, I had to pay Airbnb. But when you go to meetups more than once, you'll remember people; they'll remember you, and they're beneficial with your subsequent visits. <strong> ask to stay over for one night on the floor</strong>.</p>
<h3 id="do-you-need-help-with-or-ask-where-to-start">Do You Need Help With $ or Ask Where to Start?</h3>
<p>Let <a href="/contact">me know</a> - I might know a way to help you.</p>
<p><br></p>
<p>That's all, folks. Enjoy your offline PHP friends - <a href="https://friendsofphp.org">friendsofphp.org</a> and have fun!</p>
<p><br></p>
<p>Happy traveling!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/08/19/do-we-have-more-than-1024-php-groups-in-the-world</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 19 Aug 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/08/19/do-we-have-more-than-1024-php-groups-in-the-world#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Standalone Symfony Console from the Scratch ]]></title>
                <link>https://tomasvotruba.com/blog/2019/08/12/standalone-symfony-console-from-scratch</link>
                <description><![CDATA[ <p>Symfony Console is <em>the one</em> package you will use to build a PHP CLI app. It's one of the easiest Symfony components.
<br><br>
Why? You <strong>only create Application class, add 1 Command class, and you are ready to go</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="when-amp-why-use-symfony-console">When &amp; Why use Symfony Console?</h2>
<p>This package helps you to create applications like <a href="https://github.com/composer/composer">Composer</a>, <a href="https://github.com/symplify/easy-coding-standard">ECS</a>, <a href="https://github.com/rectorphp/rector">Rector</a> or <a href="https://github.com/symplify/symfony-static-dumper">Symfony Static Dumper</a> that generates this website.</p>
<p>So in general, to build applications where you:</p>
<ul>
<li>need to <strong>access CLI</strong>,</li>
<li>need to <strong>be fast</strong> - imports, CRON jobs, feeds or asynchronous operations</li>
<li>and don't need any browser rendering.</li>
</ul>
<h2 id="2-classes-to-learn">2 Classes to Learn</h2>
<ul>
<li><strong>Application</strong> - This is the entry point. It contains all commands and routes arguments to them. Something like Application is in Nette or HttpKernel is in Symfony.</li>
<li><strong> Command</strong> - Handles input data, processes them, and returns the result to the output as the Presenter or Controller does.</li>
</ul>
<p>1 application can have many commands.</p>
<h2 id="what-belongs-to-command">What Belongs to Command?</h2>
<p>Before diving into our first Command, there is an essential rule that I want to share with you. In many tutorials, you find business logic inside Commands. That is convenient in the begging, but challenging to unlearn later, building more commands.</p>
<p>When I wrote <em>commands is something like Presenter or Controller</em>, I talked about <a href="/blog/2018/01/08/clean-and-decoupled-controllers-commands-and-event-subscribers-once-and-for-all-with-delegator-pattern/">Delegator Pattern</a>. Like Controller, <strong>it should only delegate arguments to other services and return the result to the output</strong>.</p>
<p>This rule will help you to <strong>avoid</strong>:</p>
<ul>
<li>using Command to run another command</li>
<li>using Command in the Controller</li>
<li>using Controller in Command</li>
</ul>
<p>Very common, very coupled. You would never use the Controller inside another controller, right?</p>
<p><em>Ok, now you know this. So let's create your first Command!</em></p>
<h2 id="create-first-command-in-3-steps">Create First Command in 3 Steps</h2>
<h3 id="1-install-via-composer">1. Install via Composer</h3>
<pre><code class="language-bash">composer require symfony/console</code></pre>
<h3 id="2-create-console-application">2. Create Console Application</h3>
<p>Conventional location is <code>bin/console</code> (having <code>.php</code> suffix is also fine):</p>
<pre><code class="language-php">#!/usr/bin/env php
&lt;?php

require_once __DIR__ . '/../vendor/autoload.php';

// Create the Application
$application = new Symfony\Component\Console\Application;

// Run it
$application-&gt;run();</code></pre>
<p>Now we can run the app and see that it's ready:</p>
<pre><code class="language-bash">php bin/console</code></pre>
<p>All good? Good!</p>
<h3 id="3-create-and-register-command">3. Create and Register Command</h3>
<p>Let's create Command that will safely hash any password you enter.</p>
<pre><code class="language-bash">composer require nette/security</code></pre>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

// src/Command/HashPasswordCommand.php

namespace App\Command;

use Nette\Security\Passwords;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

final class HashPasswordCommand extends Command
{
    /**
     * In this method setup command, description, and its parameters
     */
    protected function configure()
    {
        $this-&gt;setName('hash-password');
        $this-&gt;setDescription('Hashes provided password with BCRYPT and prints to output.');
        $this-&gt;addArgument('password', InputArgument::REQUIRED, 'Password to be hashed.');
    }

    /**
     * Here all logic happens
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $password = $input-&gt;getArgument('password');

        $hashedPassword = Passwords::hash($password);

        $output-&gt;writeln(sprintf(
            'Your hashed password is: %s', $hashedPassword
        ));

        // return value is important when using CI, to fail the build when the command fails
        // in case of fail: "return self::FAILURE;"
        return self::SUCCESS;
    }
}</code></pre>
<p>Configure autoloading, add the following to the <code>composer.json</code> file:</p>
<pre><code class="language-json">{
    "autoload": {
        "psr-4": {
            "App\\": "src"
        }
    }
}</code></pre>
<p>Dump the autoloader</p>
<pre><code class="language-bash">composer dump-autoload</code></pre>
<p>And update our <code>bin/console</code> file:</p>
<pre><code class="language-php">#!/usr/bin/env php
&lt;?php

require_once __DIR__ . '/../vendor/autoload.php';

// Create the Application
$application = new Symfony\Component\Console\Application();

// Register all Commands
$application-&gt;add(new App\Command\HashPasswordCommand());

// Run it
$application-&gt;run();</code></pre>
<p>Now you can run it from CLI with your password as an argument:</p>
<pre><code class="language-bash">php bin/console hash-password heslo123
Your hashed password is: $2y$10$NZVuDpvFbqhsBhR1AZZzX.xUHKhr5qtP1qGKjqRM4S9Xakxn1Xgy2</code></pre>
<h2 id="you-are-one-step-further">You Are One Step Further</h2>
<p>Now you should:</p>
<ul>
<li>understand that you need <strong>only 1 class to create simple Command</strong></li>
<li>see <strong>Command like a Controller</strong> and should only delegate business logic, not contain it</li>
<li>know how to <strong>pass argument</strong>, process it and <strong>return result to the output</strong></li>
</ul>
<h3 id="where-to-go-next">Where to go next?</h3>
<p>Still hungry for knowledge? Check <a href="http://symfony.com/doc/current/components/console.html#learn-more">Symfony documentation</a> then.</p>
<ul>
<li>Do you need to <strong>pass more than 1 value</strong>? E.g. <code>bin/console hash-password mummy123 --cost=14</code>? Go check <a href="http://symfony.com/doc/current/console/input.html#using-command-options">Command Options</a>.</li>
<li>Do you want to <strong>inform users about the progress of slow process</strong>? You are looking for <a href="http://symfony.com/doc/current/components/console/helpers/progressbar.html">Progress Bar Helper</a>.</li>
<li>Do you want to use a popular and pretty Symfony output style (like PHP-CS-Fixer does)? Look at <a href="https://symfony.com/blog/new-in-symfony-2-8-console-style-guide">Console Style Guide</a>.</li>
</ul>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/08/12/standalone-symfony-console-from-scratch</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 12 Aug 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-06-01UTC00:00:000</updated>
                    <atom:updated>Mon, 01 Jun 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Mon, 01 Jun 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/08/12/standalone-symfony-console-from-scratch#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Standalone Symfony Event Dispatcher from the Scratch ]]></title>
                <link>https://tomasvotruba.com/blog/2019/08/05/standalone-symfony-event-dispatcher-from-the-scratch</link>
                <description><![CDATA[ <p>Have you ever used Symfony Event Dispatcher? No?
<br>
<br>
This post is an introduction to Event Dispatcher, how to use it, and in the end, you'll be able to cover 90 % use cases you'll ever need.</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="what-is-the-main-purpose-of-event-dispatcher">What is the Main Purpose of Event Dispatcher?</h2>
<ul>
<li><strong>Extend an application</strong> in a certain place <strong>without putting any code right there</strong>.</li>
</ul>
<p><br></p>
<p>This way, you can extend 3rd party packages without rewriting them. And also allow other users to reach your code without even touching it.</p>
<p>Not sure how that looks? You will - at the end of this article.</p>
<h3 id="event-dispatcher">Event Dispatcher</h3>
<p><strong>This is the brain</strong>. It stores all subscribers and calls events when you need to.</p>
<h3 id="event">Event</h3>
<p><strong>This is the name of a place</strong>. When something has happened in the application: <em>order is sent</em>, or <em>user is deleted</em>.</p>
<h3 id="event-subscriber">Event Subscriber</h3>
<p>This is <strong>the action that happens when</strong> we come to a specific event. When an order is sent (= Event), <em>send me a confirmation SMS</em> (= Event Subscriber). And <em>check that all the ordered products are on stock</em>.</p>
<p><strong>1 event can invoke MORE Event Subscribers</strong>.</p>
<h2 id="create-first-subscriber-in-3-steps">Create First Subscriber in 3 Steps</h2>
<h3 id="1-install-via-composer">1. Install via Composer</h3>
<pre><code class="language-bash">composer require symfony/event-dispatcher</code></pre>
<h3 id="2-create-event-dispatcher">2. Create Event Dispatcher</h3>
<pre><code class="language-php">// index.php
require_once __DIR__ . '/vendor/autoload.php';

// 1. create the Dispatcher
$eventDispatcher = new Symfony\Component\EventDispatcher\EventDispatcher;

// 2. some event happend, we dispatch it
$eventDispatcher-&gt;dispatch('youtube.newVideoPublished'); // oh: event is just a string</code></pre>
<p>Try it:</p>
<pre><code class="language-bash">php index.php</code></pre>
<p>Wow! Nothing happened...</p>
<p>That's ok because there is no Subscriber. So let's...</p>
<h3 id="3-create-and-register-subscriber">3. Create and Register Subscriber</h3>
<pre><code class="language-php">use Symfony\Component\EventDispatcher\EventSubscriberInterface;

final class NotifyMeOnVideoPublishedEventSubscriber implements EventSubscriberInterface
{
    public bool $isUserNotified = false;

    public static function getSubscribedEvents(): array
    {
        // in format ['event name' =&gt; 'public function name that will be called']
        return ['youtube.newVideoPublished' =&gt; 'notifyUserAboutVideo'];
    }

    public function notifyUserAboutVideo()
    {
        // some logic to send notification
        $this-&gt;isUserNotified = true;
    }
}</code></pre>
<p>Let the Dispatcher know about the Subscriber.</p>
<pre><code class="language-php">$eventDispatcher = new Symfony\Component\EventDispatcher\EventDispatcher;

$eventSubscriber = new NotifyMeOnVideoPublishedEventSubscriber;
$eventDispatcher-&gt;addSubscriber($eventSubscriber);

// nothing happened, default value
var_dump($eventSubscriber-&gt;isUserNotified);
// false

// this calls our Subscriber
$eventDispatcher-&gt;dispatch('youtube.newVideoPublished');

// now it's changed
var_dump($eventSubscriber-&gt;isUserNotified);
// true</code></pre>
<p>Run the code again from command line:</p>
<pre><code class="language-bash">$ php index.php
int(0)
int(1)</code></pre>
<p>And now you understand EventDispatcher. At least in 90 % use cases.</p>
<hr />
<p>Still on? Let's get advanced.</p>
<p>What if we need to get the name of the Youtuber into the Subscriber?</p>
<h2 id="event-objects-to-the-rescue">Event Objects to the Rescue!</h2>
<p>The Event objects are basically <a href="http://richardmiller.co.uk/2014/11/06/value-objects">Value Objects</a>. Pass a value in the constructor and get it with getter.</p>
<h3 id="1-create-an-event-object">1. Create an Event Object</h3>
<pre><code class="language-php">use Symfony\Component\EventDispatcher\Event;

final class YoutuberNameEvent extends Event
{
    private string $youtuberName;

    public function __construct(string $youtuberName)
    {
        $this-&gt;youtuberName = $youtuberName;
    }

    public function getYoutuberName(): string
    {
        return $this-&gt;youtuberName;
    }
}</code></pre>
<h3 id="2-use-event-object-in-event-subscriber">2. Use Event Object in Event Subscriber</h3>
<pre><code class="language-php">use Symfony\Component\EventDispatcher\EventSubscriberInterface;

final class NotifyMeOnVideoPublishedEventSubscriber implements EventSubscriberInterface
{
    public static function getSubscribedEvents(): array
    {
        return ['youtube.newVideoPublished' =&gt; 'notifyUserAboutVideo'];
    }

    // Event Object is passed as method argument
    public function notifyUserAboutVideo(YoutuberNameEvent $youtuberNameEvent)
    {
        var_dump($youtuberNameEvent-&gt;getYoutuberName());
    }
}</code></pre>
<h3 id="3-create-an-object-and-dispatch-it">3. Create an Object and Dispatch It</h3>
<pre><code class="language-php">$youtuberNameEvent = new YoutuberNameEvent('Jirka Král');

$eventDispatcher-&gt;dispatch($youtuberNameEvent);</code></pre>
<p>And here is the result:</p>
<pre><code class="language-bash">$ php index.php
string('Jirka Král')</code></pre>
<h2 id="we-are-1-step-further-now">We Are 1 Step Further Now</h2>
<p>You can now:</p>
<ul>
<li>understand basic Event workflow</li>
<li>know what EventDispatcher and EventSubscriber are for</li>
<li>and know-how to pass parameters via the Event object</li>
</ul>
<h3 id="where-to-go-next">Where to go next?</h3>
<p>Still hungry for knowledge? Check <a href="http://symfony.com/doc/current/components/event_dispatcher.html">Symfony documentation</a> then.</p>
<p>But remember: <strong>practice is the best teacher</strong>.</p>
<p><br><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/08/05/standalone-symfony-event-dispatcher-from-the-scratch</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 05 Aug 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-06-01UTC00:00:000</updated>
                    <atom:updated>Mon, 01 Jun 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Mon, 01 Jun 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/08/05/standalone-symfony-event-dispatcher-from-the-scratch#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How we Completed Thousands of Missing @var Annotations in a Day ]]></title>
                <link>https://tomasvotruba.com/blog/2019/07/29/how-we-completed-thousands-of-missing-var-annotations-in-a-day</link>
                <description><![CDATA[ <p>I'm currently working as Rector consultant for <a href="https://spaceflow.io/en">Spaceflow</a>, Prague-based rising startup with very nice codebase. One of the pre-requisites for Rector is to have code that static analyser can work with. PHPStan that Rector uses depends on <code>@var</code> annotations and not every property had that. Well... <strong>over 2500 of them</strong>.
<br><br>
I'll show you how we completed them without any manual change of the code and how you can do the same... today.</p> ]]></description>
                <content:encoded><![CDATA[ <p>This post has 2 parts:</p>
<ul>
<li>1st is about how we use other parts of class to infer <code>@var</code> types of used properties - <strong>good for analytical thinking and pattern-algorithms</strong></li>
<li>2nd is about <a href="#do-it-yourself">how to do it yourself</a> - <strong>good for your project</strong></li>
</ul>
<p><br></p>
<p>The latter part increased the <strong><code>@var</code> annotation count from 1790 to 4418</strong>.</p>
<p>Here you can see the whole process in real-time:</p>
<img src="/assets/images/posts/2019/var/rector-final-optimized.gif" alt="How the ECS + Rector change 2500+ missing `@var` annotations" class="img-thumbnail">
<p><br></p>
<p>So what will you do when you see property like this?</p>
<pre><code class="language-php">&lt;?php

class ProductController
{
    private $productRepository;
}</code></pre>
<h3 id="1-from-constructor-injection-assign">1. From Constructor Injection Assign</h3>
<p>This is the most common case in most projects:</p>
<pre><code class="language-php">&lt;?php

class ProductController
{
    private $productRepository;

    public function __construct(ProductRepository $productRepository)
    {
        // ah, it's a "ProductRepository"
        $this-&gt;productRepository = $productRepository;
    }
}</code></pre>
<h3 id="2-from-code-setup-code-assign-in-tests">2. From <code>setUp</code> Assign in Tests</h3>
<p>The next biggest group of missing <code>@var</code> annotations was in tests. Instead of <code>__construct</code> we have<code>setUp</code>:</p>
<pre><code class="language-php">&lt;?php

class BuilderTest extends TestCase
{
    private $factory;

    protected function setUp()
    {
        // ah, it's a "Builder"
        $this-&gt;factory = new Builder;
    }
}</code></pre>
<h3 id="3-from-assign-in-constructor">3. From Assign in Constructor</h3>
<p>Sometimes constructor is for setting default values:</p>
<pre><code class="language-php">&lt;?php

class HomeController
{
    private $maxNumberOfGirlfriends;

    public function __construct()
    {
        // ah, it's an "int"
        $this-&gt;maxNumberOfGirlfriends = 1;
    }
}</code></pre>
<p>So far quite simple, right? 3 files are ok, but imagine doing this for 2500+ properties 🧠🤯</p>
<h3 id="4-from-setters-and-getters">4. From Setters and Getters</h3>
<p>Some object don't have constructor injection, or are missing the information there, e.g.:</p>
<pre><code class="language-php">&lt;?php

class Product
{
    private $name;

    public function __construct($name)
    {
         $this-&gt;name = $name;
    }
}</code></pre>
<p>How can we know, what is <code>$name</code>? Well, we don't. Statical analysis can't help here, we can only guess and maybe crash the production code. To solve cases like this <strong>we need dynamical analysis</strong> - data are much better and solid than &quot;probability guessing&quot; of static analysis. Don't worry, I'll write about it in the future with a case study.</p>
<p>But what about this code:</p>
<pre><code class="language-php">&lt;?php

class Product
{
    private $name;

    public function __construct($name)
    {
         $this-&gt;name = $name;
    }

    public function getName(): string
    {
        // now we know it's a "string"
        return $this-&gt;name;
    }
}</code></pre>
<p>Although it could be also non-string value:</p>
<pre><code class="language-php">&lt;?php

$product = new Product(5); // this passes without error</code></pre>
<p>But the working code <code>getName(): string</code> says <strong>it must be <code>string</code></strong>, so we can rely on it.</p>
<p>Also, this is just <code>@var</code> annotation not <a href="/blog/2018/11/15/how-to-get-php-74-typed-properties-to-your-code-in-few-seconds/">typed properties</a>, so the change cannot break anything.</p>
<h3 id="5-from-nullables">5. From Nullables</h3>
<p>Let's take this one step further. Also, let's be more realistic - there are barely any type declarations (PHP 7.0+) out there, so we have to take annotations into account:</p>
<pre><code class="language-php">&lt;?php

class Product
{
    private $name;

    /**
     * @param string $name
     */
    public function __construct($name = null)
    {
         $this-&gt;name = $name;
    }

    /**
     * @param $name
     */
    public function setName($name)
    {
        $this-&gt;name = $name;
    }

    /**
     * @return string
     */
    public function getName()
    {
        return $this-&gt;name;
    }
}</code></pre>
<p>What types can be in <code>$name</code>?</p>
<p>There is a type <code>string</code> everywhere, so probably <code>string</code>. But what happens in this case?</p>
<pre><code class="language-php">&lt;?php

$product = new Product();</code></pre>
<p>The <code>$name</code> will be actually <code>null</code>. So this is final correct code change:</p>
<pre><code class="language-diff"> &lt;?php

 class Product
 {
+     /**
+      * @var string|null
+      */
      private $name;
 }</code></pre>
<h3 id="6-from-default-value">6. From Default Value</h3>
<p>Before we get into Doctrine entities, let's get relaxed with a simple case:</p>
<pre><code class="language-php">&lt;?php

class Victim
{
     private $name = 'Tomas';

     public function getName()
     {
         return $this-&gt;name;
     }
}</code></pre>
<p>I don't have to tell you the <code>$name</code> property is always <code>string</code>.</p>
<h3 id="7-from-all-the-other-assigns">7. From all the Other Assigns</h3>
<p>What if we have no constructor, no getters, no setters, no default values... are we lost?</p>
<p>This actually happens more often than you think. Take this as just an example, in reality it could be much better, but is often much worse:</p>
<pre><code class="language-php">&lt;?php

class ProductController
{
    private $activeProduct;

    /**
     * @var ProductRepository
     */
    private $productRepository;

    public function default($id = null)
    {
        if ($id) {
            $this-&gt;activeProduct = $this-&gt;productRepository-&gt;get($id);
        } else {
            $this-&gt;activeProduct = $this-&gt;productRepository-&gt;getMainProduct();
        }

        // ...
    }
}</code></pre>
<p>This is hell to do manually. Not in 5 lines-long method, but in 30, 60 or even 100 lines in one method (don't forget you have to deliver feature and don't have paid time to play with stupid useless <code>@var</code> annotation).</p>
<p>The process has just 2 step:</p>
<ul>
<li>go through all <code>$this-&gt;activeProduct = X</code></li>
<li>resolve type for the <code>X</code> expression</li>
</ul>
<p>And that's it:</p>
<pre><code class="language-diff"> &lt;?php

 class ProductController
 {
+    /**
+     * @var Product
+     */
     private $activeProduct;

     // ...
 }</code></pre>
<p>We could argue if the <code>$activeProduct</code> could be also <code>null</code>. It can, but in our case base it never was. But if you find such a case that is invalid for your code, <a href="https://github.com/rectorphp/rector/issues/new?template=1_Bug_report.md">please report an issue</a> to improve this Rector rule.</p>
<h3 id="8-from-doctrine-column-annotations">8. From Doctrine Column Annotations</h3>
<p>Missing Doctrine annotations are hard to spot, because there is always <em>some</em> annotation. Just not the one we need:</p>
<pre><code class="language-php">&lt;?php

use Doctrine\ORM\Mapping as ORM;

/**
 * @ORM\Entity
 */
class Product
{
    /**
     * @ORM\Column(type="text", nullable=true)
     */
    private $content;
}</code></pre>
<p>Pretty easy, right?</p>
<pre><code class="language-diff"> /**
  * @ORM\Column(type="text", nullable=true)
+ * @var text|null
  */
  private $content;</code></pre>
<p>Ups, not so fast. Database types and PHP scalar types are not 1:1 compatible. To pick a few: <em>longblob</em>, <em>decimal</em>, <em>set</em>, <em>time</em> or <em>year</em> (mini-quiz: <code>int</code> or <code>DateTimeInterface</code>)?</p>
<p><code>string</code> is the correct choice here:</p>
<pre><code class="language-diff"> /**
  * @ORM\Column(type="text", nullable=true)
+ * @var string|null
  */
  private $content;</code></pre>
<h3 id="9-from-doctrine-relation-annotations">9. From Doctrine Relation Annotations</h3>
<p>Let's finish with the most complex case, yet brutally common. What do we mean by Doctrine Relation annotations?</p>
<pre><code class="language-php">&lt;?php

class Product
{
    /**
     * @ORM\ManyToMany(targetEntity="App\Entity\Storage")
     */
    private $storage;

    /**
     * @ORM\ManyToOne(targetEntity="App\Entity\Category", inversedBy="products")
     * @ORM\JoinColumn(name="category_id", referencedColumnName="id", nullable=true)
     */
    private $category;
}</code></pre>
<p>The docblock looks full and rich for useful content, so it's hard to spot the missing <code>@var</code> in there.</p>
<p>You probably know, that <code>OneToMany</code> and <code>ManyToMany</code> are not just an array of objects, but also <code>Doctrine\Common\Collections\Collection</code>.</p>
<p>So what <code>@var</code> we'd add here?</p>
<pre><code class="language-diff"> &lt;?php

 class Product
 {
     /**
      * @ORM\ManyToMany(targetEntity="App\Entity\Storage")
+     * @var \App\Entity\Storage[]|\Doctrine\Common\Collections\Collection
      */
     private $storage;

     /**
      * @ORM\ManyToOne(targetEntity="App\Entity\Category", inversedBy="products")
      * @ORM\JoinColumn(name="category_id", referencedColumnName="id", nullable=true)
+     * @var \App\Entity\Category|null
      */
     private $category;
 }</code></pre>
<p>That's it! Did you find any more cases that we forgot? Share with us in the comments.</p>
<p><br></p>
<p>Now the 2nd practical part - <strong>your project</strong> ↓</p>
<h2 id="do-it-yourself">Do It Yourself</h2>
<p>All above is not limited just to our project. You can use it too!</p>
<p>I'll guide you from step zero to final merge of pull-request, <strong>so the gif will not be just a picture, but a real change in your project</strong>.</p>
<p><strong>Install Rector + ECS</strong></p>
<pre><code class="language-bash">composer require rector/rector --dev
composer require symplify/easy-coding-standard --dev
composer require slevomat/coding-standard --dev</code></pre>
<p><strong>Run ECS to check missing <code>@var</code> annotations at properties</strong></p>
<pre><code class="language-php">&lt;?php

// ecs.php

declare(strict_types=1);

use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
use Symplify\EasyCodingStandard\Configuration\Option;

return static function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();
    // every property should have @var annotation
    $services-&gt;set(SlevomatCodingStandard\Sniffs\TypeHints\TypeHintDeclarationSniff::class);

    $parameters = $containerConfigurator-&gt;parameters();
    $parameters-&gt;set(Option::SKIP, [
        //  this part is needed, because `TypeHintDeclarationSniff` is actually mix of 7 rules we don't need
        // (they also delete code, so be sure to have this section here)
        'SlevomatCodingStandard\Sniffs\TypeHints\TypeHintDeclarationSniff.UselessDocComment' =&gt; null,
        'SlevomatCodingStandard\Sniffs\TypeHints\TypeHintDeclarationSniff.MissingTraversablePropertyTypeHintSpecification' =&gt; null,
        'SlevomatCodingStandard\Sniffs\TypeHints\TypeHintDeclarationSniff.MissingTraversableReturnTypeHintSpecification' =&gt; null,
        'SlevomatCodingStandard\Sniffs\TypeHints\TypeHintDeclarationSniff.MissingTraversableParameterTypeHintSpecification' =&gt; null,
        'SlevomatCodingStandard\Sniffs\TypeHints\TypeHintDeclarationSniff.MissingParameterTypeHint' =&gt; null,
        'SlevomatCodingStandard\Sniffs\TypeHints\TypeHintDeclarationSniff.MissingReturnTypeHint' =&gt; null,
    ]);
};</code></pre>
<p>Run coding standard on your code:</p>
<pre><code class="language-bash">vendor/bin/ecs check src tests</code></pre>
<p>↓</p>
<p>2 500 errors? Not a problem.</p>
<p><br></p>
<p><strong>1. Configure Rector</strong></p>
<pre><code class="language-php">&lt;?php

// rector.php

declare(strict_types=1);

use Rector\TypeDeclaration\Rector\Property\PropertyTypeDeclarationRector;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();
    $services-&gt;set(PropertyTypeDeclarationRector::class);
};</code></pre>
<p><strong>2. Run Rector to fix your code</strong></p>
<pre><code class="language-bash">vendor/bin/rector process src tests</code></pre>
<p>Then run coding standard again, to see how useful Rector was:</p>
<pre><code class="language-bash">vendor/bin/ecs check src tests</code></pre>
<ul>
<li>
<p>0 errors? Congrats and enjoy your vacation :)</p>
</li>
<li>
<p>1+ errors? Create an <a href="https://github.com/rectorphp/rector/issues/new?template=1_Bug_report.md">issue with missed PHP code snippet</a>. We'll look at it and add support for it to Rector if possible.</p>
</li>
</ul>
<p><br></p>
<blockquote class="blockquote">
    I hope you'll find this useful as we did!
</blockquote>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/07/29/how-we-completed-thousands-of-missing-var-annotations-in-a-day</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 29 Jul 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-08-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Aug 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/07/29/how-we-completed-thousands-of-missing-var-annotations-in-a-day#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Convert Listeners to Subscribers and Reduce your Configs ]]></title>
                <link>https://tomasvotruba.com/blog/2019/07/22/how-to-convert-listeners-to-subscribers-and-reduce-your-configs</link>
                <description><![CDATA[ <p>I wrote <a href="/blog/2019/05/16/don-t-ever-use-listeners/">Don't Ever use Symfony Listeners</a> 2 months ago (if you missed it, be sure to read it to better understand this 2nd part). It got many constructive comments, mostly focused on particular standalone sentences without context.
<br>
<br>
To my surprise, <strong>none of the comments shown that listener beats subscriber</strong>.<br>
But what can you do, if you'd like to try subscribers, but currently have over 100 listeners in your application?</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="2-ways-to-do-one-thing-wtf-why-tf">2 Ways to do One Thing? = WTF! WHY TF?</h2>
<p>Just a reminder, how hurtful is to teach people <strong>2 very similar ways to do one thing</strong>.</p>
<p>Google shows that people are confused since 2012, wow!</p>
<img src="/assets/images/posts/2019/listen-to-sub/github.png" class="img-thumbnail">
<img src="/assets/images/posts/2019/listen-to-sub/quote.png" class="img-thumbnail">
<img src="/assets/images/posts/2019/listen-to-sub/so.png" class="img-thumbnail">
<p>And this is not related only to big patterns as subscriber or listener. We do such decisions every day - while we code a new feature when we add a new package to <code>composer.json</code> when we integrate 4th API to verify payments.</p>
<p>Next time you'll be standing before 2 options, remember <a href="/blog/2019/07/01/5-workflow-tips-every-php-developer-should-know/#5-use-elementary-maths-to-become-master">the least common denominator</a> and <strong>make your code more durable</strong> in time.</p>
<h2 id="why-should-we-re-think-listeners-in-our-code">Why Should we Re-Think Listeners in our Code?</h2>
<p>If the readable and clear code is not good enough reason for you and you still think
you should stick with listeners at all cost, maybe the following steps will convince you.</p>
<p>Symfony 3.3 introduced <a href="/blog/2017/05/07/how-to-refactor-to-new-dependency-injection-features-in-symfony-3-3/">PSR-4 Autodiscovery</a> of services. In short, it means we don't have register services manually, if they respect PSR-4 (class name ~= file location):</p>
<pre><code class="language-diff"> services:
-    App\Controller\CoffeeController: ~
-    App\Controller\WifiController: ~
-    App\Controller\PlaneController: ~
-    # thousands more...

+    App\Controller\:
+        resource: '../src/Controller'</code></pre>
<h2 id="how-to-migrate-listeners-to-subscribers">How to Migrate Listeners to Subscribers?</h2>
<p>It doesn't apply only to controllers, but to all services, like Event Subscribers:</p>
<pre><code class="language-diff"> services:
     _defaults:
         # this helps load event subscribers to EventDistpatcher
         autoconfigure: true

-    App\EventSubscriber\CoffeeEventSubscriber: ~
-    App\EventSubscriber\WifiEventSubscriber: ~
-    App\EventSubscriber\PlaneEventSubscriber: ~
-    # thousands more...

+    App\EventSubscriber\:
+        resource: '../src/EventSubscriber'</code></pre>
<p>Next time we create an event subscriber class, we don't have to <a href="/blog/2019/02/14/why-config-coding-sucks/">code in config</a> anymore <em class="fas fa-fw fa-lg fa-check text-success"></em></p>
<p>We've <a href="/blog/2018/05/21/is-your-code-readable-by-humans-cognitive-complexity-tells-you/">reduced cognitive load</a> → code is easier to work with → hiring is faster → we can focus on business and feature value.</p>
<h3 id="how-can-we-reduce-configs-with-listeners">How can we Reduce configs with Listeners?</h3>
<pre><code class="language-yaml">services:
    App\EventListener\WifiEventListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception }
            - { name: kernel.event_listener, event: kernel.view }</code></pre>
<p>Well, what about...</p>
<pre><code class="language-yaml">services:
    App\EventListener\:
        resource: '../src/EventListener'</code></pre>
<p>Hm, how can be the listener called when it has now an information event?</p>
<p>That's one of legacy <a href="/blog/2017/02/12/drop-all-service-tags-in-your-nette-and-symfony-applications/">code smells of tags</a>.</p>
<p><strong>We can't reduce configs</strong>. We have to grow about configs together with code till the end of times <em class="fas fa-fw fa-2x fa-times text-danger fa-lg"></em></p>
<p><br></p>
<p>If <strong>you're paid or motivated by productivity</strong> like me and not by produced lines of code or wasted time with no output, you care about this.</p>
<h2 id="automated-instant-migration">Automated Instant Migration</h2>
<p>It's very nice use case for <a href="/blog/2019/04/15/pattern-refactoring/">pattern refactoring</a>, from A - <em>Listener</em> to B - <em>Event Subscriber</em>.</p>
<h3 id="1-define-patterns">1. Define Patterns</h3>
<p>A. <strong>Listener</strong></p>
<ul>
<li>it's a naked PHP class with a public method</li>
<li>event information (event, method, priority) is in a config</li>
</ul>
<p>B. <strong>Event Subscriber</strong></p>
<ul>
<li>it's a PHP class that implements <code>Symfony\Component\EventDispatcher\EventSubscriberInterface</code></li>
<li>event information is in a static method <code>getSubscribedEvents</code> inside the class</li>
<li>it is auto-discovered by PSR-4</li>
</ul>
<h3 id="2-pattern-change-in-code">2. Pattern Change In Code?</h3>
<pre><code class="language-php">&lt;?php

class SomeListener
{
     public function methodToBeCalled()
     {
     }
}</code></pre>
<pre><code class="language-yaml"># in config.yaml
services:
    SomeListener:
        tags:
            - { name: kernel.event_listener, event: 'some_event', method: 'methodToBeCalled' }</code></pre>
<p>↓</p>
<pre><code class="language-php">&lt;?php
use Symfony\Component\EventDispatcher\EventSubscriberInterface;

class SomeEventSubscriber implements EventSubscriberInterface
{
     /**
      * @return mixed[]
      */
     public static function getSubscribedEvents(): array
     {
         return ['some_event' =&gt; 'methodToBeCalled'];
     }

     public function methodToBeCalled()
     {
     }
}</code></pre>
<p>Without any config.</p>
<h3 id="3-instant-upgrade-with-rector">3. Instant Upgrade with Rector</h3>
<p>The latest <a href="https://twitter.com/rectorphp/status/1152862370630459393">Rector v0.5.8 is shipped</a> with rule exactly for this kind of migration.</p>
<p>Just register the rule in your <code>rector.php</code> config to start migration:</p>
<pre><code class="language-php">&lt;?php

// rector.php

declare(strict_types=1);

use Rector\SymfonyCodeQuality\Rector\Class_\EventListenerToEventSubscriberRector;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();
    $services-&gt;set(EventListenerToEventSubscriberRector::class);

    // optional, when something fails
    $parameters = $containerConfigurator-&gt;parameters();
    // use explicit Kernel, if not discovered by Rector
    $parameters-&gt;set('kernel_class', 'App\Kernel');
    // use explicit environment, if not found by Rector
    $parameters-&gt;set('kernel_environment', 'test');
};

Run it:

```bash
vendor/bin/rector process app src</code></pre>
<p>And now all the listeners were migrated to event subscribers <em class="fas fa-fw fa-lg fa-check text-success"></em></p>
<h3 id="4-update-configs">4. Update Configs</h3>
<p>In the end, we have to remove all listeners + metadata from configs and add single autodiscovery for our EventSubscribers:</p>
<pre><code class="language-diff">services:
-    App\EventListener\WifiEventListener:
-        tags:
-            - { name: kernel.event_listener, event: kernel.exception }
-            - { name: kernel.event_listener, event: kernel.view }

+    _defaults:
+        autoconfigure: true
+
+    App\EventSubscriber\:
+        resource: '../src/EventSubscriber'</code></pre>
<p>That's it!</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/07/22/how-to-convert-listeners-to-subscribers-and-reduce-your-configs</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 22 Jul 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-08-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Aug 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/07/22/how-to-convert-listeners-to-subscribers-and-reduce-your-configs#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Why use One-Time Migration Scripts ]]></title>
                <link>https://tomasvotruba.com/blog/2019/07/15/why-use-one-time-migration-scripts</link>
                <description><![CDATA[ <p>School system taught me to despise old books and consider them outdated, rather about stories than knowledge. I wanted to prove I'm right, so I've read <a href="https://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X">Pragmatic Programmer</a> from 1999 and <em>you won't believe what happened</em>...</p> ]]></description>
                <content:encoded><![CDATA[ <p>You already probably know about instant refactoring and <a href="/blog/2019/04/15/pattern-refactoring/">pattern refactoring</a> (I'm deprecating refactoring as you know it) that's possible thanks to <a href="https://github.com/rectorphp/rector">Rector</a>. But they require a certain knowledge of code and it's patterns.</p>
<h2 id="instant-refactoring-today">Instant Refactoring Today?</h2>
<p>I was wondering, <strong>how can you use instant refactoring at your work today with what you already know?</strong> So did <em>Andrew Hunt</em> and <em>David Thomas</em>, authors of <a href="https://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X">Pragmatic Programmer</a>.</p>
<p>They write about a migration script, that you <strong>write, use once and then delete it</strong>. Like a mandala-script :).
In the end, you only commit changed files, but no the script you've made for it.</p>
<h2 id="where-to-use-em-mandala-script-em">Where to use <em>Mandala-Script</em>?</h2>
<ul>
<li>move files from one directory to another</li>
<li>rename files from <code>*.yml</code> to <code>*.yaml</code></li>
<li>remove all trailing whitespaces</li>
<li>remove <code>@throw</code> annotations from the docblocks</li>
<li>update version of all <code>&lt;your-framework&gt;/*</code> in all <code>composer.json</code> from 3 to 4</li>
<li>generate <code>.env</code>, <code>docker-composer.yml</code> and <code>.gitlab-ci.yml</code> from a set of env variables</li>
<li>etc.</li>
</ul>
<p>Any script that:</p>
<ul>
<li>is related to <strong>many files</strong></li>
<li>or is done <strong>over and over again</strong></li>
<li>is <strong>more fun (effective)</strong> to write than to do manually</li>
<li>has the potential to be reused or extended in the future</li>
</ul>
<h3 id="it-s-good-for-business">It's Good for Business</h3>
<p>From a business point of view, it's very useful in cases, <strong>where it can be done wrong</strong>. We talk about configuration files like ENV and YAML. Usually, they have poor (= no) validation, so finding a bug is like reading a manual written all over the walls of your house about how to open door.</p>
<p>Just last month the <code>KEY=value</code> vs <code>KEY: value</code> lead to 4-5 hours wasted in my current work.</p>
<p><br></p>
<p>As you can see, the idea is very simple, so let's use it in a simple case.
I have prepared 2 related examples for you:</p>
<h2 id="1-migrate-code-app-config-code-to-code-config-code">1. Migrate <code>app/config</code> to <code>config</code></h2>
<p>In Symfony 4 the <a href="http://fabien.potencier.org/symfony4-directory-structure.html">base directory was changed</a>. We need to use new locations. In one project it's simple and better done manually. But we use monorepo and have  20+ <code>/packages/X/config</code> directories.</p>
<p>Let's code:</p>
<pre><code class="language-bash">composer require symfony/filesystem --dev
composer require symfony/finder --dev</code></pre>
<p><strong>Create <code>move_config_to_root.php</code> file</strong></p>
<pre><code class="language-php">&lt;?php

use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Finder\Finder;

require __DIR__ . '/vendor/autoload.php';

$filesystem = new Filesystem();

$finder = (new Finder())-&gt;directories()
    -&gt;in(__DIR__ . '/packages')
    -&gt;name('config')
    -&gt;notPath('App/config')
    -&gt;getIterator();

$configDirectories = iterator_to_array($finder);

foreach ($configDirectories as $configDirectory) {
    $oldPath = $configDirectory-&gt;getRealPath();
    $newPath = dirname($configDirectory-&gt;getRealPath(), 2) . DIRECTORY_SEPARATOR . 'config';

    if (!file_exists($oldPath)) {
        continue;
    }

    $filesystem-&gt;rename($oldPath, $newPath);
}</code></pre>
<p><strong>Run <code>move_config_to_root.php</code> file</strong></p>
<pre><code class="language-bash">php move_config_to_root.php</code></pre>
<p><strong>See result</strong></p>
<pre><code class="language-bash">git diff</code></pre>
<p>Have you missed a spot? Just reset with:</p>
<pre><code class="language-bash">git checkout .</code></pre>
<p>Improve <code>move_config_to_root.php</code> and re-run again:</p>
<pre><code class="language-bash">php move_config_to_root.php</code></pre>
<p>It took me around 5 iterations to make it right, but the script was ready in 10 minutes. As a bonus, we could re-use it to move <code>/templates</code>, <code>/translations</code> etc. as well <strong>for just 1 minute of extra work</strong>.</p>
<h2 id="2-update-code-resource-code-paths-in-code-services-yaml-code">2. Update <code>resource:</code> Paths in <code>services.yaml</code></h2>
<p>But since we moved config files one level up, we also need to <strong>update paths inside the files</strong>. How?
You can use <code>str_replace</code> or (like me) regular expressions.</p>
<pre><code class="language-bash">composer require nette/utils --dev</code></pre>
<p><strong>Create <code>update_resource_in_configs.php</code></strong></p>
<pre><code class="language-php">&lt;?php

use Nette\Utils\FileSystem;
use Nette\Utils\Strings;
use Symfony\Component\Finder\Finder;

require __DIR__ . '/vendor/autoload.php';

$finder = (new Finder())-&gt;files()
    -&gt;in(__DIR__ . '/packages')
    -&gt;name('services.yaml')
    -&gt;getIterator();

$configFiles = iterator_to_array($finder);

foreach ($configFiles as $configFile) {
    $fileContent = FileSystem::read($configFile-&gt;getRealPath());

    $movedResource = Strings::replace($fileContent, '#(resource:\s(\')?)\.\.#', '$1../src');

    FileSystem::write($configFile-&gt;getRealPath(), $movedResource);
}</code></pre>
<pre><code class="language-diff"> services:
     App\:
-        resource: ..
+        resource: ../src</code></pre>
<p>Again, it took us 3-4 iterations to cover all edge cases, but then it was ready and bullet-proof.</p>
<h2 id="start-small-then-take-it-to-the-next-level">Start Small, then Take it to the Next Level</h2>
<p><strong>If you want to get deeper into this thinking and find more inspiration, read the <em>Pragmatic Programmer</em> book</strong>. I personally found useful about 60 % of the content (compared to usual ~30 % in technical books), so <em class="fas fa-2x fa-thumbs-up text-success"></em>.</p>
<img src="/assets/images/posts/2019/one-time/pragmatic_programmer.jpg" class="img-thumbnail">
<p>I use this approach in Rector to create new rule + test in 1 file:</p>
<p>Just edit <code>create-rector.php</code> (see in <a href="https://github.com/rectorphp/rector/blob/master/create-rector.php.dist">Github repo</a>) and then run:</p>
<pre><code class="language-bash">bin/rector create</code></pre>
<p>It:</p>
<ul>
<li>creates a rule with a basic description</li>
<li>creates a test case</li>
<li>creates a test fixture</li>
<li>adds a rule to a set</li>
<li>adds a new namespace to <code>composer.json</code> PSR-4 if needed</li>
<li>dumps composer autoload if needed</li>
</ul>
<p>The sky is the limit, so fly high :)</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/07/15/why-use-one-time-migration-scripts</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 15 Jul 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-08-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Aug 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/07/15/why-use-one-time-migration-scripts#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ 7 Tips to Write Flawless Issue Reports on Github ]]></title>
                <link>https://tomasvotruba.com/blog/2019/07/08/7-tips-to-write-flawless-issue-report-on-github</link>
                <description><![CDATA[ <p>Reporting issue is important for both you and the maintainer of the project. It can be a private issue in your local Gitlab repository, but open-source issues on Github have a much higher volume (obviously).
<br><br>
Do you want to be clear to the maintainer, be understood and resolve your issue quickly?
Here is how to write.</p> ]]></description>
                <content:encoded><![CDATA[ <p><strong>Issue report is like any other text</strong> - it can be a piece of text you read and take nothing from or it can fun and rich for the information you really need, for e.g. a job advertisement. You can see:</p>
<ul>
<li>boring job ad with a description of the company and how revolutionary their idea about selling mushroom is</li>
<li>or an ad, that tells you how you can full-fill your full potential, using PHP 7.4, Symfony 4.4, with ready-made Docker tested on 10 new developers with a focus on the mutual friendship between business and clean code</li>
</ul>
<h2 id="why-do-you-need-to-write-better-issues">Why Do You Need to Write Better Issues?</h2>
<p>Do you think better issues is extra work on your side just to make maintainer happier? No!
<strong>You profit from it</strong>.</p>
<h3 id="what-do-you-gain-by-flawless-issue-report">What Do You Gain by Flawless Issue Report?</h3>
<ul>
<li>no further questions from the maintainers, just &quot;thanks&quot; → <strong>more free time (attention) for you</strong>, no need to think about the answers and reading their text</li>
<li>higher chance of fixing of your issue → <strong>you can enjoy the fix in 1-2 days</strong>, without waiting - unclear issues can take over 6 months to resolve, even if it's just missing '=' in the output</li>
<li>the maintainer will like you more because you're clear for them → <strong>your issues will get higher priority</strong> the longer and the better your write them</li>
<li>feature requests → after creating a streak of closed issues, <strong>your feature requests will be more likely accepted</strong></li>
</ul>
<h3 id="where-should-you-apply-it">Where Should You Apply it?</h3>
<p>Writing issue like this takes extra attention, thought and energy. It takes a few weeks to get used to it. <strong>So should you write flawless issues in every Github repository you work with?</strong> It would probably drain your energy and burn-out into falling back to just poor issue reports.</p>
<p>Personally, I'd <strong>focus only on few repositories that matter to me and that I plan to use in the future</strong>. The top 3 from top of my head right now would be Symfony, PHP Parser and EasyAdminBundle.</p>
<p>That way you won't burn out writing 10 issues mind-full issues to 10 different projects in a week and projects you love and use daily will grow in time - <em>win-win</em>.</p>
<p><br></p>
<p>Now you know <em>why</em> and <em>where</em>. I think you're ready for creating the very first <em>flawless issue</em>™:</p>
<img src="/assets/images/posts/2019/issues/new_issue.png" class="img-thumbnail">
<p>(The examples will be related to Rector, as I work with it the most lately).</p>
<h2 id="1-add-project-version">1. Add Project Version</h2>
<p>The version of the used project is very important. Maybe you use LTS version, maybe it's legacy already, maybe it's experimental version and it's expected to break. You don't care about this, but it will give maintainer the context of your issue.</p>
<p><q>I use Rector v0.5.7</q></p>
<p>How do you find this information quickly?</p>
<pre><code class="language-bash">composer show rector/rector | grep version
&gt; versions : * v0.5.7</code></pre>
<h3 id="even-better">Even Better</h3>
<p>This one is nice to have if you're into bleeding edge technologies:</p>
<p><q>I use Rector v0.5.7, and it's still broken on <code>dev-master</code></q></p>
<p>Test <code>dev-master</code> as well. Maybe this issue was reported before 2 days and is already fixed on <code>master</code>?
You don't have to read all the past issues - it's a waste of time (maybe there was just PR, or maybe just commit right to the <code>master</code>), just try it:</p>
<pre><code class="language-diff"> {
     "require": {
-        "rector/rector": "^0.5.7"
+        "rector/rector": "dev-master"
     },
+    "minimum-stability": "dev",
+    "prefer-stable": true
 }</code></pre>
<pre><code class="language-bash">composer update</code></pre>
<pre><code class="language-bash">// retry your command</code></pre>
<h2 id="2-what-happened-clear-exact-and-right-to-the-point">2. What Happened - Clear, Exact and Right To the Point</h2>
<ul>
<li><strike>&quot;I was trying to run on Rector on our codebase and it broke in hundreds of cases.&quot;</strike></li>
<li><strike>&quot;When I run Rector, it skips all the old PHP code that it should upgrade.&quot;</strike></li>
</ul>
<p>These reports have exactly 0 added information. By creating an &quot;issue&quot;, you've already told the maintainer it's broken.</p>
<p>What should you go for instead? Remove the ambiguous:</p>
<ul>
<li>&quot;Put the red apple to the 3rd shelf from the bottom.&quot;</li>
<li>&quot;Let's meet on Tuesday 3rd July at 17:00 on Vltavska square, here is the address http://...&quot;</li>
</ul>
<p>In an issue:</p>
<p><q>I run Rector on [this-code] and I got [this-exception] with [this-exception-message]</q></p>
<h2 id="3-code-over-text">3. Code over Text</h2>
<ul>
<li><strike>...our files</strike></li>
<li><strike>...our code-base</strike></li>
<li><strike>...1 PHP file with Factory with Guzzle that contains the connection to Twitter API</strike></li>
</ul>
<p>These reports could be replaced by black-box style &quot;...on something unknown&quot;. 0-value.</p>
<ul>
<li><q>On this code</q></li>
</ul>
<pre><code class="language-php">&lt;?php

use Guzzle\Client;

final class GuzzleFactory
{
     public function create()
     {
         return new Client([
             'key' =&gt; 'some_key'
         ]);
     }
}</code></pre>
<h2 id="4-highlight-what-you-can">4. Highlight What You Can</h2>
<p>Why do we use IDE? Why do traffic lights have colors? What does <span class="text-danger">red</span> in PHPUnit mean?</p>
<p><strong>Colors gives us meta-information</strong>, that is processed by other parts of the brain then reading is. That way we understand element with colors faster and easier:</p>
<pre><code class="language-php">echo "1" . 5 + 0x15;</code></pre>
<p>vs.</p>
<p>echo &quot;1&quot; . 5 + 0x15;</p>
<p>I'm not a dog so I fancy the 1st one.</p>
<p><br></p>
<p>In the most of Github issues you'll use <code>php</code> and <code>diff</code> syntax highligh:</p>
<p><span markdown=0></p>
<pre><code class="language-php">echo "Hi";</code></pre>
<p></span></p>
<p><span markdown=0></p>
<pre><code class="language-diff">-expected
+reality</code></pre>
<p></span></p>
<h2 id="4-the-smaller-the-better">4. The Smaller the Better</h2>
<p>&quot;What? I thought the more information you'll have, the easier is to fix it.&quot; This tip is counter-intuitive. The information is not about quantity, but quality.</p>
<p>The issue report should contain:</p>
<ul>
<li><strong>all the relevant information</strong></li>
<li><strong>0 of the irrelevant information</strong></li>
</ul>
<p>At first, it might be hard to figure out what's relevant for the maintainer of that particular project, but based on their feedback you can see it.</p>
<p>Let's look at the code of the previous example - this one has all the relevant information:</p>
<pre><code class="language-php">&lt;?php

use Guzzle\Client;

final class GuzzleFactory
{
     public function create()
     {
         return new Client([
             'key' =&gt; 'some_key'
         ]);
     }
}</code></pre>
<p>This one has duplicated of irrelevant information:</p>
<pre><code class="language-php">&lt;?php

use Guzzle\Client;

final class GuzzleFactory
{
     public function create()
     {
         return new Client([
             'key' =&gt; 'some_key',
             'another_key' =&gt; 'some_key',
         ]);
     }
}

final class FacebookFactory
{
     public function create()
     {
         return new FacebookClient([
             'key' =&gt; 'some_key',
             'another_key' =&gt; 'some_key',
         ]);
     }
}

final class TwitterFactory
{
   public function create()
   {
       return new TwitterClient([
           'key' =&gt; 'some_key',
           'another_key' =&gt; 'some_key',
       ]);
   }
}</code></pre>
<p>If all the code snippets produce the &quot;Factory return type cannot be resolved&quot; error, use just the first one.</p>
<p>(Hi <em>Honza</em> :D)</p>
<h2 id="5-what-did-you-do">5. What Did you Do?</h2>
<p>Now the maintainer knows:</p>
<ul>
<li>what do you use</li>
<li>what is the code causing it</li>
<li>what is the error message</li>
</ul>
<p><em class="fas fa-fw fa-lg fa-check text-success"></em> Great job! If all the issues were reported like this, the productivity in open-source will sky-rocket (and I mean &quot;Elon Musk&quot; sky-rocket).</p>
<p>The 1st questions that will pop-up in the maintainer's head are &quot;How did you do that?&quot;</p>
<ul>
<li>Did you run it from command line?</li>
<li>What exact command have you used?</li>
<li>Did you use Docker?</li>
<li>Do you use custom <code>rector.php</code> config? What's inside?</li>
<li>Is the error still there with no config?</li>
</ul>
<p>Again, think of <em>4. The smaller the better</em> tip while copy-pasting the <code>config</code>.</p>
<ul>
<li>Which of those 400 lines in the config are responsible for this error?</li>
<li>What combinations of rules and parameters are causing the error?</li>
</ul>
<p><q>I installed Rector as dev dependency to composer and run:</q></p>
<pre><code class="language-bash">vendor/bin/rector process src/SomeFile.php --config rector.php --dry-run --set symfony43</code></pre>
<p>Perfect!</p>
<h2 id="6-what-do-you-want">6. What do You Want?</h2>
<p>Now the maintainer has all the information about your code, your steps that lead to it and the configuration that caused it.</p>
<p>But <strong>what do you want</strong>?</p>
<ul>
<li>Do you expect the code to throw a better exception?</li>
<li>Are you ok with the behavior, just not sure if it's expected?</li>
<li>Do you want it to work a certain way?</li>
</ul>
<p>Here is the <code>diff</code> syntax becomes very useful:</p>
<pre><code class="language-diff">&lt;?php

-echo 1 + 5; // real
+echo 6; // expected</code></pre>
<p>Having comments is really great. Why?</p>
<pre><code class="language-diff">&lt;?php

-echo $value + $value2;
+echo $value+$value2;</code></pre>
<p>Which one is preferred?</p>
<h2 id="7-1-issue-1-issue">7. 1 Issue = 1 Issue</h2>
<p>Last but not least, <strong>1 issue report should talk about 1 issue</strong>. Imagine you go for a trip and you talk to your friend how to get there:</p>
<p>New issue - <em> traveling</em>:</p>
<ul>
<li>Let's take a train</li>
<li>We could take a bus, it's 50 € cheaper</li>
<li>But I'm not sure what to pack</li>
<li>Do you have a tent?</li>
<li>Ok, we'll take a bus</li>
</ul>
<p><em>issue is closed</em></p>
<ul>
<li>What are we gonna eat guys?</li>
<li>We could eat wursts all the time!</li>
</ul>
<p><br></p>
<p>Do you have 3 different (see tip #4 again) problems with your code? Create 3 different issues. Don't be afraid, you're not complaining too much.</p>
<p><strong>It's better to have 3 separated issue</strong>, that one is easy-pick, 2nd is a question and 3rd need a test case, that all these at once.</p>
<p><br></p>
<p>Now go out, try, fail and learn :)</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/07/08/7-tips-to-write-flawless-issue-report-on-github</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 08 Jul 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-08-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Aug 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/07/08/7-tips-to-write-flawless-issue-report-on-github#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ 5 Workflow Tips every PHP Developer Should Know ]]></title>
                <link>https://tomasvotruba.com/blog/2019/07/01/5-workflow-tips-every-php-developer-should-know</link>
                <description><![CDATA[ <p>I was surprised, how much of your attention got <a href="/blog/2019/02/25/5-tips-to-effective-work-with-github-repository/">5 Tips to Effective Work with Github Repository</a> post.
<br><br>
So <a href="https://github.com/TomasVotruba/tomasvotruba.com/issues/226">I started to collect tips</a> I use on training and mentoring that I don't even notice, but others find fascinating. Here is 5 of them.</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="1-find-any-file-in-github-repository-within-a-second">1. Find any file in Github Repository within a Second</h2>
<p>Github repository is the best documentation, if <a href="/blog/2019/06/17/how-to-upgrade-meetup-com-api-to-oauth2-with-guzzle/">the code is written mindfully</a>.</p>
<p>E.g. you use Rector and you're curious about its guts. The main bin command is &quot;vendor/bin/rector process&quot;, so you're interested in <code>ProcessCommand</code>. What's inside?</p>
<p>You go to the Github repository:</p>
<ul>
<li>look for &quot;process command&quot; or &quot;ProcessCommand&quot;</li>
<li>find 150 irrelevant results</li>
<li>...and close it 😠</li>
</ul>
<p>Great documentation is useless without the even better search.</p>
<p><br></p>
<p><strong>Good news! Github is closer to PHPStorm than you think:</strong></p>
<img src="/assets/images/posts/2019/php_workflow_tips/hit_t.gif" class="img-thumbnail" style="max-width:35em">
<p><strong>Just press <span class="btn btn-light btn-outline-dark">t</span> on your keyboard and &quot;TypeYourClass&quot;.</strong></p>
<div class="fa-2x mt-3">👍</div>
<h2 id="2-get-rid-of-phing">2. Get rid of Phing</h2>
<p>All Phing scripts I've seen look like someone programmed their own Arduino to open glass with water.
So I migrate them to composer scripts, so people can actually use them without having an MIT degree.</p>
<p>Martin already wrote about it in <a href="https://blog.martinhujer.cz/have-you-tried-composer-scripts">Have you tried Composer Scripts? You may not need Phing</a></p>
<div class="fa-2x mt-3">👍</div>
<h2 id="3-enable-colors-in-composer-scripts">3. Enable Colors in Composer Scripts</h2>
<p>Let's say you already use composer scripts:</p>
<pre><code class="language-json">{
    "scripts": {
        "fix-cs": "vendor/bin/ecs check bin src tests --fix"
    }
}</code></pre>
<p>Great job! Now all you need to do is run it:</p>
<pre><code class="language-bash">composer fix-cs</code></pre>
<p>The scripts are running... Now imagine I'll come to you and slap you in the face for failing build <code>master</code> branch (that's just hypothetical case, we all know <code>master</code> can never fail, right?).</p>
<p>Your head turns around and you grab a part of the script output. Now...</p>
<p><strong>&quot;Was it <span class="text-danger">red</span> or <span class="text-success">green</span>?&quot;</strong></p>
<p>The output is hard to read quickly without <a href="https://www.amazon.com/Design-Everyday-Things-Donald-Norman/dp/1452654123">color patterns</a>.</p>
<p>How to fix this? Just add <code>--ansi</code>:</p>
<pre><code class="language-diff"> {
     "scripts": {
-        "fix-cs": "vendor/bin/ecs check bin src tests --fix"
+        "fix-cs": "vendor/bin/ecs check bin src tests --fix --ansi"
    }
}</code></pre>
<div class="fa-2x mt-3 mb-4">👍</div>
<p>Thanks for this tip to <a href="https://janmikes.cz">Jan Mikes</a> ❤️️.</p>
<p><br></p>
<p><em>For more composer tips, check <a href="https://blog.martinhujer.cz/17-tips-for-using-composer-efficiently">24 Tips for Using Composer Efficiently</a>.</em></p>
<h2 id="4-get-rid-of-phpmd">4. Get rid of PHPMD</h2>
<p>You might know PHPMD as <em>PHP Mess Detector</em>. But not many people know, the package is dead:</p>
<img src="/assets/images/posts/2019/php_workflow_tips/barely.png" class="img-thumbnail">
<p>Dead packages are ok if there is no alternative that is continuously evolving. If there is, by staying at the same place, <a href="/blog/2019/03/11/why-we-migrated-from-nette-to-symfony-in-3-weeks-part-3/">you're shooting your business and development speed to the leg</a>.</p>
<p>That's this case. PHPMD features are 99 % compatible with PHP Code Sniffer and PHP CS Fixer rules:</p>
<pre><code class="language-diff">-PHPMD rule
+PHP_CodeSniffer alternative</code></pre>
<p>E.g.:</p>
<pre><code class="language-diff">-rulesets/codesize.xml/CyclomaticComplexity
+Generic.Metrics.CyclomaticComplexity

-rulesets/controversial.xml/CamelCaseMethodName
+PSR1.Methods.CamelCapsMethodName

-rulesets/design.xml/GotoStatement
+Generic.PHP.DiscourageGoto</code></pre>
<p>I've migrated over 5 of these recently and you can see its a relief in developers eyes - they either have less code to maintain or (more often) they've finally got rid of that &quot;black hole&quot; code that no-one knew what it does.</p>
<p><strong>How to migrate?</strong></p>
<p>Just look at <a href="https://github.com/shopsys/shopsys/search?p=2&amp;q=phpmd&amp;type=Commits">PHPMD migration to PHP_CodeSniffer in Shopsys repository</a>.</p>
<div class="fa-2x mt-3">👍</div>
<h2 id="5-use-elementary-maths-to-become-master">5. Use Elementary Maths to become Master</h2>
<p>Tips 2 and 4 have actually similar principals, <a href="/blog/2019/04/15/pattern-refactoring/">a pattern</a>. If you learn to think in patterns, <strong>you can merge 10 specific rules to 1 pattern</strong> and <a href="/blog/2018/09/13/your-brain-is-your-garden/">use that extra brain space for something else</a>.</p>
<h3 id="least-common-denominator">Least Common Denominator</h3>
<p>I've learned this principle in 5th grade, it has fascinated me ever since. It fascinates me even more, how they are used to create effective code - easy to write, read, maintain and doing what it should do.</p>
<p><strong>What is the least common denominator?</strong></p>
<p>These 2 pictures explain it:</p>
<div class="row">
    <div class="col-12 col-md-6">
        <img src="/assets/images/posts/2019/php_workflow_tips/least.gif" class="img-thumbnail"></div>
    <div class="col-12 col-md-6">
        <img src="/assets/images/posts/2019/php_workflow_tips/not_so_least.gif" class="img-thumbnail"></div>
</div>
<p>Now, both pictures explain it. Which one do you prefer?</p>
<p><em>Disclosure</em></p>
<ul>
<li>the left image is actually self-explanatory - it's used <em>least common denominator</em> to explain <em>Least Common Denominator</em></li>
<li>the right image also explain it, but it uses much more extra data, that you don't need (e.g. root) and only slows down your neuron pipelines</li>
</ul>
<p><strong>Use the left approach to explain issues and problems. They're easier to understand, focused on the problem you really have and will get to the effective solution faster.</strong></p>
<p>The right path is how the legacy code is manufactured in companies every day.</p>
<h3 id="what-else-is-there">What Else is There?</h3>
<ul>
<li>
<p><em>Occam's razor</em> - People that <a href="https://simple.wikipedia.org/wiki/Occam%27s_razor">use Wikipedia</a> or studied university renamed <em>least common denominator</em> to Occam's razor and added more academic words. The logic is the same, but you might prefer it.</p>
</li>
<li>
<p><em>SOLID</em> - Again the same family, just different letters and vocabulary.</p>
</li>
</ul>
<p>That's the beauty example of pattern thinking. Instead of remembering 3 different terms, you pick one and use it.</p>
<div class="fa-2x mt-3">👍</div>
<p><br></p>
<p><strong>Do you want to go <em>balls deep</em> and learn more about this?</strong> Book it:</p>
<ul>
<li><a href="https://www.amazon.com/Pragmatic-Programmer-Journeyman-Master-ebook/dp/B003GCTQAE">The Pragmatic Programmer: From Journeyman to Master</a></li>
<li><a href="https://www.amazon.com/Dont-Make-Think-Revisited-Usability/dp/0321965515">Don't Make Me Think, Revisited</a> (3rd edition from 2014)</li>
</ul>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/07/01/5-workflow-tips-every-php-developer-should-know</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 01 Jul 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/07/01/5-workflow-tips-every-php-developer-should-know#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Do you use PHP_CodeSniffer and PHP CS Fixer PHPStorm Plugin? You are Slow and Expensive ]]></title>
                <link>https://tomasvotruba.com/blog/2019/06/24/do-you-use-php-codesniffer-and-php-cs-fixer-phpstorm-plugin-you-are-slow-and-expensive</link>
                <description><![CDATA[ <p>People keep asking me about IDE plugins <a href="https://www.reddit.com/r/phpstorm/comments/am1qzv/update_phpdoc_comment_action/efqpv8o">for Rector</a> and Easy Coding Standard.
Do you want it too? Do you use one for PHP_CodeSniffer of PHP CS Fixer? Have you ever thought about the benefits and costs of them?</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="benefits-of-instant-feedback">Benefits of Instant Feedback</h2>
<p>When you a PHPStorm plugin that tells you what to do, you have this extra information that you can follow:</p>
<img src="/assets/images/posts/2019/plugin/plugin.png">
<p>That's pretty cool, right? It will:</p>
<ul>
<li>save you running coding standard tool from command line later - forget <code>vendor/bin/ecs check src</code></li>
<li>help you to write code according to standards of the project</li>
<li>help you to write better code</li>
<li><strong>you have the information at the moment you made the mistake</strong></li>
</ul>
<p>The last benefit is wired to our brains.</p>
<h2 id="trap-of-instant-gratification">Trap of Instant Gratification</h2>
<blockquote class="blockquote">
    "Everybody is addicted to dopamine."
</blockquote>
<img src="/assets/images/posts/2019/plugin/porn.jpg" class="img-thumbnail">
<p>Slack notification, Instagram likes, underline of <span class="text-underline">typoes</span> and suggestions in your IDE.<br>
<strong>This all makes us happy by brain design</strong>.</p>
<p><br></p>
<p>Coding standard tools are in your IDE already, next are static analyzers and instant upgraders:</p>
<div class="text-center">
    <img src="/assets/images/posts/2019/plugin/psalm.png"><br>
    Live report on <a href="https://psalm.dev/">Psalm.dev</a>
</div>
<p><br></p>
<p>Everyone writes about the benefits of these plugins, but <strong>how much do you pay for it</strong>?</p>
<p>&quot;It's free!&quot;</p>
<h2 id="attention-economy">Attention Economy</h2>
<p>Well, it's not. If you've never heard about <em>dopamine - notification</em> effect, read <a href="http://www.calnewport.com/blog/2017/10/02/are-you-using-social-media-or-being-used-by-it">Are You Using Social Media or Being Used By It?</a> by <em>Cal Newport</em>. This amazing guy helped me to <a href="/blog/2017/01/20/4-emotional-reasons-why-I-quit-my-twitter/">quit Twitter</a> and <a href="/blog/2017/09/25/3-non-it-books-that-help-you-to-become-better-programmer/#deep-work-by-cal-newport">go deeper</a> in topics I really care about in my life.</p>
<img src="/assets/images/posts/2019/plugin/addict.jpg">
<p>Basically, notifications turn your beautiful and dynamic brain capable of high abstract thinking to the <strong>brain of a heroin addict with instant feedback overloop</strong>.</p>
<p><br></p>
<p>Let's get back to our code again.</p>
<h3 id="what-happens-when-we-type-code-in-phpstorm-with-php-code-sniffer-plugin">What Happens When we Type Code in PHPStorm with PHP Code Sniffer plugin?</h3>
<img src="/assets/images/posts/2019/plugin/plugin.png">
<ul>
<li>we see an underscored text</li>
<li>we move our cursor above it (2 s)</li>
<li>we read the message (2 s)</li>
<li>we try to understand it (3 s)</li>
<li>we try to figure out what needs to be done to make it disappear (5-15 s)</li>
<li>we try it (2 s)</li>
</ul>
<p><strong>If we're lucky, it's gone</strong> under 15 seconds. If not, we get back to &quot;we try to understand it&quot; step.
In time, we get better, faster and we create a small database of &quot;message → solution&quot; in our brains. In a few weeks, we learn how to write perfect code without any underscores.</p>
<p>Then our team extends rule set with <a href="/blog/2018/04/09/try-psr-12-on-your-code-today/">PSR-12</a> and we have to upgrade our brain database. So we start to hate extending of coding standards and prefer less.</p>
<h2 id="expensive-fun">Expensive Fun</h2>
<p>Now the important question: do you know how expensive this is? If you have a boss who doesn't care about productivity and you can whatever you need without critical business thinking, <strong>stop reading</strong>, because you're primed to waste money by your work design.</p>
<p><strong>But if you're freelancer, or you pay your programmers or you desire to be effective by lazy</strong>, I have a comparison for you:</p>
<p>Without PHPStorm plugins, you have to run the tool manually in your command line <strong>once per git push</strong>:</p>
<ul>
<li>
<p>open command line (2 s)</p>
</li>
<li>
<p>run coding standard command (2 s)</p>
</li>
<li>
<p><strong>4 seconds per push</strong> vs <strong>15 seconds per 1 error + persisted database in your brain</strong></p>
</li>
</ul>
<p>What is cheaper in money and brain damage?</p>
<p><strong>Pro-lazy tip:</strong> I'm too lazy to type more than 2-3 chars manually, so I use <a href="https://blog.martinhujer.cz/have-you-tried-composer-scripts">composer scripts</a> and 2-3 chars long bash script shortcuts:</p>
<pre><code class="language-bash">cs
# aliased to vendor/bin/ecs check app packages tests

fs
# aliased to: vendor/bin/ecs check app packages tests --fix</code></pre>
<h2 id="benefits-of-deep-work-and-scaled-automation">Benefits of Deep Work and Scaled Automation</h2>
<p><strong>Rule of the Thumb</strong>: If something requires your attention multiple times with same <em>A → B</em> operation, automate the change and delegate it.</p>
<p>PHP_CodeSniffer can actually report what should be changed, without any clear suggestion of how to change it (read-only). But PHP CS Fixer fixes the code by default, so you don't even have to think about the change. So using PHP CS Fixer manually is a pure waste of life and money.</p>
<p><br></p>
<p>And this just a very limited example of 1 programmer and 1 project. Most companies have multiple programmers and projects. *The waste of time for 10-programmer teams having 20 projects escalates quickly:</p>
<ul>
<li>plugin way: 15 seconds per one error <em> 10 programmers </em> 20 projects * (let's be optimistic) 50 errors per pull-request...</li>
<li>automated CI way: validate PR and click merge request - <strong>20-40 seconds per pull-request</strong></li>
</ul>
<p>In simple words: <em>exponential</em> costs vs <em>constant</em> costs</p>
<h2 id="scale-to-whole-php-world">Scale to Whole PHP World</h2>
<p>Now imagine all the PHP projects in the world. Which of those is faster?</p>
<p>Does it ring a bell? Now think about the same way about instant upgrades or refactoring?</p>
<p>If there will be Rector plugin for PHPStorm (I honestly hope it won't), <strong>you'd have to find every <a href="/blog/2019/04/15/pattern-refactoring/">new pattern</a> there is in your project, again manually and randomly in your PHP files</strong> and hit the &quot;refactor&quot; button.</p>
<p>If you're effective, lazy and don't want to produce waste, you'll run:</p>
<pre><code class="language-bash">vendor/bin/rector process src --set php74</code></pre>
<p>And save millions of your brain cells :)</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/06/24/do-you-use-php-codesniffer-and-php-cs-fixer-phpstorm-plugin-you-are-slow-and-expensive</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 24 Jun 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/06/24/do-you-use-php-codesniffer-and-php-cs-fixer-phpstorm-plugin-you-are-slow-and-expensive#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ 7 News and Changes in Symplify 6 ]]></title>
                <link>https://tomasvotruba.com/blog/2019/06/20/7-news-and-changes-in-symplify-6</link>
                <description><![CDATA[ <p>Do you use Easy Coding Standard, Package Builder or Statie? Do you need to upgrade safely? <strong>Do you want to benefit from new features?</strong>
<br>
<br>
This post shows 7 news and changes, that might affect you (in a good way).</p> ]]></description>
                <content:encoded><![CDATA[ <p>What is <strong>new</strong>?</p>
<h2 id="easycodingstandard">EasyCodingStandard</h2>
<h3 id="1-run-checker-only-on-specific-path">1. Run Checker only on Specific Path</h3>
<p><a href="https://github.com/symplify/symplify/pull/1537" class="btn btn-dark btn-sm pull-right mt-2 mb-2">
<em class="fab fa-github fa-fw"></em>
&nbsp;
See PR #1357
</a></p>
<p><strong>I really love this feature, because it makes a lot of custom boiler code go away.</strong></p>
<p>In old <em>Symplify 5</em>, when you needed to run sniff only on <code>/tests</code>, you had to create own config, e.g. <code>ecs-only-for-tests.php</code> and run it separately.</p>
<pre><code class="language-bash">vendor/bin/ecs check src --config ecs.php
vendor/bin/ecs check tests --config tests-only-ecs.php</code></pre>
<p>That was way too complicated, right?</p>
<p><br></p>
<p>In new <em>Symplify 8</em>, you can use just one config with <code>only</code> option instead:</p>
<pre><code class="language-php">&lt;?php

// ecs.php

declare(strict_types=1);

use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
use Symplify\EasyCodingStandard\Configuration\Option;

return static function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();

    // all rules must be registered
    $services-&gt;set(BasicSniff::class);
    $services-&gt;set(AnotherSniff::class);

    $parameters = $containerConfigurator-&gt;parameters();
    // here you can configure, what rules should only check particular paths
    $parameters-&gt;set(Option::ONLY, [
        AnotherSniff::class =&gt; [
            __DIR__ . '/tests/'
        ]
    ]);
};</code></pre>
<pre><code class="language-yaml">vendor/bin/ecs check src tests</code></pre>
<p>It's basically an inversion of <code>skip</code> parameter.</p>
<p><br>
<br>
<br></p>
<p>What has <strong>changed</strong>?</p>
<h3 id="2-code-yaml-code-code-php-code">2. <code>*.yaml</code> → <code>*.php</code></h3>
<p>As Symfony is <a href="https://github.com/symfony/symfony/issues/37186">moving to *.php</a> configuration, Symplify does too.</p>
<h2 id="easycodingstandard">EasyCodingStandard</h2>
<h3 id="3-sets-are-now-in-defined-in-code-setlist-code-constants">3. Sets are Now In defined in <code>SetList</code> Constants</h3>
<p>Why? The sets are only string references, so its useless for human to remember them. Why not let IDE help us?</p>
<pre><code class="language-diff"> &lt;?php

 // ecs.php

 declare(strict_types=1);

 use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
+use Symplify\EasyCodingStandard\Configuration\Option;
+use Symplify\EasyCodingStandard\ValueObject\Set\SetList;

 return static function (ContainerConfigurator $containerConfigurator): void {
-    $containerConfigurator-&gt;import(__DIR__ . '/vendor/symplify/easy-coding-standard/config/php71.php');

+    $parameters = $containerConfigurator-&gt;parameters();
+    $parameters-&gt;set(Option::SETS, [
+         SetList::PHP_71,
+    ]);
 };</code></pre>
<h3 id="4-del-exclude-checkers-del-code-skip-code">4. <del>exclude_checkers</del> → <code>skip</code></h3>
<p>People confused this options and created <em>WTF</em> issues. That's why the <code>exclude_checkers</code> is now merged in <code>skip</code>, so you have less option names to remember:</p>
<pre><code class="language-diff"> &lt;?php

 // ecs.php

 declare(strict_types=1);

 use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
+use Symplify\EasyCodingStandard\Configuration\Option;

 return static function (ContainerConfigurator $containerConfigurator): void {
     $parameters = $containerConfigurator-&gt;parameters();
-    $parameters-&gt;set('exclude_checkers', [
+    $parameters-&gt;set(Option::SKIP, [
-        SomeFixer::class
+        SomeFixer::class =&gt; null,
     ]);
 };</code></pre>
<h2 id="packagebuilder">PackageBuilder</h2>
<h3 id="5-introducing-code-findersanitizer-code">5. Introducing <code>FinderSanitizer</code></h3>
<p>Do you like <code>SplFileInfo</code> that is 100 % sure the file exists? In that case, you use <code>Symplify\PackageBuilder\FileSystem\SmartFileInfo</code> instead of <code>SplFileInfo</code>. The easiest way to use it is via <code>FinderSanitizer</code> that is now available via <code>symplify/package-builder</code> package:</p>
<pre><code class="language-diff"> &lt;?php

 // ecs.php

 declare(strict_types=1);

 use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
+use Symplify\EasyCodingStandard\Configuration\Option;

 return static function (ContainerConfigurator $containerConfigurator): void {
     $services = $containerConfigurator-&gt;services();
-    $services-&gt;set(Symplify\EasyCodingStandard\Finder\FinderSanitizer);
+    $services-&gt;set(Symplify\PackageBuilder\FileSystem\FinderSanitizer);
 };</code></pre>
<h3 id="6-del-configurablecollectorcompilerpass-del-code-autowirearrayparametercompilerpass-code">6. <del>ConfigurableCollectorCompilerPass</del> → <code>AutowireArrayParameterCompilerPass</code></h3>
<p>If you know <a href="/clusters/#collector-pattern-the-shortcut-hack-to-solid-code/">collectors</a>, you're using <code>ConfigurableCollectorCompilerPass</code>. It saves you so much time with configuration. The problem with that compiler pass, you still had to go to config to set it up, for no real advantage. And extra work for <a href="/blog/2019/02/14/why-config-coding-sucks/">no benefit sucks</a>. Also, there is big change someone will <a href="/blog/2018/08/27/why-and-how-to-avoid-the-memory-lock/">forget it</a> and create a bug.</p>
<p>So instead, <em>Symplify 6</em> adds better system to pass collected services of certain type to single service - <strong><a href="/blog/2018/11/12/will-autowired-arrays-finally-deprecate-tags-in-symfony-and-nette/">autowired arrays</a></strong>:</p>
<pre><code class="language-diff">&lt;?php declare(strict_types=1);

 use Symfony\Component\DependencyInjection\ContainerInterface;
-use Symplify\PackageBuilder\DependencyInjection\CompilerPass\ConfigurableCollectorCompilerPass;
+use Symplify\PackageBuilder\DependencyInjection\CompilerPass\AutowireArrayParameterCompilerPass;

 final class AppKernel extends Kernel
 {
     protected function build(ContainerBuilder $containerBuilder): void
     {
-        $containerBuilder-&gt;addCompilerPass(new ConfigurableCollectorCompilerPass());
+        $containerBuilder-&gt;addCompilerPass(new AutowireArrayParameterCompilerPass());
    }
}</code></pre>
<p><a href="/blog/2018/11/12/will-autowired-arrays-finally-deprecate-tags-in-symfony-and-nette/">This post</a> explains how to use it without ever touching config again.</p>
<h2 id="codingstandard">CodingStandard</h2>
<h3 id="7-del-removeuselessdocblockfixer-del-code-nosuperfluousphpdoctagsfixer-code">7. <del>RemoveUselessDocBlockFixer</del> → <code>NoSuperfluousPhpdocTagsFixer</code></h3>
<p><code>RemoveUselessDocBlockFixer</code> was removed, since <a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer">PHP CS Fixer</a> now provides <code>NoSuperfluousPhpdocTagsFixer</code> with similar features:</p>
<pre><code class="language-diff"> &lt;?php

 // ecs.php

 declare(strict_types=1);

 use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

 return static function (ContainerConfigurator $containerConfigurator): void {
     $services = $containerConfigurator-&gt;services();

-    $services-&gt;set(Symplify\CodingStandard\Fixer\Commenting\RemoveUselessDocBlockFixer::class);
+    $services-&gt;set(PhpCsFixer\Fixer\Phpdoc\NoSuperfluousPhpdocTagsFixer::class);
 };</code></pre>
<p>That's all. It was easy, right?</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/06/20/7-news-and-changes-in-symplify-6</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 20 Jun 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-08-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Aug 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/06/20/7-news-and-changes-in-symplify-6#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to upgrade Meetup.com API to OAuth2 with Guzzle ]]></title>
                <link>https://tomasvotruba.com/blog/2019/06/17/how-to-upgrade-meetup-com-api-to-oauth2-with-guzzle</link>
                <description><![CDATA[ <p>I got an email from Meetup.com 5 days ago, that basically every API request will be paid since August 15, 2019. <strong>$ 30/month</strong>, that's like my phone bill.
<br>
<br>
<strong>95 % of data on <a href="https://friendsofphp.org">Friends Of Php</a> depend on Meetup.com API</strong> - updated daily. The website is free, so it might kill the content or I'd have to move to crawlers and hope for the lack of protection on Meetup.com against them.
<br>
<br>
<strong>Unless we use Oauth2 before August 15</strong>. I never used it, but how hard that can be, right?</p> ]]></description>
                <content:encoded><![CDATA[ <p>There is no information about Meetup.com API upgrade on <a href="https://medium.com/meetup">their blog</a>, so I'll share the email to give you an idea:</p>
<ul>
<li>
<p>API Keys will be replaced by OAuth: We will be removing API keys on August 15, 2019 and requiring you to <a href="https://www.meetup.com/meetup_api/auth">authenticate with OAuth</a>.</p>
</li>
<li>
<p>Move to OAuth soon for continued free API access: Until August 15, members will be able <a href="https://www.meetup.com/meetup_api/auth">to apply for OAuth access</a> free of charge. <strong>After August 15, anyone who wants to apply for API access through OAuth will need to have a <a href="https://www.meetup.com/pro">Meetup Pro account</a> in order to do so</strong>.</p>
</li>
</ul>
<p><br></p>
<h2 id="documentation-vs-code">Documentation vs. Code</h2>
<p>This is a simple task, that in the end has simple 15 lines of new code. But documentation turned it into almost 3 hours of work.</p>
<p>It seems like OAuth2 must be something very new, because Guzzle <a href="https://github.com/guzzle/oauth-subscriber">supports only Oauth (1)</a>. If the last commit in 2014 can be called &quot;supports&quot;.</p>
<p>After a bit of Googling if found <a href="https://github.com/kamermans/guzzle-oauth2-subscriber">kamermans/guzzle-oauth2-subscriber</a>. I tried to copy-paste the code</p>
<h3 id="choose-your-path">Choose Your Path</h3>
<ul>
<li>Do you want to just read copy paste solution? Jump to <a href="#5-steps-to-guzzle-oauth2">5 Steps to Guzzle OAuth2</a> headline.</li>
<li>If you want to learn about writing software and documentation, keep on reading.</li>
</ul>
<h2 id="fuck-up-1-put-oldest-first">Fuck-up #1: Put Oldest First</h2>
<p>Why would you put the newest content first, right? You know, like on Twitter, Facebook, basically any news, messages...</p>
<img src="/assets/images/posts/2019/oauth2/old_first.png" class="img-thumbnail">
<p>If you write a code that other people read, you should read <a href="https://www.amazon.com/Design-Everyday-Things-Donald-Norman/dp/1452654123">The Design of Everyday Things</a> or <a href="https://www.amazon.com/gp/product/0321965515">Don't Make Me Think</a></p>
<p>So now you can imagine I'm using the latest Guzzle 6 and trying to implement a solution for Guzzle 4 &amp; 5.</p>
<p><br></p>
<div class="card">
    <div class="card-body text-center bigger">
        👍 Rule of the thumb: <strong>put news and important information first</strong>.
    </div>
</div>
<h2 id="fuck-up-2-support-all-versions">Fuck-up #2: Support All Versions</h2>
<p>Fuck-Up #1 is a natural consequence of trying to support multiple versions at one branch/tag. Instead of putting all code to one branch, <strong>let always the last branch support the latest LTS dependencies</strong>.</p>
<p><em>What does that mean?</em></p>
<p>Let's look at <a href="https://github.com/symfony/symfony">Symfony repository</a>. Instead of &quot;Symfony&quot; imagine any package that is version. Now there is Symfony 4, so there was version 3, 2, 1 in the past. Like Guzzle 6, 5, 4...</p>
<p>Now you've decided to upgrade and look for <code>CHANGELOG.md</code> (because you haven't heard about <a href="/blog/2019/02/28/how-to-upgrade-symfony-2-8-to-3-4/">Rector</a> yet):</p>
<img src="/assets/images/posts/2019/oauth2/symfony.png" class="img-thumbnail">
<p>But how do you upgrade from Symfony 3? In the latest branch, there is always <strong>context-aware information</strong>. Do you need any older version? Switch to branch <code>3.x</code> or <code>2.x</code>.</p>
<p>I love this, <strong>because it focuses on mainstream, providing minimal needed data, but also allows the same for minorities</strong>.</p>
<p>The Symfony docs does the same:</p>
<img src="/assets/images/posts/2019/oauth2/symfony_docs.png" class="img-thumbnail">
<p>I wrote about this in detail in <a href="/blog/2017/10/30/what-can-you-learn-from-menstruation-and-symfony-releases/">What can You Learn from Menstruation</a> post.</p>
<p><br></p>
<div class="card">
    <div class="card-body text-center bigger">
        👍 Rule of the thumb: <strong>never mix 2 major versions in one branch, unless LTS framework</strong>
    </div>
</div>
<h2 id="fuck-up-3-provide-more-solutions">Fuck-up #3: Provide more solutions</h2>
<p>After I figured out the <code>README</code> is not text for programmers but for detectives, I've found the code with middleware I though I was looking for:</p>
<pre><code class="language-php">&lt;?php

$oauth = new OAuth2Middleware($grant_type);

$stack = HandlerStack::create();
$stack-&gt;push($oauth);

$client = new Client([
    'auth'     =&gt; 'oauth',
    'handler'  =&gt; $stack,
]);</code></pre>
<p>This supposes to work... but instead I got as useless exceptions as &quot;cannot authenticate&quot;. After 60 minutes of trying, I went to sleep with frustration.</p>
<p>In the morning I've noticed little note:</p>
<img src="/assets/images/posts/2019/oauth2/alter.png" class="img-thumbnail">
<p>Tried it and it worked. WTF? Why there is a broken code first, then &quot;working alternative&quot; second?</p>
<p>This is a common problem with double complexity = exponential bugs. If you translate your website to English and German, it will have more translation bugs than the English-only version. Of course, German might be important to your business, but <strong>the alternative code has as little added value as having a website in American English and British English</strong>.</p>
<div class="card">
    <div class="card-body text-center bigger">
        👍 Rule of the thumb: <strong>don't create alternatives for mainstream, it mostly confuses people</strong>. People will always find alternatives themselves
    </div>
</div>
<h2 id="how-to-write-perfect-documentation">How to Write Perfect Documentation?</h2>
<p>It's important to know, that I don't try to make this about the specific documentation, but rather about <em>any</em> open-source documentation and how it's written.</p>
<img src="/assets/images/posts/2019/oauth2/legacy.png" class="img-thumbnail" style="max-width:35em">
<p>If I'd be sending an invoice to my employer, it would look like this:</p>
<ul>
<li>2,5 hours - debugging documentation</li>
<li>0,5 hours - implementing OAuth2</li>
</ul>
<h3 id="how-to-lower-those-2-5-hours-to-15-minutes">How to Lower Those 2,5 hours to 15 minutes?</h3>
<p>Let's pause a bit and think - <strong>what do we really need, when we use the package for the first time</strong>?</p>
<ul>
<li>get a code that solves our problem (e.g. use OAuth2 with Guzzle to prevent paying $ for Meetup.com API)</li>
<li>solve it as fast as possible (e.g. in 30 minutes)</li>
<li>a code, that we can copy paste and it works (e.g. without looking for missing use statements - I just hate this!)</li>
<li>feel confident we understand the errors, so we can fix them ourselves (e.g. without StackOverflow, creating and issue on Github)</li>
</ul>
<p><br></p>
<p>If we agree on these as our priorities, then all we need is working piece of code.</p>
<h3 id="be-sure-the-code-works-without-testing-it">Be Sure the Code Works without Testing it</h3>
<p><strong>How do we know the code is working?</strong></p>
<ul>
<li>it's tested</li>
<li>test passing</li>
<li>we can see test passing ourselves on Travis CI or Gitlab CI</li>
</ul>
<p>Instead of having documentation with text (= &quot;weak strings&quot;), the best would be:</p>
<ul>
<li>link to the code for Guzzle 6</li>
<li>link to test case for Guzzle 6</li>
<li>link to CI passing for a test case for Guzzle 6</li>
</ul>
<p>That's the perfect documentation, <strong>because we can skip the verification and detective part and trust it by validated contract</strong>.</p>
<p><br></p>
<p>Now finally to the solution ↓</p>
<h2 id="5-steps-to-guzzle-oauth2">5 Steps to Guzzle Oauth2</h2>
<ul>
<li>Login to <a href="http://meetup.com">Meetup.com</a></li>
<li>Create new consumer here - <a href="https://secure.meetup.com/meetup_api/oauth_consumers">https://secure.meetup.com/meetup_api/oauth_consumers</a> - it's <em>credentials</em> actually</li>
<li>There you get Oauth key and secret</li>
<li>Have the latest <code>guzzle</code> + <code>oauth2-subscriber</code></li>
</ul>
<pre><code class="language-bash">composer require guzzlehttp/guzzle:^6.3
composer require kamermans/guzzle-oauth2-subscriber</code></pre>
<ul>
<li>Use Guzzle with Oauth2</li>
</ul>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

require __DIR__ . '/vendor/autoload.php';

use GuzzleHttp\Client;
use kamermans\OAuth2\GrantType\ClientCredentials;
use kamermans\OAuth2\OAuth2Middleware;

// get these here: https://secure.meetup.com/meetup_api/oauth_consumers
$meetupComOauth2Key = '123';
$meetupComOauth2Secret = 'ABC';

// boilerplate code for Oauth2
$oAuth2Client = new Client([
    // URL for access_token request
    'base_uri' =&gt; 'https://secure.meetup.com/oauth2/access',
]);

$oAuth2Config = [
    'client_id' =&gt; $meetupComOauth2Key,
    'client_secret' =&gt; $meetupComOauth2Secret,
];
$clientCredentials = new ClientCredentials($oAuth2Client, $oauthConfig);
$oAuth2Middleware = new OAuth2Middleware($clientCredentials);

// the main code
$client = new Client();
$client-&gt;getConfig('handler')-&gt;push($oAuth2Middleware);

// call anything
$response = $client-&gt;request('GET', '...');
var_dump($response);</code></pre>
<p>But does it still work?</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/06/17/how-to-upgrade-meetup-com-api-to-oauth2-with-guzzle</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 17 Jun 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/06/17/how-to-upgrade-meetup-com-api-to-oauth2-with-guzzle#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Don&#039;t Ever use Symfony Listeners ]]></title>
                <link>https://tomasvotruba.com/blog/2019/05/16/don-t-ever-use-listeners</link>
                <description><![CDATA[ <p>Another anti-pattern that deserves more attention than it has. I often see this in Symfony projects I consult and when I ask the dev <em>why</em> did he or she choose listener over subscriber, they don't really know - &quot;it was in the Symfony documentation, you can read it there&quot;.
<br><br>
Not good enough. <strong>So why you should never use a listener?</strong></p> ]]></description>
                <content:encoded><![CDATA[ <p>When we look into Symfony <a href="https://symfony.com/doc/current/event_dispatcher.html">EventDispatcher documentation</a>, this is the first YAML code we see:</p>
<pre><code class="language-yaml"># config/services.yaml
services:
    App\EventListener\ExceptionListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception }</code></pre>
<p>If I'd be in the process of learning Symfony, this would be my thoughts:</p>
<ul>
<li>&quot;I see that this option is the first one in the official Symfony documentation&quot;</li>
<li>&quot;Right above something called <em>Subscriber</em>&quot;</li>
<li>&quot;I guess I should use Listeners by default then. Why? For some unknown reason that only Symfony seniors know.&quot;</li>
</ul>
<p>Btw, there is not even &quot;Subscriber&quot; in the main headline!</p>
<img src="/assets/images/posts/2019/sub/listen_first.png" class="img-thumbnail">
<p>That's how you write a manipulative text if you wanted people to never use subscribers :).</p>
<h2 id="what-s-wrong-with-listeners">What's Wrong With Listeners?</h2>
<ul>
<li>Juniors will use Listeners by default (everywhere they can) <em class="fas fa-fw fa-lg fa-times text-danger"></em></li>
<li>YAML configs will get fat with listener configuration for basically no advantage <em class="fas fa-fw fa-lg fa-times text-danger"></em>
<ul>
<li>Since <a href="/blog/2018/12/27/how-to-convert-all-your-symfony-service-configs-to-autodiscovery/">PSR-4 autodiscovery</a> this hurts config readability more then ever</li>
<li>You have to remember the YAML syntax for right registration</li>
<li>Do you know you have to tag it with <code>name</code> &amp; <code>event</code>?</li>
<li>Will <code>_autoconfigure: true</code> help you here?</li>
<li>What's the name of event - <code>kernel_exception</code> or <code>kernel.error</code>? Well, neither</li>
</ul></li>
<li>What will you do if name of Kernel event will change? <em class="fas fa-fw fa-lg fa-times text-danger"></em></li>
<li>How do you analyse it with PHPStan? <em class="fas fa-fw fa-lg fa-times text-danger"></em></li>
<li>How do you upgrade it with Rector, when Symfony will create a <a href="https://symfony.com/blog/new-in-symfony-4-3-simpler-event-dispatching">BC break</a> <a href="/blog/2020/05/25/the-bulletproof-event-naming-for-symfony-event-dispatcher/">change</a>? <em class="fas fa-fw fa-lg fa-times text-danger"></em></li>
<li>What if you decide to migrate to Laravel or the <em>new best framework X</em> later? <em class="fas fa-fw fa-lg fa-times text-danger"></em></li>
</ul>
<p>All these problems will shoot you or your colleague in the back in the future. <strong>You've just opened doors for 6 more possible bugs and problems</strong> to come to your project #carpeyolodiem.</p>
<p>Most of these problems are a result of config programming - <a href="/blog/2019/02/14/why-config-coding-sucks/">that just sucks</a>.</p>
<h2 id="why-you-should-always-use-event-subscriber">Why You Should Always use Event Subscriber?</h2>
<p>Listeners have only one valid use case - it's a 3rd party code located in your <code>/vendor</code> and someone else wants you to use it with event of your choice in config, e.g.:</p>
<pre><code class="language-yaml"># config/services.yaml
services:
    Vendor\ThirdPartyProject\Listener\UseMeListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception }
            - { name: kernel.event_listener, event: kernel.view }</code></pre>
<p>If it would be a subscriber, it would be very similar to this:</p>
<pre><code class="language-php">&lt;?php

namespace App;

use Vendor\ThirdPartyProject\Listener\UseMeListener;
use Symfony\Component\HttpKernel\KernelEvents;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;

final class YourListener extends UseMeListener implements EventSubscriberInterface
{
    public static function getSubscribedEvents()
    {
        return [
            KernelEvents::EXCEPTION =&gt; ['onKernelException'],
            KernelEvents::VIEW =&gt; ['onKernelView'],
        ];
    }
}</code></pre>
<p>What's wrong with this code? First, <code>UseMeListener</code> should be <a href="/blog/2019/01/24/how-to-kill-parents/"><code>final</code></a>, so you cannot break SOLID like this.</p>
<p>Let's take part by part.</p>
<h3 id="1-validated-php-over-config-typos">1. Validated PHP over Config Typos</h3>
<pre><code class="language-php">$myEvents = [
    KernelEvents::EXCEPTION =&gt; ['onKernelException'],
    KernelEvents::VIEW =&gt; ['onKernelView'],
];</code></pre>
<ul>
<li>
<p>Using <code>KernelEvents::EXCEPTION</code> constant is <strong>a big win</strong>! Instead of some string a config that we cannot analyze nor refactor, we have a constant. If you create a typo like <code>KernelEvents::EXCEPTON</code>, you'll know. If you make a typo in a config? Good luck!</p>
</li>
<li>
<p>How is <code>'onKernelView'</code> string made? I have no idea. It's a convention name, that is somehow resolved from tag name in the config to a protected/public? local method that is called. We don't need that magic, right Mr. Potter?</p>
</li>
</ul>
<h3 id="2-explicit-services-instead-of-circular-coupled-subscriber-listener">2. Explicit Services instead of Circular-Coupled Subscriber/Listener</h3>
<p>If someone has created a listener that you can re-use, it's an anti-pattern already.</p>
<ul>
<li>Would you create a controller, that someone should call in another controller?</li>
<li>Or a command, that someone should use in their listener or controller?</li>
</ul>
<p>People actually do that, the <a href="https://stackoverflow.com/questions/31512200/calling-action-from-command">StackOverflow has dozens of questions like &quot;how to call command in a controller&quot; or &quot;how to controller in a command&quot;</a>.</p>
<h3 id="3-don-t-rape-delegate">3. Don't Rape! Delegate</h3>
<p>Command, Controller, EventSubscriber, Listener - they all should be only delegating code to a model layer service. If you need to mutually call or inherit one in another, you're creating a code smell. That's a sign that you should <strong>decouple common logic to a service</strong> and pass it via constructor to both.</p>
<p>So instead of giving people the option to use your code wrong way, give them a service, they can call in e.g. the EventSubscriber.</p>
<h3 id="4-let-interface-take-the-responsibility">4. Let Interface take the Responsibility</h3>
<p>EventSubscriber has own interface, that guides you:</p>
<pre><code class="language-php">&lt;?php

use Symfony\Component\EventDispatcher\EventSubscriberInterface;

final class MyCustomEventSubscriber implements EventSubscriberInterface
{
    public static function getSubscribedEvents()
    {
    }
}</code></pre>
<p>There is still a bit of magic... what should be in <code>getSubscribedEvents()</code> method? Honestly, I have no idea. I don't want to <a href="/blog/2018/08/27/why-and-how-to-avoid-the-memory-lock/">remember what's written in code</a>. So I'll use PHPStorm:</p>
<img src="/assets/images/posts/2019/sub/event_names.gif" class="img-thumbnail">
<h2 id="what-s-better-with-event-subscriber">What's Better with Event Subscriber?</h2>
<ul>
<li>No config coding and all the related possible bugs <em class="fas fa-fw fa-lg fa-check text-success"></em></li>
<li>Adding new subscribers mean 0-work in config</li>
<li>Adding new subscribed event mean 0-work in config</li>
<li>No option to miss-use delegators <em class="fas fa-fw fa-lg fa-check text-success"></em></li>
<li>Easy to statically analyse <em class="fas fa-fw fa-lg fa-check text-success"></em></li>
<li>Easy to instantly upgrade <em class="fas fa-fw fa-lg fa-check text-success"></em></li>
<li>Any Symfony BC break will be easy to discovery due to unused constant in exact line of code <em class="fas fa-fw fa-lg fa-check text-success"></em></li>
</ul>
<p>The trade-off worth the change</p>
<h2 id="final-unrelated-tip-constants-over-strings">Final Unrelated Tip: Constants over Strings</h2>
<p>If you use <code>KernelEvents::VIEW</code> constants within PHP code, you make the code also easier to debug.</p>
<p>Where is <code>KernelEvents::VIEW</code> event actually dispatched? Just search <code>KernelEvents::VIEW</code> (or better <code>dispatch(KernelEvents::VIEW)</code>) in <code>/vendor</code> and PHPStorm will show you the exact line. If you'd look for a string, it will lead to a false source of <code>KernelEvents</code> (just a reference list of all Kernel events).</p>
<p>Also, when the event name is changed in a constant to <code>view_event</code>, you don't mind. If you have <code>view</code> in the config, good luck!</p>
<p>This makes using constants so fun. My rule fo a thumb is:</p>
<blockquote class="blockquote text-center mb-4 mt-4">
    When the same string is used at 2 different classes,
    <br>
    it's worth creating a constant list to make it typo-proof.
</blockquote>
<p>E.g. imagine you have code like:</p>
<pre><code class="language-php"># in class A
$configuration-&gt;setOption('resource');

# in class B
$input-&gt;getOption('resource');</code></pre>
<p>Now you need to get resource somewhere else. Was is &quot;source&quot;, &quot;sources&quot;, &quot;resource&quot; or &quot;directory&quot;? You don't care, constant autocomplete in PHPStorm tells you:</p>
<pre><code class="language-php"># in class A
$configuration-&gt;setOption('resource');

# in class B
$input-&gt;getOption('resource');</code></pre>
<img src="/assets/images/posts/2019/sub/constant.gif" class="img-thumbnail">
<p><a href="/blog/2018/08/27/why-and-how-to-avoid-the-memory-lock/">Don't remember what you don't need to</a>.</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/05/16/don-t-ever-use-listeners</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 16 May 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/05/16/don-t-ever-use-listeners#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Hidden Gems of PHP Packages: Psalm Fixing Your Code ]]></title>
                <link>https://tomasvotruba.com/blog/2019/05/13/hidden-gems-of-php-packages-psalm-fixing-your-code</link>
                <description><![CDATA[ <p>Psalm is a static analyzer of PHP code originated at Vimeo and developed by <a href="http://github.com/muglug">Muglug</a>. It can analyze your code for incorrect type declarations or unused code.
<br><br>
But did you know it can automatically fix these issues?</p> ]]></description>
                <content:encoded><![CDATA[ <p>I did not and I was surprised. Psalm added this feature long time ago in March 2018 (as <a href="https://www.reddit.com/r/PHP/comments/84xrgy/fixing_code_that_aint_broken_vimeo_engineering">reported on Reddit</a>)! I was also surprised because static analyzer is read-only tools - &quot;here is error → fix it yourself manually&quot;</p>
<h2 id="static-analyzers-evolving-to-code-fixers">Static Analyzers Evolving to Code Fixers</h2>
<p><strong>But it's not an unexpected development.</strong> As I wrote in <em><a href="/blog/2018/10/22/brief-history-of-tools-watching-and-changing-your-php-code/">Brief History of Tools Watching and Changing Your PHP Code</a></em>, coding standard tools were <em>read-only</em> too and you had to change all the spaces manually. That was so annoying with large code-bases and many programmers didn't adopt it because it added the extra work on a daily basis, instead of saving time.</p>
<p>In response to this pressure, they <strong>had to become more useful by working for the programmer</strong>. PHP CS Fixer fixed code from the very first commit and PHP_CodeSniffer added this feature in response.</p>
<p>We can assume PHPStan and Phan will follow Psalm path since human-fixing is hard to scale and will become annoying in time compared to automated instant upgrades.</p>
<p><br></p>
<p>So what Psalm can do for you?</p>
<h2 id="1-missing-type-declaration">1. Missing Type Declaration?</h2>
<p>Do you know that feeling when PHPStan reports &quot;Method X is returning an int, but should be a string&quot; in 10 000 places? Yes, you can use <a href="/blog/2019/04/22/hidden-gems-of-php-packages-srab/">Baseliner</a> to ignore them and check only new code, <strong>but that only postpones the problem</strong>. One day there still will be 3-4 days of full-time boring work ahead of you.</p>
<pre><code class="language-php">/**
 * @return int
 */
function foo()
{
  return 'hello';
}</code></pre>
<p>That's what Psalm fixes for you and even adds the return type declaration:</p>
<pre><code class="language-diff">-/**
- * @return int
- */
-function foo()
+function foo(): string
 {
   return 'hello';
 }</code></pre>
<h3 id="how-to-run-it">How to Run it?</h3>
<p>Just use binary with <code>--alter</code> (that says &quot;fix&quot; this) + the <code>--issues</code> option:</p>
<pre><code class="language-bash">vendor/bin/psalm src --alter --issues=MissingReturnType
vendor/bin/psalm src --alter --issues=MissingClosureReturnType
vendor/bin/psalm src --alter --issues=InvalidReturnType
vendor/bin/psalm src --alter --issues=InvalidNullableReturnType</code></pre>
<p>The docs doesn't say if they stack together, but I'd assume so by the plural in &quot;issues&quot;:</p>
<pre><code class="language-bash">vendor/bin/psalm src --alter --issues=MissingReturnType,MissingClosureReturnType,InvalidReturnType,InvalidNullableReturnType</code></pre>
<h2 id="2-falseable-strings">2. Falseable Strings?</h2>
<p>Though the same kind of <em>detect type → complete it</em> logic, this example is really nice:</p>
<pre><code class="language-php">function foo(): string {
  return rand(0, 1) ? 'hello' : false;
}</code></pre>
<p>↓</p>
<pre><code>/**
 * @return string|false
 */
function foo() {
  return rand(0, 1) ? 'hello' : false;
}</code></pre>
<h2 id="3-unused-property-or-method">3. Unused Property or Method?</h2>
<p>I wish this would be run before each code-review. Imagine you decouple a method during refactoring and stop using one of the existing methods in the same class. A dead method is born. <strong>A dead method that you need to maintain, test and upgrade to new version of PHP or your framework.</strong></p>
<p>Not anymore.</p>
<pre><code class="language-diff"> class A {
-     private function foo() : void {}
-     protected function bar() : void {}
-     public function baz() : void {}
 }

 new A();</code></pre>
<p>Same goes for properties:</p>
<pre><code class="language-diff"> class A {
-    /** @var string */
-    public $foo;

-    /** @var string */
-    protected $bar;
 }

 new A();</code></pre>
<h3 id="how-to-run-it">How to Run it?</h3>
<pre><code class="language-bash">vendor/bin/psalm src --alter --issues=UnusedMethod
vendor/bin/psalm src --alter --issues=PossiblyUnusedMethod
vendor/bin/psalm src --alter --issues=UnusedProperty
vendor/bin/psalm src --alter --issues=PossiblyUnusedProperty</code></pre>
<h2 id="4-undefined-variable">4. Undefined Variable?</h2>
<p>How do you like this code?</p>
<pre><code class="language-php">if (rand(0, 1)) {
  $a = 5;
}
echo $a;</code></pre>
<p>Ups, <code>$a</code> is not defined (sometimes).</p>
<p>PHPStorm would tell you what's wrong with this code if you'd be writing this code. But again, it adds you extra manual work and doesn't <del>check</del> fix the rest of your huge code base from your CI.</p>
<p>Psalm can:</p>
<pre><code class="language-diff">+$a = null;
 if (rand(0, 1)) {
   $a = 5;
 }
 echo $a;</code></pre>
<p>If you're into static analysis, you know it's very hard to examine this flow of control and moreover add the variable not just the beginning of file or method, but to the right place where you or I would add it.</p>
<p>Cudos to <a href="https://github.com/muglug">Mathew</a>! 👍</p>
<h3 id="how-to-run-it">How to Run it?</h3>
<pre><code class="language-bash">vendor/bin/psalm src --alter --issues=PossiblyUndefinedVariable</code></pre>
<h2 id="check-all-13-of-them">Check all 13 of them</h2>
<p>At the time of writing this post, there is 13 issue alters now. I believe we can expect up to 100 more in next year or two.</p>
<p>You can run them all like this:</p>
<pre><code class="language-bash">vendor/bin/psalm src --alter --issues=all</code></pre>
<p><strong>Read about them and about extra options like <code>--php-version</code>, <code>--dry-run</code> or <code>--safe-types</code> in <a href="https://psalm.dev/docs/fixing_code">very beautiful and short documentation</a></strong>.</p>
<h2 id="try-it-even-if-you-use-phpstan">Try it, Even if you use PHPStan</h2>
<p>Personally, I use PHPStan because I'm not good with XML. But even if I should <strong>install Psalm just to complete type-declarations and remove dead code</strong>, it's worth the 10 minutes time to set it up. Give a try, it's huge time saver the bigger code base you have.</p>
<p>You don't have to take my word for it:</p>
<blockquote class="twitter-tweet mt-5 mb-5" data-lang="en"><p lang="en" dir="ltr">Damn, <a href="https://twitter.com/psalmphp?ref_src=twsrc%5Etfw">@psalmphp</a> type declarations are saving me *TONS* of time and testing.</p>— null (@Ocramius) <a href="https://twitter.com/Ocramius/status/1120797947921350656?ref_src=twsrc%5Etfw">April 23, 2019</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p><br></p>
<p>This is the future = PHP tools working for us - enjoy it :)</p>
<p><br><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/05/13/hidden-gems-of-php-packages-psalm-fixing-your-code</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 13 May 2019 00:00:00 +0000</pubDate>
                                    <updated>2019-06-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Jun 2019 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Jun 2019 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/05/13/hidden-gems-of-php-packages-psalm-fixing-your-code#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Is Rector Saving you Time? Support it on Patreon! ]]></title>
                <link>https://tomasvotruba.com/blog/2019/05/09/is-rector-saving-you-time-support-it-on-patreon</link>
                <description><![CDATA[ <p>Rector's <a href="/blog/2018/09/27/open-source-behind-the-scenes-finding-the-rector-vision/">mission</a> is to upgrade anything you want. It already can upgrade PHP 5.2 all the way to PHP 7.4 (I've added arrow functions yesterday to php-parser and today to Rector), Symfony from 2.8 to 4.3, remove code that does nothing, import namespaces in a smart way and 29 more levels.
<br><br>
I've started project 2 years ago as a small idea challenge and I'm creating Rector in my free time. I think every Rector rule ever created should be free for everyone and for a that I need your help.</p> ]]></description>
                <content:encoded><![CDATA[ <p>Rector can squash time that requires migration of 100 000 lines of code from 2-3 months to 5 days. We already made that happen <a href="/blog/2019/08/26/how-we-migrated-54-357-lines-of-code-nette-to-symfony-in-2-people-under-80-hours/">with Nette to Symfony migration</a>.</p>
<p>I want to make Rector even better - make <strong>migration of legacy code more affordable to anyone</strong>, let you instantly upgrade from an old framework that is not supported over 5 years to the newest version or even switch from framework that is no more useful to you to a one you want to use for age.</p>
<p>In the end, Rector should be the next member of your team that you will throw all the boring work at.</p>
<p>To be able to do that, I have to focus my time to work on private commercial projects and fund the Rector development from them.</p>
<h2 id="del-legacy-code-del"><del>Legacy Code</del></h2>
<p>When I look at Reddit, I see many questions regarding legacy PHP code with PHP 5.3, <code>mysql</code>, PHP templates, Zend 1, Symfony 1 (well anything <em>1</em>), own proprietary framework, that no-one wants to work with and when they complain to the boss, they get rejected: &quot;I can't afford it&quot;. It hurts me to see stories like this.</p>
<blockquote class="blockquote mt-4 mb-4 text-center">
    "Every line code becomes legacy in the second it's written."
</blockquote>
<p>But even if you run on PHP 7.3 and Symfony 4.2, Cake 3.7 or Laravel 5.8, in 2 years we'll call it &quot;legacy code&quot;.</p>
<p>Rector can make remove &quot;legacy code&quot; from our dictionaries. For that, I need your help!</p>
<div class="text-center mt-5 mb-3">
<p><strong>Do you find Rector useful?</strong></p>
<div class="text-center">
    <a href="https://www.patreon.com/rectorphp">
        <img src="/assets/images/posts/2019/patreon/rector_and_patreon.png" style="max-width:20em"></a>
</div>
<p><a href="https://www.patreon.com/rectorphp" class="btn btn-success btn-lg mt-2 mb-4">
<em class="fab fa-patreon fa-fw"></em>
Support Rector on Patreon
</a></p>
</div>
<h3 id="get-custom-rule-as-reward">Get Custom Rule as Reward</h3>
<p>There is a special reward for <em>Generous Backers</em>. Once a month, you can send me PHP code with 1 pattern that annoys you and you want to refactor it. I'll create a 1 Rector rule, that will get rid of it 👍</p>
<p><br></p>
<h2 id="one-time-donation">One-Time Donation</h2>
<p>Aren't you sure about long-term contribution of Rector for you but still want to say &quot;thank you&quot;?
Use ↓</p>
<p><a href="https://www.paypal.me/rectorphp" class="btn btn-primary mt-2">
<em class="fab fa-paypal fa-fw"></em>
One-Time donation through PayPal
</a></p>
<p><br></p>
<p>Thank you! ❤️️</p>
<p><br></p>
<p>You don't have spare 5 $? Show your Love and give <a href="https://github.com/rectorphp/rector">Rector a ⭐ on Github</a>!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/05/09/is-rector-saving-you-time-support-it-on-patreon</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 09 May 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/05/09/is-rector-saving-you-time-support-it-on-patreon#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ End of goPhp71.org ]]></title>
                <link>https://tomasvotruba.com/blog/2019/05/06/end-of-gophp71-org</link>
                <description><![CDATA[ <p>I <a href="/blog/2017/06/05/go-php-71/">launched goPhp71.org</a> in June 2017, just 6 months after release of PHP 7.1. In those times nobody was sure what version to require - 7.1? 7.0? Or wait for 7.2?
<br>
<br>
Future is now. There is no need for the initiative now and it's time to <a href="https://zenhabits.net/letting-go">let it go</a>.
<br>
<strong>How much did it cost? What was the effect? Was it worth it?</strong> I'll share answers to these question so you know what to expect when you start a similar project. Let's get numberz!</p> ]]></description>
                <content:encoded><![CDATA[ <p>When I bought the <code>gophp71.org</code> domain, I had no idea what it will become. You know, try to tell the whole PHP open-source community what min version should they use in <code>composer.json</code>, right? Explain why it's a good idea to work as a community to people you've never met. <strong>But when I saw <a href="https://www.garfieldtech.com/blog/go-php-5-go">Go PHP 5</a> I felt it's my duty to give back to PHP community and help with PHP 7.1.</strong></p>
<p>Today it's gonna about numbers, how well PHP community works together and few of mine fuck-ups :)</p>
<h2 id="how-much-did-it-cost">How Much Did it Cost?</h2>
<ul>
<li>Domain <code>gophp71.org</code>? - 15 $ per year, 2 years = <strong>30 $</strong> in total</li>
<li>Hosting? <strong>0 $</strong> Thanks to <a href="https://github.com/tomasVotruba/gophp71.org">Github Pages hosting</a> and <a href="https://www.statie.org">static site generator Statie</a></li>
<li>And the work? I didn't Toggle it, but with all the design iterations, posts and commenting all over the internet <strong>I'd say ~25-30 hours</strong>. As you can guess, I'm very bad at tuning CSS for mobiles. Use your own hourly rate to have the idea in $.</li>
</ul>
<h2 id="what-was-the-impact">What was The Impact?</h2>
<p>I took a while. Thanks to Jordi (thank you!), we have numbers on min. required PHP version on Packagist:</p>
<ul>
<li><a href="https://seld.be/notes/php-versions-stats-2017-1-edition">May 2017</a> - 1,7 %</li>
<li><a href="https://seld.be/notes/php-versions-stats-2017-2-edition">November 2017</a> - 5,3 % (+ 218 % compared to previous 6 months)</li>
<li><a href="https://seld.be/notes/php-versions-stats-2018-1-edition">May 2018</a> - 11,8 % (+ 121 %)</li>
<li><a href="https://blog.packagist.com/php-versions-stats-2018-2-edition">November 2018</a> - 19,4 % (+ 64 %)</li>
</ul>
<p>Is 19,4 % to small for you?</p>
<p><strong>What about 38 528?</strong> That's the absolute number of packages that required PHP 7.1 in <a href="https://packagist.org/statistics">November 2018</a>.</p>
<p><br></p>
<p>I look forward to May 2019 stats update coming anytime soon.</p>
<h2 id="correlation-causality">Correlation !== Causality</h2>
<p>I don't think one website changed the PHP world. We made it together as one community. I tried to convince <em>David</em> from PHP 7.0 to PHP 7.1 over lunch. I thought I lost him not having enough arguments and <em>Nette</em> will go with PHP 7.0. <strong>Later that month Nette went 7.1</strong> as one of the first PHP frameworks - it was not stable, but still had a big effect on Czech open-source maintainers 👍</p>
<p>There was a sparkle of hope this might work.</p>
<p><br></p>
<p><strong>Fabien from Symfony helped</strong> <a href="https://twitter.com/fabpot/status/851558576770252800">by opening a pool on Twitter</a>:</p>
<img src="/assets/images/posts/2019/go-php-die/symfony_pool.png">
<p>Over 1000 people helped this in that pool! To sum it up - 1003 specific people so far 👍</p>
<p><br></p>
<p><strong>Doctrine team also helped</strong> with <a href="https://www.doctrine-project.org/2017/07/25/php-7.1-requirement-and-composer.html">PHP 7.1 announcement</a> for all their packages. They also explained very nicely <em>Why dropping PHP support in a minor version is not a BC break</em> 👍</p>
<blockquote class="blockquote mb-5 mt-5">
"A BC break happens when there is an incompatible change that your package manager can't handle. For example, changing a method signature in a minor version is a no-go, since the composer version constraints mentioned above assume any minor upgrade can safely be used."
</blockquote>
<p>Remember this quote, we'll need it when we'll go PHP 8.1 (maybe?) later.</p>
<p><br></p>
<p><a href="https://github.com/TomasVotruba/gophp71.org/graphs/contributors"><strong>Over 19 PHP projects</strong></a> have added their go PHP 7.1 statement to the website in the 1st year. Thank you' all! 👍</p>
<img src="/assets/images/posts/2019/go-php-die/most_active.png" class="img-thumbnail">
<p>Last but not the least, <strong><a href="https://www.reddit.com/r/PHP/comments/6xqa23/go_php_71">the_alias_of_andrea</a> helped</strong> spread the news on Reddit 👍</p>
<img src="/assets/images/posts/2019/go-php-die/reddit.png">
<p><br></p>
<p>&quot;Sure Tom, good job... you're the best, but we're really reading just for your fuck-ups.&quot;</p>
<p>All right...</p>
<h2 id="what-i-fucked-up">What I Fucked Up?</h2>
<h3 id="too-complicated-wording">Too Complicated Wording</h3>
<p>I wrote &quot;add your project too&quot; instructions on the website, so all projects could join. <strong>I learned that people don't understand my complicated thoughts</strong>.</p>
<p>Instead of keeping it as simple as:</p>
<ul>
<li>&quot;Add your project if you require PHP 7.1 in the stable release&quot;</li>
</ul>
<p>I created a mess like this:</p>
<ul>
<li>&quot;Add your project if you have PHP 7.1 in the <code>composer.json</code> file. It doesn't matter it's not stable yet. If it's not stable yet, add <em>released: no</em> to the configuration file. But remember to update this website, when you finally decide to use a stable tag. Also, add some link to the statement, so we can read about it a bit more. I hope it's not too much to ask you to follow these very few simple steps. I really tried to make them very easy, as you can see. Thank you&quot;</li>
</ul>
<p>That led to hanged PRs, manual <em>yes/no</em> corrections that didn't have much-added value and confused comments from contributors (I'm sorry about that).</p>
<h3 id="too-late">Too Late</h3>
<p><strong>I fucked up timing.</strong> PHP 7.1 was released in December 2016, yet <code>gophp71.org</code> was not launched until 7 months later.
I had the idea before, but <strong>I was afraid how will you react</strong>. I had thoughts like &quot;Who the hell is this Votruba and why does he think he is that he tells us what PHP version should we use?&quot; or &quot;Do you want us to go PHP 7.1? Well, we'll go PHP 7.0 on one project and PHP 7.2 on the other, a-ha!&quot; or &quot;What is he selling us? That's some version conspiracy!&quot;</p>
<p>Now I see that was stupid. I should start earlier, try it, give a go and adapt upon the feedback.</p>
<p><br></p>
<p>That's all folks, hope you enjoyed it! I sure did start almost 24 months ago with just this:</p>
<img src="/assets/images/posts/2017/go-php-71/first-version.png">
<h2 id="what-s-going-to-be-next">What's Going to be Next?</h2>
<p>Will we &quot;Go PHP 8&quot;? Someone from Arizona, US <a href="https://gophp8.org">already bought the <code>gophp8.org</code> domain</a>.
Or 8.1, when 8 becomes more mature?</p>
<p>Who knows. All I know <strong>I'm very happy to be part of our PHP <del>community</del> family ❤️️, where we support each other despite our differences and work together when we need to</strong>.</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/05/06/end-of-gophp71-org</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 06 May 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/05/06/end-of-gophp71-org#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Alias as a Code Smell ]]></title>
                <link>https://tomasvotruba.com/blog/2019/05/02/alias-as-a-code-smell</link>
                <description><![CDATA[ <p>Do you have 2 class with the same name? <code>App\Entity\Product</code> and <code>App\Entity\Product</code>? Of course not. But <strong>I bet you have at least 2 classes with the same <em>short name</em> <code>*\Product</code> and <code>*\Product</code></strong>.
<br>
<br>
And that smells... Why?</p> ]]></description>
                <content:encoded><![CDATA[ <p>In recent projects, I consult I start to notice an interesting pattern. It's how important are uniquely named short classes. Short class name = the part after last <code>\</code>.</p>
<p>How would you like to use this code?</p>
<img src="/assets/images/posts/2019/alias/too_many.gif" class="img-thumbnail">
<h2 id="duplicated-short-classes-sponsored-by-ddd">Duplicated Short Classes sponsored by DDD</h2>
<p>When I ask why the programmer picked such a naming, more often than not they refer DDD patterns, where you don't care if the element is interface, trait or abstract. The naming is always the same. Do you know which of them is class, interface, category Query and product Query?</p>
<ul>
<li><code>Query</code></li>
<li><code>Query</code></li>
<li><code>Query</code></li>
<li><code>Query</code></li>
</ul>
<p><br></p>
<p>Now the programmer has to become a detective.</p>
<ul>
<li><code>Query</code> → see the namespace, oh it's a <code>/Contract</code>, that's probably an interface</li>
<li><code>Query</code> → oh, the namespace is <code>/Behavior</code>, that's probably a trait</li>
<li><code>Query</code> → see the file location, it's in <code>/Model/Category</code>, that's probably a category query</li>
<li><code>Query</code> → see the file location, it's in <code>/Model/Product/Contract</code>, that's probably a product query interface</li>
</ul>
<p>Good job! The <strong>code starts to steal time and energy</strong> the reader 🤦.</p>
<h2 id="make-it-clear-with-aliases">Make it Clear with Aliases?</h2>
<p>Luckily, there is a band-aid to this problem, aliases!</p>
<pre><code class="language-php">&lt;?php

namespace App;

use App\Behavior\Query as QueryTrait;
use App\Model\Category\Query as CategoryQuery;
use App\Model\Product\Contract\Query as ProductQueryInterface;
use App\Contract\Query as QueryInterface;

final class ProductQuery implements ProductQueryInterface, QueryInterface
{
    use QueryTrait;

    public function findByCategoryQuery(CategoryQuery $categoryQuery)
    {
        // ...
    }
}</code></pre>
<p>Now we have 200 % more code and but it's a bit more clear.</p>
<blockquote class="blockquote mt-4 mb-4 text-center">
    When you see an alias, and it's not for 3rd party code,
    <br>
    you have a code smell in there.
</blockquote>
<p>Get rid of it!</p>
<h2 id="use-your-common-sense">Use Your Common Sense</h2>
<p>If you see a car of Tesla, you'd probably name it &quot;Tesla car&quot;. Not a &quot;car&quot;.</p>
<p><strong>Get rid of aliases and name your classes in a unique and clear way:</strong></p>
<pre><code class="language-php">&lt;?php

namespace App;

use App\Behavior\QueryTrait;
use App\Model\Category\CategoryQuery;
use App\Model\Product\Contract\ProductQueryInterface;
use App\Contract\QueryInterface;

final class ProductQuery implements ProductQueryInterface, QueryInterface
{
    use QueryTrait;

    public function findByCategoryQuery(CategoryQuery $categoryQuery)
    {
        // ...
    }
}</code></pre>
<h2 id="automated-smell-detection">Automated Smell Detection</h2>
<p>Do you need to help to find these smells? Just add <code>NoDuplicatedShortClassNameRule</code> to your coding standard:</p>
<pre><code class="language-yaml"># phpstan.neon
rules:
    - Symplify\CodingStandard\Rules\NoDuplicatedShortClassNameRule</code></pre>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/05/02/alias-as-a-code-smell</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 02 May 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-08-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Aug 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/05/02/alias-as-a-code-smell#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Rector European Tour in May &amp; June 2019 ]]></title>
                <link>https://tomasvotruba.com/blog/2019/04/29/rector-european-tour-in-may-june-2019</link>
                <description><![CDATA[ <p>I asked Łukasz Chruściel if we see each other on one of the conferences I'm coming with Rector and he's like: &quot;I haven't noticed any announcements that you will talk somewhere. Did you set up any long distance trip?&quot;
<br><br>
Ops, I forgot to tell you. Let's fix it because I'd love to meet you and hear about your pain points.</p> ]]></description>
                <content:encoded><![CDATA[ <p><strong>I'd love to thank all people that support Rector, use it in their daily work and continuous integration</strong>. It took a while to get the attention of everyday use. I visited only 1 conference with Rector in 2018, but now <strong>it seems the side is turning</strong>.</p>
<div class="text-center">
    <img src="/assets/images/posts/2019/tour/rector-daily.png" class="img-thumbnail mt-4"><em>Rocketing Rector downloads on Packagist</em>
</div>
<p><br></p>
<p>I'm not sure who bribed all these folks, <strong>but this year I got accepted to 6 amazing conferences</strong>. I had to turn <a href="https://www.neoscon.io">Neos Conference</a> down with my deepest apologies, because I couldn't fit the flight to another conference in the same day.</p>
<p><strong>I'll visit 5 different countries in 30 days</strong>. I never traveled so much and so far in a month. I look forward to all these new countries and even more <strong>I look forward to you PHP folks</strong>!</p>
<p>I already missed a flight this year, so let's hope it will not <a href="/blog/2018/10/18/how-i-almost-missed-my-talk-in-php-asia-conference/">happen again</a>.</p>
<div class="text-center">
    <img src="http://getrector.org/assets/images/logo/rector-no_frame_vector.svg" style="width: 7em" class="mt-5"></div>
<h2 id="where-exactly">Where Exactly?</h2>
<p>There are exact days and places where I'll present my Rector talk:</p>
<ul>
<li>Verona, Italy - <a href="https://2019.phpday.it">PHP Day</a> - <strong>May 10</strong></li>
<li>Moscow, Russia - <a href="https://phprussia.ru/2019">PHP Russia</a> - <strong>May 17</strong></li>
<li>Berlin, Germany - <a href="https://githubsatellite.com">Github Satelite</a> - <strong>May 23</strong> (just hanging out without talk)</li>
<li>Kiev, Ukraine - <a href="https://fwdays.com/en/event/php-fwdays-2019">PHP fwdays</a> - <strong>Jun 1</strong></li>
<li>Berlin, Germany - <a href="https://phpconference.com">PHP Conference</a> - <strong>Jun 4</strong></li>
<li>Amsterdam, Netherlands - <a href="https://www.phpconference.nl">Dutch PHP Conference</a> - <strong>Jun 8</strong></li>
</ul>
<p>I'll usually visit the city for 2 days around that date.</p>
<div class="text-center">
    <img src="/assets/images/talk_dresden.jpg" style="width: 30em" class="mt-4 img-thumbnail"><br><em>This is how I look nowadays</em>
</div>
<h2 id="let-s-meet-and-talk">Let's Meet and Talk</h2>
<p>I'll have limited time, but if you'll <a href="https://api.whatsapp.com/send?phone=420776778332&amp;text=Hi%20Tom,%20I&#039;d%20love%20to%20meet%20you%20at%20the%20conference%20:">WhatsApp me</a> (or <a href="/contact">call/mail</a> me), I'd love to grab a beer and talk with you.</p>
<p><strong>We can talk about</strong> Rector, legacy code, good coffee, communities, traveling, dnb, trains, psychology, mentoring, polyphasic sleep, intuitive education, artificial intelligence, children, 10x programming... whatever comes to our minds :)</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/04/29/rector-european-tour-in-may-june-2019</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/04/29/rector-european-tour-in-may-june-2019#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Don&#039;t Give Up Your PHP Code for Compiler Passes so Easily ]]></title>
                <link>https://tomasvotruba.com/blog/2019/04/25/don-t-give-up-your-php-code-for-compiler-passes-so-easily</link>
                <description><![CDATA[ <p>Sometimes you need to achieve very simple operation - e.g. get all services of a certain type in a certain order or key name. When we start to use a PHP framework, we tend to underestimate our PHP skills and look for <em>the framework</em> way.
<br><br>
<strong>Who cares if we use 50 lines in 3 files PHP files and 1 YAML file instead of 1 factory in 20 lines.</strong> We're cool!</p> ]]></description>
                <content:encoded><![CDATA[ <p>This mini-series started in <a href="/blog/2019/02/14/why-config-coding-sucks/">Why Config Coding Sucks</a>. <strong>There we learned to move <del>weakly</del> un-typed strings to strict-typed PHP code</strong>. It's not only about YAML or NEON files, but about any config-like syntax in general (XML, in...).</p>
<p>Today we move to PHP-only land, that suffers a similar problem.</p>
<h2 id="what-we-talk-about">What We Talk About?</h2>
<p>So we talk about <a href="https://symfony.com/doc/current/service_container/compiler_passes.html">Compiler Passes in Symfony</a>? Well, yes and no. Not only about them, but about any PHP code that moves around services in the DI container.</p>
<ul>
<li>in Nette it's a class that extends <a href="/blog/2017/02/15/minimalistic-way-to-create-your-first-nette-extension/"><code>CompilerExtension</code></a></li>
<li>in Symfony it's class that implements <a href="https://github.com/symfony/symfony/blob/fba11b4dc34e7c589d8c30d5b6a090387d52e648/src/Symfony/Component/DependencyInjection/Compiler/CompilerPassInterface.php"><code>CompilerPassInterface</code></a> or extends <a href="https://github.com/symfony/symfony/blob/fba11b4dc34e7c589d8c30d5b6a090387d52e648/src/Symfony/Component/DependencyInjection/Extension/Extension.php"><code>Extension</code></a></li>
<li>in Laravel it can be <a href="https://laravel.com/docs/master/providers">service providers</a></li>
</ul>
<p>They have their useful use-cases, but people tend them to use <em>as a bazooka to mouse</em>. Just look at <a href="https://stackoverflow.com/questions/54590981/symfony-4-how-to-access-the-service-from-controller-without-dependency-injectio">answers under this StackOverflow question</a>.</p>
<p><br></p>
<p>Let's look at an example that is not far from the reality of your work with. But still it's only an example, it could be apples in a basket instead.</p>
<h2 id="make-price-calculation-easy-to-extend-and-maintain-without-changing-it">Make Price Calculation easy to Extend and Maintain without Changing it</h2>
<p>Based on <a href="/mission">my experience with my clients</a>, this is the biggest problem in e-commerce projects. The ideal wishes of company owners clash with limits programmers and architecture:</p>
<ul>
<li>&quot;The price calculation must be ready for use&quot;</li>
<li>&quot;I need to add different price to product B if they're in combination with product A&quot;</li>
<li>&quot;It must be easy to maintain&quot;</li>
<li>&quot;The business must be able to update dependency on our code&quot;</li>
<li>&quot;We can't predict how the price will develop&quot;</li>
</ul>
<p><del>This not possible!</del> - How can we do it as close as possible now?</p>
<p>Let's say the solution is fairly easy. Same as <a href="https://symfony.com/doc/current/security/voters.html">Voters are to Security</a>, we introduce 1 service <code>PriceCalculator</code> that collects all the little one <code>PriceModifierInterface</code>.</p>
<p>How would such implementations look like in <em>framework-way</em>?</p>
<h3 id="1-in-symfony">1. In Symfony</h3>
<pre><code class="language-php">&lt;?php

namespace App\DependencyInjection;

use Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface;
use Symfony\Component\DependencyInjection\ContainerBuilder;

final class PriceCompilerPass implements CompilerPassInterface
{
    public function process(ContainerBuilder $containerBuilder)
    {
        $priceCalculator = $containerBuilder-&gt;get(PriceCalculator::class);

        foreach ($containerBuilder-&gt;findTaggedServiceIds('price_modifier') as $service =&gt; $tags) {
            $priceCalculator-&gt;addMethodCall('add', [new Reference($service)]);
        }
    }
}</code></pre>
<p><strong>Again, we need to create some legacy code that is hard to maintain:</strong></p>
<ul>
<li>add tagging in extension/bundle or better type resolution <em class="fas fa-fw fa-times text-danger fa-lg"></em></li>
<li>register this in Kernel <em class="fas fa-fw fa-times text-danger fa-lg"></em></li>
<li>remember the tag name (<a href="/blog/2018/08/27/why-and-how-to-avoid-the-memory-lock">don't remember anything</a>/) <em class="fas fa-fw fa-times text-danger fa-lg"></em></li>
<li>use the tag everywhere (YAML) <em class="fas fa-fw fa-times text-danger fa-lg"></em></li>
<li>vendor-lock the metadata in the config (YAML) <em class="fas fa-fw fa-times text-danger fa-lg"></em></li>
<li>people maintaining project after you leave have to learn this <em>Symfony way</em> <em class="fas fa-fw fa-times text-danger fa-lg"></em></li>
</ul>
<p><br></p>
<h3 id="2-in-nette">2. In Nette</h3>
<pre><code class="language-php">&lt;?php

namespace App\DI;

use Nette\DI\CompilerExtension;

final class PriceExtension extends CompilerExtension
{
    public function beforeCompile()
    {
        $containerBuilder = $this-&gt;getContainerBuilder();
        $priceCalculator = $containerBuilder-&gt;get(PriceCalculator::class);

        $priceModifiers = $containerBuilder-&gt;findByType(PriceModifierInterface::class);
        foreach ($priceModifiers as $service) {
            $priceCalculator-&gt;addSetup('add', [$service]);
        }
    }
}</code></pre>
<p><strong>Also, we create legacy code that is hard to maintain:</strong></p>
<ul>
<li>register extension to a config (Neon) <em class="fas fa-fw fa-times text-danger fa-lg"></em></li>
<li>vendor-lock the metadata in the config (Neon) <em class="fas fa-fw fa-times text-danger fa-lg"></em></li>
<li>people maintaining project after you leave have to learn this <em>Nette way</em> <em class="fas fa-fw fa-times text-danger fa-lg"></em></li>
</ul>
<p>I need to take a break, my brain is tired just <strong>by making up this complicated and non-sense code</strong>. I mean, I used to write this code in my every project for 5 years in Symfony and Nette projects, because it was &quot;the best practice&quot; and I didn't question it, but <strong>there was always something scratching in the back of my head</strong>.</p>
<p><br>
<br></p>
<h2 id="keep-simple-things-simple">Keep Simple Things Simple</h2>
<p>Now imagine you've ended in a train crash, hit your head and forget all the frameworks you know. All you have left is actually the best you can achieve in any mastery - a <a href="https://zenhabits.net/beginner">mind of the begginer</a>.</p>
<ul>
<li>&quot;How would you get all services of a certain type in a certain order or key name?&quot;</li>
</ul>
<p>In our specific example:</p>
<ul>
<li>&quot;How would you get all <code>PriceModifierInterface</code> services into <code>PriceCalculator</code> sorted by priority?&quot;</li>
</ul>
<pre><code class="language-php">&lt;?php

final class PriceCalculatorFactory
{
    /**
     * @var PriceModifierInterface[]
     */
    private $priceModifiers = [];

    /**
     * @param PriceModifierInterface[] $priceModifiers
     */
    public function __construct(array $priceModifiers)
    {
        $this-&gt;priceModifiers = $priceModifiers;
    }

    public function create(): PriceCalculator
    {
        $priceModifiersByPriority = [];
        foreach ($this-&gt;priceModifiers as $priceModifier) {
            $priority = $priceModifier-&gt;getPriority(); // this could be "getKey()" or any metadata
            $priceModifiersByPriority[$priority] = $priceModifier;
        }

        // sort them in any way
        ksort($priceModifiersByPriority);

        return new PriceCalculator($priceModifiersByPriority);
    }
}</code></pre>
<p>In some framework we have still have to add 1 config vendor-lock <em class="fas fa-fw fa-times text-danger fa-lg"></em> :</p>
<pre><code class="language-yaml">services:
    App\Price\PriceCalculator:
        factory: ['@App\Price\PriceCalculatorFactory', 'create']</code></pre>
<p>I use <a href="https://github.com/symplify/package-builder#do-not-repeat-simple-factories">compiler pass</a> for now, but if you know how to remove it, let me know.</p>
<p>How we get <code>$priceModifiers</code> is not that important now, it's <a href="/blog/2018/11/12/will-autowired-arrays-finally-deprecate-tags-in-symfony-and-nette/">an implementation detail</a>.</p>
<h2 id="durable-amp-readable">Durable &amp; Readable</h2>
<p>The important thing is we got a code that:</p>
<ul>
<li>is <strong>strictly typed</strong> <em class="fas fa-fw fa-lg fa-check text-success"></em></li>
<li>we all understand it <em class="fas fa-fw fa-lg fa-check text-success"></em></li>
<li>will not be affected by any syntax/architecture changes in our favorite framework <em class="fas fa-fw fa-lg fa-check text-success"></em></li>
<li>can be checked by <strong>coding standard tools</strong> <em class="fas fa-fw fa-lg fa-check text-success"></em></li>
<li>can be analysed by <strong>static analysis tools</strong> <em class="fas fa-fw fa-lg fa-check text-success"></em></li>
<li>and refactored by <strong>instant upgrade tools</strong> <em class="fas fa-fw fa-lg fa-check text-success"></em></li>
</ul>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/04/25/don-t-give-up-your-php-code-for-compiler-passes-so-easily</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/04/25/don-t-give-up-your-php-code-for-compiler-passes-so-easily#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Symfony 4.2 is used Twice More than Symfony 3.4 ]]></title>
                <link>https://tomasvotruba.com/blog/2019/04/18/symfony-4-2-is-used-2-times-more-than-symfony-3-4</link>
                <description><![CDATA[ <p>PHP itself is very quickly adopted. Last Packagist stats from 2018/11 <a href="https://blog.packagist.com/php-versions-stats-2018-2-edition">report 32,6 %</a> people are using PHP 7.2. That's a very nice number, great job y' all!
<br><br>
But most of our code is not just plain PHP. <strong>It's framework-locked PHP</strong>. How is framework adoption?</p> ]]></description>
                <content:encoded><![CDATA[ <div class="alert alert-sm alert-success mt-3">
This post was inspired by very active reactions to <a href="/blog/2019/04/11/trends-of-php-frameworks-in-numbers/">Trends of PHP Frameworks in Numbers</a>
</div>
<p>If you look at the <a href="/php-framework-trends">PHP Framework Trends table</a> and see Symfony with 595 mils. downloads last year, what will it tell us? What if 90 % of that is just legacy Symfony 2.8?</p>
<p>When I talked with my friends Marek and Honza about PHP downloads trends last week, they came with an idea that stats should include <strong>downloads numbers for each version</strong> and <strong>the release date</strong> of that version. That would help us separate long-tail dinosaurs from actively adopted packages.</p>
<p>So I closed myself in a closet for 3 days and put together framework downloads grouped by version (<a href="https://github.com/TomasVotruba/tomasvotruba.com/pull/738/files">see PR</a>). I won't lie, few numbers really surprised me.</p>
<h2 id="symfony-on-bleeding-edge">Symfony on Bleeding Edge</h2>
<p>They say it's best practice to use LTS version - now Symfony 3.4. I personally prefer living on the edge with the 4.x version, but after feedback from the community, I lowered requirements to Symfony 3.4 as well.</p>
<p>Let's look at a base stone for Symfony applications - <a href="/package-downloads-by-version/#symfony-http-kernel/">symfony/http-kernel</a>.</p>
<ul>
<li>v4.2 - <strong>1 838 593</strong> downloads monthly - <strong>54 %</strong> of all downloads</li>
<li>v4.1 - 230 975</li>
<li>v4.0 - 45 539</li>
<li>v3.4 - <strong>891 778</strong></li>
</ul>
<p>It's that Symfony community doesn't wait on another LTS. It grabs the new features as soon as they're out. Amazing job!</p>
<h2 id="laravel-wide-spread-and-stable">Laravel wide Spread and Stable</h2>
<p>I don't follow Laravel releases much. There is no clear release plan like PHP or Symfony has and they seemed somewhat random to me.
So when I looked at stats of <a href="/package-downloads-by-version/#laravel-framework/">laravel/framework</a>, I was surprised there are <strong>basically 2 release/year every ~6 months</strong>.</p>
<p>It's also interesting, that people stick with various versions:</p>
<ul>
<li>v5.8 - 623 534 - <strong>30 % adoption</strong></li>
<li>v5.7 - 532 232</li>
<li>v5.6 - 240 762</li>
<li>v5.5 - 317 489</li>
<li>v5.4 - 146 119</li>
</ul>
<p>Other versions have less than 70 k downloads.</p>
<p>It's also notable that <strong>89,5 %</strong> downloads are for Laravel 5.x.</p>
<h2 id="zend-injection-along-with-adoption">Zend Injection along with Adoption</h2>
<p>This week was <a href="https://mwop.net/blog/2019-04-17-from-zend-to-laminas.html">Matthew announced moving Zend to Laminas project</a>. For users, it technically means just change of <code>Zend</code> namespace to <code>Laminas</code>, but potentially growth of Zend features thanks Linux Foundation funding. Great news!</p>
<p>How is the <a href="/package-downloads-by-version/#zend/">Zend adoption doing now</a>?</p>
<ul>
<li>27 of 91 packages has an adoption rate of 80 %+</li>
<li>51 of 91 packages has an adoption rate of 60 %+</li>
</ul>
<p>The Zend community is clearly interested in new features, far from &quot;Zend is Dead&quot;.</p>
<h2 id="cakephp-with-peak">CakePHP with Peak</h2>
<ul>
<li>The most <strong>downloaded package is <code>cakephp/chronos</code></strong> - with 290 045 downloads/month. Next packages have only 60-70 000 downloads.</li>
</ul>
<h2 id="nette-slowly-adopting">Nette slowly Adopting</h2>
<ul>
<li>The backbone for applications - <a href="/package-downloads-by-version/#nette-application/"><code>nette/application</code></a> - <strong>has only 4 % adoption</strong>. No surprise there, since Nette 3.0 was released only on April 2nd, 2019. Keep updating!</li>
</ul>
<p>Here are <a href="https://github.com/TomasVotruba/tomasvotruba.com/blob/6c9df3aa834a213ea1a94d619f4cbc1564ff727e/source/_data/generated/vendor_packages_by_version.yaml">data to this day</a>, I wonder how they change in 6 months.</p>
<p><br></p>
<p>This is just the tip of the iceberg that caught my eyes.</p>
<p><strong><a href="/package-downloads-by-version">Check the full table</a></strong> and discover more interesting details about your favorite framework.</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/04/18/symfony-4-2-is-used-2-times-more-than-symfony-3-4</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/04/18/symfony-4-2-is-used-2-times-more-than-symfony-3-4#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Pattern Refactoring ]]></title>
                <link>https://tomasvotruba.com/blog/2019/04/15/pattern-refactoring</link>
                <description><![CDATA[ <p>In <a href="/blog/2019/04/01/removing-static-there-and-back-again/">Removing Static - There and Back Again</a> post we tried looked at anti-patterns in legacy code from a new point of view. It can be static in your code, it can be active record pattern you needed for fast bootstrapping of your idea, it can be moving from the code in controllers to command bus.
<br>
<br>
<strong>They can be coupled in your code in hundreds of classes. That's a big problem, you might think, but it's only single pattern</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="use-your-personal-preferences">Use Your Personal Preferences</h2>
<p>For pattern, refactoring is not important what I believe is the best or is considered <em>general best practice</em> (if such weak thing can even exist). I'm kicking myself in the nuts now, but I feel I have to write it.</p>
<p>No external consultant or blog post can give you a qualified answer on what to do with a code he or she saw for a few days. I mean, they can give you tip and qualified feedback, because they saw dozens of similar code bases, but in the end, it's up to you to do the experiment and verify it on your code base.</p>
<p>The best thing in the code is decided by the team, that works with the code every day.</p>
<h2 id="and-for-a-time-it-was-good">And for a Time, It Was Good</h2>
<p>Let's look at our use case inspired by the problems of the people around me. Imagine you have an active record pattern all over your code base. In 1 000 places, so it's easier to work with it:</p>
<pre><code class="language-php">&lt;?php

$product = Product::find(5);
$product-&gt;name = 'Train Ticket';
$product-&gt;save();</code></pre>
<p>This pattern helped you to grow your minimal viable product, deliver features, enjoy growth and make money. It was very useful to you at a certain time in the past. The same way it was useful to live with parents when we went to school.</p>
<p>Your company grew every year for last 5 years, with growing code bases and new modules you have more bugs with weak typing and you've <strong>decided to move</strong> to Doctrine and separate Entity and Repository.</p>
<h2 id="let-s-refactor">Let's Refactor</h2>
<p>The <strong>why</strong> is clear and the decision to change the codebase has been made. Now <strong>how</strong> do you refactor your 1000 places that use active record?</p>
<p>Before answering, keep in mind, that you have to explain these options to your boss (CEO, product owner...) because he or she cares about following in this order:</p>
<ul>
<li><strong>How much time</strong> will it take? <em>The faster the better</em></li>
<li><strong>How much money</strong> will it cost? <em>The cheaper the better</em></li>
<li><strong>How big code good quality</strong> it brings? The <em>higher</em> the better</li>
</ul>
<p>Well, your boss will probably not ask the last question, but I've added it just for the sake of our programming perception of the relationship of code and business.</p>
<h3 id="1-rewrite-write-the-same-code-in-clean-way">1. Rewrite = Write the Same Code in Clean Way</h3>
<p>How could the pitch for rewrite look like?</p>
<p>&quot;<em>The active record is coupled with everything, it's in controllers, in commands, and in services. Even if we change it in a single class, it will probably influence most of the rest code. After we rewrite adding features would be much easier, because we would not have to switch between the old and new code base. We know what we want and it would take less time in the end than any other solution.</em>&quot;</p>
<p>Suddenly, your colleague comes. You don't like him, because he's too &quot;smart&quot;, younger and has less experience than you (he's younger, how can he have more experience, right?) and he starts to argue:</p>
<p>&quot;<em>Rewrite from scratch is one of the things you should never do. Why? Because rewriting from scratch has a bad history of failures. Joel Spolsky, CEO, and co-founder of StackOverflow wrote <a href="https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i">Things You Should Never Do</a> in 2000.</em>&quot;</p>
<div class="text-center mb-4">
    <img src="https://i1.wp.com/www.joelonsoftware.com/wp-content/uploads/2016/12/Pong.png?zoom=1.100000023841858&amp;w=230&amp;ssl=1"><p>
        <em>Joel hodling a ping pong paddles in black/white</em>
    </p>
</div>
<p>Imagine you're the new CEO of your company. Would you go for rewrite after hearing this?</p>
<p>In my experience, every developer has to fuck-up one project by rewriting from scratch, to obtain this knowledge, so no article can help you if you're not there yet. Still, it's fun to <strong>read about failures of others</strong>.</p>
<h3 id="2-gradual-refactoring-change-old-code-while-adding-new-features">2. Gradual Refactoring = Change Old Code while Adding new Features</h3>
<p>Your ballsy colleague continues his pitch: <em>It's much better to refactor as part of our coding. Only if we need it. If there is a new feature that affects, e.g. product object, we should refactor product to repository and entity. That way we can keep delivering features, we'll always have one code base that works and we don't have to split our attention for a month or potentially years.</em></p>
<h2 id="which-approach-is-better">Which Approach is Better?</h2>
<p>Let's get to the questions that are in the position of CEO. The goal of the CEO is to keep the project running, make it grow in all fronts together. He or she will assess both options:</p>
<ul>
<li><strong>How much time</strong> will it take?</li>
<li><strong>How much money</strong> will it cost?</li>
<li><strong>How big code good quality</strong> it brings? <em>Pretty good</em></li>
</ul>
<h3 id="how-is-rewrite-doing">How is Rewrite Doing?</h3>
<p>The CEO: <em>&quot;So we have to basically pay programmers to create the same set of features as we had before, but it will cost us 2 months of work whole team? And in the end, we'll have exactly the same set of features, but the code will be nicer for you to work with?&quot;</em></p>
<h3 id="how-is-continuous-refactoring-doing">How is Continuous Refactoring Doing?</h3>
<p>The CEO: <em>&quot;If I understand this correctly, you say that our application will slowly transform into a new one, we can still add features, it will only take slightly longer. In the end, it might take 12-14 months, but we'll get there? And during those 12-14 months, you'll have to work with 2 approaches in the same code-base?&quot;</em></p>
<p><br></p>
<p><em>&quot;Well, both solutions are expensive and slow, but I slightly prefer...&quot;</em></p>
<h2 id="attention-disruption">Attention Disruption</h2>
<p>We forgot one big problem that both approaches suffer from.</p>
<p>The best way to assess code quality is <strong>to let junior to work with it and count WTFs</strong>. The less the better (WTFs, not juniors). Juniors are like kids, honest and creative by nature. They don't know what they shouldn't tell and shouldn't do, so they find solutions much quicker than most of the older people... or people that work with the code base for a very long time and suffer from conformity bias. That's why I enjoy meeting &quot;less skilled&quot; people because I can learn from them much more than from &quot;the experts&quot;.</p>
<p>If the company growth is the main reason to refactor the code, so must expect to more PHP developers joining the project. Next new programmer coming to this code...</p>
<pre><code class="language-php">&lt;?php

// in one place
$product = Product::find(5);
$product-&gt;name = 'Train Ticket';
$product-&gt;save();

// in some other place
$product = $this-&gt;productRepository-&gt;get(5);
$product-&gt;changeName('Train Ticket');
$this-&gt;productRepository-&gt;save($product);</code></pre>
<p>...would be probably <strong>confused</strong>:</p>
<ul>
<li>Why is the other team working on the new code and we have to work with this shit-code for next year?</li>
<li>Why there is one entity with active record and other with the classic entity?</li>
<li>Why do you keep returning my code on code-reviews, since you there is active record all over the application?</li>
<li>Why there are 2 ways to get an item from the database with no clear boundary when to use which?</li>
<li>Why there is no documentation for when to use which pattern?</li>
<li>Why we have to implement every feature twice, once in the old code and once in the new code?</li>
<li>...</li>
</ul>
<p>And so on.</p>
<p>All this leads to moving focus from <a href="/blog/2017/09/25/3-non-it-books-that-help-you-to-become-better-programmer/#deep-work-by-cal-newport">deep work</a> and actually creating features to talking about meta-programming. You talk and answer and explain, but nothing in the code changes.</p>
<h2 id="design-code-for-understanding">Design Code for Understanding</h2>
<p>I've started to code new Lekarna.cz in 2015 on Nette from scratch (exactly!). First 5 months I was all alone, then a new programmer joined me. He started to code in the same quality as the previous code, I didn't have to teach him almost anything. I was curious:</p>
<ul>
<li>&quot;Where did you learn work so well Doctrine, Nette and using patterns?&quot;</li>
<li>&quot;I did 2 small projects on Nette without Doctrine, but I just use what's already there.&quot;</li>
</ul>
<p>I was so happy! Once I can write readable code, second the code doesn't depend on my expertise and I don't have to waste both our times in <em>meta-programming</em> and explaining what code should explain.</p>
<p>The code can be designed to either confuse people or to lead them. It's a matter of thoughtful decision to make code understandable first, then it's pretty easy.</p>
<h2 id="pattern-refactoring">Pattern Refactoring</h2>
<p>How can we keep the attention focused, code understandable and also make CEO happy?</p>
<ul>
<li><strong>How much time</strong> will it take? 1 month</li>
<li><strong>How much money</strong> will it cost? Expenses for 1 month</li>
</ul>
<p>Do not focus on the code or on its size - that all is now just an implementation detail. Use the code that you and your colleagues build. Go for patterns:</p>
<ul>
<li>How do you define <strong>active record pattern</strong>?</li>
<li>How do you define <strong>entity</strong>?</li>
<li>How do you define <strong>repository</strong>?</li>
<li>What is <strong>takes step by step to change</strong> this code from active record to entity and repository?</li>
</ul>
<pre><code class="language-diff">-$product = Product::find(5);
+$product = $this-&gt;productRepository-&gt;get(5);

-$product-&gt;name = 'Train Ticket';
+$product-&gt;changeName('Train Ticket');

-$product-&gt;save();
+$this-&gt;productRepository-&gt;save($product);</code></pre>
<ul>
<li>What is the most efficient way to achieve it?</li>
</ul>
<div class="alert alert-success mt-3">
<p>Play with these question, <strong>ask them</strong>, <strong>break limits of your colleagues</strong> and <strong>look for the cheaper and faster solution that brings you better code quality</strong> at the same time.</p>
</div>
<p>There are many ways already:</p>
<ul>
<li>pattern refactoring is already in PHPStorm, the first kick off is <a href="https://blog.jetbrains.com/phpstorm/2019/02/phpstorm-2019-1-eap-191-5109-15">Code Cleanup</a>  feature</li>
<li>regular pattern</li>
<li>the most advanced is AST refactoring (I spoke about it in <a href="https://blog.shopsys.com/2019-trends-in-the-world-of-php-interview-with-tomas-votruba-c70f138c92a3">this interview</a>)</li>
</ul>
<p><br></p>
<p>Learn this minds set and tool kit - they will give you the power to move massive code bases with just a couple hours of preparation. <strong>Next time you'll be thinking of &quot;rewrite vs. gradual refactoring&quot;, remember pattern refactoring</strong>. There probably already is an easier way behind the corner that will make happy both your and your CEO.</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/04/15/pattern-refactoring</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/04/15/pattern-refactoring#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Is Zend Dead? Is Laravel Losing Breath? Trends of PHP Frameworks in Numbers ]]></title>
                <link>https://tomasvotruba.com/blog/2019/04/11/trends-of-php-frameworks-in-numbers</link>
                <description><![CDATA[ <p>I often hear &quot;Zend is dead&quot;, &quot;Laravel is the most favorite&quot;, &quot;X is trending on Google&quot;, &quot;F is Dead, Migrate!&quot; etc. But are these statements supported by any research or numbers? No.
<br>
<br>
<strong>I was curious, how all PHP frameworks are doing, so I've looked at downloads and trends of each PHP framework</strong>. And here are the results.</p> ]]></description>
                <content:encoded><![CDATA[ <p>There are plenty <em>What is the Best PHP framework(s) in 20X</em> posts all over the Internet. Usually written by someone, who uses one of them and prefer them. It's pretty easy to put out many arguments, why is your favorite framework &quot;the best framework&quot;. These posts mislead the reader because only someone using all PHP frameworks out there in equal time and skill could evaluate it objectively.</p>
<h2 id="numbers-vs-vague-statements">Numbers vs. Vague Statements</h2>
<p>I wanted to separate feelings and opinions of influencers - mostly framework leads or people paid for working in the framework (myself including) - from numbers and facts. The active community, <strong>with long duration and rising trend</strong> will provide a much better idea, how the framework is really successful. You can use marketing and made up stories, but if the community isn't happy with the framework in the long term, the numbers will show.</p>
<h2 id="methodology">Methodology</h2>
<p>I've downloaded a few numbers from Packagist API for every package in the vendor name. E.g. for Symfony framework, all <code>symfony/*</code> packages are included.</p>
<p>Then I took the <strong>sum of package downloads in the last 12 months</strong> and the <strong>trend in last 12 months</strong>. From those, I made an average for the whole framework.</p>
<p>Some packages were out only 6 months, but rising in downloads with + 8 000 % trend, because they were a new split of monorepo. Imagine &quot;X is Rising in + 8 000 % downloads in a Year!&quot; - That's marketing nonsense. That's why <strong>small packages with less than 1000 downloads a day or less than 12 months old are excluded as outliers</strong>.</p>
<p>Instead of copy-pasting conditions here, check the full process in <a href="https://github.com/TomasVotruba/tomasvotruba.com/pull/717">this PR</a>.</p>
<h2 id="results">Results</h2>
<p>Cut the small-talk, these are the numbers (to the day of publishing this post).</p>
<p><br></p>
<div class="alert alert-sm alert-danger mt-3" role="alert">
<p>This table is out of date as the days go by. <strong>See <a href="/php-framework-trends">updated results</a></strong>.</p>
</div>
<table class="table table-bordered table-responsive table-striped"><thead class="thead-inverse"><tr><th class="text-center">
                Framework
            </th>
            <th class="text-center">Monthly Average</th>
            <th class="text-center">Yearly Total</th>
            <th class="text-center">Year Trend</th>
        </tr></thead><tr><th>
            CakePHP
        </th>
        <td class="text-right">
            41 826
        </td>
        <td class="text-right">
            11 643 390
        </td>
        <td class="text-right">
            <strong>
                <span class="text-success">+ 127 %</span>
            </strong>
        </td>
    </tr><tr><th>
            Symfony
        </th>
        <td class="text-right">
            3 011 473
        </td>
        <td class="text-right">
            881 984 370
        </td>
        <td class="text-right">
            <strong>
                <span class="text-success">+ 43 %</span>
            </strong>
        </td>
    </tr><tr><th>
            Laravel
        </th>
        <td class="text-right">
            187 429
        </td>
        <td class="text-right">
            56 268 780
        </td>
        <td class="text-right">
            <strong>
                <span class="text-success">+ 14 %</span>
            </strong>
        </td>
    </tr><tr><th>
            Zend
        </th>
        <td class="text-right">
            550 187

        </td>
        <td class="text-right">
            165 652 860
        </td>
        <td class="text-right">
            <strong>
                <span class="text-success">+ 12 %</span>
            </strong>

        </td>
    </tr><tr><th>
            Nette
        </th>
        <td class="text-right">
            26 233
        </td>
        <td class="text-right">
            8 319 180

        </td>
        <td class="text-right">
            <strong>
                <span class="text-success">+ 8 %</span>
            </strong>
        </td>
    </tr><tr><th>
            Yii
        </th>
        <td class="text-right">
            52 151
        </td>
        <td class="text-right">
            16 470 660
        </td>
        <td class="text-right">
            <strong>
                <span class="text-success">+ 6 %</span>
            </strong>
        </td>
    </tr></table>
<p>It seems that the most active community is now CakePHP. I've been following their very dynamic upgrade path with <a href="https://github.com/rectorphp/rector/tree/master/config/level/cakephp">Rector sets</a>, so it makes sense.</p>
<h2 id="there-is-more">There is More...</h2>
<ul>
<li>What packages are active in those frameworks?</li>
<li>What frameworks are dinosaurs - with big long-tail effect in total downloads, but losing in trends?</li>
<li>What frameworks have <a href="/blog/2018/07/30/hidden-gems-of-php-packages-nette-utils/">hidden</a> <a href="/blog/2018/08/13/hidden-gems-of-php-packages-symfony-finder-and-spl-file-info/">cool</a> utils packages?</li>
</ul>
<p><br></p>
<p>There is a <strong>detailed table</strong> where you can find these answers:</p>
<p><a href="/php-framework-trends/" class="btn btn-success">See full PHP Framework Trends table</a></p>
<p><br></p>
<p>I dare you to <strong>find any flaws in these numbers</strong>. Kick me in the nuts in the comments ↓</p>
<p><br></p>
<p>So next time you'll read &quot;X is the Best PHP Framework...&quot;, ask for numbers behind the statement and share this table.</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/04/11/trends-of-php-frameworks-in-numbers</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 11 Apr 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/04/11/trends-of-php-frameworks-in-numbers#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ What You Lose by Switching to Symfony ]]></title>
                <link>https://tomasvotruba.com/blog/2019/04/08/what-you-lose-by-switching-to-symfony</link>
                <description><![CDATA[ <p>Switching one framework for another is nowadays getting easier and easier. What you could do for months only on your private projects, where income and delivering features are not important, is now an option for big websites with millions of lines of code. What seems like a divorce and switching a partner, is now as simple as changing your shoes from work to jogging ones.
<br>
<br>
&quot;Ok, we get it, it's simple. But why, what is the gain?&quot;</p> ]]></description>
                <content:encoded><![CDATA[ <p>I'm not writing this post because I use Symfony in my projects and love the community around it. I write this because in the last 2 weeks people around me asked me for help with Rector:</p>
<ul>
<li>from Laravel to Symfony</li>
<li>from Lumen to Symfony</li>
<li><a href="/blog/2019/02/21/how-we-migrated-from-nette-to-symfony-in-3-weeks-part-1/">from Nette to Symfony</a></li>
<li>from Zend to Symfony</li>
</ul>
<p>It's possible and in a small fraction of costs of manual work, but &quot;why not&quot; is a very poor argument. That's like taking cocaine because it gives you more energy. Life is not about solutions, it's about trade-offs. I'd like to inform you about the cons of such migration, so you can decide with more solid arguments on both sides.</p>
<h2 id="what-you-lose-by-switching-to-symfony">What you Lose by Switching to Symfony?</h2>
<h3 id="1-quot-your-team-will-be-surprised-from-the-new-framework-they-never-used-quot">1. &quot;Your team will be surprised from the new framework they never used&quot;</h3>
<p>In one Symfony project I consulted, they hired 2 programmers who knew only Nette. They didn't give them much attention, because delivering feature was more important than to educate your juniors. The problem is, they produced Nette-ish code in Symfony application, because of lack of attention. Switch framework under programmer's hands in a very short period could cause much more serious damage.</p>
<h3 id="2-quot-your-team-loses-all-the-social-connections-with-your-old-framework-quot">2. &quot;Your team loses all the social connections with your old framework&quot;</h3>
<p>The best way to learn and validate ideas is to go out and talk with people. You probably have many offline connections with people who use a similar framework, you use Slack channel for this framework, you know maintainers of packages from the framework ecosystem.
When you break up with your girlfriend, your friends from &quot;her side&quot; will soon perish.</p>
<p><br>
<em>I'm obviously biased here, so if you have tips what will you lose, let me know in comments. I'll complete the article.</em></p>
<h2 id="how-to-switch-del-quickly-del-smoothly">How to Switch <del>Quickly</del> Smoothly</h2>
<p>The main goal in any transition is to <strong>have everyone on board</strong>. If your country creates reform for a pension that will take more money from young people, there will be frictions. If there is reform for cheaper education, that will decrease pensions to older people, there will be frictions. A reform, that improves educations for young people, that in conclusion will generate money for older people, will be much smoother. Not perfect, but smoother.</p>
<p>There is a practice-proven way to for all the problems above. Let's look at them:</p>
<h3 id="1-quot-del-your-team-will-be-surprised-from-the-new-framework-they-never-used-del-quot">1. &quot;<del>Your team will be surprised from the new framework they never used</del>&quot;</h3>
<p>It doesn't make sense to switch in one week without discussing the whole team. It is as foolish as giving PHPStorm to someone who only used Sublime Text and expects them to know how to use it.</p>
<p><strong>Always give your team proper daily mentoring on how to use and master a new tool.</strong> It will payback in higher quality code and faster feature delivery in the long term.</p>
<h3 id="how-to-do-it-better">How to do it better?</h3>
<p><strong>Install <a href="https://github.com/symfony/demo">symfony/demo</a></strong>, run it locally and try to break it.</p>
<p>Talk about WTFs with your team. Are there differences to your old framework? Just hate them, let the frustration out. It's normal to compare and feel this way.</p>
<p><strong>Look at <a href="https://symfonycasts.com">SymfonyCasts</a>, the best introduction to Symfony</strong>, even better than documentation - the text is always for free (videos are paid, but they contain the same content as text) - huge thanks <a href="https://twitter.com/weaverryan">Ryan Weaver</a> for funny videos.</p>
<p><strong>Hire an onsite/hot-line mentor for first 2 months</strong>. It might be more expensive than paying a programmer, but cheaper than the technical debt that programmer without experience would create during these 2 months. The mentor or she will help you to quickly overcome all the WTFs and give you the confidence to master the framework yourself.</p>
<h3 id="2-quot-del-your-team-loses-all-the-social-connections-with-your-old-framework-del-quot">2. &quot;<del>Your team loses all the social connections with your old framework</del>&quot;</h3>
<p>If you know people that use Nette, Laravel, Lumen or Zend, there is a high probability that your friends use Symfony as well.
Nowadays, <em>components over framework</em> model has become so popular, that most programmer actually uses more frameworks in one projects. So switching to Symfony only opens new topics to talk about.</p>
<p>If you look for an offline meetup where you can talk about Symfony, look at <a href="https://friendsofphp.org">Friends of PHP</a>. Don't look just for &quot;Symfony&quot; keyword, but also PHP meetups in general. There you'll be able to talk about Symfony too since in Central and Western Europe Symfony is de facto &quot;the PHP framework&quot;.</p>
<h2 id="what-you-gain-by-switching-to-symfony">What you Gain by Switching to Symfony?</h2>
<h3 id="better-hiring-rates">Better Hiring Rates</h3>
<p>Symfony ecosystem will not give you magically 10 new Symfony developers you now desperately need each year. But the symfony community trend is clear - it's active, it grows and attracts programmers that want to push their static programming to the next level.</p>
<div class="text-center">
    <img src="/assets/images/posts/2019/lose-symfony/conferences.png"><em>There is 8 upcoming conferences in 2019 all over the Europe and America</em>
</div>
<h3 id="community-of-testers">Community of Testers</h3>
<p>Nette Application is downloaded <a href="https://packagist.org/packages/nette/application/stats">2 296× a day</a>. Symfony alternative HttpKernel is downloaded <a href="https://packagist.org/packages/symfony/http-kernel/stats">170 991× a day</a>. Each Symfony package is tested by a huge amount of developers right after it is released. In this case, <strong>there is 75× bigger chance the bug will be discovered and fixed</strong>.</p>
<p>That's a huge advantage of the big and stable community.</p>
<h3 id="rock-solid-stability">Rock-Solid Stability</h3>
<p>Correct me if I'm wrong, but Symfony is <strong>the only PHP framework that has <a href="https://symfony.com/roadmap">predictable release</a></strong>. You can be 100 % sure that:</p>
<ul>
<li>every <strong>6 months</strong>, there will be a new release of Symfony with new hot features</li>
<li>every <strong>6 months</strong> you can plan &quot;upgrade day&quot; for all you PHP projects</li>
<li>every <strong>2 years</strong> there will be a new major version.</li>
<li>every <strong>2 years</strong> there will be a new version with long-term support</li>
</ul>
<div class="text-center">
    <img src="/assets/images/posts/2019/lose-symfony/stable.png" class="img-thumbnail"></div>
<p>I wrote about the importance of leader stability for the rest ecosystem in <a href="/blog/2017/10/30/what-can-you-learn-from-menstruation-and-symfony-releases/">What Can You Learn from Menstruation and Symfony Releases</a>.</p>
<h3 id="you-re-informed-about-important-stuff">You're Informed about Important Stuff</h3>
<p>To get into Symfony you have to read every post, every tweet, read newsletters, be on Slack and go to meetups... well, that would be hell.</p>
<ul>
<li>All you need to know is in <a href="https://symfony.com/blog/category/living-on-the-edge">&quot;Living on the Edge&quot;</a> category or Symfony blog. 2-3 months prior to the release (now 4.3), you'll find nice, short and sexy posts about upcoming features.</li>
</ul>
<p>Do you have an extra 5 minutes a week?</p>
<ul>
<li>
<p>Just follow <a href="https://twitter.com/symfony_en">@symfony_en</a> - cherry-picked tweets with important news</p>
</li>
<li>
<p>I personally also sniff <a href="https://symfony.com/blog/category/a-week-of-symfony">&quot;A Week of Symfony&quot;</a> every week, with newest issues, PRs and posts about Symfony (mostly to check if my posts are there ;)) to learn from others.</p>
</li>
</ul>
<p><strong><a href="https://github.com/javiereguiluz">Javier Eguiluz</a> is making this really easy for us, thank you!</strong></p>
<h3 id="you-re-welcomed">You're Welcomed 🤗</h3>
<p>There are no numbers to describe this, yet I find it the most important pillar of any community. <strong>You're welcomed</strong>. You're welcomed to talk about your ideas, to argue (as in &quot;discuss with arguments&quot;, not to shout at each other) in issues on Github, to put arguments to support your statements.</p>
<p>I had many arguments with <a href="https://github.com/nicolas-grekas">Nicolas Grekas</a> about parameters, console or dependency injection features. In the end, there is always someone who decides to go for it or stops it, there must be so it's not chaos. Was I always happy about the decision? No. <strong>But I always feel respected. These discussions also help me to have a bigger picture and eventual implement the feature myself in a package.</strong></p>
<p>Sometimes I created a package, people found it useful and in a year or two, it becomes implemented in Symfony core. Then I could deprecate them, like <a href="/blog/2017/05/29/symplify-packages-deprecations-brought-by-symfony-33/">these Symplify packages in Symfony 3.3</a>:</p>
<div class="text-center">
    <img src="/assets/images/posts/2017/symplify-deprecations/pr-notes.png" class="img-thumbnail"></div>
<p>I love how Symfony is ruled by decisions makers, but at the same time <strong>is opened to a change</strong>.</p>
<h2 id="it-s-not-a-marketing-it-s-a-family">It's not a Marketing, It's a Family</h2>
<p>The best thing is, it's not just marketing, it's not a well-bended lie, it's not a way to get money from you then say goodbye.
It's a company setting, that you can feel in the atmosphere of Symfony conference.</p>
<p>When I was at my first <a href="https://pariscon2015.symfony.com">SymfonyCon in Paris 2015</a>, there was a keynote by Fabien Potencier (Symfony founder and CEO) about &quot;10 Years of Symfony&quot;. I thought it will be one of these boring self-promo talks about how is Symfony awesome and what it does and how big projects it runs.</p>
<p>Instead, Fabien <strong>named people</strong>, who contributed to Symfony in any way, <strong>one by one and invited them to the stage, including his family</strong>.</p>
<img src="https://blog.radumurzea.net/wp-content/uploads/keynote.png" style="max-width:40em">
<p>It made me cry a bit and I still have goosebumps when I remember it.</p>
<p>That's what you gain by switching to Symfony.</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/04/08/what-you-lose-by-switching-to-symfony</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 08 Apr 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/04/08/what-you-lose-by-switching-to-symfony#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Upgrade Twig from Underscored to Namespaces ]]></title>
                <link>https://tomasvotruba.com/blog/2019/04/04/how-to-upgrade-twig-from-underscored-to-namespaces</link>
                <description><![CDATA[ <p>Symfony <a href="https://symfony.com/blog/new-in-twig-namespaced-classes">recently announced a new version of Twig</a> with namespaces as we know it. Before PHP 5.2 there was <code>Underscored_Namespace</code> - I remember because that was the first version I used.
<br><br>
Today I'll show you how to upgrade from <code>_</code> to <code>\\</code> in few <del>minutes</del> seconds.</p> ]]></description>
                <content:encoded><![CDATA[ <div class="text-center">
    <img src="/assets/images/posts/2019/twig-under/twig-image.png" style="max-width: 28em"></div>
<div class="alert alert-sm alert-success mt-3">
    <p>This set would not be possible and as good as it is without you, open-source PHP community.
    I'd like to thank 👏:</p>

    <ul><li><strong><a href="https://github.com/greg0ire">greg0ire</a></strong> <a href="https://github.com/rectorphp/rector/commit/493e418f4691f3a4beadf901bd54ea7406380891">for contributing</a> to this set</li>
        <li>and <strong><a href="https://github.com/enumag">enumag</a></strong> for <a href="https://github.com/rectorphp/rector/search?q=twig+is%3Aissue+author%3Aenumag&amp;unscoped_q=twig+is%3Aissue+author%3Aenumag&amp;type=Issues">battle testing and reported issues</a></li>
    </ul></div>
<h2 id="find-and-replace">Find and Replace?</h2>
<p>So all we need to do is replace <code>Twig_</code> with <code>Twig\</code>?</p>
<pre><code class="language-diff">-Twig_Function
+Twig\Function</code></pre>
<p>This would fail since <code>Twig\Function</code> class doesn't exist. <code>Twig\TwigFunction</code> does. There <a href="https://github.com/rectorphp/rector/blob/a1bd751f14c35e1e22c21ebcc3c26c922b4796a1/config/level/twig/underscore-to-namespace.yaml#L3-L154">150 more cases</a> where <strong>find and replace fails</strong>.</p>
<h2 id="2-places">2 Places</h2>
<p>We need to replace both docblocks:</p>
<pre><code class="language-diff"> /**
- * @throws \Twig_Error_Loader
+ * @throws \Twig\Error\LoaderError
  */
 public function render(): void
 {
-    /** @var \Twig_Environment $env */
+    /** @var \Twig\Environment $env */
     $env = $this-&gt;getTwigEnv();

     // ...
 }</code></pre>
<p>And the code:</p>
<pre><code class="language-diff">-$safeTwigEnvironment = new \Twig_Environment(
+$safeTwigEnvironment = new \Twig\Environment(
-   new \Twig_Loader_Array([])
+   new \Twig\Loader\ArrayLoader([])
);</code></pre>
<p>In a reaction to the Symfony blog post, I see many developers <a href="https://github.com/sculpin/sculpin/pull/423/files">do upgrades manually</a>. In case of 50 changes, it's ok, but private code bases will go 1000+ use cases.</p>
<h2 id="del-code-del-pattern-refactoring"><del>Code</del> Pattern Refactoring</h2>
<p>For <a href="https://github.com/rectorphp/rector">Rector</a> it just 1 pattern to refactor. Just tell him to process your files <code>src</code>:</p>
<pre><code class="language-bash">composer require rector/rector --dev # make sure you have version 0.4.10+ at least
vendor/bin/rector process src --set twig-underscore-to-namespace</code></pre>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/04/04/how-to-upgrade-twig-from-underscored-to-namespaces</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 04 Apr 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/04/04/how-to-upgrade-twig-from-underscored-to-namespaces#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Removing Static - There and Back Again ]]></title>
                <link>https://tomasvotruba.com/blog/2019/04/01/removing-static-there-and-back-again</link>
                <description><![CDATA[ <p>The more companies I meet, the more I see <code>static</code> and <code>new</code> everywhere. Not like <code>new Product</code>, but rather <code>new ProductRepository(new Database())</code>. Not just Laravel, but across all PHP frameworks. I wish frameworks could prevent antipatterns, but they don't, do they?
<br><br>
Instead of &quot;refactor all the things&quot; step by step, class by class, I'd <strong>like share my thoughts when exploring full automated path</strong>. I look for feedback to improve this process.</p> ]]></description>
                <content:encoded><![CDATA[ <p><em>This process will be (in a more practical and detailed way) part of future <a href="https://getrector.org">Rector training</a>, so you'll be to <strong>solve any problem with your PHP</strong> code regardless the size of your project. Static refactoring is just a very nice example, that happens to be very popular around me nowadays and no-one solves it.</em></p>
<h2 id="1-show-code">1. Show Code</h2>
<p>I usually start with a minimal code snippet possible, that explore the problem. No comments, no types, just the code. This is the real code I'm currently refactoring:</p>
<pre><code class="language-php">&lt;?php

final class Product
{
    private $price;

    public function __construct(float $price)
    {
        $this-&gt;price = $price;
    }

    public function getPrice(): Price
    {
        return new Price($this-&gt;price, CurrencyProvider::get());
    }
}

final class Price
{
    private $amount;

    private $currency;

    public function __construct(float $amount, Currency $currency)
    {
        $this-&gt;amount = $amount;
        $this-&gt;currency = $currency;
    }

    public function getAmount()
    {
        return $this-&gt;currency-&gt;convertFromCzk($this-&gt;amount);
    }
}</code></pre>
<h2 id="2-describe-the-code">2. Describe the Code</h2>
<p>Then I describe the problem with a few words using your common sense. No censorship, just flow of words.</p>
<p>&quot;There is a <code>Product</code> object... no, an entity since I can have multiple products. It has <em>active record pattern</em> since it creates <code>Price</code> in itself. There is also <em>static service locator</em> <code>CurrencyProvider::get()</code> to get current currency. I have no idea where the currency is set and it can be <em>overridden</em> multiple times during code run.</p>
<p>The goal of all this is probably to have price <em>always</em> in the same currency. Which is not true, since I can change the currency anytime I want. The price computation is input/output relations - so it should be solved by service, not an entity. I'm confused.&quot;</p>
<h2 id="3-break-the-code">3. Break The Code</h2>
<p>My favorite part. How can we break this code?</p>
<pre><code class="language-php">&lt;?php

$product = new Product(100.0);

CurrencyProvider::set('czk');
$product-&gt;getPrice(); // 100

CurrencyProvider::set('eur'); // this will be invoked in some other method, where the user needs a special price for newletter in Germany
$product-&gt;getPrice(); // ups, 2500?</code></pre>
<div class="alert alert-sm alert-danger mt-3">
   1. An entity with the same ID can return different values on different calls of the same method.
</div>
<p>It's like my name would be &quot;Tom&quot; in the morning and &quot;John&quot; in the afternoon.</p>
<hr />
<pre><code class="language-php">&lt;?php

$product = new Product(100.0);
$product-&gt;getPrice(); // Error: 2nd argument of price cannot be null

CurrencyProvider::set('czk');</code></pre>
<div class="alert alert-sm alert-danger mt-3">
    2. Due to a static design of <code>CurrencyProvider</code>, we cannot set currency at the single place of application, e.g. container creation, but we have to put it in the "right" place so it doesn't break the code. Here it broke the code because we set it too late.
</div>
<hr />
<pre><code class="language-php">&lt;?php

$product = new Product(100.0);

$allCurrencies = /* get from database */;
foreach ($allCurrencies as $currency) {
    CurrencyProvider::set($currency);
    echo $product-&gt;getPrice();
}

// what is the currency now?</code></pre>
<div class="alert alert-sm alert-danger mt-3">
   3. How do I show a price for all the currencies we support?
</div>
<h2 id="3-the-ideal-world">3. The Ideal World</h2>
<p>Now I imagine how I want this code to be designed in an ideal world, with enough time and skills. My goal is to make code work, while minimal as possible, while readable as quickly as possible. So when I leave the company, the person who reads the code will understand it at the same speed as I did.</p>
<ol>
<li>
<p>There will be a service that will take care of price computation.</p>
</li>
<li>
<p>It will accept <code>Product</code> and <code>Currency</code> as an argument.</p>
</li>
<li>
<p>That way it's easy to tests, method parameters are clearly stating dependencies, nothing to surprise.</p>
</li>
</ol>
<h2 id="4-put-ideal-world-into-code">4. Put Ideal World into Code</h2>
<p>Now put that ideal into PHP code:</p>
<pre><code class="language-php">&lt;?php

final class Product
{
    private $price;

    public function __construct(float $price)
    {
        $this-&gt;price = $price;
    }

    public function getPrice()
    {
        return $this-&gt;price;
    }
}

final class Currency
{
    private $name;

    public function __construct(string $name)
    {
        $this-&gt;name = $name;
    }
}

final class PriceCalculator
{
    public function calculatePriceForProductAndCurrency(Product $product, Currency $currency): float
    {
        // ... computing algorithm ...
        return $price;
    }
}</code></pre>
<p>And then use:</p>
<pre><code class="language-php">&lt;?php

final class ProductController
{
    public function render()
    {
        $product = new Product(1000.0);
        $currency = new Currency('czk'); // default will be configured parameters in config.yaml

        $price = $this-&gt;priceCalculator-&gt;calculatePriceForProductAndCurrency($product, $currency);

        echo $price;
    }
}</code></pre>
<p>This is the thought process of most refactorings. It is mostly intuition until now. A small piece of code → the problem → the idea of how code should look like → the solution. Just commit and send for review, right?</p>
<p><br></p>
<p><a href="https://stackoverflow.com/a/454012/1348344">Martin Fowler</a> once said:</p>
<blockquote class="blockquote">
Refactoring is a controlled technique for improving the design of an existing code base. Its essence is applying <strong>a series of small</strong> behavior-preserving transformations, each of which "too small to be worth doing".<br><br>However the cumulative effect of each of these transformations is quite significant. <strong>By doing them in small steps you reduce the risk of introducing errors</strong>. You also avoid having the system broken while you are carrying out the restructuring - which allows you to gradually refactor a system over an <strong>extended period of time</strong>.
</blockquote>
<p>This worked well for a long period of time. Today I feel confident enough to say <strong>this paradigm is dead</strong> - and it's a good thing!</p>
<ul>
<li>&quot;series of small&quot;</li>
<li>&quot;small steps&quot;</li>
<li>&quot;extended period of time&quot;</li>
</ul>
<p>In 2019, we can do refactoring in <strong><a href="/blog/2019/02/21/how-we-migrated-from-nette-to-symfony-in-3-weeks-part-1/">one big step in short period of time</a></strong> - and still get working application in the end.</p>
<p>Clear proof is <strong>PHPStorm refactorings</strong> over the whole code base. They're still dumb compared to human and sometimes cause errors, but <a href="https://www.jetbrains.com/phpstorm/whatsnew">they get better and better each version</a>. Trend beats the status quo. You probably also know <strong><a href="https://github.com/kalessil/phpinspectionsea">Php Inspections (EA Extended)</a> plugin</strong> to PHPStorm.</p>
<p><br></p>
<p>It's easy to use these tools, but they still tend to solve the most generic problems. Instead of <strong>just blindly using
rules in these tools, we'll learn how to build them</strong> to solve your problem.</p>
<p><br></p>
<img src="/assets/images/posts/2019/removing-static/there.jpg" class="img-thumbnail">
<h2 id="5-extract-the-journey">5. Extract The Journey</h2>
<p>Back to the thinking process. This last step might seem a bit weird. We already have the clear code up and running and it's ready to ship. Why would we invest more energy into this? If I don't learn from this, I'm sentencing my future self to do it again in the future. It's funny to watch companies how they go for &quot;a business value&quot;, try to delivery features fast, but never pause to realize, that they do mostly repetitive tasks for the same price as the first one. So by this strategy to deliver business value fast, they cut their business value in half.</p>
<h3 id="del-think-big-del-think-absolute"><del>Think Big</del> Think Absolute</h3>
<p>Instead, I ask myself: &quot;how would I describe the process step by step to a machine, so it could refactor <strong>all PHP code</strong> on Github, Gitlab and the whole world with the same issue to the one in the end?&quot; There could be billions of such cases in the whole-world PHP code base.</p>
<p>If we're able to describe the process, <strong>we'll turn billions of use cases to 1 pattern transformation</strong>.</p>
<p>Imagine you try to fix typoes one-by-one manually. Or you could write a function, that fixes 5 most common typos for the user and hooks it on the Internet and SMS network (regardless of security) - to process every electronic message in the world. Just like that, the world became smarter thanks to you single function.</p>
<p>I disagree with Martin's statement: &quot;Its essence is applying a series of small behavior-preserving transformations&quot;. It's not about the behavior of code anymore. Much more important is the pattern in the code. We don't care about <code>Price</code>, nor <code>Currency</code> (it could be also called <code>Name</code> and <code>Invoice</code>).</p>
<p><br></p>
<p><strong>Instead we look at &quot;static call in an object&quot;.</strong></p>
<p><br></p>
<p>And what we did with that pattern it? Give your ideas in the comments or wait for the next post.</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/04/01/removing-static-there-and-back-again</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/04/01/removing-static-there-and-back-again#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Mock Final Classes in PHPUnit ]]></title>
                <link>https://tomasvotruba.com/blog/2019/03/28/how-to-mock-final-classes-in-phpunit</link>
                <description><![CDATA[ <p>Do you prefer composition over inheritance? Yes, that's great. Why aren't your classes <code>final</code> then? Oh, you have tests and you mock your classes. <strong>But why is that a problem?</strong></p> ]]></description>
                <content:encoded><![CDATA[ <p>Since I started using <em><code>final</code> first</em> <a href="/blog/2019/01/24/how-to-kill-parents/">I got rid of many problems</a>. Most programmers I meet already know about the benefits of not having 6 classes extended in a row and that <code>final</code> remove this issue.</p>
<p>But many of those programmers are skilled and they write tests.</p>
<h2 id="how-would-you-mock-this-class">How Would You Mock this Class?</h2>
<p>...so it returns <code>20</code> on <code>getNumber()</code> instead:</p>
<pre><code class="language-php">&lt;?php

final class FinalClass
{
    public function getNumber(): int
    {
        return 10;
    }
}</code></pre>
<p>We have few options out in the wild:</p>
<ul>
<li><a href="https://stackoverflow.com/a/33095281/1348344">You can use <code>uopz</code> extension</a> <em class="fas fa-fw fa-times text-danger fa-lg"></em></li>
<li><a href="https://gist.github.com/DragonBe/24761f350984c35b73966809dd439135">You can use reflection</a> <em class="fas fa-fw fa-times text-danger fa-lg"></em></li>
</ul>
<p>or...</p>
<h2 id="extract-an-interface">Extract an Interface</h2>
<pre><code class="language-diff"> &lt;?php

-final class FinalClass
+final class FinalClass implements FinalClassInterface
 {
     public function getNumber(): int
     {
         return 10;
     }
 }
+
+interface FinalClassInterface
+{
+    public function getNumber(): int;
+}</code></pre>
<p>Then use the interface instead of the class in your test:</p>
<pre><code class="language-diff"> &lt;?php

 use PHPUnit\Framework\TestCase;

 final class FinalClassTest extends TestCase
 {
     public function testSuccess(): void
     {
-        $finalClassMock = $this-&gt;createMock(FinalClass::class);
+        $finalClassMock = $this-&gt;createMock(FinalClassInterface::class);
         // ... it works! but at what cost...
     }
 }</code></pre>
<p>This will work, but creates <strong>huge debt you'll have to pay later</strong> (usually at a time you would rather skip):</p>
<ul>
<li>for every new <code>public</code> method in the class, you have to update the interface</li>
<li>&quot;interface everything&quot; approach will shift the meaning of interface from &quot;something to be implemented for a reason&quot; to &quot;anything you want to test&quot;</li>
<li>do you have 100 classes? you have 200 PHP files now, you're welcome!</li>
</ul>
<p>This is obviously annoying maintenance and it will lead you to one of 2 bad paths:</p>
<ul>
<li><strong>don't use <code>final</code></strong> at all</li>
<li>or <strong>do not test</strong></li>
</ul>
<p><em class="fas fa-fw fa-2x fa-times text-danger fa-lg"></em></p>
<h2 id="by-pass-finals">By Pass Finals!</h2>
<p>Nette packages also missed <code>final</code> in the code, so people could mock it. Until David came with <a href="https://github.com/dg/bypass-finals">Bypass Finals</a> package. Some people think it's only for Nette\Tester, but I happily <strong>use it in PHPUnit universe</strong> as well.</p>
<p>We just install it:</p>
<pre><code class="language-bash">composer require dg/bypass-finals --dev</code></pre>
<p>And enable:</p>
<pre><code class="language-php">DG\BypassFinals::enable();</code></pre>
<p><em class="fas fa-fw fa-lg fa-check text-success"></em></p>
<div class="alert alert-sm alert-warning mt-5 mb-5" role="alert">
    Do you want to know, <strong>how BypassFinals works?</strong> Read author's <a href="https://phpfashion.com/how-to-mock-final-classes">blog post</a> or check <a href="https://github.com/dg/bypass-finals/blob/8f0f7ab7a17a6b5c188dde1cf5edc6ceb06c70c1/src/BypassFinals.php#L217">this line on Github</a>.
    <br>
    I don't know much, but I think it loads file via stream and removes the <code>T_FINAL</code> token.
</div>
<p>Hm, where should be put it?</p>
<h3 id="1-code-bootstrap-php-code-file">1. <code>bootstrap.php</code> File?</h3>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

require_once __DIR__ . '/../vendor/autoload.php';

DG\BypassFinals::enable();</code></pre>
<p>Update path in <code>phpunit.xml</code>:</p>
<pre><code class="language-diff"> &lt;phpunit
-    bootstrap="vendor/autoload.php"
+    bootstrap="tests/bootstrap.php"
 &gt;</code></pre>
<p>Let's run the tests:</p>
<pre><code class="language-bash">vendor/bin/phpunit

...

There were 19 warnings:

1) SomeClassTest::testSomeMethod
Class "SomeClass" is declared "final" and cannot be mocked.</code></pre>
<p>Hm, most mocks work, but there are still some errors.</p>
<p><em class="fas fa-fw fa-2x fa-times text-danger fa-lg"></em></p>
<h3 id="2-code-setup-code-method">2. <code>setUp()</code> Method?</h3>
<p>Let's put it into <code>setUp()</code> method. It seems like a good idea for these operations:</p>
<pre><code class="language-diff"> &lt;?php

+use DG\BypassFinals;
 use PHPUnit\Framework\TestCase;

 final class FinalClassTest extends TestCase
 {
+    public function setUp()
+    {
+        BypassFinals::enable();
+    }

     public function testFailInside(): void
     {
         $this-&gt;createMock(FinalClass::class);
     }
 }</code></pre>
<p>And run tests again:</p>
<pre><code class="language-bash">vendor/bin/phpunit

...

There were 7 warnings:

1) AnotherClassTest::testSomeMethod
Class "AnotherClass" is declared "final" and cannot be mocked.</code></pre>
<p>Damn you, black magic! We're getting there, but there are still mocks in the <code>setUp()</code> method, and we've also added work to our future self - for every new test case, we <a href="/blog/2018/08/27/why-and-how-to-avoid-the-memory-lock/">have to remember</a> to add <code>BypassFinals::enable();</code> manually.</p>
<p><em class="fas fa-fw fa-2x fa-times text-danger fa-lg"></em></p>
<p><br>
<br></p>
<p>Why it doesn't work. I was angry and frustrated. Honestly, I wanted to give up now and just pick &quot;interface everything&quot; or &quot;final nothing&quot; quick solution.  I think <strong>that resolutions in emotions are not a good idea...</strong> so I take a deep breath, pause and go to a toilet to get some fresh air.</p>
<p><br></p>
<p>Suddenly... I remember that... PHPUnit has some Listeners, right? What if we could use that?</p>
<h3 id="3-own-testlistener">3. Own TestListener?</h3>
<p>Let's try all the methods of <code>TestListener</code>, enable bypass in each of them by trial-error and see what happens:</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

use DG\BypassFinals;
use PHPUnit\Framework\AssertionFailedError;
use PHPUnit\Framework\Test;
use PHPUnit\Framework\TestListener;
use PHPUnit\Framework\TestSuite;
use PHPUnit\Framework\Warning;

final class BypassFinalListener implements TestListener
{
    public function addError(Test $test, \Throwable $t, float $time): void
    {
    }

    public function addWarning(Test $test, Warning $e, float $time): void
    {
    }

    public function addFailure(Test $test, AssertionFailedError $e, float $time): void
    {
    }

    public function addIncompleteTest(Test $test, \Throwable $t, float $time): void
    {
    }

    public function addRiskyTest(Test $test, \Throwable $t, float $time): void
    {
    }

    public function addSkippedTest(Test $test, \Throwable $t, float $time): void
    {
    }

    public function startTestSuite(TestSuite $suite): void
    {
    }

    public function endTestSuite(TestSuite $suite): void
    {
    }

    public function startTest(Test $test): void
    {
        BypassFinals::enable();
    }

    public function endTest(Test $test, float $time): void
    {
    }
}</code></pre>
<p>In the end, it was just one method.</p>
<p>Then register listener it in <code>phpunit.xml</code>:</p>
<pre><code class="language-xml">&lt;phpunit bootstrap="vendor/autoload.php"&gt;
    &lt;listeners&gt;
        &lt;listener class="Listener\BypassFinalListener"/&gt;
    &lt;/listeners&gt;
&lt;/phpunit&gt;</code></pre>
<p>And run tests again:</p>
<pre><code class="language-bash">vendor/bin/phpunit

...

Success!</code></pre>
<p>Great! <strong>All our objects can be final and tests can mock them</strong>.</p>
<p>Is it a good enough solution? Yes, <strong>it works and it's a single place of origin</strong> - use it, close this post and your code will thank you in 2 years later.</p>
<p><em class="fas fa-fw fa-lg fa-check text-success"></em></p>
<p><br></p>
<p>Are you a <strong>curious hacker that is never satisfied with his or her solution</strong>? Let's take it one step further.</p>
<p>What do you think about the Listener class? There is <strong>10+ methods</strong> and <strong>only one is used</strong>. It's very hard to read. To add more fire to the fuel, <code>TestListener</code> class is <a href="https://github.com/sebastianbergmann/phpunit/issues/3388">deprecated since PHPUnit 8</a> and will be <a href="https://github.com/sebastianbergmann/phpunit/issues/3389">removed in PHPUnit 9</a>. Don't worry, <a href="https://github.com/rectorphp/rector/pull/1270">Rector already covers the migration path</a>.</p>
<p>After bit of Googling on PHPUnit Github and documentation I found something called <em>hooks</em>!</p>
<h3 id="4-single-hook">4. Single Hook</h3>
<p>You can read about them in the <a href="https://phpunit.readthedocs.io/en/8.0/extending-phpunit.html#extending-the-testrunner">PHPUnit documentation</a>, but in short: they're the same as the listener, just <strong>with 1 event</strong>.</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

use DG\BypassFinals;
use PHPUnit\Runner\BeforeTestHook;

final class BypassFinalHook implements BeforeTestHook
{
    public function executeBeforeTest(string $test): void
    {
        BypassFinals::enable();
    }
}</code></pre>
<p>And again, register it in <code>phpunit.xml</code>:</p>
<pre><code class="language-xml">&lt;phpunit bootstrap="vendor/autoload.php"&gt;
    &lt;extensions&gt;
        &lt;extension class="Hook\BypassFinalHook"/&gt;
    &lt;/extensions&gt;
&lt;/phpunit&gt;</code></pre>
<p>The final test, run all tests:</p>
<pre><code class="language-bash">vendor/bin/phpunit

...

Success!</code></pre>
<p><em class="fas fa-fw fa-2x fa-check text-success"></em>
<em class="fas fa-fw fa-2x fa-check text-success"></em>
<em class="fas fa-fw fa-2x fa-check text-success"></em></p>
<h3 id="before">Before</h3>
<ul>
<li>we had to use interface for mocks</li>
<li>or we had to remove <code>final</code></li>
<li>we had to pick between inheritance hell or poor tests</li>
</ul>
<h3 id="after">After</h3>
<ul>
<li>A <strong>single solution, in single class</strong></li>
<li>we use PHPUnit feature directly, no weird bending code</li>
<li>we can <strong>mock anything</strong></li>
<li><strong>we can <code>final</code> anything</strong></li>
</ul>
<p><br></p>
<p>Finally :)</p>
<p><br></p>
<p>Do you want to see solutions 2, 3 and 4 tested in real PHPUnit code? <a href="https://github.com/TomasVotruba/tomasvotruba.com/tree/master/tests/Posts/Year2019/FinalMock">They're here on Github</a></p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/03/28/how-to-mock-final-classes-in-phpunit</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 28 Mar 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/03/28/how-to-mock-final-classes-in-phpunit#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Instantly Migrate Nette\Tester to PHPUnit ]]></title>
                <link>https://tomasvotruba.com/blog/2019/03/25/how-to-instantly-migrate-nette-tester-to-phpunit</link>
                <description><![CDATA[ <p>We had 🍺 after PHP meetup in Prague and Tomas asked me:
<br>
&quot;We don't use Nette, but we still have many tests in Tester. Can Rector migrate them to PHPUnit?&quot;
<br>
&quot;Hold my 🍺&quot;</p> ]]></description>
                <content:encoded><![CDATA[ <p><em>If you don't know <a href="https://tester.nette.org/en">Tester</a>, is a PHP unit test framework created in the Czech Republic.</em></p>
<p><br></p>
<p>In the last post we looked on <a href="/blog/2019/03/21/how-to-instantly-migrate-phpspec-to-phpunit/">instant migration of PhpSpec to PHPUnit</a>.</p>
<p>PhpSpec has a different architecture than PHPUnit - e.g.</p>
<ul>
<li>PHPUnit creates mocks in body of tested method <code>$this-&gt;createMock()</code> ,</li>
<li>but PhpSpec puts them in parameters <code>public function is_should_work(Category $categoryMock)</code>.</li>
</ul>
<p>This has a huge influence on the code, so <strong>it took a week to cover these differences in migration path</strong>.</p>
<p>How does Tester compare to PHPUnit?</p>
<h2 id="trends-revealed">Trends Revealed</h2>
<p>In the last post we looked at absolute downloads and trends of 3 PHP unit test frameworks:</p>
<div class="row text-center mb-5 mt-5">
    <div class="col-md-4 col-sm-4">
        <a href="https://packagist.org/packages/nette/tester/stats">
            <img src="/assets/images/posts/2019/unit-mig/tester.png"><br><em>1 mil. downloads - Tester</em>
        </a>
    </div>
    <div class="col-md-4 col-sm-4">
        <a href="https://packagist.org/packages/phpspec/phpspec/stats">
            <img src="/assets/images/posts/2019/unit-mig/spec.png"><br><em>14 mils. downloads - PhpSpec</em>
        </a>
    </div>
    <div class="col-md-4 col-sm-4">
        <a href="https://packagist.org/packages/phpunit/phpunit/stats">
            <img src="/assets/images/posts/2019/unit-mig/phpunit.png"><br><em>117 mils. downloads - PHPUnit</em>
        </a>
    </div>
</div>
<p>Putting numbers and trends aside - <strong>this is about your needs</strong>. Do you need to change from Doctrine to Eloquent? From Symfony 4.2 to Laravel 5.8? From Symfony to Nette? Go for it, Rector will help you with the boring PHP work you'd love to skip.</p>
<p>The guy in the pub that night needed this, so...  <em>challenge accepted</em>!</p>
<h2 id="single-test-case">Single Test Case</h2>
<p>Luckily, Tester and PHPUnit are like twins:</p>
<ul>
<li>share the same approach in configuring tests - <code>setUp</code> &amp; <code>tearDown</code></li>
<li>do assert with a call - <code>Assert::true($value)</code> vs. <code>self::assertTrue($value)</code></li>
<li>do share naming  - <code>public function testSomething()</code></li>
<li>do share data providers - <code>@dataProvider</code></li>
</ul>
<p>So all <strong>we need to do is rename a few methods</strong>? There are still a few gotchas:</p>
<ul>
<li><code>Assert::exception()</code> uses code inside anonymous function, while in PHPUnit it's just above the code that should fail</li>
<li>Tester includes bootstrap itself, PHPUnit include in <code>phpunit.xml</code></li>
<li>Tester creates the test under the test <code>(new SomeTest())-&gt;run()</code>, PHPUnit creates them automatically</li>
</ul>
<p>Luckily, last 2 operations are subtractions, so we can just remove them.</p>
<h3 id="and-the-result">And the Result?</h3>
<pre><code class="language-diff"> &lt;?php

 namespace App\Tests;

 use App\Entity\SomeObject;
-use Tester\Assert;
-use Tester\TestCase;

-require_once __DIR__ . '/bootstrap.php';

-class ExpensiveObjectTest extends TestCase
+class ExpensiveObjectTest extends \PHPUnit\Framework\TestCase
 {
     public function testSwitches()
     {
-        Assert::false(5);
+        $this-&gt;assertFalse(5);

-        Assert::falsey('value', 'some messsage');
+        $this-&gt;assertFalse((bool) 'value', 'some messsage');

-        Assert::truthy(true);
+        $this-&gt;assertTrue(true);
     }

     public function testTypes()
     {
         $value = 'x';
-        Assert::type('array', $value);
+        $this-&gt;assertIsArray($value);

-        Assert::type(SomeObject::class, $value);
+        $this-&gt;assertInstanceOf(SomeObject::class, $value);
     }

     public function testException()
     {
         $someObject = new SomeObject;
-        Assert::exception(function () use ($someObject) {
-            $someObject-&gt;setPrice('twenty dollars');
-        }, InvalidArgumentException::class, 'Price should be string, you know');
+        $this-&gt;expectException(InvalidArgumentException::class);
+        $this-&gt;expectExceptionMessage('Price should be string, you know');
+        $someObject-&gt;setPrice('twenty dollars');
     }

+    /**
+     * @doesNotPerformAssertions
+     */
     public function testNoError()
     {
-        Assert::noError(function () {
-             new SomeObject(25)
-        });
+        new SomeObject(25);
     }
 }

-(new ExpensiveObjectTest())-&gt;run();</code></pre>
<h2 id="how-to-instantly-migrate-from-nette-tester-to-phpunit">How to Instantly Migrate from Nette\Tester to PHPUnit?</h2>
<pre><code class="language-bash">composer require rector/rector --dev
vendor/bin/rector process spec --set nette-tetser-to-phpunit</code></pre>
<p>Rector <strong>doesn't replace you</strong>, <strong>it helps you</strong> - so take few minutes to polish the details that Rectors missed and send the PR to your project
<em class="fas fa-fw fa-check text-success fa-lg"></em></p>
<p>But if it's something daunting, <a href="https://github.com/rectorphp/rector/issues">create an issue</a> - there might be a way to automate it.</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/03/25/how-to-instantly-migrate-nette-tester-to-phpunit</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/03/25/how-to-instantly-migrate-nette-tester-to-phpunit#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Instantly Migrate PhpSpec to PHPUnit ]]></title>
                <link>https://tomasvotruba.com/blog/2019/03/21/how-to-instantly-migrate-phpspec-to-phpunit</link>
                <description><![CDATA[ <p>I'm happy that more and more people try to use Rector upgrade and migrate their code-bases to the ones they really want for a long time.
<br>
<br>
Last week I was approached by 2 different people with single need - <strong>migrate their tests to PHPUnit</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <blockquote class="blockquote text-center">
    "Nobody believes in anything without an inner feeling that it can be realized.
    <br>
    This is the only source of dreamlike powers."
    <footer class="blockquote-footer">Peter Altenberg
</footer></blockquote>
<p><em>Disclaimer: I never used nor saw PhpSpec in code before this mentoring session. All I learned was from my client and his needs (and bit of reading the documentation)</em>.</p>
<h2 id="quot-why-do-you-have-2-unit-testing-frameworks-quot">&quot;Why do you Have 2 Unit-Testing Frameworks?&quot;</h2>
<p>That was my question to one of my clients when I saw both PhpSpec and PHPUnit tests in its code base.</p>
<ul>
<li>&quot;So what is added value of PhpSpec over PHPUnit?&quot;</li>
<li>&quot;Well, I use it for unit testing.&quot;</li>
<li>&quot;How is that different to PHPUnit?&quot;</li>
<li>&quot;It tests the behavior.&quot;</li>
<li>&quot;Well, what is the difference between <code>assertSame()</code> and <code>shouldBeEqualTo()</code>&quot;?</li>
<li>&quot;None really.&quot;</li>
</ul>
<p>But before I noticed PhpSpec and asked about it, we had another chat:</p>
<ul>
<li>&quot;Why there is this static class when the rest of your code uses Symfony Dependency Injection?&quot;</li>
<li>&quot;It's needed for my test.&quot;</li>
<li>&quot;Why don't you use <code>KernelTestCase</code>&quot;?</li>
<li>&quot;I can't.&quot;</li>
<li>&quot;Well, you have Symfony and you run your whole application on it, you have PHPUnit, so you can. Why not?&quot;</li>
<li>&quot;It's not PHPUnit, it's PhpSpec.&quot;</li>
<li>&quot;So?&quot;</li>
<li>&quot;It doesn't use any container, there must be static in my code.&quot;</li>
<li>&quot;So what is added value of PhpSpec over PHPUnit?&quot;</li>
<li>&quot;...&quot;</li>
</ul>
<p>Then I explored PhpSpec and found out, it's <strong>basically PHPUnit with different naming</strong>.</p>
<blockquote class="blockquote text-center">
    "It looks like Y, a variant of X, could be done in
    <br>
    about half the time, and you lose only one feature."
    <footer class="blockquote-footer">The Pragmatic Programmer book
</footer></blockquote>
<h2 id="trends-over-long-tail-effect">Trends over Long-Tail Effect</h2>
<p>Why did we choose to migrate PhpSpec tests to PHPUnit? Well, it's better obviously... Do you agree with me just because I wrote that? <strong>Don't do that, it's my personal opinionated opinion (= feeling, emotion). Ask me for some data instead</strong>.</p>
<p>Let's look at downloads:</p>
<ul>
<li>1 mil. downloads</li>
<li><a href="https://packagist.org/packages/phpspec/phpspec/stats">14 mils. downloads</a></li>
<li><a href="https://packagist.org/packages/phpunit/phpunit/stats">117 mils. downloads</a></li>
</ul>
<p>But 117 mil. downloads can be like &quot;You should use Windows XP because it's the most used Windows version ever!&quot; That's classic manipulation of dying dinosaur.</p>
<p><strong>Let's see the trends!</strong> In the same order:</p>
<div class="row">
    <div class="col-md-4 col-sm-4">
        <img src="/assets/images/posts/2019/unit-mig/tester.png"></div>
    <div class="col-md-4 col-sm-4">
        <a href="https://packagist.org/packages/phpspec/phpspec/stats">
            <img src="/assets/images/posts/2019/unit-mig/spec.png"></a>
    </div>
    <div class="col-md-4 col-sm-4">
        <a href="https://packagist.org/packages/phpunit/phpunit/stats">
            <img src="/assets/images/posts/2019/unit-mig/phpunit.png"></a>
    </div>
</div>
<p>Which one would you pick from this 2 information? I'd go for the last one, so did my client. <strong>So that's why we agreed to migrate PhpSpec</strong> (the middle one) <strong>to PHPUnit</strong>.</p>
<p><br></p>
<p>This is how 1 spec migration might look like:</p>
<pre><code class="language-diff"> &lt;?php

-namespace spec\App\Product;
+namespace Tests\App\Product;

-use PhpSpec\ObjectBehavior;

-final class CategorySpec extends ObjectBehavior
+final class CategoryTest extends \PHPUnit\Framework\TestCase
 {
+    /**
+     * @var \App\Product\Category
+     */
+    private $createMe;

-    public function let()
+    protected function setUp()
     {
-        $this-&gt;beConstructedWith(5);
+        $this-&gt;createMe = new \App\Product\Category(5);
     }

-    public function it_returns_id()
+    public function testReturnsId()
     {
-        $this-&gt;id()-&gt;shouldReturn(5);
+        $this-&gt;assertSame(5, $this-&gt;createMe-&gt;id());
     }

-    public function it_blows()
+    public function testBlows()
     {
-        $this-&gt;shouldThrow('SomeException')-&gt;during('item', [5]);
+        $this-&gt;expectException('SomeException');
+        $this-&gt;createMe-&gt;item(5);
     }

-    public function it_should_be_called(Cart $cart)
+    public function testCalled()
     {
+        /** @var Cart|\PHPUnit\Framework\MockObject\MockObject $cart */
+        $cart = $this-&gt;createMock(Cart::class);
-        $cart-&gt;price()-&gt;shouldBeCalled()-&gt;willReturn(5);
+        $cart-&gt;expects($this-&gt;atLeastOnce())-&gt;method('price')-&gt;willReturn(5);
-        $cart-&gt;shippingAddress(Argument::type(Address::class))-&gt;shouldBeCalled();
+        $cart-&gt;expects($this-&gt;atLeastOnce())-&gt;method('shippingAddress')-&gt;with($this-&gt;isType(Address::class));
     }

-     public function is_bool_check()
+     public function testBoolCheck()
      {
-         $this-&gt;hasFailed()-&gt;shouldBe(false);
+         $this-&gt;assertFalse($this-&gt;createMe-&gt;hasFailed());
-         $this-&gt;hasFailed()-&gt;shouldNotBe(false);
+         $this-&gt;assertNotFalse($this-&gt;createMe-&gt;hasFailed());
      }

-     public function is_array_type()
+     public function testArrayType()
      {
-         $this-&gt;shippingAddresses()-&gt;shouldBeArray();
+         $this-&gt;assertIsIterable($this-&gt;createMe-&gt;shippingAddresses());
      }
 }</code></pre>
<p>Pretty clear, right?</p>
<h2 id="how-to-instantly-migrate-from-phpspec-to-phpunit">How to Instantly Migrate from PhpSpec to PHPUnit?</h2>
<p>First, take a 2-week paid vacation... Just kidding. Start with Rector which migrates ~95 % of code cases. It also renames <code>*Spec.php</code> to <code>*Test.php</code> and moves them from <code>/spec</code> to <code>/tests</code> directory:</p>
<pre><code class="language-bash">composer require rector/rector --dev
vendor/bin/rector process spec --set phpspec-to-phpunit</code></pre>
<p>Rector is getting smarter every set, but I bet there are still some missed cases. <strong>When the code doesn't work, just go and <a href="https://github.com/rectorphp/rector/issues">report the issue</a></strong> with expected vs. current output.</p>
<p>Take 10 more minutes to polish the rest of code and send PR to your project <em class="fas fa-fw fa-check text-success fa-lg"></em></p>
<p><br></p>
<p>And what was the other unit testing framework that Rector migrated? You'll see in the next post.</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/03/21/how-to-instantly-migrate-phpspec-to-phpunit</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/03/21/how-to-instantly-migrate-phpspec-to-phpunit#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Detect Dead PHP Code in Code Review in 7 Snippets ]]></title>
                <link>https://tomasvotruba.com/blog/2019/03/18/how-to-detect-dead-php-code-in-code-review-in-7-snippets</link>
                <description><![CDATA[ <p>After few long <a href="/clusters/#from-nette-to-symfony/">Nette to Symfony migration series</a>, it's time for relax.
<br>
Let's look at 7 snippets of PHP code, that <a href="/blog/2018/05/21/is-your-code-readable-by-humans-cognitive-complexity-tells-you/">happily takes your attention</a> but <strong>is never run</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <p>Imagine you're doing a code review of &quot;various improvements&quot; pull-request with <strong>150 changed files</strong>...</p>
<img src="/assets/images/posts/2019/dead-code/fine.jpg" class="img-thumbnail">
<p>Ok, not that one. Let's go <strong>only for 7 changed files</strong>. There will be 7 code snippets, each possibly with extra code that looks useful, but it doesn't do anything really.</p>
<p>Then click on the button to see if you were right :)</p>
<h2 id="1-duplicated-array-key">1. Duplicated Array Key</h2>
<pre><code class="language-php">&lt;?php

$items = [
    1 =&gt; 'A',
    1 =&gt; 'B',
    1 =&gt; 'C'
];</code></pre>
<p>What is <code>1</code>?</p>
<pre><code class="language-php">&lt;?php

var_dump($items[1]);</code></pre>
<p>&quot;A&quot; or &quot;C&quot;? Or Array with all fo them?</p>
<p><a class="btn btn-success mt-2 mb-2" href="https://3v4l.org/cjNWO">See Result</a></p>
<h2 id="2-key-with-key-hole">2. Key with Key-Hole</h2>
<pre><code class="language-php">&lt;?php

$items = [];
$result = [];
foreach ($items as $key =&gt; $value) {
    $result[] = $value;
}</code></pre>
<p>What value is extra here?</p>
<p><a class="btn btn-success mt-2 mb-2" href="#example_2">See Result</a></p>
<p><br>
<br>
<br></p>
<p><a name="example_2"></a></p>
<pre><code class="language-diff">-foreach ($items as $key =&gt; $value) {
+foreach ($items as $value) {
     $result[] = $value;
 }</code></pre>
<h2 id="3-call-for-nothing">3. Call for Nothing</h2>
<pre><code class="language-php">&lt;?php

class ParentButNoMethod extends ParentMethod
{
    public function one()
    {
        parent::one();
    }

    public function two()
    {
        parent::two();
    }
}

class ParentMethod
{
    public function one()
    {
    }
}</code></pre>
<p><a class="btn btn-success mt-2 mb-2" href="#example_3">See Result</a></p>
<p><br>
<br>
<br></p>
<p><a name="example_3"></a></p>
<pre><code class="language-diff">&lt;?php

class ParentButNoMethod extends ParentMethod
{
    public function one()
    {
        parent::one();
    }

    public function two()
    {
-       parent::two();
    }
}

class ParentMethod
{
    public function one()
    {
    }
}</code></pre>
<h2 id="4-reborn">4. Reborn?</h2>
<pre><code class="language-php">&lt;?php

class ProductController
{
    public function actionDiscount(Product $product)
    {
        $discount = $this-&gt;getDiscount();
        $productCategory = $this-&gt;categoryRepository-&gt;findCategoriesByProduct(
            $product-&gt;getCategory()
        );
        $discount = $this-&gt;getDiscount();

        return $this-&gt;render('product/discount.twig', [
            'discount' =&gt; $discount,
            'product' =&gt; $product,
            'productCategory' =&gt; $productCategory,
        ]);
    }
}</code></pre>
<p><a class="btn btn-success mt-2 mb-2" href="#example_4">See Result</a></p>
<p><br>
<br>
<br></p>
<p><a name="example_4"></a></p>
<pre><code class="language-diff">-$discount = $this-&gt;getDiscount();
 $productCategory = $this-&gt;categoryRepository-&gt;findCategoriesByProduct(
     $product-&gt;getCategory()
 );
 $discount = $this-&gt;getDiscount();</code></pre>
<h2 id="5-behind-the-mirror">5. Behind the Mirror</h2>
<pre><code class="language-php">&lt;?php

final class TimeMachine
{
    public function mirrorFunction(Quiz $quiz)
    {
        $timeLimit = $this-&gt;resolveTimeLimitForThisTest();
        if ($timeLimit &gt;= 20) {
            return false;
        }

        $timeLimit = $timeLimit;
        if ($this-&gt;isQuizFinished($quiz)) {
            $correctQuestions = 1;
            $correctQuestions = $correctQuestions;
            $incorrectQuestions = $correctQuestions - 3;
        }
    }
}</code></pre>
<p><a class="btn btn-success mt-2 mb-2" href="#example_5">See Result</a></p>
<p><br>
<br>
<br></p>
<p><a name="example_5"></a></p>
<pre><code class="language-diff"> &lt;?php

 final class TimeMachine
 {
     public function mirrorFunction(Quiz $quiz)
     {
         $timeLimit = $this-&gt;resolveTimeLimitForThisTest();
         if ($timeLimit &gt;= 20) {
             return false;
         }

-        $timeLimit = $timeLimit;
         if ($this-&gt;isQuizFinished($quiz)) {
             $correctQuestions = 1;
-            $correctQuestions = $correctQuestions;
             $incorrectQuestions = $correctQuestions - 3;
         }
     }
 }</code></pre>
<h2 id="6-rinse-amp-repeat">6. Rinse &amp; Repeat</h2>
<pre><code class="language-php">&lt;?php

final class WhateverMethodCall
{
    public function run()
    {
        $directories = 1;
        $anotherDirectories = 1;
        $directories = 2;
        $this-&gt;store($directories);
        $anotherDirectories = 2;
        $directories = 3;
        $anotherDirectories = 3;
        $directories = 4;
        $directories = 5;
        return $directories + $anotherDirectories;
    }
    public function store(int $directories)
    {
    }
}</code></pre>
<p><a class="btn btn-success mt-2 mb-2" href="#example_6">See Result</a></p>
<p><br>
<br>
<br></p>
<p><a name="example_6"></a></p>
<pre><code class="language-diff">&lt;?php

final class WhateverMethodCall
{
    public function run()
    {
-       $directories = 1;
-       $anotherDirectories = 1;
        $directories = 2;
        $this-&gt;store($directories);
-       $anotherDirectories = 2;
-       $directories = 3;
        $anotherDirectories = 3;
-       $directories = 4;
        $directories = 5;
        return $directories + $anotherDirectories;
    }
}</code></pre>
<h2 id="7-privates-that-no-one-see">7. Privates that No-One See</h2>
<pre><code class="language-php">&lt;?php

final class SomeController
{
    private const MAX_LIMIT = 5;

    private const LIMIT = 5;

    private $cachedValues = [];

    private $cachedItems = [];

    public function run()
    {
        $values = $this-&gt;repeat();
        $values[] = 5;

        return $values + $this-&gt;cachedItems;
    }

    private function repeat()
    {
        $items = [];
        while ($this-&gt;fetch() &amp;&amp; $this-&gt;fetch() &lt; self::LIMIT) {
            $items[] = $this-&gt;fetch();
            $this-&gt;cachedItems[] = $this-&gt;fetch();
        }

        return $items;
    }

    private function fetch()
    {
        return mt_rand(1, 15);
    }

    private function clear()
    {
        $this-&gt;cachedItems = [];
    }
}</code></pre>
<p><a class="btn btn-success mt-2 mb-2" href="#example_7">See Result</a></p>
<p><br>
<br>
<br></p>
<p><a name="example_7"></a></p>
<pre><code class="language-diff">&lt;?php

final class SomeController
{
-    private const MAX_LIMIT = 5;

     private const LIMIT = 5;

-    private $cachedValues = [];

     private $cachedItems = [];

     public function run()
     {
         $values = $this-&gt;repeat();
         $values[] = 5;

         return $values + $this-&gt;cachedItems;
     }

     private function repeat()
     {
         $items = [];
         while ($this-&gt;fetch() &amp;&amp; $this-&gt;fetch() &lt; self::LIMIT) {
             $items[] = $this-&gt;fetch();
             $this-&gt;cachedItems[] = $this-&gt;fetch();
         }

         return $items;
     }

     private function fetch()
     {
         return mt_rand(1, 15);
     }

-    private function clear()
-    {
-        $this-&gt;cachedItems = [];
-    }
}</code></pre>
<h2 id="you-re-in-the-finish">You're in the Finish!</h2>
<ul>
<li>How many dead codes did you find?</li>
<li>Did you just scan right here, because the task was too hard and it didn't make sense to you?</li>
<li>Would you do it again tomorrow or rather code?</li>
</ul>
<p>No wonder <strong>people don't do code-review</strong> (right), there is no time and it's often super boring.</p>
<p><br></p>
<p>What if there would be a way to <strong>automate all that checks above</strong> + 10 more with a CI tool. Something that:</p>
<ul>
<li>would <strong>do code-review for you</strong> making your team much smarter forever</li>
<li>would <strong>not require your check</strong> on every new piece of code</li>
<li>you could <strong>extend</strong> as you like</li>
</ul>
<h2 id="have-you-tried-rector">Have you tried Rector?</h2>
<p>Rector doesn't only refactor applications from one framework to another, upgrade your codebase and get you out of legacy. It can be also <strong>part of your CI</strong>:</p>
<pre><code class="language-bash">composer require rector/rector --dev
vendor/bin/rector process src --set dead-code --dry-run</code></pre>
<p><strong>If Rector detects any dead code, CI will fail</strong>. You can, of course, run it without <code>--dry-run</code> after to actually remove the code.</p>
<p>See <a href="https://github.com/rectorphp/rector/blob/master/docs/AllRectorsOverview.md#deadcode">Dead Code set</a> for more features.</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/03/18/how-to-detect-dead-php-code-in-code-review-in-7-snippets</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 18 Mar 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/03/18/how-to-detect-dead-php-code-in-code-review-in-7-snippets#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Why we Migrated from Nette to Symfony in 3 Weeks - Part 3 - Brain Drain Dead Packages-Lock ]]></title>
                <link>https://tomasvotruba.com/blog/2019/03/11/why-we-migrated-from-nette-to-symfony-in-3-weeks-part-3</link>
                <description><![CDATA[ <p>Do you want to <strong>migrate your project from Nette to Symfony</strong>? In <a href="/blog/2019/03/07/how-we-migrated-from-nette-to-symfony-in-3-weeks-part-2/">the part 2</a> we looked at <strong>escaping semver hell</strong>.
<br><br>
Today we'll look on <strong>package vendor-locks</strong> caused by brain drain.</p> ]]></description>
                <content:encoded><![CDATA[ <p><em>This post will be a bit harder for me because I'm part of this problem. I'm a former Nette activist and open-source hyper. I created many open-source packages Nette developers use, but those are not actively maintained nor developed for the last couple of years. I'm sorry about that.</em></p>
<p><br></p>
<p><strong>If you love Nette, <a href="/blog/2018/05/31/symfony-vs-laravel-vs-nette-which-php-framework-you-should-choose/">keep using it</a>. This post is for people, whose companies are hurt by being locked to Nette ecosystem and who want to solve that but don't know how or if that is even possible.</strong></p>
<h2 id="february-2017">February 2017...</h2>
<p>When we talked with <a href="https://janmikes.cz">Honza</a> about framework A → framework B migration first related to <a href="https://entry.do">Entry.do</a>, it was on the first PHP Mountains 2017. Rector was still 5 months before being born, so manual work was the only way.</p>
<p>First, we looked into <code>composer.json</code> and tried to get rid of some packages. What packages we won't need on Symfony?</p>
<ul>
<li><code>kdyby/events</code></li>
<li><code>kdyby/console</code></li>
<li><code>kdyby/doctrine</code></li>
<li><code>kdyby/rabbitmq</code></li>
<li><code>kdyby/redis</code></li>
<li><code>kdyby/translation</code></li>
<li><code>zenify/doctrine-behaviors</code></li>
<li><code>zenify/doctrine-migrations</code></li>
<li><code>zenify/doctrine-filters</code></li>
<li><code>zenify/modular-latte-filters</code></li>
<li><code>zenify/doctrine-fixtures</code></li>
<li><code>zenify/doctrine-extensions-tree</code></li>
</ul>
<p><strong>We could drop all these</strong>, because:</p>
<ul>
<li><code>kdyby/*</code> is basically integration of Symfony packages with <code>nette/di</code>,</li>
<li>and <code>zenify/*</code> is basically <code>doctrine/*</code> integration with <code>nette/di</code></li>
</ul>
<p>Of course, you can't delete them right away. Yet, <a href="/blog/2019/02/21/how-we-migrated-from-nette-to-symfony-in-3-weeks-part-1/#3-automated-migration-gt-manual-changes">Rector covers most of this migration now</a>, so this part is fine.</p>
<h2 id="upgrade-lagging">Upgrade Lagging</h2>
<p>We decided to remove Symfony/Doctrine <em>glue packages</em> first, so we could work with fewer dependencies and be more flexible. And upgrade PHP first, so we can use right the newest Symfony packages.</p>
<p>We tried to remove one <code>zenify/*</code> package (because it's small → possibly easy to replace) and use the package we have in control.</p>
<h3 id="code-object-code"><code>object</code></h3>
<p>Thing is, PHP 7.2 introduced <code>object</code> keyword:</p>
<img src="/assets/images/posts/2019/nette-to-symfony3/nette-object-easy.png" class="img-thumbnail">
<p>Nette had class <code>Nette\Object</code> that was actively promoted as the parent of all classes in your code. Now it had *<em>to be removed from all these classes and replaced by trait</em>:</p>
<pre><code class="language-diff"> &lt;?php

-class SomeClass extends Nette\Object
+class SomeClass
 {
+    use Nette\SmartObject;
 }</code></pre>
<p><em>If you still have this problem, <a href="https://github.com/rectorphp/rector/blob/master/docs/AllRectorsOverview.md#parentclasstotraitsrector">use Rector that handles this case</a>.</em></p>
<p><br></p>
<p>In that time, we had to use PHPStorm old-school <em>find &amp; replace</em> with regex pattern:</p>
<img src="/assets/images/posts/2019/nette-to-symfony3/nette-object-your-code.png">
<p>The upgrade path is like a road with holes. It's getting crappy, but there is still at least some road 👍</p>
<p><strong>But what if there are many packages</strong>, that nobody actively takes care of?</p>
<img src="/assets/images/posts/2019/nette-to-symfony3/nette-object-in-3rd-party.png">
<p><strong>Until the maintainer fixes that, the upgrade path is closed</strong>. We'd have to fork every Nette package that is not maintained, fix it manually in the code and add them into <code>composer.json</code>.</p>
<p>We don't talk about small package with few classes that is easy to rewrite:</p>
<img src="/assets/images/posts/2019/nette-to-symfony3/downloads.png" class="img-thumbnail">
<p>Most of Kdyby packages still have <a href="https://packagist.org/packages/kdyby/doctrine/stats">500-900 daily downloads</a>. Even if we take CI servers into account, that still <strong>might be 120-150 PHP applications</strong> locked to legacy with packages that no-one maintains.</p>
<blockquote class="blockquote text-center mt-5 mb-5">
    "When you stop growing, you start dying."
</blockquote>
<h2 id="nette-brain-drain">Nette Brain Drain?</h2>
<p>With a healthy active community as in Laravel or Symfony, there would be PR and we never came across this problem. What's different with Nette?</p>
<p>David Grudl, the author of Nette <a href="https://twitter.com/geekovo/status/417869320677367808">tweeted at the end of 2013</a> that <strong>he ends with Nette</strong>. &quot;One tweet&quot;, you might think, but there was more of similar news on Nette forum and popular Czech IT blogs.</p>
<p>Many years later, when I become a Symfony consultant, I asked companies why did they choose Symfony over Nette. After all, there were Nette meetups in our the Czech Republic every month and maybe 2 non-Nette PHP meetups about other frameworks. The answer was almost unanimous: when they discussed what PHP framework to use, they saw David's tweet. <strong>They needed something stable they could for the next 5 years.</strong></p>
<p><br></p>
<p>In following years, without anyone noticing, <strong>slow brain drain from Nette to Symfony, Java or Javascript</strong> started:</p>
<ul>
<li><a href="https://prochazka.su">Filip Procházka</a>, the author of Kdyby → is now Java programmer</li>
<li><a href="https://patrik.votocek.cz">Patrik Votoček</a>, one of first Nette evangelist and author of Nella →  switched to Symfony, then to chaos monkey,</li>
<li><a href="https://github.com/mrtnzlml">Martin Zlámal</a>, very active Nette evangelist who held many Nette/PHP talks on university → now works with Javascript at Kiwi.com</li>
<li><a href="http://enumag.cz">Jáchym Toušek</a>, active Symfony to Nette integrator → switched to Symfony</li>
<li>I, author of Zenify and Symnedi → switched to Symfony</li>
<li>...</li>
</ul>
<p><strong>Many of open-source packages for Nette slowly become unmaintained.</strong> So this error is new status-quo for these packages:</p>
<img src="/assets/images/posts/2019/nette-to-symfony3/nette-object-in-3rd-party.png">
<p><br></p>
<p>When we realized with Honza that night, that to upgrade project means &quot;fork every unmaintained dependency and I hope there will be better times&quot;, we stopped. But <strong>the motivation remained and 2 years later</strong>, with better skills and Rector, we managed to migrate the application from Nette to Symfony in less than a month.</p>
<p><br></p>
<h2 id="come-to-meetup-and-tell-us-about-your-problem">Come to Meetup and Tell Us About Your Problem</h2>
<p>Are you stuck with Nette at home and thinking about in your wet dreams Symfony? This is your lucky week! :)</p>
<p>Honza will talk about Nette to Symfony migration on <strong><a href="https://www.meetup.com/friends-of-php-prague/events/259627000">PHP meetup in Prague this Thursday - 14. 3.</a></strong></p>
<p>Entrance free, language is English and I'll be there too!</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/03/11/why-we-migrated-from-nette-to-symfony-in-3-weeks-part-3</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/03/11/why-we-migrated-from-nette-to-symfony-in-3-weeks-part-3#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Why we Migrated from Nette to Symfony in 3 Weeks - Part 2 - Escaping Semantic Hell ]]></title>
                <link>https://tomasvotruba.com/blog/2019/03/07/why-we-migrated-from-nette-to-symfony-in-3-weeks-part-2</link>
                <description><![CDATA[ <p>Do you want to <strong>migrate your project from Nette to Symfony</strong>? In <a href="/blog/2019/02/21/how-we-migrated-from-nette-to-symfony-in-3-weeks-part-1/">part 1</a> we showed you how to get your project ready, why it's important to make team commitment and what you can automate.
<br><br>
Today we'll look on one of the core reasons for this migration - <strong>escaping to semantic hell</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <p><a href="https://semver.org">Semantic versioning</a> aka <em>semver</em> tells you there is a BC break between <code>nette/di</code> in version 2.5 and 3.0. That's all you need to know as a web developer.</p>
<p>If you're an open-source developer, you'll probably learn more about semver. If you do it right, your user will be happy and never have to learn anything more 2.5 and 3.0.</p>
<h2 id="from-nette">From Nette...</h2>
<p>When you run <code>composer update</code> Nette project, you'll find this normal:</p>
<img src="/assets/images/posts/2019/nette-to-symfony2/version-hell.png" style="max-width:30em">
<p>You can see there 3 variants:</p>
<ul>
<li><code>nette/utils</code> is on 2.5.3</li>
<li><code>nette/tokenizer</code> is on 2.3.0</li>
<li><code>nette/mail</code> is on 2.4.6</li>
</ul>
<p>Today, there are also some Nette packages on 3, but some not. Who cares, right?</p>
<p>If you don't know Nette, you might think &quot;why would somebody use the different versions in their <code>composer.json</code>&quot;?</p>
<pre><code class="language-json">{
   "require": {
       "nette/utils": "^2.5",
       "nette/tokenizer": "^2.3",
       "nette/mail": "^2.4"
   }
}</code></pre>
<p>Actually, <code>composer.json</code> looks like this:</p>
<pre><code class="language-json">{
   "require": {
       "nette/utils": "^2.3",
       "nette/tokenizer": "^2.3",
       "nette/mail": "^2.3"
   }
}</code></pre>
<p>And that's a huge overhead with Nette versioning. Each package requires different versions, even v2, and 3 at the same time. If you upgrade to the newer version, the last thing you want to solve is conflicts in a package that are not yours:</p>
<img src="/assets/images/posts/2019/nette-to-symfony2/install-fail.png">
<h2 id="what-s-different-in-symfony">What's different in Symfony?</h2>
<p>When you install Symfony 4.0, you know that:</p>
<ul>
<li><strong>all your packages</strong> are using Symfony 4.0</li>
<li>all Symfony packages <strong>are compatible</strong> with each other</li>
<li><strong>when you find a bug</strong>, it will be fixed in Symfony 4.0.x</li>
<li>you can look forward to next version 4.1 in 6 months :)</li>
</ul>
<p>This approach is super stable since Symfony 3.4 and 2017. You can really on <a href="https://symfony.com/doc/current/contributing/code/bc.html">Symfony promise</a> it more than of stability airplanes (I'm writing this post on one, I hope this statement is true :D).</p>
<p>Imagine you're looking for a bug across <code>symfony/console</code> 3.4, <code>symfony/dependency-injection</code> 4.1 and <code>symfony/finder</code> 4.2. Or just read the Symfony documentation in 3 different versions.</p>
<h2 id="don-t-bother-the-user-with-bad-package-design">Don't Bother the User with Bad Package Design</h2>
<p>Since I was raised in Nette, I used <strong>per-package tagging</strong> in my open-source projects (<em>Zenify</em>, <em>Symnedi</em> and now <em>Symplify</em>). It allowed me to release new versions when the package needed it.</p>
<ul>
<li>Does<code>zenify/doctrine-filters</code> has a BC break? Let's release 3.</li>
<li>Are there no changes <code>zenify/coding-standard</code> in last 1 year? Stick it with 1.</li>
</ul>
<p>That's <em>nice to have</em> for the maintainer. But what about the developers who use your packages? <strong>It's extra maintenance with 0-benefits.</strong></p>
<blockquote class="blockquote mt-5 mb-5 text-center">
    There should be less and academic thinking in programming
    <br>and more <strong>pragmatic common sense</strong>. We were born with it.
</blockquote>
<p>Maintainers should read books like <a href="https://www.amazon.com/Design-Everyday-Things-Revised-Expanded-ebook/dp/B06XCCZJ4L">The Design of Everyday Things</a>, <a href="https://www.amazon.com/Dont-Make-Think-Revisited-Usability-ebook-dp-B00HJUBRPG/dp/B00HJUBRPG">Don't Make me Think</a> and <a href="https://www.amazon.com/Pragmatic-Programmer-Journeyman-Master-ebook-dp-B003GCTQAE/dp/B003GCTQAE">The Pragmatic Programmer</a> to understand how others see our code.</p>
<h2 id="symfony-kiss-per-vendor-tagging">Symfony KISS = Per-Vendor Tagging</h2>
<p>So I decided <strong>to try <a href="/blog/2017/10/30/what-can-you-learn-from-menstruation-and-symfony-releases/">per-vendor tagging</a></strong> over per-package tagging. Now I have to answer questions like &quot;Why did you release a new version of your package, but no change between version 3.2.0 and 3.3.0?&quot; But I know <strong>bothering developers with semver-hell</strong> is not a better choice, so I answer patiently (with a link to this post :)).</p>
<p>After all:</p>
<blockquote class="blockquote text-center">
   There are no best solutions, just trade-offs.
</blockquote>
<p><br></p>
<p><strong>This was one of our reasons we switched from Nette to Symfony</strong>. Now we can upgrade all ~35 Symfony packages at once knowing they all work together.</p>
<p><br></p>
<p>Do you think it's impossible change for your project? Drop us a <a href="https://getrector.org">message at Rector</a>. We'll help you.</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/03/07/why-we-migrated-from-nette-to-symfony-in-3-weeks-part-2</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 07 Mar 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/03/07/why-we-migrated-from-nette-to-symfony-in-3-weeks-part-2#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to turn Laravel from Static to Dependency Injection in one Day ]]></title>
                <link>https://tomasvotruba.com/blog/2019/03/04/how-to-turn-laravel-from-static-to-dependency-injection-in-one-day</link>
                <description><![CDATA[ <p>A framework is just a tool. Each teaches you coding habits you need to use them effectively.
Like Laravel gives you speed at prototyping with static &quot;facades&quot;. But the applications grows, so does the team, so does your skill and <strong>you start to prefer constructor injection</strong>.
<br><br>
What then? Switch framework or rewrite? But what if all you need is to <strong>switch single pattern</strong>?</p> ]]></description>
                <content:encoded><![CDATA[ <p>I don't use Laravel in my own life, but I follow the community closely. It likes the idea of Contracts from day 1 and it's also part of Rector upgrade set.</p>
<p>Recently I read the <a href="https://medium.freecodecamp.org/moving-away-from-magic-or-why-i-dont-want-to-use-laravel-anymore-2ce098c979bd">Moving away from magic — or: why I don’t want to use Laravel anymore</a> on medium by <em>Niklas Schöllhorn</em>.</p>
<p><a href="https://medium.freecodecamp.org/moving-away-from-magic-or-why-i-dont-want-to-use-laravel-anymore-2ce098c979bd"></p>
<img src="/assets/images/posts/2019/laravel/best-seller.png" class="img-thumbnail">
<p></a></p>
<p>Read the post, it's really beautifully written with respect to the framework by somebody, who uses is for 2 years. Also, I think it's <strong>about the natural evolution of code and how to deal with it</strong>, not Laravel itself.</p>
<p>Niklas finishes the post with a reasonable statement:</p>
<blockquote>
<p>Other frameworks and tools come with better-designed defaults and less magic. So for now, I’ll say goodbye to Laravel.</p>
</blockquote>
<p>But is switching the framework (language, girlfriends, parents...) really the best solution?</p>
<h2 id="do-you-leave-your-kid-on-puberty">Do You Leave Your Kid on Puberty?</h2>
<p>Thing is, every framework (and developer) has this step in evolution. So did <a href="/blog/2018/04/26/how-i-got-into-static-trap-and-made-fool-of-myself/">Symplify with static methods</a>.</p>
<p>Each framework I used in some period of its evolution used static:</p>
<p><strong>Nette</strong></p>
<pre><code class="language-php">&lt;?php

$result = Container::get('some_service')-&gt;someMethod();</code></pre>
<p><strong>Symfony</strong></p>
<pre><code class="language-php">&lt;?php

$result = $this-&gt;get('some_service')-&gt;someMethod();</code></pre>
<p><strong>Laravel</strong></p>
<pre><code class="language-php">&lt;?php

$result = SomeService::someMethod();</code></pre>
<h2 id="help-your-parents-grow">Help Your Parents Grow</h2>
<p>I don't think the point is to leave the framework but to help it to the quality. E.g. Symfony constructor injection autowiring as we know it today wasn't always there. It was first suggested around Symfony 2.3 but strictly rejected by Fabien as an anti-pattern.</p>
<p>It took many bundles like Kutny\AutowiringBundle, Skrz\Autowiring or Symplify\Autowiring, closed issues and PRs with proof of concept before the Symfony core team was convinced enough to accept next autowiring-PR, that laid the foundation to autowiring we use today.</p>
<p>This is a completely normal process of community learning.</p>
<h2 id="quot-so-how-do-i-get-rid-of-static-in-laravel-quot">&quot;So How do I get rid of Static in Laravel?&quot;</h2>
<p>One option is change pattern by <strong>switching to another framework</strong>, that already promotes the feature you want. I did this once with Nette when the development stopped around 2015. First, I tried to add a feature, make packages with integration and propose PRs and issues. But after a few years of failure, I decided to switch to Symfony.</p>
<p>The second option is to try the approach in your framework, regardless of what is considered <em>best practice</em> or the <em>framework-way</em>.</p>
<h2 id="how-move-to-dependency-injection-in-laravel">How move to Dependency Injection in Laravel?</h2>
<p>I like the way suggested in <a href="https://medium.freecodecamp.org/moving-away-from-magic-or-why-i-dont-want-to-use-laravel-anymore-2ce098c979bd">post above</a>.</p>
<pre><code class="language-diff"> &lt;?php

 namespace App\Http;

 use App\Example;
 use Request;
 use Response;

 class ExampleController extends Controller
 {
+    /**
+     * @var ResponseFactory
+     */
+    private $responseFactory;
+
+    public function __construct(ResponseFactory $responseFactory)
+    {
+        $this-&gt;responseFactory = $responseFactory;
+    }
+
     public function store()
     {
         $example = 5;
-        return Response::view('example',
+        return $this-&gt;responseFactory-&gt;view('example',
             ['new_example' =&gt; $example]
         );
     }
 }</code></pre>
<p>That looks great! If you have ~10 cases like that, you're done instead of reading this post.</p>
<p>But what if your project is commercially successful and there are 100+ cases like this? You'd probably think &quot;it would be nice for my small pet project, but my boss wouldn't pay for that&quot;.</p>
<h2 id="rector-to-the-rescue">Rector to the Rescue</h2>
<p>These kinds of problems are <em>so 2018</em>. Recently Rector got on board <a href="https://github.com/rectorphp/rector/pulls?utf8=%E2%9C%93&amp;q=laravel">Laravel instant upgrades</a>, first with Laravel 5.8.</p>
<p>Next impulse was the post by Niklas, so I've <strong>converted his idea to Rector rule</strong>. The change from facades to constructor injection can be done with new <code>laravel-static-to-injection</code>:</p>
<pre><code class="language-bash">vendor/bin/rector process /src --set laravel-static-to-injection</code></pre>
<p>No need to switch framework and you can enjoy new constructor injection in your Laravel application matter of minutes.</p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/03/04/how-to-turn-laravel-from-static-to-dependency-injection-in-one-day</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 04 Mar 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/03/04/how-to-turn-laravel-from-static-to-dependency-injection-in-one-day#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Upgrade Symfony 2.8 to 3.4 ]]></title>
                <link>https://tomasvotruba.com/blog/2019/02/28/how-to-upgrade-symfony-2-8-to-3-4</link>
                <description><![CDATA[ <p>Are you Symfony programmer? Do you work on a successful project? Then upgrading the Symfony project is a work you can't avoid.
Almost a year ago I wrote about <a href="https://blog.shopsys.com/5-5-steps-to-migrate-from-symfony-2-8-lts-to-symfony-3-4-lts-in-real-prs-50c98eb0e9f6">Five and Half Steps to Migrate from Symfony 2.8 LTS to Symfony 3.4 LTS in Real PRs</a>.
<br><br>
Now it's much easier to jump from one LTS to another - with <strong>instant upgrades</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <p>Recently, more and more issues pop-up at Symfony repository <strong>asking for automated upgrade</strong>:</p>
<ul>
<li><a href="https://github.com/symfony/symfony/issues/30054">Why not to create a symfony framework updater software from command line</a></li>
</ul>
<p>I'm happy Symfony core team is supporting generic solution to all PHP-code upgrades ↓</p>
<img src="/assets/images/posts/2019/symfony-up/nick.png" class="img-thumbnail">
<h2 id="upgrade-symfony-and-php">Upgrade Symfony... and PHP</h2>
<p>To make a bad situation more complicated, this upgrade is also related to upgrading of PHP - <strong>Symfony 3.4 requires PHP 5.5.</strong></p>
<p>I wrote about <a href="/blog/2018/11/08/fatal-error-uncaught-error-operator-not-supported-for-strings-in/">PHP upgrades before</a>, but the main away is to upgrade <strong>one minor version at once</strong>:</p>
<ul>
<li>Symfony 2.8 → 3.0</li>
<li>PHP 5.3 → 5.4</li>
<li>Symfony 3.0 → 3.1</li>
<li>Symfony 3.1 → 3.2</li>
<li>PHP 5.4 → 5.5</li>
<li>Symfony 3.2 → 3.3</li>
<li>Symfony 3.3 → 3.4</li>
</ul>
<p>If you split each of these lines into standalone pull-requests, you're the best!</p>
<h2 id="forget-code-upgrade-md-code">Forget <code>UPGRADE.md</code></h2>
<p>You probably know I work almost part-time on <a href="https://getrector.org">the Rector project</a>. I gather feedback from conferences and meetups all over Europe and try to make Rector better every day. Recently he also migrated between <a href="/blog/2019/02/21/how-we-migrated-from-nette-to-symfony-in-3-weeks-part-1/">2 PHP frameworks</a>, because why not?</p>
<p>The PHP community gives me really positive vibes about going the right direction. That helps me to make PHP and Symfony <strong>sets more and more complete</strong>:</p>
<img src="/assets/images/posts/2019/symfony-up/sets.png" class="img-thumbnail">
<h2 id="how-to-upgrade-then">How to Upgrade then?</h2>
<p>All you need to do to upgrade your PHP code is to install Rector and run particular upgrades.</p>
<p><strong>Do you want to upgrade from Symfony 2.8 to 3.4?</strong></p>
<pre><code class="language-bash">composer require rector/rector --dev
vendor/bin/rector process app src --set symfony28
vendor/bin/rector process app src --set symfony30
vendor/bin/rector process app src --set symfony31
vendor/bin/rector process app src --set symfony32
vendor/bin/rector process app src --set symfony33
vendor/bin/rector process app src --set symfony34</code></pre>
<p>You still need to upgrade YAML files, but then you're ready to go.</p>
<p><strong>Are you stuck on old PHP 5.3?</strong> Rector got you covered:</p>
<pre><code class="language-bash">vendor/bin/rector process app src --set php53
vendor/bin/rector process app src --set php54
vendor/bin/rector process app src --set php55</code></pre>
<h2 id="awesome-symfony-3-3-dependency-injection">Awesome Symfony 3.3+ Dependency Injection</h2>
<p>Upgrade to Symfony 3.3 shrunk my configs to 1/5 of its original size. That's the  #1 reason you want to upgrade. If you don't know what I'm talking about, check <a href="/blog/2017/05/07/how-to-refactor-to-new-dependency-injection-features-in-symfony-3-3/">the diff post about those features</a>. But wait, don't do it manually! <strong><a href="/blog/2018/12/27/how-to-convert-all-your-symfony-service-configs-to-autodiscovery/">This tool converts it all</a> for you.</strong></p>
<p><br></p>
<p>And that's how we upgrade in 2019 :)</p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/02/28/how-to-upgrade-symfony-2-8-to-3-4</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/02/28/how-to-upgrade-symfony-2-8-to-3-4#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ 5 Tips to Effective Work with Github Repository ]]></title>
                <link>https://tomasvotruba.com/blog/2019/02/25/5-tips-to-effective-work-with-github-repository</link>
                <description><![CDATA[ <p>The best programmers aren't the smartest in the field. They're lazy, <strong>they know their tools well</strong> and <strong>they know good tools</strong> other programmers don't.
<br><br>
Do you know the following tips?</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="1-single-char-console-commands-for-your-tired-fingers">1. Single-Char Console Commands for Your Tired Fingers</h2>
<p>Which one is correct?</p>
<pre><code class="language-bash">vendor/bin/rector process
vendor/bin/rector procces
vendor/bin/rector proccess
vendor/bin/rector proces</code></pre>
<p>You don't want to think about this and you don't have to! Just <strong>use the first letter</strong>:</p>
<pre><code class="language-bash">vendor/bin/rector p</code></pre>
<p>Works every-time there is no command named with that letter:</p>
<pre><code class="language-diff">-vendor/bin/phsptan analyse
+vendor/bin/phsptan a</code></pre>
<pre><code class="language-diff">-vendor/bin/ecs check
+vendor/bin/ecs c</code></pre>
<div class="fa-2x">👍</div>
<h2 id="2-be-informed-about-new-packages-with-no-spam">2. Be informed about New Packages - with no Spam!</h2>
<p>When you &quot;watch&quot; a Github repository, you'll get a notification about every new release, issue, pull-request, or comments. This makes sense when you maintain a repository, but for most of the people, it's annoying spam.</p>
<p>GitHub recently introduced a very nice feature. It will add notification <strong>only for releases</strong>:</p>
<img src="/assets/images/posts/2019/github-tips/github-subscription.png" class="img-thumbnail">
<div class="fa-2x">👍</div>
<h2 id="3-fix-typos-with-up">3. Fix Typos with UP</h2>
<p>Have you ever sent a comment with a typo? I barely do without, and always notice that after I hit the &quot;send&quot; (or CTRL + Enter).</p>
<p>Now move your cursor to the 3 dots in the right corner of the comment, click, select <em>Edit</em> and click again.</p>
<p><strong>No more!</strong></p>
<img src="/assets/images/posts/2019/github-tips/up.gif" class="img-thumbnail">
<p>Just <strong>hit ↑</strong> (arrow up), and you're there!</p>
<div class="fa-2x mt-4">👍</div>
<h2 id="4-refine-your-github">4. Refine your Github</h2>
<p><a href="https://github.com/sindresorhus/refined-github">sindresorhus/refined-github</a> is like a smart secretary that gives you tips you ever wanted to know.</p>
<p><br></p>
<p>It <strong>narrows 3 click operation to single click</strong> - creating a pull-request from a fresh branch:</p>
<img src="https://user-images.githubusercontent.com/1402241/34099674-20433f60-e41b-11e7-8ca5-7ea23c70ab95.gif" class="img-thumbnail">
<p><br></p>
<p>It <strong>interlinks issues and PRs without opening them</strong>:</p>
<img src="https://user-images.githubusercontent.com/1402241/37037746-8b8eac8a-2185-11e8-94f6-4d50a9c8a152.png" class="img-thumbnail" style="max-width:35em">
<p><br></p>
<p>When I work on different pc, I feel stupid without this one. <strong>Issues sorted by activity</strong> beats default <em>create time</em>:</p>
<img src="/assets/images/posts/2019/github-tips/first-new.png" class="img-thumbnail">
<p><br></p>
<p>Check more of them in <a href="https://github.com/sindresorhus/refined-github#highlights">the README</a>.</p>
<h2 id="5-extend-composer-scripts-from-cli">5. Extend Composer Scripts from CLI</h2>
<p>Have you read the classic post <a href="https://blog.martinhujer.cz/have-you-tried-composer-scripts">Have you tried Composer Scripts? You may not need Phing</a>? I love this approach for simple scripts like coding standard and static analysis:</p>
<pre><code class="language-json">{
    "scripts": {
        "check-cs": "vendor/bin/ecs check bin src tests",
        "fix-cs": "vendor/bin/ecs check bin src tests --fix",
        "phpstan": "vendor/bin/phpstan analyse bin src tests --error-format symplify"
    }
}</code></pre>
<h3 id="what-s-the-script-name">What's the Script Name?</h3>
<p>But what if you forget it's &quot;check-cs&quot;? And what if you open a new project - what's the name in there?</p>
<img src="/assets/images/posts/2019/github-tips/list.gif" class="img-thumbnail">
<div class="fa-2x">👍</div>
<p><br></p>
<p>Great, now we know the name! But what if you want to add <strong>one extra option</strong> just for a single run?</p>
<img src="/assets/images/posts/2019/github-tips/cached.gif" class="img-thumbnail">
<div class="fa-2x">👍</div>
<p><br></p>
<ul>
<li><strong>What number is your favorite?</strong></li>
<li><strong>Which tip did I forget?</strong></li>
</ul>
<p>Tell me in the comments, please.</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/02/25/5-tips-to-effective-work-with-github-repository</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 25 Feb 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/02/25/5-tips-to-effective-work-with-github-repository#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How we Migrated from Nette to Symfony in 3 Weeks - Part 1 ]]></title>
                <link>https://tomasvotruba.com/blog/2019/02/21/how-we-migrated-from-nette-to-symfony-in-3-weeks-part-1</link>
                <description><![CDATA[ <p>On the break of January/February 2019, we <strong>migrated whole <a href="https://entry.do">Entrydo</a> project from Nette to Symfony</strong>. It was API backend with no templates, but still, it wasn't as easy as I expected.
<br><br>
Many ☕ and 🍺 were drunk during this migration. 0 programmers were too frustrated to give up.
<br>
Yet, you'd laugh if you knew what took us the most time.</p> ]]></description>
                <content:encoded><![CDATA[ <p>And when I write we and 3 weeks, I mean myself and <a href="https://janmikes.cz">Jan Mikeš</a> and <strong>3 weeks of occasional codding</strong>, not full-time. In total, we <strong>spent around 30-40 hours</strong> each on this migration.</p>
<div class="text-center">
    <img src="/assets/images/posts/2019/nette-to-symfony/nette-to-symfony.png" class="img-thumbnail mt-5"></div>
<p>How did that happen? One day I met with Honza to cowo-talk. No big topics, you know:</p>
<blockquote class="blockquote text-center">
"..."<br>
"Why don't you try Symfony?"<br>
"I don't have time to play with it. There's already pressure for new features, damn Tom!"<br>
"I'm pretty sure it's easier than you think. Let's give it 1 week and you'll see."
</blockquote>
<p>And that's how it started. In this short series, we'll share our short story about nights without sleep, PHP code and Neon parsing and short-term pain of having no clue what that code does. Maybe even... happy ending?</p>
<h2 id="1-getting-ready">1. Getting Ready 🤔</h2>
<p>A year ago we tried to migrate from unmaintained Kdyby and Zenify packages to Contributte and other implementations. And we ended licking our burns.</p>
<p>That's why planning the migration is much more important than the migration itself. You have to talk about resources - <strong>how much energy and time are we both willing to invest</strong>. The problem with migration (or coding in general) is that there is a chance that 80 % will be done in 2 days, but then there is this 1 bug that makes most of the database tests fail. You try and try and fail and fail... and after a week you have depression and after 2 weeks you give up and never go back.</p>
<h2 id="2-making-a-commitment">2. Making a Commitment 💍</h2>
<p>Also, we had to <strong>decide to give this a priority</strong>. I was planning to put up new Pehapkari.cz website with training admin and new design and Honza had to deliver the feature. We had a time span of 3 weeks, month top, to do this. Everything else is secondary.</p>
<p>When one sleeps, the other codes. We called each other at 3 AM in the morning to talk about frustration, we shared the joy when one solved the issue. Sometimes we slept for 2 hours, then coded some more because we felt we are very close and this must be the day we finish it. In 20 cases it wasn't, <strong>but we persisted</strong>. We persisted because we decided to.</p>
<p>If one would decide in the middle of a migration to work for a week on another project, the mutual motivation could go to garbage very quickly. No way!</p>
<h2 id="3-automated-migration-gt-manual-changes">3. Automated Migration &gt; Manual Changes 🤖</h2>
<p>The basic idea was to do automated instant migration. Anything manually changes on more than 1 place is a potential future black hole.</p>
<p>We quickly discovered, it's better to use <a href="/blog/2019/02/14/why-config-coding-sucks/">PHP factories over config coding</a> and <a href="/blog/2019/01/24/how-to-kill-parents/">kill all parents we could</a> (except our own ones of course).</p>
<h3 id="use-rector-to-php-changes">Use Rector to PHP Changes</h3>
<p>In the start, we run <strong>Rector with generic rules with brute-force way</strong>. Don't think, just try it. That gave us more idea about the code - we started to spot places we can write in Rector rule.</p>
<p>In the end, <a href="https://getrector.org">Rector</a> helped us with many following changes:</p>
<ul>
<li>
<p>Response and Request <em class="fas fa-fw fa-lg fa-check text-success"></em></p>
</li>
<li>
<p>Presenter to Controller <em class="fas fa-fw fa-lg fa-check text-success"></em></p>
</li>
<li>
<p>RouterFactory to Controller Annotation <em class="fas fa-fw fa-lg fa-check text-success"></em> - REST Routes and Invocable Controllers included</p>
</li>
<li>
<p>Kdyby/Events and Contributte/Events to Symfony/EventDispatcher <em class="fas fa-fw fa-lg fa-check text-success"></em></p>
</li>
<li>
<p>Kdyby/Doctrine to Doctrine/DoctrineBundle <em class="fas fa-fw fa-lg fa-check text-success"></em></p>
</li>
<li>
<p>Kdyby/Events to Symfony/EventDispatcher <em class="fas fa-fw fa-lg fa-check text-success"></em></p>
</li>
<li>
<p>Kdyby/Translation to Symfony/Translation <em class="fas fa-fw fa-lg fa-check text-success"></em></p>
</li>
<li>
<p>Nette DI methods to Symfony/DependendyInjection <em class="fas fa-fw fa-lg fa-check text-success"></em></p>
</li>
</ul>
<p>The tricky part was to discover differences and create the bridge between both frameworks - <em>&quot;In Nette, you use this, in Symfony you'd use this.&quot;</em></p>
<p><strong>Now it's done</strong>, so you can use them <a href="https://github.com/rectorphp/rector/blob/master/config/level/framework-migration/nette-to-symfony.yaml">in <code>nette-to-symfony</code></a> level in Rector 0.4 to migrate your code.</p>
<p><br></p>
<p>We didn't have to change any of these parts, because the code didn't use them:</p>
<ul>
<li>
<p>Components to Controllers <em class="fas fa-fw fa-lg fa-times text-secondary"></em></p>
</li>
<li>
<p>CompilerExtensions to Bundles/CompilerPasses <em class="fas fa-fw fa-lg fa-times text-secondary"></em></p>
</li>
</ul>
<p>Rector can automate them when some project will need them. Maybe your project :)</p>
<h3 id="non-php-migrations">Non-PHP Migrations</h3>
<ul>
<li>
<p><a href="/blog/2019/02/11/introducing-neon-to-yaml-converter/">Neon to YAML</a> <em class="fas fa-fw fa-lg fa-check - text-success"></em> - this package was created for needs of Entrydo</p>
</li>
<li>
<p><a href="/blog/2018/07/05/how-to-convert-latte-templates-to-twig-in-27-regular-expressions/">Latte to TWIG</a> <em class="fas fa-fw fa-lg fa-check - text-success"></em></p>
</li>
</ul>
<h3 id="coding-standards">Coding Standards</h3>
<p>After many many changes in the code, we didn't care about spaces, tabs or where the <code>{</code> is. That's the job of <a href="https://github.com/symplify/easy-coding-standard">EasyCodingStandard</a>. <strong>We had to focus full attention on code structure</strong>, not to play with style.</p>
<p>Actually, Nette uses tabs and Symfony spaces, so ECS actually helped with migration a lot too.</p>
<h2 id="4-wtfs-everywhere">4. WTFs Everywhere! 🤦</h2>
<p>This code worked in Nette:</p>
<pre><code class="language-php">&lt;?php

$this-&gt;translation-&gt;translate('Hi, my name is %name%', [
    'name' =&gt; 'Tom'
]);</code></pre>
<p>In Nette:</p>
<pre><code class="language-bash">Hy, my name is Tom.</code></pre>
<p>After migration tests started to fail:</p>
<pre><code class="language-bash">Hy, my name is %Tom%.</code></pre>
<p>Damn! Why it's broken?</p>
<p>In this case, we had to look to the contents of the <code>translate</code> method of the previous service. Kdyby/Translation actually automatically <a href="https://github.com/Kdyby/Translation/blob/6b0721c767a7be7f15b2fb13c529bea8536230aa/src/Translator.php#L172">wraps key name to <code>%</code></a>, while Symfony doesn't:</p>
<pre><code class="language-diff"> &lt;?php

 $this-&gt;translation-&gt;translate('Hi, my name is %name%', [
-    'name' =&gt; 'Tom'
+    '%name%' =&gt; 'Tom'
 ]);</code></pre>
<p><strong>Problem solved</strong> in 20 minutes, doh! Now it's part of Rector set, so you can actually forget this paragraph. But be ready for such issues. <strong>The hardest problems are usually behind simple differences</strong> - like extra <code>%</code>.</p>
<p><br></p>
<p>Luckily, Honza is xdebug expert, so he deep dives into the code to find the spots where code failed. It took him some time, but in the end, he <strong>disclosed magic and fixed all the issues we had</strong>. You can read more about that, Doctrine events and HttpRequest as a services migration in the next post.</p>
<h2 id="there-are-no-happy-endings">There are no Happy Endings...</h2>
<p>...or are they?</p>
<ul>
<li>Do you wonder how the project ended-up?</li>
<li>How many changes the PR has?</li>
<li>When and <em>if</em> will be the migration merged?</li>
</ul>
<p>The project was published in staging for 2 days. The answer to the last question is <em>Happy Valentine</em>. That's the day <strong>the Symfony application was published to production</strong>.</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/02/21/how-we-migrated-from-nette-to-symfony-in-3-weeks-part-1</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 21 Feb 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/02/21/how-we-migrated-from-nette-to-symfony-in-3-weeks-part-1#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How we Automated Shopsys Packages Release from 2 days to 1 Console Command ]]></title>
                <link>https://tomasvotruba.com/blog/2019/02/18/how-we-automated-shopsys-packages-release-from-2-days-to-1-console-command</link>
                <description><![CDATA[ <p>Do you <strong>release open-source</strong>? Do you have <strong>monorepo</strong>? Do you release over <strong>10 monorepo packages at once</strong>?
Do you still do it manually per package just to be sure?
<br><br>
Good news, it's not a single day-task, but this whole process can be automated. Let's me show how we did it in Shopsys.</p> ]]></description>
                <content:encoded><![CDATA[ <p>Monorepo release management has <del>few</del> many gotchas. The one that requires most of your attention I described in <a href="/blog/2019/01/31/monorepo-composer-magic/">Monorepo Composer Magic</a> post. <strong>1 missed commit or forgotten version change</strong> in <code>composer.json</code> of your package and <strong>you've just released a broken package</strong>!</p>
<p>I mean the ugly kind of errors you'll find out only after someone tries to install the package. Of course, you can improve this by <a href="/blog/2018/11/22/how-to-test-monorepo-in-3-layers/">3-layer monorepo tests</a>, but there is still a 50 % chance for human error.</p>
<p>Let's get practical!</p>
<h2 id="the-em-manual-em-shopsys-release-process">The <em>Manual</em> Shopsys Release Process</h2>
<p><a href="https://github.com/shopsys/shopsys">Shopsys</a> is an open-source e-commerce build on Symfony. I helped them with monorepo, Symfony and open-source standards setup through 2018.</p>
<p>When we first looked at release todo-document, it had roughly 17 steps. After a bit deeper look we realized some steps have actually 5-10 more steps in it. In the end, we found over <strong>40 steps in 3 various stages</strong>.</p>
<p>Just to give you the idea...</p>
<h3 id="before-release-stage">Before Release Stage</h3>
<ul>
<li>check if Travis passes for all packages</li>
<li>bump package interdependency for tagged version</li>
<li>bump Docker image version to tagged version</li>
<li><a href="/blog/2018/10/08/new-in-symplify-5-create-merge-and-split-monorepo-with-1-command/#2-validate-it">validate <code>composer.json</code> dependencies</a> of each package</li>
<li><a href="/blog/2018/06/25/let-changelog-linker-generate-changelog-for-you/">dump <code>CHANGELOG.md</code></a> since the previous release</li>
<li>check <code>UPGRADE.md</code></li>
<li>...</li>
</ul>
<h3 id="release-stage">Release Stage</h3>
<ul>
<li>check changelog has today's date</li>
<li>push the tag (and let CI service do the split)</li>
<li>...</li>
</ul>
<h3 id="after-release-stage">After Release Stage</h3>
<ul>
<li>open branch alias for <code>next-version-dev</code></li>
<li>bump package interdependency for <code>next-version-dev</code></li>
<li>bump Docker image version to <code>dev</code></li>
<li>check packages are pushed on Packagist</li>
<li>...</li>
</ul>
<p class="text-muted">
Do you want to check them all? Just see <a href="https://github.com/shopsys/shopsys/tree/master/utils/releaser/src/ReleaseWorker">this directory on Github</a>.
</p>
<p><br></p>
<p>Shopsys <a href="https://github.com/shopsys/shopsys/releases">releases new version every month</a> and they had to do all these steps manually. Until now. Automation of this process <strong>saves time and attention of 3 developers</strong> (2 for code-review), that could be used for new features.</p>
<p>No surprise here, that the final <a href="https://github.com/shopsys/shopsys/pull/623">pull-request</a> got a bit out of hand...</p>
<img src="/assets/images/posts/2019/release/pr.png" class="img-thumbnail text-center">
<p>It <strong>took 49 days</strong> and <strong>3 900 new lines</strong> to get the PR merged. Why? Well, when you introduce simple automatization of a complex process, <strong>people start to see how easy is to convert manual daunting work to a new PHP class that does the work for them</strong>. So more and more ideas came.</p>
<h2 id="from-human-check-list-to-command-with-workers">From Human Check-list to Command with Workers</h2>
<p>To automate the process, we used MonorepoBuilder, resp. it's <a href="https://github.com/symplify/monorepobuilder#6-release-flow">release-flow feature</a>.</p>
<pre><code class="language-bash">composer require symplify/monorepo-builder</code></pre>
<p>The implements a worker for each step described above. Workers are grouped by stage and ordered by priority, so the whole process is under control.</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

namespace Utils\Release\ReleaseWorker;

use Nette\Utils\DateTime;
use Nette\Utils\FileSystem;
use Nette\Utils\Strings;
use Symplify\MonorepoBuilder\Release\Contract\ReleaseWorker;
use PharIo\Version\Version;

final class UpdateChangelogToDateReleaseWorker implements ReleaseWorkerInterface
{
    /**
     * 1 line description of what this worker does, in a commanding form! e.g.:
     * - "Add new tag"
     * - "Dump new items to CHANGELOG.md"
     * - "Run coding standards"
     */
    public function getDescription(Version $version): string
    {
        return 'Update CHANGELOG.md "Unreleased" to version and today date';
    }

    /**
     * Higher first
     */
    public function getPriority(): int
    {
        return 1000;
    }

    public function work(Version $version): void
    {
        $changelogPath = getcwd() . '/CHANGELOG.md';
        $content = FileSystem::read($changelogPath);

        // before: ## Unreleased
        // after: ## v7.0.0-beta6 - 2019-02-18
        $newContent = Strings::replace(
            $content,
            '#^\#\#Unreleased$#',
            '## ' . $version-&gt;getVersionString() . ' - ' . DateTime::from('today')-&gt;format('Y-m-d')
        );

        FileSystem::write($changelogPath, $newContent);
    }
}</code></pre>
<p>Each step is written this way.</p>
<p class="text-muted">
Do you want to include stages? We did, so the worker implemented <code>Symplify\MonorepoBuilder\Release\Contract\ReleaseWorker\StageAwareInterface</code>.
</p>
<p>In these workers, you can trigger Travis CI with API, use Packagist API to check new version are released... sky it the limit.</p>
<h2 id="shopsys-release-process-em-now-em">Shopsys Release Process <em>Now</em>?</h2>
<pre><code class="language-bash">vendor/bin/monorepo-builder release v7.0.0-beta6 --stage release-candidate

# → review...

vendor/bin/monorepo-builder release v7.0.0-beta6 --stage release

# → CI work + 2nd review...

vendor/bin/monorepo-builder release v7.0.0-beta6 --stage after-release</code></pre>
<p>Complex process made simple with PHP! <em class="fas fa-lg fa-check text-success"></em></p>
<p><br></p>
<p>Btw, do you know how Symplify 14-package monorepo release process looks like?</p>
<pre><code class="language-bash">vendor/bin/monorepo-builder release v5.4.1</code></pre>
<p>Just with bare <a href="https://github.com/Symplify/MonorepoBuilder">MonorepoBuilder</a> install.</p>
<p><br></p>
<p><strong>How does your package release process look like?</strong></p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/02/18/how-we-automated-shopsys-packages-release-from-2-days-to-1-console-command</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/02/18/how-we-automated-shopsys-packages-release-from-2-days-to-1-console-command#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Why Config Coding Sucks ]]></title>
                <link>https://tomasvotruba.com/blog/2019/02/14/why-config-coding-sucks</link>
                <description><![CDATA[ <p>Rector and static analysis help us to work with code better, but it also helps us spot new weak-points of our PHP code.
<br><br>
One of the biggest evils is <em>config coding</em>. <strong>How it can hurt you and how get rid of it</strong>?</p> ]]></description>
                <content:encoded><![CDATA[ <p>Many frameworks propagate config coding over PHP code. It's cool, it's easy to type, short and we have a feeling we learned something new.</p>
<p>One of the good examples is Laravel with its <a href="https://laravel.com/docs/5.7/configuration"><code>config/app.php</code></a> - really good work!</p>
<p>Since <a href="/blog/2017/05/07/how-to-refactor-to-new-dependency-injection-features-in-symfony-3-3/">Symfony 3.3+ service autodiscovery</a> feature, there is almost no reason to use code in config.</p>
<p>By coding in the config I mean anything more complex than:</p>
<ul>
<li>
<p>named services</p>
<pre><code class="language-yaml">services:
    someService: SomeService
    AnotherService:
        arguments:
            - '@someService'</code></pre>
</li>
<li>
<p><code>_defaults</code></p>
<pre><code class="language-yaml">services:
    _defaults:
        autowire: true
        autoconfigure: true</code></pre>
</li>
<li>
<p>and PSR-4 autodiscovery</p>
<pre><code class="language-yaml">services:
    App\:
        resource: '../src'</code></pre>
</li>
</ul>
<h2 id="the-dark-side">The Dark Side</h2>
<p>Less discussed side of config coding is that in exchange for sweet syntax sugar we lose:</p>
<ul>
<li>static analysis,</li>
<li>PHPStorm refactoring</li>
<li>and instant upgrades and refactoring by Rector.</li>
</ul>
<p>PHP code written in config format has the same value to these tools as a screen-shot of code... with scrollbar:</p>
<img src="/assets/images/posts/2019/config-evil/useless.png" alt="" class="img-thumbnail">
<p>Here are <strong>3 problems you invite to your code</strong> with config coding and how to get rid of them with PHP.</p>
<h2 id="1-crappy-code-refactoring-automation">1. Crappy Code Refactoring Automation</h2>
<pre><code class="language-yaml">services:
    - FirstService(@secondService::someMethod())</code></pre>
<h3 id="what-if">What if...</h3>
<ul>
<li>...we <strong>change</strong> method name <code>someMethod</code>?</li>
<li>...we <strong>change</strong> class name <code>FirstService</code>?</li>
<li>...we <strong>change</strong> service name <code>secondService</code>?</li>
</ul>
<p>With PHPStorm these changes are pretty easy:</p>
<img src="/assets/images/posts/2019/config-evil/rename.gif" alt="" class="img-thumbnail">
<p>But the config has to be changed manually - everywhere where Symfony/Nette/... plugins cannot reach.</p>
<p><em>How can we do this better?</em></p>
<h3 id="in-php-em-class-fas-fa-fw-fa-lg-fa-check-text-success-em">In PHP <em class="fas fa-fw fa-lg fa-check text-success"></em></h3>
<pre><code class="language-php">&lt;?php

final class FirstServiceFactory
{
    /**
     * @var SecondService
     */
    private $secondService;

    public function __construct(SecondService $secondService)
    {
        $this-&gt;secondService = $secondService;
    }

    public function createFirstService(): FirstService
    {
        return new FirstService($this-&gt;secondService);
    }
}</code></pre>
<pre><code class="language-diff"> services:
-   - FirstService(@secondService::someMethod())
+   - FirstServiceFactory</code></pre>
<h2 id="2-learn-the-neon-yaml-syntax-by-heart">2. Learn the Neon/YAML Syntax by Heart</h2>
<p>When you start to use more and more &quot;cool&quot; syntax of your favorite markup language, you'll have to remember the spacing, chars and key names:</p>
<pre><code class="language-yaml">services:
    FirstService:
        setup:
        # or was is?
        calls:
            - 'setLogger', '@logger']
            # or was it?
            - ['setLogger', ['@logger']]
            # or was it?
            setLogger: '@logger'</code></pre>
<p>You can also say goodbye to <em>rename method</em> refactoring.</p>
<p>We don't want to pollute our brains with these syntax details, <strong>we want to code</strong> with light and clear mind.</p>
<p><em>How can we do this better?</em></p>
<h3 id="in-php-em-class-fas-fa-fw-fa-lg-fa-check-text-success-em">In PHP <em class="fas fa-fw fa-lg fa-check text-success"></em></h3>
<pre><code class="language-php">&lt;?php

namespace App;

final class FirstServiceFactory
{
    /**
     * @var LoggerInterface
     */
    private $logger;

    public function __construct(LoggerInterface $logger)
    {
        $this-&gt;logger = $logger;
    }

    public function create(): FirstService
    {
        $someService = new FirstService();
        $someService-&gt;setLogger($this-&gt;logger);

        return $someService;
    }
}</code></pre>
<p>The service is autowired by return type declaration <code>public function create(): FirstService</code>.</p>
<h2 id="3-service-re-use-with-bugs">3. Service Re-use With Bugs</h2>
<pre><code class="language-yaml">services:
    - EmailCodeCleaner(HTMLPurifier(HTMLPurifier_Config::create({
        Attr.EnableID: true
    })))</code></pre>
<p>Later that year somebody wants to use <code>HTMLPurifier</code>:</p>
<pre><code class="language-php">&lt;?php

final class MicrositeHtmlCodeCleaner
{
    /**
     * @var HTMLPurifier
     */
    private $htmlPurifier;

    public function __construct(HTMLPurifier $htmlPurifier)
    {
        $this-&gt;htmlPurifier = $htmlPurifier;
    }

    // ...
}</code></pre>
<p>Let's run the code:</p>
<pre><code class="language-bash">Service 'HTMLPurifier' was not found. Register it in the config.</code></pre>
<p>Ups! It looks like it's the first use of this service. It requires <code>HTMLPurifier_Config</code> class, so we have to create it too:</p>
<pre><code class="language-yaml">services:
    - HTMLPurifier(HTMLPurifier_Config::create())</code></pre>
<p>Done!</p>
<p>A few months later, you have an email campaign with a link to a microsite. Both with the same content. But a weird bug is reported - the microsite and email have different HTML outputs with the same content.</p>
<p>You already know, that's because <code>create()</code> had different arguments.</p>
<p><em>How can we remove this potential bug?</em></p>
<h3 id="in-php-em-class-fas-fa-fw-fa-lg-fa-check-text-success-em">In PHP <em class="fas fa-fw fa-lg fa-check text-success"></em></h3>
<pre><code class="language-php">&lt;?php

namespace App;

use HTMLPurifier;

final class HTMLPurifierFactory
{
    public function create(): HTMLPurifier
    {
        return new HTMLPurifier(HTMLPurifier_Config::create());
    }
}</code></pre>
<p>We just returned the benefits of PHP code:</p>
<ul>
<li>the <strong>autowiring works</strong></li>
<li>there is only one instance of <code>HTMLPurifier</code> in your container</li>
<li>if you register more by accident, the container tells you</li>
</ul>
<p><br></p>
<p>Instead of config coding, use factories and <a href="/blog/2018/11/05/do-you-autowire-services-in-symfony-you-can-autowire-parameters-too/">autowired parameters</a>. You can also remove factory from configs with <a href="https://github.com/symplify/package-builder#do-not-repeat-simple-factories"><code>AutoReturnFactoryCompilerPass</code></a>.</p>
<pre><code class="language-diff"> services:
     App\:
        resource: ../src
-
-    SomeClass:
-         factory: ['@SomeClassFactory', 'create']</code></pre>
<p>That's it!</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/02/14/why-config-coding-sucks</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 14 Feb 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/02/14/why-config-coding-sucks#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Introducing Neon to YAML Converter ]]></title>
                <link>https://tomasvotruba.com/blog/2019/02/11/introducing-neon-to-yaml-converter</link>
                <description><![CDATA[ <p>I wrote about <a href="/blog/2018/03/12/neon-vs-yaml-and-how-to-migrate-between-them/">How to migrate between Neon to Yaml</a> almost a year ago. Recently we needed to migrate many files with parameters, imports, and mainly services.
<br><br>
<strong>Neon and YAML are basically arrays</strong>, right? So why not let a tool let do the dirty work?</p> ]]></description>
                <content:encoded><![CDATA[ <img src="/assets/images/posts/2019/neon-to-yaml/convert-neon-to-yaml.gif" class="img-thumbnail">
<h2 id="when-do-you-need-it">When Do You need it?</h2>
<ul>
<li>You want to <strong>migrate your package</strong> dependency injection component from <code>Nette\DI</code> to <code>Symfony\HttpKernel</code></li>
<li>You want to <strong>migrate your application</strong> from Nette to Symfony</li>
<li>One of your dependency decided to migrate configuration from <code>*.neon</code> to <code>*.yaml</code> (e.g. ECS)</li>
</ul>
<h2 id="how-to-use-it">How to Use it?</h2>
<p>To use <a href="https://github.com/migrify/neon-to-yaml">migrify/neon-to-yaml</a>, require it a composer dependency:</p>
<pre><code class="language-bash">composer require migrify/neon-to-yaml --dev</code></pre>
<p>Run it on one file or directory - it takes all <code>*.neon</code>, <code>*.yml</code> and <code>*.yaml</code> files:</p>
<pre><code class="language-bash">vendor/bin/neon-to-yaml convert file.neon</code></pre>
<h2 id="the-2-most-problematic-places-converter-tool-handles">The 2 Most Problematic Places Converter Tool Handles</h2>
<p>In Neon there are nested parameters = you can use <code>%payu.user%</code> to get parameter <code>user</code> in <code>payu</code> array. In YAML used in Symfony code, there are only one level parameters. That means you can use only the <code>payu</code> parameter, nothing nested.</p>
<p>That's why all parameters have to be converted to the <strong>single level of nesting</strong>, here to <code>payu_user</code>:</p>
<pre><code class="language-diff"> parameters:
-    payu:
-       user: Pepa
+    payu_user: Pepa
-       password: abz123
+    payu_password: abz123

 services:
     PayuService:
         arguments:
-            - '%payu.user%'
+            - '%payu_user%'
-            - '%payu.password%'
+            - '%payu_password%'</code></pre>
<p>Another case are <a href="/blog/2018/03/12/neon-vs-yaml-and-how-to-migrate-between-them/#4-very-complex-syntax">Neon entities</a>. Their goal is to make syntax short. Its cost is less readability.</p>
<p>Code is actually parsed to an object, that has different meaning in different places:</p>
<pre><code class="language-diff"> services:
-    - App\SomeService(@anotherService, %perex%)
+    App\SomeService:
+        arguments:
+            - @anotherService
+            - %perex%</code></pre>
<p>Those of you who don't use Neon for years, would you guess that?</p>
<p>All this converter handles for you.</p>
<p><br></p>
<p>Next time you <strong>migrate your config, package or whole application</strong> from Neon to YAML, let <a href="https://github.com/migrify/neon-to-yaml">migrify/neon-to-yaml
</a> do the work for you.</p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/02/11/introducing-neon-to-yaml-converter</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 11 Feb 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-07-01UTC00:00:000</updated>
                    <atom:updated>Wed, 01 Jul 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Wed, 01 Jul 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/02/11/introducing-neon-to-yaml-converter#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ What I Learned by Using thecodingmachine/safe ]]></title>
                <link>https://tomasvotruba.com/blog/2019/02/07/what-i-learned-by-using-thecodingmachine-safe</link>
                <description><![CDATA[ <p><a href="https://thecodingmachine.io/introducing-safe-php"><em>Safe</em></a> replaces PHP native functions like <code>file_get_contents</code> with <code>Safe\file_get_contents</code>. Native functions return <code>false</code> on fail, but <em>Safe</em> throw exception instead.
<br><br>
&quot;Good idea&quot;, I though, so I tried the package myself in Symplify and Rector.</p> ]]></description>
                <content:encoded><![CDATA[ <p>I'm a big fan of <a href="/blog/2018/12/06/dont-learn-to-code/">instant personal experience</a> over over-thinking. I didn't know if this package would be useful for me, so I tried it. My code is different from yours, so your experience might be different.</p>
<blockquote class="blockquote text-center">
    If you don't know, just try it.
</blockquote>
<p><strong>This is my experience after 2 months of using Safe</strong>.</p>
<h2 id="what-i-like">What I like 😍</h2>
<ul>
<li>
<p>Less potential errors. I don't have to think about <code>false</code> verification. Mainly on Windows, the paths can fail, because of the <code>\</code> vs <code>/</code> problem, absolute paths not starting with <code>/</code> and different end of lines.</p>
</li>
<li>
<p>Less PHPStan reporting with <a href="https://github.com/thecodingmachine/phpstan-safe-rule">Safe rule</a>. Not sure if the package is useful without it since there is no CI control to tell you where you missed the <em>Safe</em> version of a function.</p>
</li>
</ul>
<h2 id="what-i-didn-t-like">What I didn't like 🙁</h2>
<h3 id="function-autoloading-sucks-in-php">Function Autoloading Sucks in PHP</h3>
<p>Function autoloading has much worse support than PSR-4 class autoloading. 3rd party tool is not ready for it, because it's very rare out in the wild. I personally don't know about any other function-based package.</p>
<p>I got stuck with building prefixed <code>rector.phar</code> for a week. See <a href="https://github.com/humbug/box/issues/352">humbug/box#352</a> for more.</p>
<h3 id="the-api-changes-fast">The API Changes Fast</h3>
<p>In 0.11.1 there was added a new function, that caused ci to fail due to PHPStan rule that required to be used for all new functions. I added it to make CI pass. Then 0.11.2 it was removed - PHPStan passed, but function was removed and the code was broken.</p>
<p>BC breaks on patch versions caused Symplify packages to break down. This is allowed on the 0.x version (see <a href="https://semver.org">Semver point 4</a>), so it really resulted from my over-trust.</p>
<p>If this was the only issue, <strong>I could solve it with patch-lock</strong> in <code>composer.json</code>:</p>
<pre><code class="language-diff"> {
    "require": {
-       "thecodingmachine/safe": "^0.1.13"
+       "thecodingmachine/safe": "0.1.13"
    }
 }</code></pre>
<p>But the combination of PHPStan rule CI fail or code fails forced to upgrade. <strong>Optional use of functions</strong> would be probably better, so I'd drop the PHPStan rule next time. But who would check the need for a <em>Safe</em> alternative? Chicken vs egg problem.</p>
<h3 id="memory-lock-on-every-native-function">Memory Lock on Every Native Function</h3>
<p>This leads me to <a href="/blog/2018/08/27/why-and-how-to-avoid-the-memory-lock/">memory lock</a> problem.</p>
<p>When I add new native function <code>array_filter</code>, should I use the <em>Safe</em> version or not? I have to:</p>
<ul>
<li>run PHPStan to see the answer</li>
<li>fix it manually or <a href="https://github.com/thecodingmachine/safe#automated-refactoring">better with Rector</a></li>
<li>import namespace to <code>Safe\array_filter</code> with Easy Coding Standard</li>
</ul>
<p>Before? I just typed <code>array_filter</code> <em class="fas fa-fw fa-check text-success fa-lg"></em></p>
<p><br></p>
<p>In the end, I feel it didn't solve any real problems for me, but add huge maintenance cost to my daily workflow. All this leads me to a conclusion:</p>
<blockquote class="blockquote text-center">
    A problem that doesn't exist, doesn't need a solution.
</blockquote>
<p>Hence, I <a href="https://github.com/symplify/symplify/pull/1409/files">removed the Safe package</a> from my workflow.</p>
<h2 id="what-are-real-issues-with-native-functions">What are Real Issues with Native Functions?</h2>
<h3 id="code-sprintf-code"><code>sprintf</code></h3>
<p>During the code cleanup, I found this:</p>
<pre><code class="language-php">&lt;?php

throw new ShouldNotHappenException(
    sprintf('The is problem "%s"', $message, __METHOD__)
);</code></pre>
<p>Can you spot the problem? <a href="https://3v4l.org/5bmvp">See code on 3v4l.org</a>.</p>
<p>It reports the <code>$message</code>, <strong>but the location of the error - <code>__METHOD__</code> is skipped silently</strong>.</p>
<p>I'd expect Safe function to help me exactly with this because this is a real problem. The code doesn't work as supposed to.</p>
<h3 id="code-realpath-code"><code>realpath</code></h3>
<p>Another real problem I have is <code>realpath</code> (it clear from the function name, right? :)):</p>
<pre><code class="language-php">&lt;?php

$filePath = 'missing_file';

$realFilePath = realpath($filePath);

$fileInfo = new SplFileInfo($realFilePath);

var_dump($fileInfo-&gt;getRealPath());</code></pre>
<p>Here PHP creates <code>$fileInfo</code> object, that might be a file... but is it?</p>
<p><a href="https://3v4l.org/Xflr4">See code on 3v4l.org</a>.</p>
<h3 id="code-preg-code"><code>preg_*</code></h3>
<p>David Grudl wrote about this issue <a href="https://phpfashion.com/zradne-regularni-vyrazy-v-php">many years ago</a>. How to make <code>preg_*</code> really safe? He suggests the following:</p>
<pre><code class="language-php">&lt;?php

function safeReplaceCallback($pattern, $callback, $subject)
{
    // verify callback
    if (! is_callable($callback)) {
        throw new Exception('Invalic callback.');
    }

    // test on empty string
    if (preg_match($pattern, '') === false) { // compilation error?
        $error = error_get_last();
        throw new Exception($error['message']);
    }

    // call PCRE
    $result = preg_replace_callback($pattern, $callback, $subject);

    // execution error?
    if ($result === null &amp;&amp; preg_last_error()) {
        throw new Exception('Error during regular execution.', preg_last_error());
    }

    return $result;
}</code></pre>
<p>So...</p>
<h2 id="is-there-a-better-way">Is there a Better Way?</h2>
<p>Have you read <em>Hidden Gems of PHP Packages</em>?</p>
<ul>
<li><a href="/blog/2018/08/13/hidden-gems-of-php-packages-symfony-finder-and-spl-file-info/">Hidden Gems of PHP Packages: Symfony\Finder and SplFileInfo</a></li>
<li><a href="/blog/2018/07/30/hidden-gems-of-php-packages-nette-utils/">Hidden Gems of PHP Packages: Nette\Utils</a></li>
</ul>
<p>The point is simple - replace native functions with classes methods or objects that:</p>
<ul>
<li>handle all possible errors <strong>that specific function</strong></li>
<li><strong>throws tailored informative exception</strong> so you understand what exactly is wrong</li>
<li>if created, you can be 100% sure it has the value you need (e.g. <code>SplFileInfo</code> existing file)</li>
</ul>
<p>Here are few examples I use in my code:</p>
<pre><code class="language-diff">-file_get_contents($somePath);
+Nette\Utils\FileSystem::read($somePath);</code></pre>
<pre><code class="language-diff">-preg_match('#Hi (.*?)#', $content);
+Nette\Utils\Strings::match($somePath, '#Hi (.*?)#');</code></pre>
<pre><code class="language-diff">-// 50 % chance the file doesn't exist
-$fileInfo = new SplFileInfo($somePath);
+// throw exception on non-existing file
+$fileInfo = new Symplify\PackageBuilder\FileSystem\SmartFileInfo($somePath);</code></pre>
<p>They also make PHPStan happy, because they return <code>string</code>, <code>array</code>... or throw an exception <em class="fas fa-fw fa-check text-success fa-lg"></em></p>
<p><br></p>
<p>I love <a href="https://github.com/nette/utils">Nette\Utils</a> and there are more packages like this in the PHP universe. Packages <strong>that use objects you can rely on</strong>.</p>
<p>And if not, just create your own object, that does the job you want like I did with <code>Symplify\PackageBuilder\FileSystem\SmartFileInfo</code>. If you know about <code>Sprintf</code> object, let me know :).</p>
<p><br></p>
<blockquote class="blockquote text-center">
    But remember: <strong>only solve problems that you already have</strong>.
</blockquote>
<p><br></p>
<p>Safe coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/02/07/what-i-learned-by-using-thecodingmachine-safe</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 07 Feb 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/02/07/what-i-learned-by-using-thecodingmachine-safe#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ New in Rector: Asterisk Type Match ]]></title>
                <link>https://tomasvotruba.com/blog/2019/02/04/new-in-rector-asterisk-type-match</link>
                <description><![CDATA[ <p>Rector had started just recently helping <strong>instantly refactor private commercial projects</strong>. Not just from legacy to modern PHP, but also <strong>from one PHP framework to another</strong>. I won't tell you which ones as the work is in progress, but when it's finished, you'll be the first to hear.
<br>
<br>
The positive side effect of Rector helping to migrate real commercial project <strong>are new features in its core</strong> that is free and open-source Today with little, yet powerful <em>asterisk type match</em>.</p> ]]></description>
                <content:encoded><![CDATA[ <p>MVC (<a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">model-view-controller</a>) is wide-spread pattern across all PHP frameworks.
That allows migration between them pretty smooth process. What do have <em>presenter</em>, <em>action</em>, <em>route-target</em> or <em>controller</em> in common? All are various names for the same entry point to the application.</p>
<p>Each PHP frameworks has its conventions and conventions are the main topics during migration.</p>
<p>E.g. one framework has default method of controller named <code>run</code>, the other <code>__invoke</code>. How can Rector help us?</p>
<pre><code class="language-php">&lt;?php

// rector.php

declare(strict_types=1);

use Rector\Renaming\Rector\MethodCall\RenameMethodRector;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();
    $services-&gt;set(RenameMethodRector::class)
        -&gt;call('configure', [[
            RenameMethodRector::OLD_TO_NEW_METHODS_BY_CLASS =&gt; [
                // match type
                'SomeFramework\AbstractPresenter' =&gt; [
                    // old method: new method
                    'run' =&gt; '__invoke'
                ]
            ]
        ]]);
};</code></pre>
<p>Then Rector will change the code for you:</p>
<pre><code class="language-bash">vendor/bin/rector process src</code></pre>
<p>↓</p>
<pre><code class="language-diff"> &lt;?php

 namespace App\SomeModule\Presenter;

 use SomeFramework\AbstractPresenter;

 final class SomeController extends AbstractPresenter
 {
-    public function run()
+    public function __invoke()
     {

     }
 }</code></pre>
<p>Do you have more classes? No troubles! Just put each class one by one carefully to the config...</p>
<p>Wait. What if you could use <a href="http://php.net/manual/en/function.fnmatch.php"><code>fnmatch</code></a> pattern?</p>
<pre><code class="language-php">&lt;?php

// rector.php

declare(strict_types=1);

use Rector\Renaming\Rector\MethodCall\RenameMethodRector;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();
    $services-&gt;set(RenameMethodRector::class)
        -&gt;call('configure', [[
            RenameMethodRector::OLD_TO_NEW_METHODS_BY_CLASS =&gt; [
                'App\*Module\Presenter\*Controller' =&gt; [
                    'run' =&gt; '__invoke'
                ]
            ]
        ]]);
};</code></pre>
<p>Kittens will love you now!</p>
<p><em>This <a href="https://github.com/rectorphp/rector/pull/1004">feature</a> was added to Rector v0.3.40.</em></p>
<p><br></p>
<p>One more thing! You can use it on any type check:</p>
<pre><code class="language-diff"> &lt;?php

 // rector.php

 declare(strict_types=1);

 use Rector\Renaming\Rector\Constant\RenameClassConstantRector;use Rector\Renaming\Rector\MethodCall\RenameMethodRector;
 use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

 return function (ContainerConfigurator $containerConfigurator): void {
     $services = $containerConfigurator-&gt;services();
     $services-&gt;set(RenameClassConstantRector::class)
         -&gt;call('configure', [[
             RenameClassConstantRector::OLD_TO_NEW_CONSTANTS_BY_CLASS =&gt; [
-                'Framework\Request' =&gt; [
+                'Framework\Request*' =&gt; [
                     200 =&gt; 'CODE_200',
                     300 =&gt; 'CODE_300',
                 ],
-                'Framework\RequestInterface' =&gt; [
-                    200 =&gt; 'CODE_200',
-                    300 =&gt; 'CODE_300',
-                ],
            ]
        ]]);
};</code></pre>
<p><br></p>
<p>Happy instant refactorings!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/02/04/new-in-rector-asterisk-type-match</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 04 Feb 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-08-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Aug 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/02/04/new-in-rector-asterisk-type-match#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Monorepo Composer Magic ]]></title>
                <link>https://tomasvotruba.com/blog/2019/01/31/monorepo-composer-magic</link>
                <description><![CDATA[ <p>Symfony is by far the best source to learn about the monorepo practice. I learned most just by looking into it's <code>composer.json</code> - monorepo and package one.
<br>
<br>
Today, I'd like to share secrets behind <strong>biggest WTF</strong> that monorepo composer setup has.</p> ]]></description>
                <content:encoded><![CDATA[ <p>In each Symplify, Symfony, Shopsys or Sylius package <code>composer.json</code>, you'll find:</p>
<pre><code class="language-json">{
    "minimum-stability": "dev",
    "prefer-stable": true
}</code></pre>
<p>&quot;So I get unstable dev dependencies to my project by installing <code>symplify/*</code>?&quot;</p>
<p>No! These section are <em>root-only</em>. The most known is <code>require-dev</code> and also:</p>
<img src="/assets/images/posts/2019/dev-alias/root-only.png">
<p>When you install a package, e.g. <code>composer require symplify/easy-coding-standard --dev</code>, you won't download PHPUnit even if that package has it in <code>require-dev</code>.</p>
<p>&quot;So why is this needed? Do these monorepo packages use unstable versions?&quot;</p>
<p><strong>Of course not.</strong> When you install any package standalone, you'll get stable dependencies. It's not even possible to install dev dependency without explicitly saying that (e.g. <code>composer require symplify/statie:@dev</code>).</p>
<h2 id="what-is-branch-alias-for">What is Branch Alias for?</h2>
<p>Here comes the magical combo. Each package <code>composer.json</code> also includes:</p>
<pre><code class="language-json">{
    "extra": {
        "branch-alias": {
            "dev-master": "5.5-dev"
        }
    }
}</code></pre>
<p>Do you think it will install <code>composer require symplify/statie:5.5-dev</code>? <strong>No.</strong></p>
<p>The rule is: when last minor version is <code>5.4</code>, the alias will be <code>+0.1</code> version (<code>5.5</code>).
E.g. the latest released Symfony version is <code>4.2.x</code>, next one will be <code>4.3</code>, so the alias is:</p>
<pre><code class="language-json">{
    "extra": {
        "branch-alias": {
            "dev-master": "4.3-dev"
        }
    }
}</code></pre>
<p>Is that clear? Good.</p>
<p>&quot;So what the <code>branch-alias</code> and the <code>minimum-stability</code> have in common?&quot;</p>
<h2 id="after-split-interdependency">After-Split Interdependency</h2>
<p>The main goal of all this magic is simple. To use <strong>the most recent mutual dependencies</strong>. E.g., I added a new feature in the monorepo that changed the code of <code>symplify/statie</code> and <code>symplify/package-builder</code>.</p>
<p>When the monorepo is split, the dev <code>symplify/statie</code> uses the dev version of <code>symplify/package-builder</code>.</p>
<h2 id="monorepo-release-maintenance">Monorepo Release Maintenance</h2>
<p>Let's say we'll release next Symplify version <code>v5.4.2</code>. What we have to handle before it's tagged and released?</p>
<h3 id="1-bump-each-interdependency-to-the-release-version">1. Bump each Interdependency to the Release Version</h3>
<pre><code class="language-diff"> {
     "name": "symplify/statie",
     "require": {
-        "symplify/package-builder": "^5.5"
+        "symplify/package-builder": "^5.4.2"
     }
 }</code></pre>
<h3 id="2-tag-current-version">2. Tag Current Version</h3>
<pre><code class="language-bash">git tag v5.4.2</code></pre>
<h3 id="3-push-the-tag">3. Push the Tag</h3>
<pre><code class="language-bash">git push --tags</code></pre>
<h3 id="4-bump-the-code-branch-alias-code-if-needed">4. Bump the <code>branch-alias</code> if Needed</h3>
<p><code>5.4.x</code> still uses <code>5.5-dev</code> as the alias, so we don't have to change anything for <code>5.4.2</code> version.</p>
<p>In case we'll release <code>5.5</code> in the future, it would look like this:</p>
<pre><code class="language-diff"> {
     "extra": {
         "branch-alias": {
-            "dev-master": "5.5-dev"
+            "dev-master": "5.6-dev"
         }
     }
 }</code></pre>
<p>Now we can continue committing and packages will always use last committed code.</p>
<p><br></p>
<h2 id="quot-monorepo-is-hell-of-work-quot">&quot;Monorepo is Hell of Work&quot;</h2>
<p>← You must be thinking right now. Well, these steps are basically <em>find and replace</em> - <strong>perfect weak spot to automate</strong>. All these 4 steps  can replace single command from <a href="https://github.com/symplify/monorepobuilder">Symplify/MonorepoBuilder</a>:</p>
<pre><code class="language-bash">vendor/bin/monorepo-builder release v5.4.2</code></pre>
<p>The lazy job is done :)</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/01/31/monorepo-composer-magic</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 31 Jan 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/01/31/monorepo-composer-magic#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ 2 Files that Your Symfony Application Misses ]]></title>
                <link>https://tomasvotruba.com/blog/2019/01/28/2-files-that-your-symfony-application-misses</link>
                <description><![CDATA[ <p>Following files are supported by PHPStorm and Symfony plugin for years (since 2016) and they make working with a code so elegant. <strong>Yet, I came across them just recently.</strong>
<br><br>
They immediately became must-have of each repository with Symfony code.</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="do-you-know-the-frustration-of-clicking-to-existing-code-twig-code-file">Do You Know the Frustration of Clicking to Existing <code>*.twig</code> File?</h2>
<p>Add directory with all your twig files to <code>ide-twig.json</code> in the project root:</p>
<img src="/assets/images/posts/2019/meta/ide_twig_json.gif" class="img-thumbnail">
<ul>
<li>Refresh!</li>
<li>Enjoy :)</li>
</ul>
<p><br></p>
<p>You'll appreciate this feature in a project <strong>with <a href="/blog/2018/11/19/when-you-should-use-monorepo-and-when-local-packages/#3-local-packages">multiple packages</a></strong>. It's real life-saver:</p>
<pre><code class="language-json">{
    "namespaces": [
        { "path": "templates" },
        { "path": "packages/Provision/templates" },
        { "path": "packages/Registration/templates" },
        { "path": "packages/Training/templates" },
        { "path": "packages/KnowHow/templates" },
        { "path": "packages/Marketing/templates" },
        { "path": "packages/User/templates" }
    ]
}</code></pre>
<p><em>Note: You need to install <a href="https://plugins.jetbrains.com/plugin/7219-symfony-plugin">Symfony Plugin</a> first. Then enable it in each project (yes, they're 2 different steps).</em></p>
<p>You can use <a href="https://www.slideshare.net/Haehnchen/symfonycon-berlin-2016-symfony-plugin-for-phpstorm-3-years-later-69804748#45">more magic</a> like namespaces, but they're nothing better than explicit paths.</p>
<h2 id="why-phpstorm-doesn-t-quot-get-quot-it">Why PHPStorm doesn't &quot;get&quot; It?</h2>
<p>PHPStorm knows types of object passed by constructor injection:</p>
<pre><code class="language-php">&lt;?php

// ...

public function __construct(Type $type)
{
    $type-&gt;someMethod(); // PHPStorm: object of "Type"
}</code></pre>
<p>But what if you need to <a href="/blog/2018/05/17/how-to-test-private-services-in-symfony/">test service</a> and get it from container?</p>
<pre><code class="language-php">&lt;?php

$service = $this-&gt;container-&gt;get(Type::class);
$service; // PHPStorm: "object" type
$service; // you need: object of "Type"</code></pre>
<p>To solve this, you need to <strong>spam your code with annotations</strong>:</p>
<pre><code class="language-diff"> $service = $this-&gt;container-&gt;get(Type::class);
+/** @var Type $service */
 $service;</code></pre>
<p>Is there a better way?</p>
<img src="/assets/images/posts/2019/meta/phpstorm_meta.gif" class="img-thumbnail">
<p>The <code>.phpstorm.meta.php</code> configuration seems a bit magic at first, but you'll understand it:</p>
<pre><code class="language-php">&lt;?php

namespace PHPSTORM_META;

// $container-&gt;get(Type::class) → instance of "Type"
override(\Psr\Container\ContainerInterface::get(0), type(0));</code></pre>
<p>And your container calls are now type-aware:</p>
<pre><code class="language-php">&lt;?php

$service = $this-&gt;container-&gt;get(Type::class);
$service; // PHPStorm: object of "Type"</code></pre>
<p>Pretty cool, right?</p>
<p><br></p>
<p>You can use this <a href="https://confluence.jetbrains.com/display/PhpStorm/PhpStorm+Advanced+Metadata">for much more</a>, like <strong>Doctrine repository autocomplete by entity class</strong>.</p>
<p>I'm using this for container and thanks to that there is <a href="https://github.com/symplify/symplify/commit/d53003ebc41dddcb228e517c98d59de70ebc17a0">49 fewer annotations</a> in Symplify code.</p>
<p><br></p>
<p>Do you <strong>use another metafile</strong> for PHPStorm? Let me know in the comments.</p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/01/28/2-files-that-your-symfony-application-misses</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 28 Jan 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/01/28/2-files-that-your-symfony-application-misses#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Kill Parents ]]></title>
                <link>https://tomasvotruba.com/blog/2019/01/24/how-to-kill-parents</link>
                <description><![CDATA[ <p>I see too many skilled developers missing <code>final</code> in every class they use. So I reposed <a href="http://ocramius.github.io/blog/when-to-declare-classes-final">When to declare classes final</a> - 4 years old post that shows you <em>why</em>. If you should learn just one skill this year, read and learn this one.
<br>
<br>
It's easier said than done, but the more parents you kill, the better you get at it. Today, we look on 3 effective ways to kill them.</p> ]]></description>
                <content:encoded><![CDATA[ <blockquote class="blockquote text-center mt-5 mb-5">
<p><strong>tl;dr</strong></p>
<p>Always declare your classes <code>final</code> and learn ways how to code with them.</p>
<p>It's not an easy path, but it will teach you SOLID better than anything else.</p>
</blockquote>
<p>S<strong>O</strong>L<strong>ID</strong> - 3 letters from <a href="https://en.wikipedia.org/wiki/SOLID">famous coding principles</a> are related to <code>final</code> classes, classes that cannot have children. The <code>final</code> topic is very popular:</p>
<img src="/assets/images/posts/2019/final/repost.png" class="img-thumbnail">
<p>But have you seen them in your favorite package?</p>
<h2 id="no-parents-happy-family">No Parents = Happy Family</h2>
<p>There are few cases the when parent class is <strong>required</strong> by 3rd party package or PHP code:</p>
<pre><code class="language-php">&lt;?php

use PHPUnit\Framework\TestCase;

final class PrivatesCallerTest extends TestCase
{
}</code></pre>
<pre><code class="language-php">&lt;?php

use Symfony\Component\Console\Command\Command;

final class PropagateCommand extends Command
{
}</code></pre>
<pre><code class="language-php">&lt;?php

use Exception;

final class OutputFormatterNotFoundException extends Exception
{
}</code></pre>
<p>These cases are valid - after all, if they shouldn't be extended, they would have been marked them <code>final</code>, right?</p>
<p>But in other cases, it is <strong>optional</strong>. One of the most spread terribly wrong use of parent class is Doctrine repository.</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

namespace App\Repository;

use Doctrine\ORM\EntityRepository;

final class PostRepository extends EntityRepository
{
}</code></pre>
<p>Symfony upgrades this problem to <a href="https://github.com/doctrine/DoctrineBundle/blob/a6ab041f33a0af379314ad5dbe17006903fd9fb6/Repository/ServiceEntityRepository.php">one more layer</a> of vendor lock:</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

namespace App\Repository;

use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;

final class PostRepository extends ServiceEntityRepository
{
}</code></pre>
<p><strong>Switching 3rd party dependency from one class to another doesn't solve your issue</strong>. You might switch heroin for meth, but you're still an addict.</p>
<p>Doctrine and Symfony documentation is full of this nonsense and it gives developers an idea that inheritance is a good thing.
That's why migration of database layer is so difficult. Read about <a href="/blog/2017/10/16/how-to-use-repository-with-doctrine-as-service-in-symfony/">How to use Repository with Doctrine as Service in Symfony</a> if you still have <code>extends</code> in your repository.</p>
<h2 id="why-is-this-such-a-big-deal">Why is this Such A Big Deal?</h2>
<p>In the end, the code without limits look like:</p>
<pre><code class="language-diff">namespace App\Repository;

namespace Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;

-final class PostRepository extends ServiceEntityRepository
+class PostRepository extends ServiceEntityRepository
 {
 }</code></pre>
<p>Do you need a homepage post? Just extend, it's the <em>Symfony</em> way:</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

namespace App\Repository;

use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;

class HomepagePostRepository extends PostRepository
{
}</code></pre>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

namespace App\Repository;

use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;

class CachedHomepagePostRepository extends HomepagePostRepository
{
}</code></pre>
<p>This code is not made up, but the common sense of applying <em>inheritance over composition</em> approach on everything that can be extended. And <strong>everything that is not <code>final</code>, can be extended.</strong></p>
<p><br></p>
<h2 id="vendor-lock-payback">Vendor-Lock Payback</h2>
<p>Overusing <code>extends</code> is similar to overuse of static methods in Laravel. Everyone with <a href="/blog/2018/04/26/how-i-got-into-static-trap-and-made-fool-of-myself/">bad expensive experience</a> knows why it's bad, but they're not able to pass this experience who are in &quot;the zone&quot; of using.</p>
<p>Then comes the day when 3rd party code changes:</p>
<pre><code class="language-diff"> &lt;?php declare(strict_types=1);

 namespace Doctrine\ORM;

 class EntityRepository
 {
-    public function createQueryBuilder($alias, $indexBy = null)
+    public function createQueryBuilder(string $alias, ?string $indexBy = null)
     {
     }

-     public function findAll()
+     public function findAll(): array
      }
 }</code></pre>
<p>Have you overridden this method? Your code is broken. If this example doesn't cover your method, maybe you've changed one of 15 methods in <code>EntityRepository</code> you can override now. And what is not <code>final</code> can...</p>
<p>And if you inherit <code>Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository</code>, you'll have to wait for them to fix the code first. It's like waiting on Android upgrades with Samsung.</p>
<h2 id="your-parents-are-good-parents">Your Parents are Good Parents</h2>
<p><strong>You can avoid this completely</strong> by playing with your own parents. Do you need a common method for all your repositories? You can:</p>
<pre><code class="language-php">&lt;?php

abstract class AbstractDoctrineRepository
{
    // @inject EntityManager here

    // your common methods
}</code></pre>
<pre><code class="language-php">&lt;?php

final class ProductRepository extends AbstractDoctrineRepository
{
}</code></pre>
<p>This way</p>
<ul>
<li><strong>you own the code</strong></li>
<li>you <strong>have no troubles</strong> when <code>EntityRepository</code> changes the way above</li>
<li>migration of a database is a matter of weekend work</li>
</ul>
<h2 id="make-children-in-factory-instead">Make Children in Factory Instead</h2>
<p>This week we started a migration of Nette application to Symfony with Rector. One of the changes is <code>Nette\...\Response</code> to <code>Symfony\...\Response</code> change. It's easy:</p>
<pre><code class="language-diff"> class SomePresenter
 {
-    public function someAction(): \Nette\...\Response
+    public function someAction(): \Symfony\...\Response
     {
     }
 }</code></pre>
<p>There are over 50 classes like this, but still do-able even without Rector.</p>
<p>But how would you approach cases like this?</p>
<pre><code class="language-php">&lt;?php

class SomeResponse extends \Nette\...\Response
{
}</code></pre>
<pre><code class="language-php">&lt;?php

class SomePresenter
{
    public function someAction()
    {
        return new SomeResponse($values, $code);
    }
}</code></pre>
<p>Again, there <strong>are over 50 classes in this format</strong>.</p>
<p>Oh, and the arguments are in different order and there is one extra:</p>
<pre><code class="language-diff"> &lt;?php

 class SomePresenter
 {
     public function someAction()
     {
-        return new SomeResponse($values, $code);
+        return new Symfony\...\Response($values, $headers, $code);
     }
 }</code></pre>
<p>Now we have to go through all these cases and change them. To add more salt to the wound, once there is <code>OkResponse</code> or <code>DeniedResponse</code>, all children of <code>Nette\...\Response</code>. This got us by shock. <strong>Our big plan to refactor application in one afternoon went to dust.</strong></p>
<p>And it doesn't have to be such a big change as a framework, but argument swap or just new type declaration - <strong>there will be so many BC breaks just for <a href="/blog/2019/01/03/how-to-complete-type-declarations-without-docblocks-with-rector/">type declarations</a> in next 2 years</strong>.</p>
<p>&quot;What if instead, we'd have a factory.&quot;</p>
<pre><code class="language-diff"> &lt;?php

 class SomePresenter
 {
     public function someAction()
     {
-        return new SomeResponse($values, $code);
+        return $this-&gt;responseFactory-&gt;createSuccess($values);
     }
 }</code></pre>
<pre><code class="language-php">&lt;?php

class ResponseFactory
{
     public function createSuccess($values)
     {
         return new Nette\...\Response($values, 'OK');
     }
}</code></pre>
<p>The change here for <strong>every such call would be in 1 place</strong> instead of 50:</p>
<pre><code class="language-diff">-return new Nette\...\Response($values, 'OK');
+return new Symfony\..\Response($values, $headers, 'OK');</code></pre>
<p>Luckily, Honza <a href="https://github.com/rectorphp/rector/pull/982">added support for <code>new Instance($args)</code> → <code>$this-&gt;instanceFactory-&gt;create($args)</code></a> to Rector, so it won't be a stopper for us. But if the original parent would be <code>final</code>, this would never happen.</p>
<h2 id="static-anal-to-the-rescue">Static Anal to the Rescue</h2>
<p>We don't have to wait for changes in all packages. There is a static analysis to help us. I just learned about <a href="https://github.com/localheinz/phpstan-rules">localheinz/phpstan-rules</a>. I can't wait to try these nice rules:</p>
<img src="/assets/images/posts/2019/final/rules.png" class="img-thumbnail">
<p><br></p>
<p>Next time you'll try to do coding, try using <code>final</code>. Do you know what will happen?</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/01/24/how-to-kill-parents</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 24 Jan 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/01/24/how-to-kill-parents#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ FriendsofPHP.org is Opening API with 250 Meetups a Month ]]></title>
                <link>https://tomasvotruba.com/blog/2019/01/21/friends-of-php-is-opening-api-with-250-meetups-a-month</link>
                <description><![CDATA[ <p><a href="https://friendsofphp.org">Friendsofphp.org</a> already checks <strong>over 1 145 PHP groups</strong> on meetup.com for new meetups every day. That's about 240 meetups in a single month - a great number, but some user groups don't use meetup.com.
<br><br>
I spend last weekend adding 4 new sources for meetups... and while doing it, I thought: &quot;why not make all that meetups and groups public in JSON&quot;?</p> ]]></description>
                <content:encoded><![CDATA[ <p>If you want to organize meetups on Meetup.com, it will cost you 10 $/month. Not every organizer can afford that, mainly in starting or small communities.</p>
<p>That's why there are other free platforms that collect meetups - each with their own way to export these meetups:</p>
<ul>
<li><a href="https://crossweb.pl/feed/wydarzenia/php">crossweb.pl</a> with xml feed in Poland</li>
<li><a href="https://dou.ua/calendar/feed/PHP">dou.ua</a> with xml feed in Ukraine</li>
<li><a href="webcal://www.posobota.cz/feed.ical.php">posobota.cz</a> with ical in the Czech Republic</li>
<li><a href="https://opentechcalendar.co.uk/api1/events.json">opentechcalendar.co.uk</a> <strong>with json</strong> in UK</li>
</ul>
<p>XML feeds are &quot;fun&quot; to work with. In dou.ua, the feed is so bad, that it contains only meetup name and its detail URL - no place or time. So you have to <strong>crawl each detail URL standalone</strong> and parse hidden JSON in HTML. But that's not all. Sometimes the json is but sometimes it isn't, so you have to actually parse the file and use XPath:</p>
<pre><code class="language-php">&lt;?php

$jsonData = $crawler-&gt;filterXPath('//script[@type="application/ld+json"]/text()');
if ($jsonData-&gt;getNode(0) === null) { // has some result?
    return null;
}

try {
    return Json::decode($jsonData-&gt;text(), Json::FORCE_ARRAY);
} catch (JsonException $jsonException) {
    // parse the whole site and get crawl HTML content
    return null;
}</code></pre>
<p>opentechcalendar.co.uk from UK is much better at this, providing json:</p>
<pre><code class="language-json">"data":[{"slug":7847,"slugforurl":"7847-machine-learning-adoption-enhancing-and-automating","summary":"Machine Learning Adoption: Enhancing and Automating Decision Making","summaryDisplay":"Machine Learning Adoption: Enhancing and Automating Decision Making","description":"","deleted":false,"cancelled":false,"is_physical":true,"is_virtual":false,"custom_fields":{"code_of_conduct":null},"siteurl":"https:\/\/opentechcalendar.co.uk\/event\/7847-machine-learning-adoption-enhancing-and-automating","url":"https:\/\/www.eventbrite.co.uk\/e\/machine-learning-adoption-enhancing-and-automating-decision-making...</code></pre>
<p>But, how well can we read that? With a bit of lagging... we can understand it.</p>
<h2 id="the-simplest-api-possible">The Simplest API Possible</h2>
<p><strong>I'm lazy to read anything I don't need for my work</strong>. I won't look and instantly know the keys I can use. Are there coordinates or do I have to geolocate them from the city?</p>
<pre><code class="language-json">{
    "meetups": [
        {
            "name": "Poslední Sobota 101",
            "userGroup": "Posobota",
            "start": "2019-01-26 15:00",
            "city": "Praha",
            "country": "Czech Republic",
            "latitude": 50.0874654,
            "longitude": 14.4212535,
            "url": "http://www.posobota.cz"
        }
    ]
}</code></pre>
<p>I want simple URL, with all the data I need. Just load and parse in 2 lines.</p>
<ul>
<li>No guzzle</li>
<li>No auth nor tokens</li>
<li>No back and forth HTML crawling</li>
<li>No XML entities to string conversion</li>
</ul>
<p>Simple like this:</p>
<pre><code class="language-php">&lt;?php

use Nette\Utils\FileSystem;
use Nette\Utils\Json;

$jsonContent = FileSystem::read('https://friendsofphp.org/api/meetups.json');
$json = Json::decode($jsonContent, Json::FORCE_ARRAY);

var_dump($json['meetups']); // all meetups on friendsofphp.org</code></pre>
<h2 id="complains-everywhere-what-about-me">Complains Everywhere... What about Me?</h2>
<p>All right, all this API is clearly bad and the authors probably never used them themselves. But what about friendsofphp.org API? Is it good?</p>
<p>Well, there is none. Better bad API than no API → crawling and Xpaths. Better done than perfect. So to make this right...</p>
<p><strong>...I published all meetups and groups for anyone to use in API</strong>.</p>
<p><strong>You'll find available JSON feeds at <a href="https://friendsofphp.org/api">friendsofphp.org/api/</a>.</strong></p>
<img src="/assets/images/posts/2019/fop/fop.png" class="img-thumbnail mb-5">
<p>With API you can list meetups in your country, sort them by a distance from your city, get all groups from your neighbor countries, render a map with Wordpress meetups... or whatever comes to your mind. It's all up to your creativity.</p>
<h2 id="api-with-statie">API with Statie?</h2>
<p>With <em>encoded knowledge</em> approach, you don't have to think about pretty JSON, or studying XML vs JSON format. Just provide data and let program handle it.</p>
<p>This website runs on <a href="https://www.statie.org">Statie</a> - the most downloaded PHP static website generators supporting Twig and Markdown. Why don't we Statie handle this as well?</p>
<p>Since Statie 5.4-dev, you can do this:</p>
<pre><code class="language-yaml"># statie.yaml
parameters:
    api_parameters:
        - 'groups'
        - 'meetups'</code></pre>
<p>That way, their parameters will be turned into API feeds:</p>
<pre><code class="language-bash">/api/groups.json
/api/meetups.json</code></pre>
<p>With this beautiful json:</p>
<pre><code class="language-json">{
    "meetups": [
        {
            "name": "Poslední Sobota 101",
            "userGroup": "Posobota",
            "start": "2019-01-26 15:00",
            "city": "Praha",
            "country": "Czech Republic",
            "latitude": 50.0874654,
            "longitude": 14.4212535,
            "url": "http://www.posobota.cz"
        }
    ]
}</code></pre>
<p>That way you can publish a list of talks, books you've read or package you've made. <strong>You don't have to think</strong> about the design, URL, nor creating own templates and handling the empty output.</p>
<p><strong>Statie got you covered!</strong></p>
<img src="/assets/images/posts/2019/fop/gotit.jpg" class="img-thumbnail">
<p><br></p>
<p>How do you use API feeds? What is your approach to provide them?</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/01/21/friends-of-php-is-opening-api-with-250-meetups-a-month</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 21 Jan 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/01/21/friends-of-php-is-opening-api-with-250-meetups-a-month#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ 9 Steps to Migrate From Jekyll to Statie ]]></title>
                <link>https://tomasvotruba.com/blog/2019/01/10/9-steps-to-migrate-from-jekyll-to-statie</link>
                <description><![CDATA[ <p>Jekyll is great a way to start static website on Github Pages. But Jekyll has one big problem - the language.
How would you add custom Twig or Latte filter to Jekyll?
<br><br>
I wanted to migrate my static websites from Jekyll to Statie. Can new <code>init</code> command make this piece of cake? And what needs to be done next?</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="1-create-basic-statie-structure">1. Create Basic Statie Structure</h2>
<p>Statie 5.3 brings <a href="/blog/2019/01/07/how-to-create-your-first-php-twig-static-website-under-2-minutes-with-statie/">new <code>init</code> command</a>, that creates basic structure in <code>/source</code> directory, <code>statie.yml</code>, <code>.travis.yml</code> and metafiles.</p>
<p>Before we start any moving, create a basic structure to save many copy-pasting steps:</p>
<pre><code class="language-bash">composer require symplify/statie
vendor/bin/statie init</code></pre>
<p>Then, clean <code>/source</code> directory from generated files and...</p>
<h2 id="2-move-source-files-to-code-source-code-directory">2. Move Source files to <code>/source</code> Directory</h2>
<ul>
<li>Jekyll has all the source code in the root.</li>
<li>Statie works with <code>/source</code> directory, so the website is separated from PHP code, tests, metafiles.</li>
</ul>
<pre><code class="language-diff">-CNAME
+/source/CNAME</code></pre>
<pre><code class="language-diff">-index.html
+/source/index.html</code></pre>
<pre><code class="language-diff">-_data/projects.yaml
+/source/_data/projects.yaml</code></pre>
<h2 id="3-move-parameters-files-under-code-parameters-gt-param-name-code-sections">3. Move Parameters Files Under <code>parameters &gt; [param name]</code> Sections</h2>
<p><strong>Before</strong> - Jekyll</p>
<pre><code class="language-yaml"># _data/projects.yaml
-
    name: Symplify
    url: https://github.com/symplify/symplify</code></pre>
<p><strong>After</strong> - Statie</p>
<pre><code class="language-yaml"># source/_data/projects.yaml
parameters:
    projects:
        -
            name: Symplify
            url: https://github.com/symplify/symplify</code></pre>
<h2 id="4-upgrade-absolute-links-to-moved-files">4. Upgrade Absolute Links to Moved Files</h2>
<pre><code class="language-diff">-https://github.com/TomasVotruba/gophp71.org/edit/master/_data/projects.yaml
+https://github.com/TomasVotruba/gophp71.org/edit/master/source/_data/projects.yaml</code></pre>
<h2 id="5-load-moved-yaml-files-in-code-statie-yml-code">5. Load Moved YAML Files in <code>statie.yml</code></h2>
<pre><code class="language-diff">+imports:
+    - { resource: "source/_data/projects.yaml" }</code></pre>
<h2 id="6-remove-code-site-data-code-and-use-variables-directly">6. Remove <code>site.data.</code> and use Variables Directly</h2>
<pre><code class="language-diff"> &lt;ul&gt;
-    {% for project in site.data.projects %}
+    {% for project in projects %}
         &lt;li&gt;&lt;a href="{{ project.url }}"&gt;{{ project.name }}&lt;/a&gt;&lt;/li&gt;
     {% endfor %}
 &lt;/ul&gt;</code></pre>
<h2 id="7-setup-github-pages-deploy-in-travis">7. Setup Github Pages deploy in Travis</h2>
<p>Thanks to <code>vendor/bin/statie init</code> you have correctly configured <code>.travis.yml</code> in your repository.</p>
<p>To finish deploy, you need to:</p>
<ul>
<li>create <code>gh-pages</code> branch</li>
<li>pick it as a source for Github Pages</li>
<li>generate Github Token</li>
<li>put it to Travis configuration of your repository</li>
</ul>
<p>How you do this? Just <strong>follow <a href="https://www.statie.org/docs/github-pages">Statie.org documentation</a></strong> step by step.</p>
<h2 id="8-clean-metadata-from-headers">8. Clean Metadata from Headers</h2>
<p>In Jekyll, it's required to have <code>---</code> section in files, even if empty. You can drop it now:</p>
<pre><code class="language-diff">- ---
- ---

HTML
...</code></pre>
<h2 id="9-run-project-locally">9. Run Project Locally</h2>
<p>This is what I missed the most at Jekyll page - instant feedback. We want to develop and see output instantly - is it correct or is there a bug?</p>
<pre><code class="language-bash">npm install
gulp</code></pre>
<ul>
<li>Then open <code>localhost:8000</code> to see your generated HTML.</li>
<li>Did you edit code in <code>/source</code>? → Just <strong>refresh browser to see re-generated HTML</strong>.</li>
</ul>
<p>This is at least 100 times faster than deploying to Jekyll and checking the output in the production.</p>
<h3 id="show-me-the-real-migration-code">Show me the Real Migration Code</h3>
<ul>
<li><a href="https://github.com/DeprecatedPackages/gophp71.org/pull/32">pull request on gophp71.org</a></li>
<li><a href="https://github.com/DeprecatedPackages/gomonorepo.org/pull/7">pull request on gomonorepo.org</a></li>
</ul>
<p><br></p>
<p>That's it! You can enjoy Markdown, Twig and PHP directly from your local machine and still on Github Pages.</p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/01/10/9-steps-to-migrate-from-jekyll-to-statie</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 10 Jan 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/01/10/9-steps-to-migrate-from-jekyll-to-statie#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Complete Type Declarations without Docblocks with Rector ]]></title>
                <link>https://tomasvotruba.com/blog/2019/01/03/how-to-complete-type-declarations-without-docblocks-with-rector</link>
                <description><![CDATA[ <p>In <a href="/blog/2018/12/10/rocket-science-behind-migration-of-docblock-types-to-php-typehints/">previous post</a> we looked at how to migrate from docblocks to type declarations. From <code>@param Type $param</code> to <code>Type $param</code>. Even if it doesn't break code like coding standards do, works with inheritance, localized <code>self</code> and <code>static</code> and propagates types to all child classes, it's still not such a big deal.
<br><br>
But <strong>how do you complete type declarations if don't have any docblocks?</strong></p> ]]></description>
                <content:encoded><![CDATA[ <p>Well, you're doomed, because <strong>you should write</strong> <a href="/blog/2017/12/17/new-in-symplify-3-doc-block-cleaner-fixer/">docblocks everywhere where useful</a>.</p>
<pre><code class="language-php">&lt;?php

class SomeClass
{
    public function getItems()
    {
        return ['Statie', 'EasyCodingStandard', 'Rector'];
    }
}</code></pre>
<p>If you only typed <code>@return</code> annotation 4 years ago, where no-one thought there will ever be scalar type declarations and such annotations were only for geeks. Transition to PHP 7 features would be so easy:</p>
<pre><code class="language-diff"> &lt;?php

 class SomeClass
 {
-    public function getItems()
+    public function getItems(): array
     {
         return ['Statie', 'EasyCodingStandard', 'Rector'];
     }
 }</code></pre>
<p>Now, I hope you've learned, that <strong>future compatibility is a thing</strong> and you'll write annotations to each property, so they Rector will <a href="/blog/2018/11/15/how-to-get-php-74-typed-properties-to-your-code-in-few-seconds/#visualize-future-compatibility">convert them to type declarations</a> once PHP 7.4 is out.</p>
<h2 id="quot-it-s-not-my-fault-quot">&quot;It's Not My Fault&quot;</h2>
<p>Well, but what if you've inherited such legacy code, are you to blame? No, <strong>no-one is to blame even if you wrote the code</strong>. That's how change works. <strong>We feel like we know all today, but in 5 years array-type declarations will be considered code smell</strong> and we keep it only <em>for historical reasons</em>.</p>
<p>So how can we fight the change together?</p>
<pre><code class="language-php">&lt;?php

class SomeClass
{
    public function getItems()
    {
        $items = ['Statie', 'EasyCodingStandard', 'Rector'];

         return $this-&gt;sortItems($items);
    }

    private function sortItems(array $items)
    {
        sort($items);
        return $items;
    }
}</code></pre>
<p>How would upgrade this code to type declarations?</p>
<pre><code class="language-diff"> &lt;?php

 class SomeClass
 {
-    public function getItems()
+    public function getItems(): array
     {
         $items = ['Statie', 'EasyCodingStandard', 'Rector'];

         return $this-&gt;sortItems($items);
     }

-    private function sortItems(array $items)
+    private function sortItems(array $items): array
     {
         sort($items);
         return $items;
     }
 }</code></pre>
<p>Good job, that's correct! Now you can do it for the rest of your 25 000 lines of code.</p>
<p>Or... You can be <em>lazy smart </em> and <strong>use static analysis from PHPStan to do it for you</strong>. It already knows that:</p>
<ul>
<li><code>$items</code> is <code>array</code> with strings</li>
<li><code>sort</code> sorts <code>array</code> and keeps it an <code>array</code></li>
</ul>
<p>That was too easy... let's check case we'll find in our code:</p>
<pre><code class="language-diff"> &lt;?php

 // ...

-public function getResult()
+public function getResult(): float
 {
     if (true) {
         return 5.2;
     }

     $value = 5.3;

     return $value;
 }</code></pre>
<p>Don't get confused by incorrect doc:</p>
<pre><code class="language-diff"> /**
  * @return bool
  */
-public function getNumber()
+public function getNumber(): int
 {
     return 5;
 }</code></pre>
<p>Is one object or null?</p>
<pre><code class="language-diff"> &lt;?php

 // ...

-public function resolve(Product $product)
+public function resolve(Product $product): ?Product
 {
     // ...

     if (...) {
         return null;
     }

     return $product;
 }</code></pre>
<p><br></p>
<blockquote class="blockquote text-center mb-5 mt-5">
    If PHPStorm or PHPStan knows what type it is,<br>
    there is a big chance Rector can change it everywhere in your code.
</blockquote>
<p><br></p>
<p><a href="https://github.com/jkuchar">Honza Kuchař</a> spend one afternoon over Rector with me and motivated me to add this feature to Rector, so PHP developers can enjoy the laziness AST provides. Thank you, Honza! It's done (<a href="https://github.com/rectorphp/rector/pull/880">see PR</a>).</p>
<p>Just setup <a href="https://github.com/rectorphp/rector">Rector</a> and upgrade your code:</p>
<pre><code class="language-php">&lt;?php

// rector.php

declare(strict_types=1);

use Rector\TypeDeclaration\Rector\FunctionLike\ReturnTypeDeclarationRector;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();
    $services-&gt;set(ReturnTypeDeclarationRector::class);
};</code></pre>
<pre><code class="language-bash">vendor/bin/rector process src</code></pre>
<p>Done!</p>
<p><br></p>
<p>Just one more thing...</p>
<h2 id="properties-without-code-var-code">Properties Without <code>@var</code>?</h2>
<p>There is a big chance that if our code misses <code>@param</code> and <code>@return</code> type declarations, the <code>@var</code> is missing as well. We don't have to go to legacy code to find such code.</p>
<p>Do you recognize this class?</p>
<pre><code class="language-php">&lt;?php

namespace Symfony\Component\Console\Command;

use Symfony\Component\Console\Application;

class Command
{
    private $application;
    private $name;
    private $processTitle;
    private $aliases = [];
    private $definition;
    private $hidden = false;
    private $help;
    private $description;
    private $ignoreValidationErrors = false;
    private $applicationDefinitionMerged = false;
    private $applicationDefinitionMergedWithArgs = false;
    private $code;
    private $synopsis = [];
    private $usages = [];
    private $helperSet;

    // ...

    public function setApplication(Application $application = null)
    {
        $this-&gt;application = $application;
    }
}</code></pre>
<p>Quiz question: how would <strong>you utilize AST to autocomplete all <code>@var</code> annotations to properties above</strong>?</p>
<p><br></p>
<p><code>$this-&gt;application = $application;</code> we know that <code>$application</code> can be upgraded to:</p>
<pre><code class="language-diff">+/**
+ * @var \Symfony\Component\Console\Application
+ */
 private $application;</code></pre>
<p>That's it! Let's put this algorithm into Rector:</p>
<pre><code class="language-php">&lt;?php

// rector.php

declare(strict_types=1);

use Rector\TypeDeclaration\Rector\Property\CompleteVarDocTypePropertyRector;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();
    $services-&gt;set(CompleteVarDocTypePropertyRector::class);
};</code></pre>
<pre><code class="language-bash">vendor/bin/rector process src</code></pre>
<p>↓</p>
<pre><code class="language-diff"> &lt;?php

 namespace Symfony\Component\Console\Command;

 use Symfony\Component\Console\Application;

 class Command
 {
+    /**
+     * @var \Symfony\Component\Console\Application
+     */
     private $application;
+    /**
+     * @var string
+     */
     private $name;
+    /**
+     * @var string
+     */
     private $processTitle;
+    /**
+     * @var mixed[]|string[]
+     */
     private $aliases = [];
+    /**
+     * @var \Symfony\Component\Console\Input\InputDefinition
+     */
     private $definition;
+    /**
+     * @var bool
+     */
     private $hidden = false;
+    /**
+     * @var string
+     */
     private $help;
+    /**
+     * @var string
+     */
     private $description;
+    /**
+     * @var bool
+     */
     private $ignoreValidationErrors = false;
+    /**
+     * @var bool
+     */
     private $applicationDefinitionMerged = false;
+    /**
+     * @var bool
+     */
     private $applicationDefinitionMergedWithArgs = false;
+    /**
+     * @var callable
+     */
     private $code;
+    /**
+     * @var mixed[]
+     */
     private $synopsis = [];
+    /**
+     * @var mixed[]
+     */
     private $usages = [];
+    /**
+     * @var \Symfony\Component\Console\Helper\HelperSet
+     */
     private $helperSet;</code></pre>
<p>In matter of seconds now we have:</p>
<ul>
<li>Better static type analysis <em class="fas fa-lg fa-check text-success"></em></li>
<li>Better PHPStorm autocomplete <em class="fas fa-lg fa-check text-success"></em></li>
<li>Better coding standards <em class="fas fa-lg fa-check text-success"></em></li>
<li>No manual boring work required from the developer <em class="fas fa-lg fa-check text-success"></em></li>
</ul>
<p><br></p>
<p>If you want to how Rector works behind this scene, (<a href="https://github.com/rectorphp/rector/pull/885">check the PR</a>). <strong>The code size to make this happen is not what you'd expect</strong> thanks to php-parser elegance (thanks Nikic!).</p>
<p><br></p>
<p>What more could be done to turn legacy code to elegant code? Share in comments, I'm eager to know.</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2019/01/03/how-to-complete-type-declarations-without-docblocks-with-rector</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 03 Jan 2019 00:00:00 +0000</pubDate>
                                    <updated>2020-08-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Aug 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2019/01/03/how-to-complete-type-declarations-without-docblocks-with-rector#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Your Most Favorite Posts in 2018 ]]></title>
                <link>https://tomasvotruba.com/blog/2018/12/31/your-most-favorite-posts-in-2018</link>
                <description><![CDATA[ <p>It's a holiday, we want to rest and enjoy time with our families. Hence I won't bother you with a complex topic, but finish this year with the simple post instead. A post about the most read post in 2018.
<br><br>
<strong>Was it Symfony? Doctrine? PHP or...</strong></p> ]]></description>
                <content:encoded><![CDATA[ <p>Without further ado, these are stats <strong>for unique readers</strong> from Google Analytics for 2018:</p>
<div class="text-center pt-3">
    <img src="/assets/images/posts/2018/top-posts/pie.png" class="mr-5"><strong><span class="bigger">3 posts = 31,4 % of readers</span></strong>

    <br><br><img src="/assets/images/posts/2018/top-posts/top-stats.png" class="img-thumbnail"></div>
<h2 id="top-5">Top 5</h2>
<p>Did you miss some of them? These <strong>will give you useful knowledge through 2019</strong>:</p>
<ul>
<li>
<p><a href="/blog/2017/10/16/how-to-use-repository-with-doctrine-as-service-in-symfony/">How to use Repository with Doctrine as Service in Symfony</a></p>
</li>
<li>
<p><a href="/blog/2018/08/16/whats-new-in-php-73-in-30-seconds-in-diffs/">What's New in PHP 7.3 in 30 Seconds in Diffs</a></p>
</li>
<li>
<p><a href="/blog/2018/09/17/7-tips-to-write-exceptions-everyone-will-love/">7 Tips to Write Exceptions Everyone Will Love</a></p>
</li>
<li>
<p><a href="/blog/2018/12/13/kirill-smelov-s-phpstorm-tips-in-9-gifs/">Kirill Smelov's PHPStorm Tips in 9 Gifs</a></p>
</li>
<li>
<p><a href="/blog/2017/12/25/composer-local-packages-for-dummies/">Composer Local Packages for Dummies</a></p>
</li>
</ul>
<h2 id="you-read-a-crazy-lot">You Read a Crazy Lot</h2>
<p>I'm very happy that you don't just open, copy-paste and bounce away. You actually read - and not just a few paragraphs. Your reading times are almost equal to times to read the whole post. <strong>You read from the start to the end</strong>, which is amazing!</p>
<div class="text-center">
    <img src="/assets/images/posts/2018/top-posts/time.png" class="img-thumbnail"></div>
<p><br></p>
<p>As I said, this would be quick and right to the point... unless you're reading one of those top 5 now and never got here :).</p>
<blockquote class="blockquote">
    Thank you for your support, active feedback and comments. Now enjoy the end of 2018 and be sure to welcome 2019. I'm certain and wish you that is amazing for all of us!
</blockquote>
<p>I'll do my best to make this blog the best know-how source.</p>
<p>See you next year!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/12/31/your-most-favorite-posts-in-2018</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 31 Dec 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/12/31/your-most-favorite-posts-in-2018#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How To Convert All Your Symfony Service Configs to Autodiscovery ]]></title>
                <link>https://tomasvotruba.com/blog/2018/12/27/how-to-convert-all-your-symfony-service-configs-to-autodiscovery</link>
                <description><![CDATA[ <p>Do you use Symfony autodiscovery services registration everywhere and your configs have no extra lines?
Skip this post and rather read another one.
<br>
<br>
But if <strong>you have many configs with manual service registration</strong>, tagging, and autowiring, keep reading. I'll show you how you can convert them easily be new Symplify package.</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="tl-dr">tl;dr;</h2>
<img src="/assets/images/posts/2018/autodiscovery/demo.gif" class="img-thumbnail">
<p><br></p>
<p>I've been consulting a few Symfony e-commerce projects recently that all have <code>service.yml</code>. Big configs with manual service registration:</p>
<pre><code class="language-yaml">services:
    App\SomeService:
        autowire: true

    App\Controller\SomeController:
        autowire: true

    # 50 more lines...
    # 20 more files similar to this one</code></pre>
<p>I already wrote <a href="/blog/2017/05/07/how-to-refactor-to-new-dependency-injection-features-in-symfony-3-3/">How to refactor to new Dependency Injection features in Symfony 3.3</a>, so you can read it. But you don't have to, since <strong>this conversion can be automated</strong>...</p>
<pre><code class="language-yaml">services:
    _defaults:
        autowire: true
    App\:
        resource: /src</code></pre>
<p>...with <a href="https://github.com/symplify/autodiscovery">Symplify\Autodiscovery</a>.</p>
<h2 id="3-steps-to-your-minimalistic-configs">3 Steps to Your Minimalistic Configs</h2>
<ol>
<li>
<p>Install the package</p>
<pre><code class="language-bash">composer require symplify/autodiscovery</code></pre>
</li>
<li>
<p>Convert Configs</p>
<p>Run on <code>/src</code> directory:</p>
<pre><code class="language-diff">vendor/bin/autodiscovery convert-yaml /src</code></pre>
<p>It converts all <code>services.yml</code>, <code>config.yml</code>, <code>config.dev.yml</code> etc. configs that contain <code>services:</code> to autodiscovery format.</p>
<p><code>*.yaml</code> included.</p>
</li>
<li>
<p>See the changes:</p>
<pre><code class="language-bash">git diff</code></pre>
</li>
</ol>
<h2 id="what-can-go-wrong">What Can Go Wrong?</h2>
<p>There are many reasons to <strong>automate this work</strong>, because <strong>there are many gotchas</strong> you have to be careful about. In each single service registration.</p>
<h2 id="1-tags">1. Tags</h2>
<p>Name-only system tags <strong>can be removed</strong> thanks to <code>autoconfigure</code>:</p>
<pre><code class="language-diff"> services:
-    first_command:
-        class: App\Command\FirstCommand
-        tags:
-            - { name: 'console.command' }
-
-    second_command:
-        class: App\Command\SecondCommand
-        tags: ['console.command']
+    _defaults:
+        autoconfigure: true
+
+     App\Command\:
+         resource: '../src/Command'</code></pre>
<p>But you have to <strong>keep</strong> <a href="https://symfony.com/doc/current/console/commands_as_services.html#lazy-loading">lazy-loaded commands</a></p>
<pre><code class="language-yaml">services:
    first_command:
        class: App\Command\FirstCommand
        tags:
          - { name: 'console.command', command: 'first' }</code></pre>
<p>And tags with metadata:</p>
<pre><code class="language-yaml">services:
    App\EventListener\ExceptionListener:
        tags:
            - { name: 'kernel.event_listener', event: 'kernel.exception' }</code></pre>
<h2 id="2-single-class-names">2. Single-class Names</h2>
<p>Service name can be often dropped:</p>
<pre><code class="language-diff"> services:
-    app.controller:
-        class: App\SomeController
+    App\SomeController: ~</code></pre>
<p>Except for classes with no namespace:</p>
<pre><code class="language-yaml">services:
    Single_Class_Name:
        class: Single_Class_Name</code></pre>
<h2 id="3-vendor-autodiscovery">3. Vendor Autodiscovery</h2>
<p>Configs are usually mixed of your code (<code>/app</code> or <code>/src</code>) and 3rd party code (<code>/vendor</code>):</p>
<pre><code class="language-yaml"># old config
services:
    App\SomeService: ~
    App\AnotherService: ~

    Symplify\PackageBuilder\Parameter\ParameterProvider: ~
    Symplify\PackageBuilder\FileSystem\FileGuard: ~</code></pre>
<p>Seeing this you have to think about that. If not, you might accidentally apply autodiscovery everywhere:</p>
<pre><code class="language-diff"> services:
-    App\SomeService: ~
-    App\AnotherService: ~
+    App\:
+        resource: ../src

-    Symplify\PackageBuilder\Parameter\ParameterProvider: ~
-    Symplify\PackageBuilder\FileSystem\FileGuard: ~
+    Symplify\PackageBuilder\: ~
+        resource: ../vendor/symplify/package-builder/src</code></pre>
<p>Ops, the last case should not be converted - <strong>all 3rd party classes have to be explicit</strong> since they're handled by their own config/bundle in <code>/vendor</code>:</p>
<pre><code class="language-yaml">services:
    Symplify\PackageBuilder\Parameter\ParameterProvider: ~
    Symplify\PackageBuilder\FileSystem\FileGuard: ~</code></pre>
<h2 id="4-exclude-obviously">4. Exclude Obviously</h2>
<p>When you try to autoload a class with a constructor, it's considered a service. But not all classes with constructors are services. Symfony doesn't know that unless you tell it, and it would fail with missing argument exception.</p>
<pre><code class="language-diff"> services:
     App\:
        resource: ../src
+       exclude:
+           - ../src/Entity/*
+           - ../src/Exception/*
+           - ../src/Contract/*</code></pre>
<p>The converter includes support for basic dirs to be excluded.</p>
<p><br></p>
<p><strong>Do you want minimalist configs for your application?</strong> <a href="#3-steps-to-your-minimalistic-configs">Give Autodiscovery a try</a>.</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/12/27/how-to-convert-all-your-symfony-service-configs-to-autodiscovery</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 27 Dec 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-04-01UTC00:00:000</updated>
                    <atom:updated>Wed, 01 Apr 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Wed, 01 Apr 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/12/27/how-to-convert-all-your-symfony-service-configs-to-autodiscovery#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Thank You ]]></title>
                <link>https://tomasvotruba.com/blog/2018/12/24/thank-you</link>
                <description><![CDATA[ <p>This was an amazing year for me. I made so many things happen - I won't write about them since you can see them on [the homepage]() and <a href="https://github.com/tomasvotruba">my Github</a>.
<br><br>
I want to write about you, my dear reader and contributor. <strong>I would not make it this far without you in 2018.</strong></p> ]]></description>
                <content:encoded><![CDATA[ <p>Thank you for discussion under the post - it often leads me to think about the topic in-depth and from different perspectives. Thank you for keeping comments constructive and creative. Thank you for sharing gists to your approach to coding.</p>
<ul>
<li>
<p>Thank you for emoticons under the post, that way I know many of you like gifs and diffs :).</p>
</li>
<li>
<p>Thank you for fixing my typos and contributing to this blog. I've added &quot;Thank you&quot; page to make your <a href="/thank-you">contributions visible</a>.</p>
</li>
<li>
<p>Thank you for your comments and votes on <a href="https://www.reddit.com/r/PHP">Reddit /r/php</a>. It gives me an idea, how skilled developers from countries all over the world see PHP.</p>
</li>
<li>
<p>Thanks for the amazing and warm meetups in Berlin, Vienna, and Singapore. I really appreciate the place to sleepover (you know who you are) and passionate discussions.</p>
</li>
</ul>
<p><strong>Thanks for your feedback that keeps me going</strong>. Thanks to you I could set myself for a goal to write 2 posts a week. I failed a lot in the start. I tried and I failed. But your feedback kept me on track. I saw you're into controversial topics no-one talks about and in short and useful examples of how to code and how not to code. And why! Without you, I would not write 96 posts this year. I've very grateful PHP community is such <a href="https://friendsofphp.org">a big family all over the World</a> and I'm happy you've made me feel welcomed.</p>
<h2 id="you-re-amazing">You're Amazing</h2>
<p>I'm really amazed by this because the job of a programmer is to find bugs and fix them. We find mistakes, we're biased that way and it reflects in our communication. Well, you - the community around me - prove this wrong almost every day. Programmers are such nice people, <strong>who can appreciate each other and respect each other's work, even if they don't agree with him or her</strong>.</p>
<p>That's very important in relationships to allow growth and staying connected.</p>
<div class="card">
    <div class="card-header text-center">
        I would like to share a few of your feedbacks that kept me going in hard times
    </div>
    <div class="card-body text-center">
        <img src="/assets/images/posts/2018/thank-you/1.png"><br><img src="/assets/images/posts/2018/thank-you/2.png" class="img-thumbnail"><br><img src="/assets/images/posts/2018/thank-you/3.png"><br><img src="/assets/images/posts/2018/thank-you/4.png" class="img-thumbnail"><br><img src="/assets/images/posts/2018/thank-you/5.png"><br><img src="/assets/images/posts/2018/thank-you/12.png"><br><img src="/assets/images/posts/2018/thank-you/6.png"><br><img src="/assets/images/posts/2018/thank-you/10.png"><br><img src="/assets/images/posts/2018/thank-you/8.png" class="img-thumbnail"><br><img src="/assets/images/posts/2018/thank-you/7.png"><br><img src="/assets/images/posts/2018/thank-you/9.png" class="img-thumbnail"><br><img src="/assets/images/posts/2018/thank-you/11.png"></div>
</div>
<p>I don't share this with you to brag about myself. I write this to show, <strong>how easy is to be nice</strong>. All of these messages made me feel warm.</p>
<p>When was the last time you said something like that to <strong>your colleague</strong>? And when was the last time you said &quot;there's a bug&quot; or &quot;it's wrong&quot;. Maybe similar words that made me happy, would make your colleague happy. Maybe it would reinforce the same behavior to people around him or her. Try it :)</p>
<p><br><br></p>
<p>Thank you again, <strong>you allow me to follow my passion</strong> - that's the best gift I could wish for!</p>
<p><br></p>
<p>Merry Christmas You All!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/12/24/thank-you</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 24 Dec 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/12/24/thank-you#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Introducing Symfony Flex Loader ]]></title>
                <link>https://tomasvotruba.com/blog/2018/12/20/introducing-symfony-flex-loader</link>
                <description><![CDATA[ <p>Symfony 4 and Flex is heading in direction of zero-setup configuration - no bundles, no extensions, no configuration. You already know how to get rid of <a href="/blog/2018/11/29/how-to-manage-configuration-in-symfony-without-bundle-extension-and-configuraiton/">Configuration</a>. Flex now loads services instead of Extension class.
<br>
<br>
But it has an extra price, a lot of new boilerplate code in Kernel. Today you'll learn <strong>how to keep your Kernel Flex-ready and clean at the same time</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <p>Can you spot, what extra directory is this Kernel loading...</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

// ...

final class AppKernel extends Kernel
{
    // ...

    protected function configureContainer(ContainerBuilder $container, LoaderInterface $loader): void
    {
        $container-&gt;addResource(new FileResource($this-&gt;getProjectDir() . '/config/bundles.php'));
        $container-&gt;setParameter('container.dumper.inline_class_loader', true);
        $confDir = $this-&gt;getProjectDir() . '/config';
        $loader-&gt;load($confDir . '/{packages}/*' . self::CONFIG_EXTS, 'glob');
        $loader-&gt;load($confDir . '/{packages}/' . $this-&gt;environment . '/**/*' . self::CONFIG_EXTS, 'glob');
        $loader-&gt;load($confDir . '/{services}' . self::CONFIG_EXTS, 'glob');
        $loader-&gt;load($confDir . '/{services}_' . $this-&gt;environment.self::CONFIG_EXTS, 'glob');
        $loader-&gt;load(__DIR__ . '/optional/custom/path' . self::CONFIG_EXTS, 'glob');
    }

    // ...
}</code></pre>
<p>...in 2 seconds?</p>
<p>If you found <code>__DIR__ . '/optional/custom/path'</code>, good job!</p>
<p><br></p>
<p>What directory does <em>this</em> Kernel load?</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

// ...

final class AppKernel extends Kernel
{
    // ...

    protected function configureContainer(ContainerBuilder $container, LoaderInterface $loader): void
    {
        $this-&gt;flexLoader-&gt;loadConfigs($container, $loader, [
            __DIR__ . '/another/custom/path'
        ]);

        $container-&gt;addCompilerPass(new AutowireArrayParameterCompilerPass());
    }

    // ...
}</code></pre>
<p>Do you prefer to read about extra compiler passes that modify your application or all the directories and suffixes your configs might be loaded from?</p>
<p>Programmers are lazy and they <strong> don't want to read any letter more then they have to</strong>. Unless they're paid by for each read letter :).</p>
<h2 id="make-kernel-small-again">Make Kernel Small Again</h2>
<p>Symplify is introducing a small handy package - <a href="https://github.com/symplify/flexloader">FlexLoader</a>. It handles <strong>Flex service and route loading with 3 lines</strong> (methods) and makes your Kernel to be nice and readable - like they used to the old times.</p>
<p><br></p>
<p>How does FlexLoader look in practice?</p>
<img src="/assets/images/posts/2018/flex-loader/flex-loader.gif">
<p><br></p>
<p><strong>That's all!</strong> Now you can focus on important things, like writing <a href="/blog/2018/11/12/will-autowired-arrays-finally-deprecate-tags-in-symfony-and-nette/">cool compiler passes</a>.</p>
<p><br>
<br></p>
<p>Happy weight loss, so you're fit and slim for Christmas :)</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/12/20/introducing-symfony-flex-loader</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 20 Dec 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/12/20/introducing-symfony-flex-loader#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Function create_function() is Deprecated in PHP 7.2 - How to Migrate? ]]></title>
                <link>https://tomasvotruba.com/blog/2018/12/17/function-create-function-is-deprecated-in-php-72-how-to-migrate</link>
                <description><![CDATA[ <p>If there would be &quot;Miss Deprecation of PHP 7.2&quot;, <code>create_function()</code> would definitely win. They can be <strong>very complex, tricky and very hard convert to PHP code</strong>. Moreover without tests.
<br><br>
Do you have over 5 <code>create_function()</code> pieces in your code? Let's see how to migrate them.</p> ]]></description>
                <content:encoded><![CDATA[ <p>Why is this deprecated? Well, the string arguments of few functions behaves like <code>eval()</code> - that's <a href="https://stackoverflow.com/a/951868/1348344">evil</a>.</p>
<pre><code class="language-php">&lt;?php

create_function("$a", "return $a");
assert("$value == 5");</code></pre>
<p>And what about quotes?</p>
<pre><code class="language-php">&lt;?php

create_function("$a", "return $a");
create_function('$a', 'return $a');</code></pre>
<p>You don't want to think which if <code>"</code> or <code>`</code> <a href="/blog/2018/10/11/hi-my-name-is-tom-conctat-vs-in-sprintf-vs-in-string-variables/#em-class-fas-fa-fw-fa-times-text-danger-fa-lg-em-em-class-fas-fa-fw-fa-times-text-danger-fa-lg-em-in-string-variable">breaks the code</a> - you want make code.</p>
<p>I think it's a good move, <strong>so how do we refactor them?</strong> Let's start with simple code:</p>
<pre><code class="language-php">&lt;?php

$callback = create_function('$matches', "return strtolower(\$matches[1]);");</code></pre>
<p><strong>How would you refactor this to anonymous function?</strong></p>
<p><em>(Pause for deep thinking...)</em></p>
<pre><code class="language-php">&lt;?php

$callback = function ($matches) {
    return strtolower($matches[1]);
};</code></pre>
<p>As you can see:</p>
<ul>
<li>1st argument = function arguments</li>
<li>2nd argument = function body</li>
</ul>
<p>Also, notice the <code>\$matches</code> → <code>$matches</code>. That's because quote escaping.</p>
<p><br></p>
<p>What about this one?</p>
<pre><code class="language-php">&lt;?php

create_function('$a,$b', "return \"min(b^2+a, a^2,b) = \".min(\$a*\$a+\$b,\$b*\$b+\$a);");</code></pre>
<p><strong>How would you refactor this to anonymous function?</strong></p>
<p><em>(Pause for deep thinking...)</em></p>
<pre><code class="language-php">&lt;?php

function ($a, $b) {
    return "min(b^2+a, a^2,b) = " . min($a * $a + $b, $b * $b + $a);
};</code></pre>
<p>The <code>"min(b^2+a, a^2,b) = "</code> is still a string, because it was escaped string in a string.</p>
<img src="http://www.memefaces.com/static/images/memes/2868.jpg">
<p>Too easy for you? Damn, you're smart.</p>
<p><br></p>
<p>Can you handle this?</p>
<pre><code class="language-php">&lt;?php

create_function('$b,$a', 'if (strncmp($a, $b, 3) == 0) return "** \"$a\" '.
            'and \"$b\"** Look the same to me! (looking at the first 3 chars)";');</code></pre>
<p><strong>How would you refactor this to anonymous function?</strong></p>
<p><em>(Pause for deep thinking...)</em></p>
<pre><code class="language-php">&lt;?php

function ($b, $a) {
    if (strncmp($a, $b, 3) == 0) {
        return "** \"{$a}\" and \"{$b}\"** Look the same to me! (looking at the first 3 chars)";
    }
};</code></pre>
<p><br></p>
<p>Ok, but you won't make this code snippet I found in Drupal/Wordpress:</p>
<pre><code class="language-php">&lt;?php

$this-&gt;map_xmlns_func = create_function('$p,$n', 'if(strlen($n[0])&gt;0) $xd
    .= ":{$n[0]}"; return "{$xd}=\"{$n[1]}\"";');</code></pre>
<p><strong>How would you refactor this to anonymous function?</strong></p>
<p><em>(Pause for deep thinking...)</em></p>
<pre><code class="language-php">&lt;?php

$this-&gt;map_xmlns_func = function ($p, $n) use ($xd) {
    if (strlen($n[0]) &gt; 0) {
        $xd .= ":{$n[0]}";
    }
    return "{$xd}=\"{$n[1]}\"";
};</code></pre>
<p>Who did forget <code>use ($xd)</code>? An anonymous function can't access variables that are not passed as arguments, so without this would crash.</p>
<p><br></p>
<p>And we could continue and continue with more <em>edgy</em> cases... but I bet <strong>you're looking for a solution for your specific function</strong>.
Well, you could ask on StackOverflow (<a href="https://www.google.com/search?q=&quot;deprecated&quot;+&quot;create_function&quot;+&quot;php&quot;+&quot;7.2&quot;+site%3Astackoverflow.com+-preg_replace&amp;oq=&quot;deprecated&quot;+&quot;create_function&quot;+&quot;php&quot;+&quot;7.2&quot;+site%3Astackoverflow.com+-preg_replace">181 results and counting</a>), but posting each of your 10 cases might get you banned. I have good news for you.</p>
<img src="/assets/images/posts/2018/create-function/sonic.png" class="img-thumbnail">
<p><br></p>
<p>Today in 2019 (almost there), you can instantly upgrade your code and it <strong>will take you less time to install &amp; run, then read this whole post so far</strong>.</p>
<p>Just setup <a href="https://github.com/rectorphp/rector">Rector</a> and run it:</p>
<pre><code class="language-bash">composer require rector/rector --dev</code></pre>
<pre><code class="language-php">&lt;?php

// rector.php

declare(strict_types=1);

use Rector\Php72\Rector\FuncCall\CreateFunctionToAnonymousFunctionRector;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();
    $services-&gt;set(CreateFunctionToAnonymousFunctionRector::class);
};</code></pre>
<pre><code class="language-bash">vendor/bin/rector process src</code></pre>
<p><br></p>
<p>Happy instant upgrading!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/12/17/function-create-function-is-deprecated-in-php-72-how-to-migrate</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 17 Dec 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-08-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Aug 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/12/17/function-create-function-is-deprecated-in-php-72-how-to-migrate#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Kirill Smelov&#039;s PHPStorm Tips in 9 Gifs ]]></title>
                <link>https://tomasvotruba.com/blog/2018/12/13/kirill-smelov-s-phpstorm-tips-in-9-gifs</link>
                <description><![CDATA[ <p>Last week we hosted <a href="https://twitter.com/wbasrs">Kirill Smelov</a> in <a href="https://www.meetup.com/friends-of-php-prague/events/256838837">Friends of PHP meetup</a> in Prague. Usually, I know most of tricks people show in PHPStorm talks or they pick too complicated cases - like SSH to Docker via PHPStorm GUI.
<br><br>
Kirill's talk was completely different, <strong>I could not stop taking notes</strong> about simple yet less known features of PHPStorm.
<br><br>
Instead of watching the 45-min talk, <strong>enjoy 9 cherry picked tips in 4,5-min gifs</strong>. I've dropped a few of my own daily habits. Enjoy!</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="1-ctor-when-you-add-a-property-via-constructor">1. Ctor - when you add a property via constructor</h2>
<img src="/assets/images/posts/2018/phpstorm-tips-in-gifs/ctor.gif" class="img-thumbnail">
<p><br><br><br></p>
<h2 id="2-post-fix">2. Post-Fix</h2>
<p>Do you type the same code around a variable zillion times?</p>
<img src="/assets/images/posts/2018/phpstorm-tips-in-gifs/postfix.gif" class="img-thumbnail">
<p><br><br><br></p>
<h2 id="3-forget-code-this-gt-code">3. Forget <code>$this-&gt;</code></h2>
<img src="/assets/images/posts/2018/phpstorm-tips-in-gifs/no-this.gif" class="img-thumbnail">
<p><br><br><br></p>
<h2 id="4-jump-to-next-use-of-method">4. Jump to Next use of Method</h2>
<img src="/assets/images/posts/2018/phpstorm-tips-in-gifs/jump-to-method.gif" class="img-thumbnail">
<p><br><br><br></p>
<h2 id="5-save-live-template">5. Save Live Template</h2>
<img src="/assets/images/posts/2018/phpstorm-tips-in-gifs/live-template.gif" class="img-thumbnail">
<p><br><br><br></p>
<h2 id="6-jump-to-another-method">6. Jump to Another Method</h2>
<img src="/assets/images/posts/2018/phpstorm-tips-in-gifs/method-jump.gif" class="img-thumbnail">
<p><br><br><br></p>
<h2 id="7-copy-fqn-class-or-file-line">7. Copy FQN class or File:line</h2>
<img src="/assets/images/posts/2018/phpstorm-tips-in-gifs/copy-reference.gif" class="img-thumbnail">
<p><br><br><br></p>
<h2 id="8-jump-to-previous-file-jump-to-previous-file">8. Jump to previous File → Jump to previous File</h2>
<img src="/assets/images/posts/2018/phpstorm-tips-in-gifs/recent-files.gif" class="img-thumbnail">
<p><br><br><br></p>
<h2 id="9-create-a-shortcut">9. Create a shortcut</h2>
<img src="/assets/images/posts/2018/phpstorm-tips-in-gifs/create-shortcut.gif" class="img-thumbnail">
<p><br><br><br></p>
<h2 id="how-to-work-with-shortcuts">How to Work With Shortcuts?</h2>
<p>Get inspired by watching others, but in the end - <strong>always respect your brain</strong>. Every one of you has <strong>different preferences</strong>.</p>
<p>Let say you create a shortcut &quot;new file&quot;:</p>
<ul>
<li>you might like starting letter of action: <code>nf</code></li>
<li>or 2 letters of each word: <code>nefi</code></li>
<li>or just one letter, because you use 1 action per letter: <code>n</code></li>
</ul>
<h2 id="punish-vs-typo-proof">Punish vs. Typo-Proof</h2>
<p>Also, as I love to type fast like crazy, I often make a typo or don't remember the exact 2 letters. Why punish yourself for a typo or not remembering the right combination?</p>
<p><strong>Add a fallback:</strong></p>
<ul>
<li><em>rf</em> → <code>return false;</code></li>
<li><em>refa</em> → <code>return false;</code></li>
<li><em>ref</em> → <code>return false;</code></li>
<li><em>reaf</em> → <code>return false;</code></li>
</ul>
<p>To give you an idea of my daily work, here is my current list of live templates:</p>
<img src="/assets/images/posts/2018/phpstorm-tips-in-gifs/my-live-templates.gif" class="img-thumbnail">
<h2 id="start-with-single-step">Start with Single Step</h2>
<p>I took notes about 15 items during Kirill's talk. They all were very interesting and I wanted to integrate at least 5 of them the very next day. I was excited about my skills going the speed of light. I put too much on myself, then I was afraid I will fail to integrate them all. So I ended-up using just one.</p>
<p>What could I do different? <strong>Pick just one tip</strong>. Master it and then move to another.</p>
<p><br></p>
<blockquote class="blockquote text-center">
    What is the 1 tip you'll use tomorrow?
</blockquote>
<p>Integrate it and if you want more, you can always come back to this post.</p>
<p><br></p>
<p>Thanks to <a href="https://plugins.jetbrains.com/plugin/7345-presentation-assistant">Presentation Assistant</a> for the green banner that helped to make this post.</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/12/13/kirill-smelov-s-phpstorm-tips-in-9-gifs</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 13 Dec 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/12/13/kirill-smelov-s-phpstorm-tips-in-9-gifs#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ The Rocket Science Behind Migration of Docblock Types to PHP Typehints ]]></title>
                <link>https://tomasvotruba.com/blog/2018/12/10/rocket-science-behind-migration-of-docblock-types-to-php-typehints</link>
                <description><![CDATA[ <p>What if you could add scalar typehints <code>int</code>, <code>bool</code>, <code>string</code>, <code>null</code> to all parameter type and return type by running a CLI command? But also all classes, <code>parent</code>, <code>self</code> and <code>$this</code>?
<br>
<br>
Do you think it's an easy task to move <code>@param int $number</code> to <code>(int $number)</code>?</p> ]]></description>
                <content:encoded><![CDATA[ <p>Sneak peak what this post will be about:</p>
<img src="/assets/images/posts/2018/rocket-typehints/example.gif" class="img-thumbnail">
<p><br></p>
<p>There are tools that convert <code>@param</code> and <code>@return</code> doc to types today - like coding standards:</p>
<pre><code class="language-diff"> /**
  * @param int $number
  * @param string|null $name
  * @return bool
  */
-public function isBigEnough($number, $name)
+public function isBigEnough(int $number, ?string $name): bool
 {
 }</code></pre>
<p>But its <strong>breaks your code</strong> because it <strong>only works with tokens of the current file</strong>. It's like robot seeing the text by <em>e a c h c h a r</em> instead of understanding a sentence in a paragraph context.</p>
<p><a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer/pull/4056#issuecomment-442264393" class="text-center"></p>
<img src="/assets/images/posts/2018/rocket-typehints/break.png" class="img-thumbnail">
<p></a></p>
<p>You probably assume coding standard would not break your code, but then you spend 2 days fixing invalid typehints.</p>
<p>&quot;How did the example above break your code?&quot;, you might ask. That one would pass. But what if your implements interface from <code>/vendor</code>?</p>
<pre><code class="language-php">&lt;?php

interface Sniff
{
    /**
     * @param int $position
     */
    function process(File $file, $position);
}</code></pre>
<p>Your code updated by coding standards:</p>
<pre><code class="language-diff"> &lt;?php

 final class SuperCoolSniff implements Sniff
 {
     /**
      * @param int $position
      */
-    public function process(File $file, $position)
+    public function process(File $file, int $position)
     {
         // ...
     }
 }</code></pre>
<p class="text-danger">
    <strong>PHP Fatal error</strong>:
    Declaration of <code>SuperCoolSniff::process(File $file, <strong>int $position)</strong></code>
    <br>
    must be compatible with <code>Sniff::process(File $file, <strong>$position</strong>)</code> ...
</p>
<p><br></p>
<p>&quot;Just fix these cases manually&quot;. Yes, you could do that. But <strong>why would you test your code manually</strong> after each commit if you can cover them with tests in a matter of minutes?</p>
<p><br></p>
<p>I wonder what Albert Einstein would say seeing you do that work manually:</p>
<blockquote class="blockquote text-center">
    If you can't ~~explain~~ <em>automate</em> it simply,
    <br>
    you don't understand it well enough.
</blockquote>
<p><br></p>
<h2 id="doc-type">Doc != Type</h2>
<p>The problematic itself is not as simple as moving <code>@return int</code> to <code>int</code>.</p>
<p>If there is <code>@param boolean</code>, can the typehint be<code>boolean</code>?</p>
<pre><code class="language-diff">/**
 * @param integer $value
 * @return boolean|NULL $value
 */
-function some($value)
+function some(int $value): ?bool
 {
 }</code></pre>
<p><em>Since PHP 7.0 <a href="http://php.net/supported-versions.php">is dead now</a>, we'll work with PHP 7.1 with <code>void</code> and nullables on board.</em></p>
<p>I did some research on <a href="https://github.com/nikic/PHP-Parser/issues">existing tools</a>, <a href="https://github.com/dunglas/phpdoc-to-typehint/issues">their issues</a> and <a href="https://github.com/symfony/symfony/compare/master...TomasVotruba:typehint-test?expand=1">Symfony code</a> and this is what I found:</p>
<pre><code class="language-diff">/**
 * @param false|true|null $value
 */
-function some($value)
+function some(?bool $value)
 {
 }</code></pre>
<pre><code class="language-diff">/**
 * @param $this $value
 */
-function some($value)
+function some(self $value)
 {
 }</code></pre>
<pre><code class="language-diff">/**
 * @param array|Item[]|Item[][]|null $value
 */
-function some($value)
+function some(?array $value)
 {
 }</code></pre>
<pre><code class="language-diff">/**
 * @param \Traversable|array $value
 */
-function some($value)
+function some(iterable $value)
 {
 }</code></pre>
<p>Docs are quite easy, just parse few strings and change them to types that PHP accepts. <a href="https://github.com/phpstan/phpdoc-parser">phpdoc-parser</a> by <em>Jan&nbsp;Tvrdík</em> helps it lot, together with <a href="https://github.com/Symplify/BetterPhpDocParser">format-preserving printer</a>.</p>
<p>Let's get harder...</p>
<h2 id="interface-children-traits-all-together">Interface, Children, Traits all Together</h2>
<p>What happens when your interface is changed?</p>
<pre><code class="language-diff"> interface WorkerInterface
 {
      /**
       * @param string $version
       */
-     public function work($version);
+     public function work(string $version);
 }</code></pre>
<p>You need to update all its children:</p>
<pre><code class="language-diff"> final class StrongWorker implements WorkerInterface
 {
      /**
       * @param string $version
       */
-     public function work($version)
+     public function work(string $version)
      {
      }
 }</code></pre>
<pre><code class="language-diff"> final class SmartWorker implements WorkerInterface
 {
      /**
       * @param string $version
       */
-     public function work($version)
+     public function work(string $version)
      {
      }
 }</code></pre>
<p>Don't forget the interface too:</p>
<pre><code class="language-diff"> interface CacheableWorkerIntreface extends WorkerInterface
 {
      /**
       * @param string $version
       */
-     public function work($version);
+     public function work(string $version);
 }</code></pre>
<p>And finally, one of my favorite cases I found in Symfony:</p>
<pre><code class="language-php"> &lt;?php

 final class SmartWorker implements WorkerInterface
 {
      use BasicWorkerTrait;
 }</code></pre>
<p>Oh no, we almost forgot to upgrade the trait that implements the interface indirectly:</p>
<pre><code class="language-diff"> &lt;?php

 trait BasicWorkerTrait
 {
-    public function work($version)
+    public function work(string $version)
     {
     }
 }</code></pre>
<p>Trait has no doc block, no interface, no class, no other trait in it. She has no idea she should be updated.</p>
<h2 id="code-self-code-amp-code-parent-code"><code>self</code> &amp; <code>parent</code></h2>
<p><code>self</code> and <code>parent</code> are unique in each classes.</p>
<pre><code class="language-diff"> &lt;?php

 class P
 {
 }

 class A extends P
 {
     /**
      * @return self
      */
-    public function foo()
+    public function foo(): self
     {
     }

     /**
      * @return parent
      */
-    public function bar()
+    public function bar(): parent
     {
     }
 }

 class B extends A
 {
-    public function foo()
+    public function foo(): A
     {
     }

-    public function bar()
+    public function bar(): P
     {
     }
 }</code></pre>
<h2 id="respect-the-namespace">Respect The Namespace</h2>
<p>Last but not least, different namespaces can cause another error:</p>
<pre><code class="language-diff"> &lt;?php

 namespace SomeNamespace;

 class A
 {
     /**
      * @return B ← "SomeNamespace\B"
      */
-    public function foo()
+    public function foo(): B
     {
     }
 }

 namespace AnotherNamespace;

 class C extends A
 {
-    public function foo()
+    public function foo(): B // missing class "AnotherNamespace\B"
+    public function foo(): \SomeNamespace\B // correct!
     {
     }
 }</code></pre>
<p><strong>Do you want more <em>wild code cases</em>?</strong> You'll find the full test battery of <a href="https://github.com/rectorphp/rector/tree/master/packages/Php/tests/Rector/FunctionLike">60 snippets here in Github test</a>.</p>
<p><br></p>
<p>This where <a href="/blog/2018/10/25/why-ast-fixes-your-coding-standard-better-than-tokens/">good old AST</a> comes the rescue. It knows all the nodes in your scope = not in <code>/vendor</code>, all children, all their implementations and used traits. It can traverse up and down this tree and see if the typehint would break something.</p>
<h2 id="give-your-code-a-typehint-facelift">Give Your Code a Typehint Facelift</h2>
<p><a href="http://php.net/supported-versions.php">PHP 7.3 is out and PHP 7.0</a> is in <span class="text-danger">end of life</span> for 6 days. This is the best time to go PHP 7.1.</p>
<h3 id="1-install">1. Install</h3>
<pre><code class="language-bash">composer require rector/rector --dev</code></pre>
<p><em>For those of you who have Rector already installed, use at least <code>0.3.24</code> version to get these features.</em></p>
<h3 id="2-create-config">2. Create Config</h3>
<pre><code class="language-php">&lt;?php

// rector.php

declare(strict_types=1);

use Rector\TypeDeclaration\Rector\FunctionLike\ParamTypeDeclarationRector;
use Rector\TypeDeclaration\Rector\FunctionLike\ReturnTypeDeclarationRector;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();
    $services-&gt;set(ParamTypeDeclarationRector::class);
    $services-&gt;set(ReturnTypeDeclarationRector::class);
};</code></pre>
<h3 id="3-run">3. Run</h3>
<pre><code class="language-bash">vendor/bin/rector process src --dry-run

# all good? instantly upgrade your code ↓
vendor/bin/rector process src</code></pre>
<p>As there are many ways class-like elements can be connected - like the one with the trait that was accidentally part of interface -, there might be some more cases. <strong><a href="https://github.com/rectorphp/rector/issues">Report everything</a> you found</strong>, so one day this will be able to refactor all PHP Github code without breaking anything.</p>
<p><br></p>
<p>And when you're done, you can <a href="/blog/2017/12/17/new-in-symplify-3-doc-block-cleaner-fixer/">get your docblocks cleaned</a> :)</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/12/10/rocket-science-behind-migration-of-docblock-types-to-php-typehints</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 10 Dec 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-08-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Aug 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/12/10/rocket-science-behind-migration-of-docblock-types-to-php-typehints#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Don&#039;t Learn to Code ]]></title>
                <link>https://tomasvotruba.com/blog/2018/12/06/dont-learn-to-code</link>
                <description><![CDATA[ <p>Do you know what each letter in S.O.L.I.D. means? Do you know commonly used design patterns? Do you know the most popular PHP frameworks? Do know what <a href="/blog/2018/05/21/is-your-code-readable-by-humans-cognitive-complexity-tells-you/">cyclomatic complexity</a> is?
<br><br>
Don't learn to code. <strong>Learn how to think.</strong></p> ]]></description>
                <content:encoded><![CDATA[ <p><strong>Ask more different people on the same topic</strong>. It's very easy to have <a href="https://en.wikipedia.org/wiki/Confirmation_bias">confirmation bias</a> if you're in a team. In time, everyone tends to think the same and it's very difficult to get creative or critical thinking. Go to <a href="https://friendsofphp.org">meetup</a> and ask what advantages has Docker in your situation. Go to <a href="https://www.reddit.com/r/PHP">reddit</a> and ask for other projects that sell tickets online. Go to Slack, <a href="https://pehapkari.herokuapp.com">Pehapkari</a> or <a href="https://symfony.com/slack-invite">Symfony</a> one and ask for tips to migrate to Symfony 4.2 and PHP 7.3. There is a huge chance you're not the first who has this idea.</p>
<p><br></p>
<p><strong>Beware of a <em>cult</em> thinking.</strong> When you're in a team where your team-leader has strong opinions, it's very probably there is polarized thinking. E.g. Nette, Doctrine and PostgreSQL is the best combination for big PHP applications.</p>
<blockquote class="blockquote text-center">
    "Do this." vs. "I prefer this, because..."
</blockquote>
<p>But do you know why? If you do, take one more step: do you know why do you think that? Have you read it somewhere, did you best friends told or did you actually experience it? <em>Cult thinking</em> is also common for people who followed trend-setters in PHP community - those who speak, write, tweet or comments on Reddit and StackOverflow the internet. I meet many people who read my blog and think monorepo is the best approach to work with repositories. But why, when do you use monorepo and when rather not? They don't know. Don't be afraid to question me or other people like me, be <a href="/blog/2018/03/19/how-to-criticize-like-a-senior-programmer/">critical</a> so we can both learn something. I've noticed it's common for lecturers and speakers like this to repeat what they've learned in last 10 years of the coding. Today is the slowest changing day for the rest of the humankind. Everything changes so help us see it so we can <a href="/blog/2018/12/03/it-bloggers-deprecate-your-posts-to-stop-spreading-legacy/">share back valid ideas</a>.</p>
<p>Ask in comments, learn how to disagree - there is a beautiful 6-point overview on how to <a href="http://www.paulgraham.com/disagree.html">disagree</a> by Paul Graham.</p>
<p><br></p>
<p><strong>Start with why.</strong> Do you know <a href="https://i.pinimg.com/originals/10/5c/fe/105cfe0d5374447963bcfea7e9c4ffe8.jpg">Simon Sinek</a>? If so, just skip this. If not, check his <a href="https://www.ted.com/talks/simon_sinek_how_great_leaders_inspire_action">Ted talk</a>. This changed my view on IT meetings in companies and meetups with PHP folks. Before I asked &quot;why&quot;, I only memorized other people's opinions. Now I feel I learn something.</p>
<p><br></p>
<p><strong>If nobody is doing it yet, you're just the first one who talks about it.</strong> Don't be afraid to <a href="https://austinkleon.com/show-your-work">share your work</a> and be open to other innovative ideas. Not everything under 1000 downloads is useless. Even Symfony had once had just a couple of downloads and had to go to market that was already dominated by established PHP frameworks. When I realized that AST can be used to refactor all PHP code on Github in a matter of hours from PHP 5.3 to 7.1 I pushed the idea back for many months because I thought somebody had to do that already. It's basically PHP CS Fixer, just with AST instead of tokens. I believe you, my dear reader, have a couple of ideas like this - &quot;it must exist somewhere&quot;. If you're not sure, go to <a href="https://packagist.org">packagist</a> and do little research. If it's not there, you have a go for new Github repository.</p>
<p><br></p>
<p>So go out, doubt, learn and play, because <strong>you already have the best sources</strong> to find out your answer.</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/12/06/dont-learn-to-code</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 06 Dec 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/12/06/dont-learn-to-code#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ IT Bloggers, Deprecate Your Posts to Stop Spreading Legacy ]]></title>
                <link>https://tomasvotruba.com/blog/2018/12/03/it-bloggers-deprecate-your-posts-to-stop-spreading-legacy</link>
                <description><![CDATA[ <p>Do you blog about IT? Do you blog for more than a year? There is a big chance <strong>you're spreading already outdated information</strong>.
<br>
<br>
The problem is, your readers see that as <em>the best practise</em>... did you know the Earth is flat?
<br>
<br>
How to prevent that and keep your content quality high?</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="the-em-long-tail-em-effect">The <em>Long-Tail</em> Effect...</h2>
<p>...that's spreads fake news.</p>
<p>If you answered &quot;yes&quot; twice to the perex, your posts are probably under long-tail effect.</p>
<img src="/assets/images/posts/2018/version-blog/long-tail.gif" class="img-thumbnail">
<p>They're frequently shared in the start, but the older they're, their total popularity rises. You might ask, <strong>what's the problem with that?</strong></p>
<p>Let's say you want to know how to use parameters in Symfony controller. What will you do? Google to <a href="https://stackoverflow.com/search?q=symfony+get+parameter+in+controller">StackOverflow</a>:</p>
<img src="/assets/images/posts/2018/version-blog/answer.png" class="img-thumbnail">
<p>Click <a href="https://stackoverflow.com/questions/13901256/how-do-i-read-from-parameters-yml-in-a-controller-in-symfony2/13901273#13901273">the first answer</a> and copy-paste the solution:</p>
<img src="/assets/images/posts/2018/version-blog/popular.png" class="img-thumbnail">
<p>We know it's outdated for years, but <strong>reader has no idea</strong>. He or she googled &quot;parameter Symfony Controller&quot; and just go with the most voted solution. I'd do it too.</p>
<p>The <strong>second answer for Symfony 3+</strong> that was released in 2016 has much less attention:</p>
<img src="/assets/images/posts/2018/version-blog/second.png" class="img-thumbnail">
<p>When the <em>long-tail effect</em> kicks in for this answer, it will be outdated. There will be also new answer for Symfony 6 with only 13 votes that no-one will read.</p>
<p>Legacy is spreading, Dark Legacy Lord is happy. <em>That's why <a href="/blog/2018/06/28/dont-read-books/">Don't Read books</a>.</em></p>
<h3 id="old-outdated">Old !== Outdated</h3>
<p>If time was the only issue, you could just limit Google results to last year. But it's not that easy.</p>
<p><strong>The old post doesn't mean outdated</strong>. One example for all - Matthias Noback, my favorite PHP writer, wrote about <a href="https://matthiasnoback.nl/2014/06/how-to-create-framework-independent-controllers">decoupled controllers as services</a> in 2014. It's still valid and we're just almost getting there now.</p>
<h2 id="how-to-make-it-right">How to Make it Right?</h2>
<p>How can I even write a post about PHP when I know they'll be useless in a few years? Well, you can <a href="/blog/2019/09/16/why-software-articles-must-be-ci-tested/">tests your posts</a> to automate this, but it takes time and setup.</p>
<p>Right now, <strong>I feel it's our responsibility as writers to inform our readers</strong> what is good and tasty to eat and what id rotten old trash.</p>
<p class="text-danger"><strong>Inform people clearly in the start of the page.</strong></p>
<p><br></p>
<p><a href="https://symfony.com/doc/3.1/components/console.html">Symfony blog</a> &nbsp;<em class="fas fa-lg fa-check text-success"></em></p>
<img src="/assets/images/posts/2018/version-blog/symfony-warning.png">
<p><a href="https://mattstauffer.com/blog/how-to-organize-class-namespaces">Matt Stauffer blog</a> &nbsp;<em class="fas fa-lg fa-check text-success"></em></p>
<img src="/assets/images/posts/2018/version-blog/update.png" class="img-thumbnail">
<p>It seems like a small detail, but it really helps people who are new in the fields to navigate differentiate between useless and good content.</p>
<h2 id="when-is-the-best-time-now">When is the Best Time? Now!</h2>
<p>It's not an urgent call, December is really the best month to do this.</p>
<p>Why? A <a href="[/blog/2017/10/30/what-can-you-learn-from-menstruation-and-symfony-releases/]">new Symfony and PHP is released</a> - Symfony 4.2 is out now (this blogs is running on it already) and PHP 7.3 is around corner.</p>
<p>It can be as easy as upgrade <code>composer.json</code>:</p>
<pre><code class="language-diff"> {
     "require": {
-        "symfony/symfony": "^4.1"
+        "symfony/symfony": "^4.2"
     }
 }</code></pre>
<h2 id="practical-example">Practical Example</h2>
<p>&quot;Code, not words!&quot; I hear you.</p>
<p>I'm working on such PR right now for this blog - <a href="https://github.com/TomasVotruba/tomasvotruba.com/pull/582">see it on Github</a>.</p>
<h3 id="what-changes-are-included">What Changes are Included?</h3>
<ul>
<li>Symfony <del>4.1</del> → 4.2</li>
<li>deprecate Statie posts → official documentation <a href="https://www.statie.org">Statie.org</a></li>
<li>deprecate <a href="/blog/2017/06/26/php-object-calisthenics-rules-made-simple-version-3-0-is-out-now/">Object Calisthenics post</a> → <a href="/blog/2018/05/21/is-your-code-readable-by-humans-cognitive-complexity-tells-you/">Cognitive Complexity</a> instead</li>
<li><a href="/blog/2017/08/14/how-to-apply-nette-coding-standard-in-your-project/">Nette\CodingStandard post</a> - <del>0.5</del> → 2.0</li>
<li>deprecate <a href="/blog/2017/06/12/how-to-require-minimal-code-coverage-for-github-pull-requests-with-coveralls/">How to Require Minimal Code Coverage for Github Pull-Requests with Coveralls</a> - there is no added value</li>
<li>news in Symplify 2, 3 and 4 + reflect deprecations and removed classes</li>
<li>and few more...</li>
</ul>
<p>Notice, the depreciation is not removing. <strong>I always try suggests a link to go or at least keywords to Google or provide &quot;why&quot; you should not do that at all</strong>. That way people know where to go, instead of just bumping to a wall.</p>
<h2 id="step-up-and-help-spreading-up-to-date-information">Step-Up and Help Spreading Up-To-Date Information</h2>
<p><strong>It's ok to make mistake and be wrong</strong>. It's also normal to change your opinion based on a change in the worlds - that's what happened to me with <a href="/blog/2017/03/27/why-is-doctrine-dying/">Why Doctrine is Dying</a> post.</p>
<p>When I wrote this post, the situation was really frustrating, no vision, no new features, and passive community. That's change during the following year and even though I didn't use Doctrine, it felt wrong having this post still up, even though it was not in sync with reality.</p>
<img src="/assets/images/posts/2018/version-blog/deprecated.png">
<p>That's why I deprecated original post and released a new one <a href="/blog/2018/07/09/6-reasons-why-doctrine-is-alive-and-kicking/">6 Reasons Why Doctrine is Alive and Kicking</a>.</p>
<p><br></p>
<p>Happy upgrading and thank you for doing this for PHP community!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/12/03/it-bloggers-deprecate-your-posts-to-stop-spreading-legacy</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 03 Dec 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/12/03/it-bloggers-deprecate-your-posts-to-stop-spreading-legacy#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Manage Configuration in Symfony without Bundle, Extension, and Configuration? ]]></title>
                <link>https://tomasvotruba.com/blog/2018/11/29/how-to-manage-configuration-in-symfony-without-bundle-extension-and-configuraiton</link>
                <description><![CDATA[ <p>Symfony Flex is moving towards of bundle-less applications. That doesn't mean you should create a monolith code in <code>/src</code> as fast as possible, but rather control everything via <code>.yaml</code> and <code>.env</code> files. It's takes <a href="/blog/2017/05/07/how-to-refactor-to-new-dependency-injection-features-in-symfony-3-3/#refactor-service-config-in-5-steps">few steps</a> to <strong>remove extension and move to import</strong> of <code>services.yaml</code>.
<br>
<br>
But how would you approach a simple task <strong>as <em>setup an account number</em> parameter</strong>?</p> ]]></description>
                <content:encoded><![CDATA[ <p>If you hear about the <strong>trend of &quot;no-bundle&quot; application</strong> for the first time, is very nicely summarized in 10 points in <a href="https://symfonycasts.com/blog/AppBundle">SymfonyCasts</a>. Go check it, I'll wait here.</p>
<img src="/assets/images/posts/2018/bundle-less/bundle-less.png" class="img-thumbnail" style="max-width:400px">
<h2 id="1-how-this-affected-service-registration">1. How this Affected Service Registration?</h2>
<p>Before you need 3 classes to get services to the application:</p>
<pre><code class="language-bash">/app
    AppKernel.php
/packages
    /accountant
        /src
            /DependencyInjection
                AccountantExtension.php
            AccountantBundle.php
        /config
            services.yaml</code></pre>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

namespace App;

use Project\Accountant\AccountantBundle;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\HttpKernel\Bundle\BundleInterface;

final class AppKernel extends Kernel
{
    /**
     * @return BundleInterface[]
     */
    public function registerBundles(): array
    {
        return [new AccountantBundle];
    }

    // ...
}</code></pre>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

namespace Project\Accountant;

use Project\Accountant\DependencyInjection\AccountantExtension;
use Symfony\Component\HttpKernel\Bundle\Bundle;

final class AccountantBundle extends Bundle
{
 public function getContainerExtension()
    {
        return new AccountantExtension();
    }
}</code></pre>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

namespace Project\Accountant\DependencyInjection;

use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Extension\Extension;
use Symfony\Component\DependencyInjection\Loader\YamlFileLoader;
use Symfony\Component\Config\FileLocator;

final class AccountantExtension extends Extension
{
    public function load(array $configs, ContainerBuilder $container)
    {
        $loader = new YamlFileLoader($container, new FileLocator(__DIR__.'/../../config'));
        $loader-&gt;load('services.yaml');
    }
}</code></pre>
<pre><code class="language-yaml"># packages/accountant/config/services.yaml
services:
    Project\Accountant\:
        resource: "../src"</code></pre>
<p>Now we can drop all of the PHP <a href="https://matthiasnoback.nl/2013/10/symfony2-some-things-i-dont-like-about-bundles">magic code</a> down:</p>
<pre><code class="language-diff"> /app
     AppKernel.php
 /packages
     /accountant
         /src
-            /DependencyInjection
-                AccountantExtension.php
-            AccountantBundle.php
         /config
             services.yaml</code></pre>
<p>...and load services in local config:</p>
<pre><code class="language-yaml"># app/config.yaml
imports:
   - { resource: "packages/accountant/config/services.yaml" }</code></pre>
<p>Or we can set this up just once for all <a href="/blog/2017/12/25/composer-local-packages-for-dummies/">local packages</a> with <a href="https://symfony.com/blog/new-in-symfony-3-3-import-config-files-with-glob-patterns">glob</a>:</p>
<pre><code class="language-yaml"># app/config.yaml
imports:
   - { resource: "packages/*/config/services.yaml" }</code></pre>
<p><strong>We deleted all PHP files and add 2 lines to config</strong> - that's what a good trade, right? Much less code can go wrong and the result is easy to read even for a programmer who was just hired today.</p>
<p><br></p>
<p>I think most of you already know this configuration shift and use it for months, right? Now the harder part, that many people still struggle with.</p>
<h2 id="2-how-this-affected-configuration">2. How this Affected Configuration?</h2>
<p>In the &quot;accountant&quot; package we have a service that sends money... no ordinary money, Bitcoins! And we need to <strong>set an account number parameter</strong> to it:</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

namespace Project\Accountant;

final class BitcoinSender
{
    /**
     * @param string
     */
    private $accountNumber;

    public function __construct(string $accountNumber)
    {
        $this-&gt;accountNumber = $accountNumber;
    }

    public function donateTo(float $amount, string $targetAccountNumber)
    {
        // move $amount
        // from $this-&gt;accountNumber
        // to $targetAccountNumber
    }
}</code></pre>
<p>The configuration of <code>$accountNumber</code> value in <a href="https://stovepipe.systems/post/creating-bundle-configuration"><em>bundle-school</em> paradigm</a> looks like this:</p>
<pre><code class="language-diff"> # packages/accountant/config/services.yaml
+accountant:
+     account_number: "123_secret_hash"
+
 services:
     Project\Accountant\:
         resource: "../src"</code></pre>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

namespace Project\Accountant;

use Project\Accountant\DependencyInjection\AccountantExtension;
use Symfony\Component\HttpKernel\Bundle\Bundle;

final class AccountantBundle extends Bundle
{
    public function getContainerExtension()
    {
        return new AccountantExtension();
    }
}</code></pre>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

namespace Project\Accountant\DependencyInjection;

use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Extension\Extension;

final class AccountantExtension extends Extension
{
    public function load(array $configs, ContainerBuilder $container)
    {
        $configuration = new AccountantConfiguration();
        $config = $this-&gt;processConfiguration($configuration, $configs);

        // for bitcoin sender
        $container-&gt;getDefinition('Project\Accountant\BitcoinSender')
            -&gt;setArgument('accountNumber', $config['account_number']);

        // for further use (optional)
        // $container-&gt;setParameter('account_number', $config['account_number']);
    }
}</code></pre>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

namespace Project\Accountant\DependencyInjection;

use Symfony\Component\Config\Definition\Builder\TreeBuilder;
use Symfony\Component\Config\Definition\ConfigurationInterface;

final class AccountantConfiguration implements ConfigurationInterface
{
    public function getConfigTreeBuilder(): TreeBuilder
    {
        $treeBuilder = new TreeBuilder();
        $rootNode = $treeBuilder-&gt;root('accountant');
        $rootNode
            -&gt;children()
                -&gt;scalarNode('account_number')
                -&gt;end()
            -&gt;end();

        return $treeBuilder;
    }
}</code></pre>
<p>All this fuss just to <strong>load single parameter</strong>? Not anymore:</p>
<pre><code class="language-diff"> /app
     AppKernel.php
 /packages
     /accountant
         /src
-            /DependencyInjection
-                AccountantExtension.php
-                AccountantConfiguration.php
-            AccountantBundle.php
         /config
             services.yaml</code></pre>
<p>All cleaned up. We run the app and...</p>
<p><em>ERROR: &quot;$accountNumber&quot; argument was not set</em></p>
<p>Damn! What now?</p>
<h2 id="what-options-do-we-have">What Options do We Have?</h2>
<h3 id="1-keep-the-extension">1. Keep the Extension</h3>
<pre><code class="language-php">&lt;?php

$container-&gt;getDefinition('Project\Accountant\BitcoinSender')
    -&gt;setArgument('accountNumber', $config['account_number']);</code></pre>
<p><em class="fas fa-lg fa-times text-danger"></em></p>
<p>We want to get rid of this code, not to maintain it.</p>
<h3 id="2-set-parameter-manually-in-the-config">2. Set Parameter Manually in the Config</h3>
<pre><code class="language-diff"> # packages/accountant/config/services.yaml
-accountant:
+parameters:
     account_number: "123_secret_hash"

 services:
     Project\Accountant\:
         resource: "../src"

+    Project\Accountant\BitcoinSender:
+        arguments:
+            $accountNumber: "%account_number%"</code></pre>
<p>We want config to use PSR-4 autodiscovery to it's fullest potential, not go back to manual service definitions.</p>
<h3 id="3-bind-the-parameter">3. Bind the parameter</h3>
<p>Good idea! Since <a href="https://symfony.com/blog/new-in-symfony-3-4-local-service-binding">Symfony 3.4</a> we can do this:</p>
<pre><code class="language-diff"> # packages/accountant/config/services.yaml
-accountant:
+parameters:
     account_number: "123_secret_hash"

 services:
+    _defaults:
+        bind:
+            $accountNumber: "%account_number%"
+
     Project\Accountant\:
         resource: "../src"</code></pre>
<p><em class="fas fa-lg fa-check text-success"></em></p>
<h3 id="4-autowire-the-parameter">4. Autowire the Parameter</h3>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

namespace App;

use Symplify\PackageBuilder\DependencyInjection\CompilerPass\AutowireArrayParameterCompilerPass;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\HttpKernel\Kernel;

final class AppKernel extends Kernel
{
    protected function build(ContainerBuilder $container): void
    {
        $container-&gt;addCompilerPass(new AutowireArrayParameterCompilerPass());
    }
}</code></pre>
<p>You set up this only once, but then you can enjoy short and clear configs:</p>
<pre><code class="language-diff"> # packages/accountant/config/services.yaml
-accountant:
+parameters:
     account_number: "123_secret_hash"

 services:
     Project\Accountant\:
         resource: "../src"</code></pre>
<p><em class="fas fa-lg fa-check text-success"></em></p>
<p>This compiler autowires parameters by convention:</p>
<ul>
<li><code>%parameter_name%</code> =&gt; <code>$parameterName</code></li>
</ul>
<p>You can <a href="/blog/2018/11/05/do-you-autowire-services-in-symfony-you-can-autowire-parameters-too/">read more about it here</a>.</p>
<h2 id="final-results">Final Results</h2>
<p>So how does our bundle-less application looks like in the end?</p>
<ul>
<li>we got rid of the <code>Configuration</code> class - no more tree fluent builds for a bunch of parameters</li>
<li>we got rid of the <code>Extension</code> class - no more relative paths</li>
<li>we got rid of the <code>Bundle</code> class - no more <code>createExtension()</code>, <code>getExtension()</code> typos</li>
<li>we gain parameter binding/autowiring</li>
</ul>
<p><strong>We work with configs that clearly state all we parameters and services we use</strong>. Explicit, clear, in one place.</p>
<p><br></p>
<p>How do you approach parameter for your packages (previously bundles) in Symfony 4 applications?</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/11/29/how-to-manage-configuration-in-symfony-without-bundle-extension-and-configuraiton</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 29 Nov 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/11/29/how-to-manage-configuration-in-symfony-without-bundle-extension-and-configuraiton#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ 14 Tips to Write PHP Code that is Hard to Maintain and Upgrade ]]></title>
                <link>https://tomasvotruba.com/blog/2018/11/26/14-tips-to-write-php-code-that-is-hard-to-maintain-and-upgrade</link>
                <description><![CDATA[ <p>Today I'll show you how to own your company. All you need to do is write code that no-one can read, is hard to refactor and creates technical debt. It's not easy, because if other programmers spot you're writing legacy code, you're busted.
<br><br>
If you keep a low profile of very smart architect and do it right, you'll be the only one in the company who knows what is going on and you'll have a value of gold. Learn how to be <strong>successful living vendor lock</strong>!</p> ]]></description>
                <content:encoded><![CDATA[ <h3 id="3-signs-of-living-vendor-lock-in">3 Signs of Living Vendor Lock-In</h3>
<p><code>/vendor</code> is a directory in your project with all the packages dependencies. <a href="https://en.wikipedia.org/wiki/Vendor_lock-in">Vendor lock-in</a> is life-death dependency company on you.
It's like having a baby - <strong>you have to take care of it for the next 18 years</strong> (at least):</p>
<img src="/assets/images/posts/2018/vendor/free-hug.jpg" class="img-thumbnail">
<p>How to make company code depend on you? You want to write a code that static analysis and instant upgrades are very hard to use. Where Rector could help you to turn not-so-bad-code to the modern code base in a matter of few weeks, here will fail hard and the only way out will be greenfield review.</p>
<p><a href="http://www.osnews.com/story/19266/WTFs_m"></p>
<img src="/assets/images/posts/2018/vendor/wtf.jpg" class="img-thumbnail">
<p></a></p>
<p>But not an obvious way like the right one. The company can't find out! You have to be sneaky as <em>Eliot</em> to <em>E-Corp</em>.</p>
<p>Here are 15 examples of such <strong>code collected from existing vendor lock-in projects</strong> I reviewed:</p>
<h2 id="1-never-use-code-final-code">1. Never use <code>final</code></h2>
<p>Programmers want freedom, users desire options. Why setting healthy boundaries, when you can set them free:</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

namespace YourProject;

class PriceCalculator
{

}</code></pre>
<p>That way, anyone can extend your class:</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

class BetterPriceCalculator extends PriceCalculator
{

}</code></pre>
<p>Also, it's <a href="https://github.com/cpliakas/git-wrapper/issues/159">needed for mocking</a> and there is no <a href="https://github.com/dg/bypass-finals">way around that</a>. There's not even <a href="https://ocramius.github.io/blog/when-to-declare-classes-final">8 reasons</a> to use <code>final</code> anywhere anytime.</p>
<h2 id="2-use-code-protected-code-instead-of-code-private-code">2. Use <code>protected</code> instead of <code>private</code></h2>
<p>What is opened class good for with <code>private</code> methods? You need to use <code>protected</code> method to be really opened:</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

class PriceCalculator
{
    protected function calculatePrice(Product $product)
    {
        // ...
    }
}</code></pre>
<p>Be careful, <code>public</code> would be too obvious to anyone who ever heard that SOLID and other might find out what's your real intention.</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

class BetterPriceCalculator extends PriceCalculator
{
    protected function calculatePrice(Product $product)
    {
        return 1000;
    }
}</code></pre>
<h2 id="3-use-non-string-method-names">3. Use Non-String Method Names</h2>
<p>This is tricky for real professionals - I hope you're to look smart in front of your team! If there is a way</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

class PriceCalculator
{
    public function calculateDiscount(Product $product, string $type)
    {
        $methodName = 'calculate' . $type; // great job!

        return $this-&gt;$methodName($product);
    }
}</code></pre>
<p><code>$methodName</code> is a string - it can be anything, so freedom &amp; dynamic!</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

class ProductController
{
    public function orderProductAction(Request $request)
    {
        $form = new OrderProductForm;
        $form-&gt;afterSubmit = [$this, 'processForm']; // great job!

        $form-&gt;handle($request);
    }

    public function processForm(Request $request)
    {
        // ...
    }
}

class Form
{
    public $afterSubmit;

    public function handle(Request $request)
    {
        // ...

        call_user_func($this-&gt;afterSubmit, $request);
    }
}</code></pre>
<p>Why is this so well written? Imagine we're looking at the legacy code - huge code base, 100 of places where the method is used at.
Try to rename <code>processForm</code> to <code>processOrderProduct</code> - AST is not able to detect method name, all it sees is a string. Instant upgrade impossible and you have to do it all manually, good job!</p>
<h2 id="4-don-t-always-use-code-psr-4-code">4. Don't Always use <code>PSR-4</code></h2>
<p>Classes need to be autoloaded to be parsed to AST. PSR-4 section in <code>composer.json</code> solves this easily:</p>
<pre><code class="language-json">{
    "autoload": {
        "psr-4": {
            "App\\": "src"
        }
    }
}</code></pre>
<p>Damn, now every class is easy to find and respects <code>file.php</code> → <code>Class</code> naming. <strong>How could you complicate this?</strong></p>
<h3 id="put-more-classes-into-1-file">Put more Classes into 1 file</h3>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

class FatalException extends Exception
{

}

class ApplicationException extends Exception
{

}

class RequestException extends Exception
{

}</code></pre>
<p>You have 1 file instead of 3 - you saved so much disk space!</p>
<h3 id="use-small-case-naming">Use Small Case Naming</h3>
<pre><code class="language-bash">/app
   /Controller
       ProductController.php</code></pre>
<p>↓</p>
<pre><code class="language-bash">/app
   /controller
       ProductController.php</code></pre>
<p>PSR-4 is unable to find this file, great job!</p>
<h3 id="don-t-load-tests">Don't Load Tests</h3>
<p>Let's say your <code>/app</code> code is loaded by PSR-4. You also have covered it with tests. If you run instant upgrades, it should actually upgrade tests too. Damn.</p>
<p>If you have this section, drop it:</p>
<pre><code class="language-diff">-{
-    "autoload-dev": {
-        "psr-4": {
-            "App\\Tests\\": "tests"
-        }
-    }
-}</code></pre>
<p>PHPUnit uses its own autoload anyway.</p>
<h2 id="5-use-your-own-autoloader">5. Use Your Own Autoloader</h2>
<p>While you're at it, follow PHPUnit example. And not only PHPUnit. Have you ever wondered why there is missing <a href="https://github.com/squizlabs/PHP_CodeSniffer/blob/b53f64e10e41aa754ffa7c11999af1881e6c1780/composer.json"><code>"autoload"</code> section PHP_CodeSniffer <code>composer.json</code></a>
Make your own autoloader - using <code>spl_autoload_register</code> or <a href="https://github.com/nette/robot-loader">nette/robot-loader</a>. That way instant upgrade tools get confused and probably won't work. Good job!</p>
<h2 id="6-hide-your-dependencies-in-constructor">6. Hide Your Dependencies in Constructor</h2>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

class PackagistApi
{
    public function getPackagesByOrganization(string $organization): array
    {
        $guzzle = new Guzzle\Client();
        $response = $guzzle-&gt;get('https://packagist.org/packages/list.json?vendor=' . $organization);

        // ...

        return $packages;
    }
}

$packagistApi = new PackagistApi;
$shopsysPackages = $packagistApi-&gt;getPackagesByOrganization('shopsys');</code></pre>
<p>When you send such code a to code-review, you are provoking this comment:</p>
<ul>
<li>&quot;<code>PackagistApi</code> hides <code>Guzzle\Client</code> dependency. Put that into constructor injection&quot;</li>
</ul>
<p>Busted! But there is a way <strong>to improve your chances to make this pass</strong> and still skip constructor injection:</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

class PackagistApi
{
    private $guzzle;

    public function __construct()
    {
        $this-&gt;guzzle = new Guzzle\Client();
    }

    public function getPackagesByOrganization(string $organization): array
    {
        $response = $this-&gt;guzzle-&gt;get('https://packagist.org/packages/list.json?vendor=' . $organization);

        // ...

        return $packages;
    }
}</code></pre>
<h2 id="7-put-different-kinds-of-objects-to-one-directory">7. Put Different Kinds of Objects to One Directory</h2>
<p>Do you love DDD? Everyone loves it! Thanks to DDD you have socially accepted reason to use directory names based on categories:</p>
<pre><code class="language-bash">/app
    /Controller
        ProductController.php
    /Entity
        Product.php
    /Repository
        ProductRepository.php</code></pre>
<p>↓</p>
<pre><code class="language-bash">/app
    /Product
        ProductController.php
        Product.php
        ProductRepository.php</code></pre>
<p>Who needs standards! It's this nice? Now no-one can find any classes by expected directory name.</p>
<p>As a bonus, service auto-discovery is not possible anymore:</p>
<pre><code class="language-yaml">services:
    App\:
        resource: '../app'
        exclude: '../app/{Entity}'</code></pre>
<p>Great job!</p>
<h2 id="8-use-annotations-to-define-magic-methods">8. Use Annotations to Define Magic Methods</h2>
<p>Now you know how to use strings in method names from tip #3. Let's get this to the next level. I've already used this tip above:</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

$guzzle = new Guzzle\Client();
$guzzle-&gt;get('...');</code></pre>
<p>What happens when you type <code>get</code> method? The IDE will tell you the <code>get</code> method exists. You can adapt this pattern to your code too!</p>
<p>Then you rename it with instant upgrade tools, but it will fail. It's not a string... so what the hack?</p>
<p>It's only <a href="https://github.com/guzzle/guzzle/blob/8db1967d92f55de1b94b175478ed16a7dfc53a90/src/Client.php#L11-L24">an annotation</a>:</p>
<img src="/assets/images/posts/2018/vendor/magic-annotation.png" class="img-thumbnail">
<p>You now have a reason to add <code>__call</code> integration and combine method names with many more strings. Great job!</p>
<h2 id="9-use-traits-with-annotations-to-define-magic-methods">9. Use Traits with Annotations to Define Magic Methods</h2>
<p>You can take this to one more level!</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

class ApiCaller
{
   use GetMethodTrait;
}

/**
 * @method getPackagesByOrganization($organization)
 * @method getPackagesByCategory($category)
 */
trait GetMethodTrait
{
}</code></pre>
<p>Goodbye automated typehints and static analysis!</p>
<h2 id="10-don-t-use-a-different-naming-to-separate-code-interface-code-code-trait-code-from-code-class-code">10. Don't use a Different Naming to separate <code>Interface</code>, <code>Trait</code> from <code>Class</code></h2>
<p>Oh, I actually made a mistake. Above I wrote <code>GetMethodTrait</code>, that might actually help the user and tool to guess it's a trait:</p>
<pre><code class="language-bash">- ProductInterface
- ProductTrait
- Product</code></pre>
<p>We don't want that. Let's take another cool tip from DDD and make them look the same ↓</p>
<pre><code class="language-bash">- Product
- Product
- Product</code></pre>
<p>Now no-one can use Finder to find all traits or interface. Each file has to be parsed now and that's super slow. Good job!</p>
<h2 id="11-use-as-short-naming-as-possible">11. Use as Short Naming as Possible</h2>
<p>Long class names are annoying to read. Just compare yourself:</p>
<pre><code class="language-/ash">- YamlParser
- YamlFileParser
- LatteTemplateParser
- LatteParser
- XmlParser</code></pre>
<p>This is much better ↓</p>
<img src="/assets/images/posts/2018/vendor/omg-naming.gif" class="img-thumbnail">
<p>It also it also increases chances to bother with manual aliasing:</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

use Yaml\Parser;
use Latte\Parser as LatteParser;
use Xml\Parser as XmlParser;

class ProductXmlFeedCrawler
{

}</code></pre>
<p>WTF, it's so good!</p>
<h2 id="12-don-t-use-a-different-naming-to-separate-code-abstract-code-classes">12. Don't use a Different Naming to separate <code>Abstract</code> classes</h2>
<p>Abstract classes are also classes. Why would make that easier for a reader by stating that in a name? Have you ever seen an <code>AbstractInterface</code> or <code>AbstractTrait</code>? I did not.</p>
<pre><code class="language-diff">-abstract class AbstractXmlCrawler
+abstract class XmlCrawler</code></pre>
<p>Let them look into to class manually. Time well spent!</p>
<h2 id="13-use-fluent-api-with-different-return-values">13. Use Fluent API with Different Return Values</h2>
<p><a href="https://ocramius.github.io/blog/fluent-interfaces-are-evil">Fluent interfaces are great</a>, they save you typing the variable name all over again:</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

class Definition
{
    private $class;

    private $arguments;

    public function setClass(array $class)
    {
        $this-&gt;class = $class;

        return $this;
    }

    public function setArguments(array $arguments)
    {
        $this-&gt;arguments = $arguments;

        return $this;
    }
}

$definition = (new Definition)-&gt;setClass('ProductController')
    -&gt;setArguments(['@Request']);</code></pre>
<p>The best thing is, there are more ways to create the same object:</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

$definition = new Definition;
$definition-&gt;setClass('ProductController');
$definition-&gt;setArguments(['@Request']);</code></pre>
<p>How can anyone use that incorrectly now?</p>
<h2 id="14-use-fluent-api-with-different-return-values">14. Use Fluent API with Different Return Values</h2>
<p>Let's take fluent to the next level - make every method return different object:</p>
<pre><code class="language-php">&lt;?php

// ...

$rootNode
    -&gt;beforeNormalization()
        -&gt;ifTrue(function ($v) { return !isset($v['assets']) &amp;&amp; isset($v['templating']) &amp;&amp; class_exists(Package::class); })
        -&gt;then(function ($v) {
            $v['assets'] = array();
            return $v;
        })
    -&gt;end()
    -&gt;children()
        -&gt;scalarNode('secret')-&gt;end()
        -&gt;scalarNode('http_method_override')
            -&gt;info("Set true to enable support for the '_method' request parameter to determine the intended HTTP method on POST requests. Note: When using the HttpCache, you need to call the method in your front controller instead")
            -&gt;defaultTrue()
        -&gt;end()
        -&gt;scalarNode('ide')-&gt;defaultNull()-&gt;end()
        -&gt;booleanNode('test')-&gt;end()
        -&gt;scalarNode('default_locale')-&gt;defaultValue('en')-&gt;end()
        -&gt;arrayNode('trusted_hosts')
            -&gt;beforeNormalization()-&gt;ifString()-&gt;then(function ($v) { return array($v); })-&gt;end()
            -&gt;prototype('scalar')-&gt;end()
        -&gt;end()
    -&gt;end()
;</code></pre>
<div class="text-center pb-4">
    <em>
      From <a href="https://github.com/symfony/symfony/blob/0d35f97e9b9c27df0d6317e8ae09d5b963dc2916/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Configuration.php">Symfony/FrameworkBundle configuration</a>.
    </em>
</div>
<p>Fluent API like this is <a href="https://github.com/phpstan/phpstan/issues/254">proven to break PHPStan and thus Rector</a>. Such code is almost impossible to upgrade instantly. The longer the fluent methods, the bigger the damage - great job!</p>
<p><br></p>
<p>Do you know more tips to write code that is hard to maintain and upgrade in <em>not-so-obvious</em> way? <strong>Let me know in the comment, I'll update the list with them.</strong></p>
<p><br></p>
<p>P.S.: If you love sarcastic posts like this, go check <a href="https://ocramius.github.io/blog/eliminating-visual-debt">Eliminating Visual Debt</a> by Marco Pivetta or <a href="/blog/2018/03/19/how-to-criticize-like-a-senior-programmer/">How to Criticize like a Senior Programmer</a>.</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/11/26/14-tips-to-write-php-code-that-is-hard-to-maintain-and-upgrade</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 26 Nov 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/11/26/14-tips-to-write-php-code-that-is-hard-to-maintain-and-upgrade#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Test Monorepo in 3 Layers ]]></title>
                <link>https://tomasvotruba.com/blog/2018/11/22/how-to-test-monorepo-in-3-layers</link>
                <description><![CDATA[ <p>You already have a monorepo, you have at least 2 packages, autoloaded with composer and splitting works.
Now you're about to set up testing and code quality tools.
<br><br>
How to make testing so tight no bug can escape?</p> ]]></description>
                <content:encoded><![CDATA[ <p>There are 3 layers you test your monorepo in. Often projects go just a few of them:</p>
<ul>
<li><strong>Testing Monorepo</strong> (Symfony, Sylius)</li>
<li><strong>Testing Standalone Packages in Monorepo</strong> (Symfony, Sylius)</li>
<li><strong>After Split Testing</strong></li>
</ul>
<p>I'm not sure why the last one is often skipped. Surprisingly, it's very easy to setup - add <code>.travis.yml</code> and enable the repository testing on Travis.</p>
<p>Now you know, what testing layers there are. It's time to look <strong>why each layer is important</strong>.</p>
<h2 id="1-testing-monorepo">1. Testing Monorepo</h2>
<pre><code class="language-bash">/packages
    /first-package
    /second-package
.travis.yml
phpunit.xml</code></pre>
<h3 id="why-is-it-important">Why is it Important?</h3>
<p>Monorepo is more complex than the classic package. The developers who use it needs to study more nested directories, special rules and exceptions he didn't have to before. He's already exhausted by learning all this and he's barely some energy left to contribute.</p>
<p>That's why <strong>your monorepo workflow has to be as simple as possible</strong>.</p>
<p>Testing should be as easy as:</p>
<pre><code class="language-bash">vendor/bin/phpunit</code></pre>
<p>One run and I we can see test are passing or failing. Must have.</p>
<h2 id="2-testing-standalone-packages-in-monorepo">2. Testing Standalone Packages in Monorepo</h2>
<pre><code class="language-diff"> /packages
     /first-package
+        phpunit.xml
     /second-package
+        phpunit.xml
 .travis.yml
 phpunit.xml</code></pre>
<p>In this layer, each package has own PHPUnit setup. It still uses root <code>vendor/autoload.php</code>, but the testing scope is more similar to standalone package testing. If's <em>faking</em> after split testing for poor people.</p>
<pre><code class="language-bash">vendor/bin/phpunit packages/first-package
vendor/bin/phpunit packages/second-package</code></pre>
<h3 id="why-is-it-important">Why is it Important?</h3>
<p>PHPUnit <strong>has own autoloading so it autoloads tests</strong> without relying on your <code>composer.json</code>. It's for historical reasons and also the fact, it's not standard to autoload test files or even user PSR-4 naming in them.</p>
<p><br></p>
<p><strong>Use PSR-4 in your tests</strong>:</p>
<ul>
<li><code>/packages/first-package/src/SomeClass.php</code> → <code>FirstPackage\SomeClass</code></li>
<li><code>/packages/first-package/tests/SomeClassTests.php</code> → <code>FirstPackage\Tests\SomeClassTest</code></li>
</ul>
<p>PHPStan and Rector are already forcing you to do it because they need to know the exact class type of every element to works correctly.</p>
<p>Thank you!</p>
<p><br></p>
<p>Back to testing...</p>
<p>So when you run e.g. <code>vendor/bin/phpunit packages</code>, you basically tell the PHPUnit <em>autoload <code>packages</code> directory</em>.</p>
<p>What happens, when:</p>
<ul>
<li><code>packages/first-package/tests/Fixture/SomeClass.php</code> is used in test</li>
<li>in <code>packages/second-package/tests/UnrelatedTest.php</code>?</li>
</ul>
<p><em class="fas fa-3x fa-times text-danger"></em></p>
<p><strong>It will silently pass</strong>. Monorepo has many classes you work with and some test classes can be accidentally reused in another package. Your test run says it passes, even though it's broken.</p>
<p>You'll find out eventually when <code>second-package</code> is downloaded and break the code to somebody but isn't automated testing suppose to prevent that?</p>
<h2 id="3-after-split-testing">3. After Split testing</h2>
<pre><code class="language-diff"> /packages
     /first-package
         phpunit.xml
+        .travis.yml
     /second-package
         phpunit.xml
+        .travis.yml
 .travis.yml
 phpunit.xml</code></pre>
<p>In each <code>.travis.yml</code> you put script to run tests:</p>
<pre><code class="language-yaml">script:
    - vendor/bin/phpunit</code></pre>
<p>It will trigger standalone Travis for each package after splitting the monorepo:</p>
<ul>
<li><code>our-project/our-project</code> - monorepo running...</li>
<li><code>our-project/first-package</code> - Travis running...</li>
<li><code>our-project/second-package</code> - Travis running...</li>
</ul>
<h3 id="why-is-it-important">Why is it Important?</h3>
<p>This is like a double condom with birth control - the best quality testing you can get. It's <strong>almost identical with real use when programmer downloads</strong> a package by <code>our-project/second-package</code>.</p>
<p>It will download:</p>
<ul>
<li>the second-package code in <code>/src</code></li>
<li>dependencies from <code>composer.json</code> <strong>ONLY</strong> of that package</li>
</ul>
<p><br></p>
<p>I think you've figured out by now the why by seeing <strong>ONLY</strong>. You can't find this bug in layer 1 or 2.</p>
<p>Our first package uses Doctrine <code>/packages/first-package/composer.json</code></p>
<pre><code class="language-json">{
    "name": "our-project/first-package",
    "require": {
        "php": "^7.2",
        "doctrine/orm": "^2.7"
    }
}</code></pre>
<p>At the same time, <code>second-package</code> has this class:</p>
<pre><code class="language-php">&lt;?php

namespace OurProject\SecondPackage;

use Doctrine\ORM\EntityManagerInterface;

class ProductController
{
    public function __construct(EntityManagerInterface $entityManager)
    {
    }
}</code></pre>
<p>And this <code>composer.json</code>:</p>
<pre><code class="language-json">{
    "name": "our-project/second-package",
    "require": {
        "php": "^7.2"
    }
}</code></pre>
<p>What happens, when we run one all previous layers?</p>
<pre><code class="language-yaml">vendor/bin/phpunit
vendor/bin/phpunit packages/first-package
vendor/bin/phpunit packages/second-package</code></pre>
<p><em class="fas fa-3x fa-times text-danger"></em></p>
<p><strong>It will silently pass</strong>, because our monorepo has <code>doctrine/orm</code> installed, thanks to dependency in <code>first-package</code> (it's actually propagated by <a href="/blog/2018/10/08/new-in-symplify-5-create-merge-and-split-monorepo-with-1-command/#3-merge-code-composer-json-code">tools</a> to root <code>composer.json</code>).</p>
<p>This is <strong>the most common error while developing with monorepo first year</strong>. You add dependencies here and there, you add a couple of new packages and code grows and grows.</p>
<p>That's why after split testing is so important. Travis will tell you this instantly.</p>
<h2 id="the-better-your-test-are-the-more-you-focus-on-coding">The Better Your Test Are, The More You Focus on Coding</h2>
<p>Of course, you can manage these mutual dependencies by manual testing, in code-reviews, have a tool that will scan the code and composer it to <code>composer.json</code> requirements and so on. Their options are very stressful for developers because they need to automated work manually - imagine you'd check each space on each line instead of using Easy Coding Standard.</p>
<p><strong>So instead of focusing on machines work, just add <code>.travis.yml</code> to each of your packages and let Travis handle that.</strong></p>
<p>Travis has a purpose and you can focus on what you enjoy the most - coding.</p>
<p>Win-win :)</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/11/22/how-to-test-monorepo-in-3-layers</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 22 Nov 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/11/22/how-to-test-monorepo-in-3-layers#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ When You Should Use Monorepo and When Local Packages ]]></title>
                <link>https://tomasvotruba.com/blog/2018/11/19/when-you-should-use-monorepo-and-when-local-packages</link>
                <description><![CDATA[ <p>Recently I gave <a href="/talks/#monorepo/">a few talks about monorepo in PHP</a> and how to integrate it to companies in a useful way. I'm very happy to see many people already use it and know what problems it solves.
<br><br>
Before monorepo hype takes over private PHP projects, I think <strong>you should know about its limits</strong>: When is the best time for you to <a href="/clusters/#monorepo-from-zero-to-hero/">go monorepo</a>? When you gain less complexity while integrating it? How can you make the transition better? Is it really needed?</p> ]]></description>
                <content:encoded><![CDATA[ <p>There are already <a href="/clusters/#monorepo-from-zero-to-hero/">6 posts</a> about why is monorepo so good in dealing with complexity. So if you hear about it the first time or still don't believe it might help you, go check those.</p>
<p>Today we'll not focus on open-source projects, but <strong>rather on your private code</strong>. All from point of <strong>timing and transition</strong>. Let me show you the architecture that <a href="https://www.lekarna.cz">Lekarna.cz</a> uses to this day and how did we get there despite very chaotic start.</p>
<h3 id="1-monolith">1. Monolith</h3>
<p>We started development in a single repository, adding features here and there. It grew, the <code>/src</code> directory had over 150 classes very soon and it became more and more cluttered. The development was coupled to one monolithic code and the architecture started to disappear from code-review focus and from the code itself. <strong>Not good.</strong></p>
<p>↓</p>
<h3 id="2-many-repository">2. Many-Repository</h3>
<p>So we've decided to split too many repositories. There was a repository <code>lekarna/cms</code>, <code>lekarna/shop</code>, <code>lekarna/warehouse</code> etc.</p>
<p>First, it looked cool, each with own repository, own <code>composer.json</code>. Now you can spot this <em>academic coolness</em> by <strong>focusing mostly on technical facts</strong> (e.g. each repository has own <code>composer.json</code>) rather <strong>than how it feels to use it</strong> (e.g. it really sucks to do one change in many places).</p>
<p>In every PR more energy and attention was invested in the maintenance of there many-repositories and their mutual dependencies, than to PR itself. <strong>Not good.</strong></p>
<p>↓</p>
<h3 id="3-local-packages">3. Local Packages</h3>
<p>We realized, we needed the code to be at one place <strong>and</strong> keep it as separate as possible. In 2014 it didn't have a name, but I came with an idea to create a <code>/packages</code> directory in our main repository and <em>pretend</em> we have repositories there. <em>Treat it like</em> one day it might be decoupled to own repository, with own dependencies and own tests. Few years later it became known as <a href="/blog/2017/12/25/composer-local-packages-for-dummies/">local packages</a>.</p>
<p>This lead new programmers to focus deeply on a single part of huge codebase at a time and also make changes the easiest way possible. <strong>We didn't have to explain them anything</strong>, the knowledge was embodied in the code. This is a <strong>golden pattern you look for</strong> in any part of business or life - you just give people smartphone and they <em>intuitively know</em> what to do.</p>
<p>↓</p>
<h3 id="4-open-sourced-monorepo">4. Open-Sourced Monorepo</h3>
<p>This next step can be used to build a community to fuel your code-base. It's a state when your <strong>need a feedback from the community to push the quality further</strong> and also turning that code to a product for others. That's what happened to all companies that were private in the start - Symfony, Sylius or Shopsys.</p>
<p>But this was not a step for Lekarna.cz code-base. It has no such ambitions and it doesn't make sense. You don't have to do everything you can, just because you can.</p>
<p><br></p>
<p>So do <em>local packages</em> have meaning? <strong>Yes, they do</strong>, because their purpose is not to become an open-source monorepo company, but to make your private/public code as easy to work with as possible while it grows. In short: <strong>to enjoy coding in very large code-bases.</strong></p>
<p><br></p>
<h2 id="when-you-should-evolve">When You Should Evolve?</h2>
<p>As you can see, we had to make many costly transitions. Switching from monolith to many-repo and then to local packages is no cheap fun.</p>
<p>The rule that guides a <strong>good transition</strong> is:</p>
<blockquote class="blockquote text-center">
    Value after transition &gt; Cost lost by transition
</blockquote>
<p>E.g. if your project is 20 % easier to contribute, but it costs 50 % of your team energy on learning new technologies, fixing regression bugs or not believing in it, it's not worth it.</p>
<p>As future is unclear and hindsight is always 20/20, these numbers are not easy to establish before you do any real change. <strong>So how to decide?</strong> You can see the code <strong>is maturing and is ready to evolution jump</strong>. If we take a broader picture and look at PHP frameworks, in the last 5 years there is a big evolution jump from service locators to constructor injection. Do you want a more recent example? Weak typing to strict typing.</p>
<p>You just feel it. It's not an easy skill to build but <strong>the more and more you develop and make transitions, the more you'll improve this skill and your success rate</strong>. You'll get there by trying, believe in yourself and learn from mistakes. How crazy this might sound, the more mistakes you make, the faster you learn.</p>
<p><br></p>
<h2 id="when-monorepo-makes-sense-for-private-projects">When Monorepo Makes sense For Private Projects?</h2>
<p>I was asked this question at <a href="https://www.hubbr.cz/udalosti/events/developer-day-2018">Developer Day 2018</a> (amazing event by amazing brothers duo). To answer completely: if I were you, I'd <strong>start every project with local packages by default</strong>. You never ever have to jump to monorepo nor open-source, but you make any future possible transition very cheap. Very!</p>
<p>All it costs you is to learn what local packages are how to work with them. Too busy to learn? Just <a href="/contact">give me a call</a> and I'll explain it to you.</p>
<p>Because one day, you might see one of obvious <strong>reasons to go monorepo</strong>:</p>
<ol>
<li>Your product becomes useful to others</li>
<li>Your component becomes useful to others</li>
<li>You develop <strong>multiple-projects with the same code base</strong>, e.g. 5 projects running on Symfony 4.1</li>
<li>You develop the <strong>single project for multiple clients</strong>, e.g. one e-commerce platform for 10 customers</li>
</ol>
<p>And we're still in privates here.</p>
<p>But these <strong>reasons never have to come</strong>, so just going monorepo blindly from the start might actually hurt your development.</p>
<p><br></p>
<p>Happy evolving!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/11/19/when-you-should-use-monorepo-and-when-local-packages</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/11/19/when-you-should-use-monorepo-and-when-local-packages#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Get PHP 7.4 Typed Properties to Your Code in Few Seconds ]]></title>
                <link>https://tomasvotruba.com/blog/2018/11/15/how-to-get-php-74-typed-properties-to-your-code-in-few-seconds</link>
                <description><![CDATA[ <p>PHP 5.6 and 7.0 is going to be dangerous <a href="http://php.net/supported-versions.php">since 2019</a>, PHP 7.1 is <a href="https://gophp71.org">new baseline</a> and PHP 7.3 is just about to be released in the end of 2018.
<br><br>
Is this <strong>the best time to upgrade your code to PHP 7.4</strong>?</p> ]]></description>
                <content:encoded><![CDATA[ <p><strong>Probably not</strong>. Unless you're able to compile <a href="https://github.com/php/php-src">PHP repository</a> yourself and live on the edge of the edges. PHP 7.4 can be the smoothest upgrade you've experienced. <strong>If you'll think about in your coding since today</strong>.</p>
<h2 id="can-code-var-code-annotations-be-really-useful">Can <code>@var</code> Annotations be Really Useful?</h2>
<p>Annotations were always in the bottom, ashamed and not considered a <em>real code</em>. They help us to guess the type of the property. Not only to us, but also to <a href="/blog/2018/10/22/brief-history-of-tools-watching-and-changing-your-php-code/#2-static-analysis-tools">static analysis tools</a>.</p>
<pre><code class="language-php">&lt;?php

final class SomeClass
{
   /**
    * @var int
    */
   private $count;
}</code></pre>
<p>Here we can see that <code>$count</code> is an <code>int</code> number.</p>
<p><strong>In PHP 7.4</strong> we could change this code to get a <a href="https://wiki.php.net/rfc/typed_properties_v2">strict typing</a>:</p>
<pre><code class="language-diff"> &lt;?php declare(strict_types=1);

 final class SomeClass
 {
-   /**
-    * @var int
-    */
-   private $count;
+   private int $count;
 }</code></pre>
<p>When you write <code>@var</code> annotation today, you'll be preparing your code for future refactoring. You might laugh now: &quot;everyone is doing that today, why do you even write about this obvious standard&quot;.</p>
<p>Well, not everyone...</p>
<div class="text-center">
    <img src="/assets/images/posts/2018/php74-typed/symfony-lacking.png" class="img-thumbnail"><p>This is my favorite class to extend in whole Symfony - a <a href="https://github.com/symfony/symfony/blob/dbf053bc854f6768ddcd8ed39f7cbb2c21e500e6/src/Symfony/Component/Console/Command/Command.php#L37-L51"><code>Command</code> class</a>.
</p></div>
<p>This is Symfony 4.2 (dev) we're talking about with PHP 7.1+. Lot's of Symfony code is <del>weakly</del> <em>not</em> typed, but that's not the biggest problem.</p>
<h2 id="quot-em-my-favorite-framework-em-uses-it-it-must-be-the-best-practise-in-php-quot">&quot;<em>My-favorite-framework</em> Uses It, It must be the Best Practise in PHP!&quot;</h2>
<p>The problem is <em>framework-way</em> approach to learning PHP. Many developers I've met <strong>think their framework uses the best practices of the PHP itself</strong>. Why? <strong>Have you ever tried to learn some other PHP framework than the one you're using today?</strong> I mean learn, not just try on the workshop, during the weekend, but to really build a big application with it.</p>
<p>Saying that, <strong>many developers adopt Symfony practices thinking <em>it the best form of PHP there is</em></strong>. There's no place to blame developers, it's just how society works - with <em>observational learning</em>. We should not blame Symfony either since there is no <em>code quality engineer</em>, who would push <em>non-feature</em> code changes. Unfortunately, Symfony team itself is strictly against these changes as you can see in PR comments.</p>
<p>Recently I'm very happy to see these engineers around me - <a href="https://www.lmc.eu">LMC</a> to name one for all.</p>
<h2 id="visualize-future-compatibility">Visualize Future Compatibility</h2>
<p>When you code, think about the way to write <strong><em>future compatible</em> code</strong>. What is happening in PHP for the last 2-3 years? Type hints, ?nullables, <code>void</code>, AST and static analysis suggest, there is more coming. I wouldn't be surprised if these annotations turn out to be useful in pure PHP one day:</p>
<pre><code class="language-php">&lt;?php

final class SomeClass
{
    /**
     * @var int
     */
    private const NUMBER = 5;

    /**
     * @var Product[]
     */
    private $products = [];
}</code></pre>
<p>In PHP 8 or 9 this might come:</p>
<pre><code class="language-diff"> &lt;?php declare(strict_types=1);

 final class SomeClass
 {
-    /**
-     * @var int
-     */
-    private const NUMBER = 5;
+    private const int NUMBER = 5;

-    /**
-     * @var Product[]
-     */
-    private $products = [];
+    private Product[] $products = [];
}</code></pre>
<p>In <a href="/blog/2018/10/18/how-i-almost-missed-my-talk-in-php-asia-conference/">PHP Asia</a>, <em>typed arrays</em> was the most desired feature in next versions of PHP. So were <em>typed properties</em> once and so were <em>strict types</em> before them. In 2015 we would only dream about those 2, now one is part of our every-day life, second coming soon.</p>
<h2 id="quot-in-seconds-quot">&quot;...in Seconds&quot;</h2>
<p>Yeah, right, I made a promise - I'll get back to nearer future with <em>typed properties</em>.</p>
<p>Let's say we're thinking about the future and adding all <code>@var</code> annotations we can. Is that enough? You'd still have to do these diffs manually:</p>
<pre><code class="language-diff"> &lt;?php declare(strict_types=1);

 final class SomeClass
 {
-    /**
-     * @var boolean
-     */
-    public $a;
+    public bool $a;

     /**
-     * @var bool
      * another comment
      */
-    private $b = false;
+    private bool $b = false;

     /**
      * @var callable
      */
     private $c;

-    /**
-     * @var AnotherClass|null
-     */
-    private $d = null;
+    private ?AnotherClass $d = null;

     /**
      * @var int
      */
     public $e = 'string';
}</code></pre>
<p>Or you could <strong>be actually rewarded for your daunting <code>@var</code> work</strong>. Good news! Rector will do this one for you:</p>
<pre><code class="language-bash">composer require rector/rector --dev
vendor/bin/rector process src --set php74
# few seconds...
#
# Done!</code></pre>
<p>See <a href="https://github.com/rectorphp/rector/pull/643">pull-request #643</a> to get more insight into how this very nice AST use case works.</p>
<p><br></p>
<p>I started this post to show how Rector helps with huge refactorings like <code>@var</code> annotations to types that are about to come next year. But the message is far being that - observing trends, seeing the future and working towards that.</p>
<h2 id="how-to-make-your-future-self-happy">How To Make Your Future-Self Happy?</h2>
<ul>
<li><strong>write <code>@var</code> above each property</strong></li>
<li>write <code>@var</code> or any other <code>@value</code> info <strong>above each constant</strong></li>
<li><strong>write <code>@var Type[]</code> above each array property</strong>
<ul>
<li>not <code>mixed</code>, not <code>object</code>, but scalar or specific class or interface</li>
</ul></li>
<li>think about rules in your code that you've <strong>non-critically copy-pasted from the framework</strong></li>
</ul>
<p>You're saving work to yourself, to your colleagues and to tools like Rector, that will do the work for you. If you're ready...</p>
<p><br></p>
<p>Do you have some own future compatibility tips you use in your code today? I'd love to hear them ↓</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/11/15/how-to-get-php-74-typed-properties-to-your-code-in-few-seconds</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 15 Nov 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/11/15/how-to-get-php-74-typed-properties-to-your-code-in-few-seconds#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Will Autowired Arrays Finally Deprecate Tags in Symfony and Nette? ]]></title>
                <link>https://tomasvotruba.com/blog/2018/11/12/will-autowired-arrays-finally-deprecate-tags-in-symfony-and-nette</link>
                <description><![CDATA[ <p>To be clear: we talk about those tags that only have a name. No priority, no level, no event name, nothing, <strong>just the name</strong>. If you're not sure why these tags are bad, read <em><a href="/blog/2017/02/12/drop-all-service-tags-in-your-nette-and-symfony-applications/">Drop all Service Tags in Your Nette and Symfony Applications</a></em> first.
<br>
<br>
I'm very happy to see that <a href="/clusters/#collector-pattern-the-shortcut-hack-to-solid-code/">collectors</a> are finally getting to the core of DI components of PHP frameworks. Tags, extensions, compiler passes and <code>autoconfigure</code> now became workarounds. Collectors are now in the best place they can... <strong>the PHP code</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <p>Let's say we need to build a tool for releasing a new version of the open-source package. Something like what I use for
<a href="https://github.com/symplify/monorepobuilder">Symplify and Rector releases</a>, <strong>but better</strong>.</p>
<p>You want it to be <em>open for extension and closed for modification</em>. How do we do that?</p>
<p>You introduce and a <code>ReleaseWorkerInterface</code>:</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

namespace Moses\ReleaseWorker;

interface ReleaseWorkerInterface
{
    public function work(string $version): void;
}</code></pre>
<p>Good, now if anyone wants to extend it, they' just create a new service:</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

namespace Moses\ReleaseWorker;

use Nette\Utils\Strings;

final class CheckBlogHasReleasePostReleaseWorker implements ReleaseWorkerInterface
{
    public function work(string $version): void
    {
        $blogContent = file_get_contents('https://tomasvotruba.com');

        // is there a post with this title?
        if (Strings::match($blogContent, '#Release of ' . $version . '#')) {
            // good
            echo 'Good job! The blog post was released.';
            // early return
            return;
        }

        // bad
        throw new DoThisFirstException(sprintf('Write release post about "%s" version first', $version));
    }
}</code></pre>
<p>and register it</p>
<pre><code class="language-yaml"># moses.yml
services:
    Moses\ReleaseWorker\CheckBlogHasReleasePostReleaseWorker: ~</code></pre>
<h2 id="find-all-the-code-releaseworkerinterface-code">Find all the <code>ReleaseWorkerInterface</code>?</h2>
<p>Note: I'll be mixing Nette | Symfony syntax now, but they're almost identical in DI component, so just imagine it's your favorite framework.</p>
<p>How can we get all the services that implement <code>ReleaseWorkerInterface</code>?</p>
<h3 id="1-tags">1. Tags!</h3>
<pre><code class="language-yaml">services:
    Moses\ReleaseWorker\CheckBlogHasReleasePostReleaseWorker:
        tags:
            - "release_worker"</code></pre>
<p>In extension/compiler pass:</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

$mosesDefinition = $containerBuilder-&gt;getDefinition(Moses::class);

foreach ($containerBuilder-&gt;findByTags('release_worker') as $workerDefinition) {
   $mosesDefinition-&gt;addCall('addWorker', [$workerDefinition-&gt;getName()]);
}</code></pre>
<p>This is what we would do in 2010. <strong>This brings <a href="/blog/2018/08/27/why-and-how-to-avoid-the-memory-lock/">memory-lock</a> on tag name and disables common sense</strong>. And we need common sense to create usable code.</p>
<p>What's the next option we have?</p>
<h3 id="2-code-bytype-code-methods">2. <code>byType()</code> methods</h3>
<p>In extension/compiler pass:</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

$mosesDefinition = $containerBuilder-&gt;getDefinition(Moses::class);

foreach ($containerBuilder-&gt;findByType(ReleaseWorkerInterface::class) as $workerDefinition) {
   $mosesDefinition-&gt;addCall('addWorker', [$workerDefinition-&gt;getName()]);
}</code></pre>
<p>This drops memory-lock, good. But <strong>we still have to go to extension/compiler-pass</strong>, lands that are visited by fractions of framework-users.</p>
<p>What about something &quot;2018&quot;?</p>
<h3 id="3-autowired-arrays">3. Autowired Arrays</h3>
<p>All options above hides a contract. Which one? The <code>Moses</code> class looks like this:</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

final class Moses
{
    // property + setter

    public function release(string $version)
    {
        foreach ($this-&gt;releaseWorkers as $releaseWorker) {
            $releaseWorker-&gt;work($version);
        }
    }
}</code></pre>
<p>What is wrong with this contract? Have you noticed the constructor? Me neither, <strong>it's not there!</strong> It needs at least some release workers, it's useless without it, but we lie about this contract:</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

$moses = new Moses\Moses;
$moses-&gt;release('v5.0.0');

// nothing
// ...
// WTF?</code></pre>
<p>We already know that <strong>public properties, setters, and drugs are bad</strong>. <strong>Missing constructor contract and sniffing dependency somewhere else by setters - not good either</strong>. Moreover when your other classes keep that contract. What's the point of rules in your code then?</p>
<h3 id="success-is-given-to-reliable-people">Success is Given to Reliable People</h3>
<p>We should make a design that is reliable.</p>
<ul>
<li>Do you need these services? Tell us in the constructor.</li>
<li>Do you need all <code>ReleaseWorkerInterface</code>s? <strong>Tell us in the constructor.</strong></li>
</ul>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

$releaseWorkers = [
    new Moses\ReleaseWorker\CheckBlogHasReleasePostReleaseWorker,
];

$moses = new Moses\Moses($releaseWorkers);</code></pre>
<p>Now when we call the service, <strong>we can actually see some output</strong>:</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

$moses-&gt;release('v5.0.0');

// "Good job! The blog post was released."
// ...
// Thanks!</code></pre>
<p>Sound nice, right? Is that even possible? Without that, we could drop tags, the compiler passes, YAML/Neon stringly-typed configuration, anti-conception... The world would finally make sense again!</p>
<blockquote class="blockquote text-center">
    "Vision over Expectations."
</blockquote>
<p>It sounds really nice. But how would that work in PHP? How does container now what we need in the constructor. Yes, Mr. Potter?</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

namespace Moses;

use Moses\ReleaseWorker\ReleaseWorkerInterface;

final class Moses
{
    /**
     * @param ReleaseWorkerInterface[] $releaseWorkers
     */
    public function __construct(array $releaseWorkers)
    {
    }
}</code></pre>
<p>No need for magic. <strong>Just use typehint in annotation</strong>.</p>
<p><br></p>
<p>Typehint in the annotation. It's that simple.</p>
<h2 id="when-can-i-use-that-my-favorite-framework">When Can I use That <my-favorite-framework>?</h2>
<p>I have no idea.</p>
<p>But you can <strong>install it today</strong>:</p>
<ul>
<li>with <code>"nette/di": "v3.0.0-beta1"</code> with <a href="https://github.com/nette/di/pull/178">this feature enabled in the core</a></li>
<li>and <code>"symplify/package-builder": "^5.2"</code> and <a href="https://github.com/symplify/package-builder#autowire-array-parameters"><code>AutowireArrayParameterCompilerPass</code></a></li>
</ul>
<h2 id="does-it-work">Does it Work?</h2>
<p>Yes, for the cases above it's 1:1 substitution with 0-configuration. It's part of <a href="https://github.com/symplify/symplify/pull/1145/files">Symplify since 5.1</a> (released 1,5 month ago) and <strong>it works flawlessly</strong>.</p>
<p><br></p>
<p>And why <em>Moses</em>? Well, he <em>released</em> the most of people from slavery :)</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/11/12/will-autowired-arrays-finally-deprecate-tags-in-symfony-and-nette</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 12 Nov 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/11/12/will-autowired-arrays-finally-deprecate-tags-in-symfony-and-nette#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Fatal error: Uncaught Error: [] operator not supported for strings in ]]></title>
                <link>https://tomasvotruba.com/blog/2018/11/08/fatal-error-uncaught-error-operator-not-supported-for-strings-in</link>
                <description><![CDATA[ <p>That's right! PHP 5.6 and 7.0 are entering EOL - end of <del>line</del> life this December. Social networks, Slacks, Twitter, Reddit are <a href="https://www.reddit.com/r/PHP/comments/9syr3m/php_56_eol_end_of_life_end_of_2018_and_php_7">full</a> of it. Are you running PHP 7.1? Good, come next year when PHP 7.1 is <em>eoling</em>.
<br><br>
For the rest of you, what will you do when PHP will tell you the message in the title?</p> ]]></description>
                <content:encoded><![CDATA[ <div class="text-center">
    <img src="/assets/images/posts/2018/upgrade-php/important.png" class="img-thumbnail"><p>The most important info from <a href="http://php.net/supported-versions.php">PHP.net</a> nowadays</p>
</div>
<p><br></p>
<p>You see all this social boom, your boss is scared by &quot;no security support&quot; and <strong>you finally have a <em>go</em> to upgrade your PHP code</strong> to PHP 7.1. You upgrade your PHP locally to see if everything works:</p>
<pre><code class="language-bash">"Warning: count(): Parameter must be an array or an object that implements Countable in"</code></pre>
<pre><code class="language-bash">"Fatal error: Uncaught Error: [] operator not supported for strings in"</code></pre>
<pre><code class="language-bash">"Deprecated: Methods with the same name as their class will not be constructors in a future version of PHP; Filter has a deprecated constructor in"</code></pre>
<pre><code class="language-bash">"Fatal error: Uncaught Error: Call to undefined function ereg() in"</code></pre>
<pre><code class="language-bash">"Fatal error: Cannot use empty list in"</code></pre>
<p><br></p>
<p>You're probably thinking <em>lets jump to PHP 7.2, while you're at it</em>:</p>
<pre><code class="language-bash">"Deprecated: The each() function is deprecated. This message will be suppressed on further calls in"</code></pre>
<p>Don't do it, <strong>always jump by minor versions</strong> - for both PHP and packages.</p>
<p><br></p>
<p>Actually, when you see a message - that's a good sign. How else would you notice this?</p>
<pre><code class="language-php">// PHP 5.6-
list($a[], $a[]) = [1, 2];

// to get same result in PHP 7.0+
list($a[], $a[]) = array_reverse([1, 2])</code></pre>
<p>True story - see <a href="https://3v4l.org/H1hfA">3v4l.org</a>. The nice silent error just for you!</p>
<img src="/assets/images/posts/2018/upgrade-php/swap.png" class="img-thumbnail">
<h2 id="quot-i-got-this-quot">&quot;I Got This&quot;</h2>
<p>But let's say you know that &quot;Deprecated: The each() function is deprecated. This message will be suppressed on further calls in&quot; means <strong>refactor <em>each</em> <code>each()</code> usage to <code>foreach()</code>.</strong></p>
<p>(Often it's more complicated, but keep this simple for now.)</p>
<p>Some cases are easy, if your <strong>variables are well-named</strong>:</p>
<pre><code class="language-php">while (list($key, $callback) = each($callbacks)) {
    // ...
}</code></pre>
<p>↓</p>
<pre><code class="language-php">foreach ($callbacks as $key =&gt; $callback) {
    // ...
}</code></pre>
<p><br></p>
<p>But some... how would you change this one?</p>
<pre><code class="language-php">while (list($callback) = each($callbacks)) {
    // ...
}</code></pre>
<p>↓</p>
<pre><code class="language-php">foreach ($callbacks as $callback) {
    // ...
}</code></pre>
<p>Are you sure? I think it should be like this:</p>
<pre><code class="language-php">foreach (array_keys($callbacks) as $callback) {
    // ...
}</code></pre>
<p><a href="https://github.com/rectorphp/rector/pull/661/" class="btn btn-dark btn-sm">
<em class="fab fa-github fa-fw"></em>
See pull-request #661
</a></p>
<p><strong>Honestly, I'm not sure either.</strong> But I took time to test all possible <code>each()</code> combinations with <code>list()</code>, <code>while()</code> and <code>do/while</code>, put them into awesome <a href="https://3v4l.org">3v4l.org</a>, wrote a bunch of tests and wrote tested rules for Rector.</p>
<p><br></p>
<pre><code class="language-bash">"Fatal error: Uncaught Error: Call to undefined function ereg() in"</code></pre>
<h2 id="how-rector-got-into-pure-php-upgrades">How Rector got into pure PHP Upgrades</h2>
<p>At the <a href="/blog/2018/10/18/how-i-almost-missed-my-talk-in-php-asia-conference/">PHP Asia Conference</a> Rasmus Lerdorf spoke about <strong>upgrading PHP as a big problem</strong>. Much bigger than upgrading particular frameworks. Many WTF namings in PHP are just for BC sake. I struck me, that there is much more legacy PHP code in every company than there is framework-bound code.</p>
<p>I instantly created an issue at Rector, that deals with <a href="https://github.com/rectorphp/rector/issues/638">PHP 5.3 to 7.4 upgrades</a>.
I went full-time on writing PHP upgrade rules - in the train, in the buss, in the plane (the best place to code actually, wonder why).</p>
<p><br></p>
<p class="bigger">
   <strong>Today I'm proud to announce 7 new Rector levels</strong> that were not here a month ago:
</p>
<pre><code class="language-bash">vendor/bin/rector process src --set php54
vendor/bin/rector process src --set php56
vendor/bin/rector process src --set php70
vendor/bin/rector process src --set php71
vendor/bin/rector process src --set php72
vendor/bin/rector process src --set php73
vendor/bin/rector process src --set php74</code></pre>
<p><br></p>
<p>I finally looked over my small framework bubble and <strong>learned a lot about problems of the <a href="https://friendsofphp.org">world PHP community</a></strong>.</p>
<h3 id="how-to-em-ereg-em-correctly">How to <em>ereg</em> Correctly?</h3>
<p>One example for all:</p>
<p><a href="https://github.com/rectorphp/rector/pull/661/" class="btn btn-dark btn-sm">
<em class="fab fa-github fa-fw"></em>
See pull-request #661
</a></p>
<pre><code class="language-bash">"Fatal error: Uncaught Error: Call to undefined function ereg() in"</code></pre>
<p>That's easy, just add <code>#</code> around and change the function name, right?</p>
<pre><code class="language-diff">-ereg('hi', $string);
+preg_match('#hi#', $string);</code></pre>
<p>But what about?</p>
<pre><code class="language-php">ereg('[]-z]', $string);
ereg('^[a-z]+[.,][a-z]{3,}$', $string);</code></pre>
<p>Don't reinvent the wheel! Did you know that 8 years ago some guy <a href="https://gist.github.com/lifthrasiir/704754/7e486f43e62fd1c9d3669330c251f8ca4a59a3f8">wrote ereg → preg patterns converter</a>? That <em>some guy</em> is Kang Seonghoon and helped hundreds if not thousands of people <em>to not to give a fuck</em>. Including me. <strong>Amazing work</strong> and I learned about it just by accidental googling. I wonder how many hidden gems are out there.</p>
<h2 id="harder-better-faster-stronger-php-community">Harder, Better, Faster, Stronger... PHP Community</h2>
<p>Take the Rector out, run it on your code, let it fix what it can and <strong>report the rest you had to do manually in the issues</strong>. Maybe it can be automated.
You'll be helping each other developer, who upgrades the same PHP version you did. Imagine PHP version 5.3 would be shipped with set like this, covering 100 % of all changes. It's up to us to make a brighter future now.</p>
<p><br></p>
<p>Happy stress-free upgrading!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/11/08/fatal-error-uncaught-error-operator-not-supported-for-strings-in</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 08 Nov 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/11/08/fatal-error-uncaught-error-operator-not-supported-for-strings-in#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Teach Your Team Private Method Sorting in 3 mins ]]></title>
                <link>https://tomasvotruba.com/blog/2018/11/01/how-teach-your-team-private-method-sorting-in-3-mins</link>
                <description><![CDATA[ <p>When I started PHP in 2004, all you had to do is to learn a few functions to become the most senior dev in your town. Nowadays, devs have to learn a framework, IDE and coding patterns to get at least to an average level. <br><br> Instead of reading 346 pages of <a href="https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882">Clean Code</a>, you need to produce code and learn as you read it at the same time. <strong>There will be never less information than it is today.</strong> <br><br> That's why effective learning is a killer skill. <strong>Today we learn how to sort private methods in 2 mins</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="why-is-private-method-order-so-important">Why is Private Method Order so Important?</h2>
<p>This simple class is in your code now:</p>
<pre><code class="language-php">&lt;?php

class SomeClass
{
    public function run()
    {
        $this-&gt;call1();
        $this-&gt;call2();
    }

    private function call3()
    {
    }

    private function call2()
    {
    }

    private function call1()
    {
        $this-&gt;call3();
    }
}</code></pre>
<p>Thanks to Gregor Harlan, there is a coding standard <code>OrderedClassElementsFixer</code>, that already takes care about <code>public</code>/<code>protected</code>/<code>private</code> elements order.</p>
<p>But what about these <strong>private methods</strong> - are they ok for you?</p>
<p><br></p>
<p>When you read such a code for the firs time, you might think:</p>
<ul>
<li><code>private function call3()</code> - ah, it does this and that... but wait, <strong>who is using it?</strong></li>
<li><code>private function call2()</code> - it does this and that, it was called in <code>run()</code> method</li>
<li><code>private function call1()</code> - it does this and... the <code>call3()</code> is used here, yes... <strong>what it actually did?</strong></li>
</ul>
<blockquote class="blockquote text-center mt-5 mb-5">
    <p>
        "Be able to read down the file from top to bottom like a newspaper article,<br>
    which would naturally suggest that <strong>helper methods appear after the methods they are helping</strong>.<br>
    This would lead to maximum readability of the code structure."
    </p>
    <footer class="blockquote-footer text-right"><a href="https://softwareengineering.stackexchange.com/a/186421/148956">Anthony Pegram</a>, Clean Code reader
    </footer></blockquote>
<h2 id="nice-theory-bro-but-real-life">Nice Theory, Bro, but... Real-Life?</h2>
<p>It's easy to spot and correct the example above...</p>
<pre><code class="language-php">&lt;?php

class SomeClass
{
    public function run()
    {
        $this-&gt;call1();
        $this-&gt;call2();
    }

    private function call1()
    {
        $this-&gt;call3();
    }

    private function call2()
    {
    }

    private function call3()
    {
    }
}</code></pre>
<p>...but in real life pull-requests are usually longer than 20 lines:</p>
<div class="text-center mb-5">
    <img src="/assets/images/posts/2018/private-method-order/example.png" class="img-thumbnail"><p>
        Taken from <a href="https://github.com/shopsys/shopsys/pull/554/files">my 5 days-old-PR</a>
    </p>
</div>
<p>Nor junior nor senior dev is able to check the proper private method order in these big chunks of code.</p>
<h2 id="unless">Unless...</h2>
<p>...somebody or something does it for you.</p>
<blockquote class="blockquote text-center mt-5 mb-5">
    "Automate everything that brings you <strong>more value until you die<br>compared to value lost to create it</strong>."
</blockquote>
<p>There is now a Rector rule that does exactly what we need in an <strong>automated way</strong>:</p>
<pre><code class="language-bash">composer require rector/rector --dev</code></pre>
<pre><code class="language-php">&lt;?php

// rector.php

declare(strict_types=1);

use Rector\Order\Rector\Class_\OrderPrivateMethodsByUseRector;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return static function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();

    $services-&gt;set(OrderPrivateMethodsByUseRector::class);
};</code></pre>
<p>And run Rector:</p>
<pre><code class="language-bash">vendor/bin/rector process src</code></pre>
<p>At first, you might need to re-run the command few times, because of the new order of private methods will automatically change calling order. But that's it:</p>
<ul>
<li>no books,</li>
<li>no lectures,</li>
<li>0 hours wasted on code-reviews.</li>
</ul>
<p><br></p>
<p>Let finish with <em>Martin Fowler</em> quote:</p>
<blockquote class="blockquote text-center">
    "Any fool can write code that a computer can understand.<br>
    Good programmers write code that <strong>humans can understand</strong>."
</blockquote>
<p>I think we're coming to times, where:</p>
<blockquote class="blockquote text-center">
    "Any computer can write a code that humans can understand."
</blockquote>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/11/01/how-teach-your-team-private-method-sorting-in-3-mins</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 01 Nov 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/11/01/how-teach-your-team-private-method-sorting-in-3-mins#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ 7 Tips to Get the Most out of Travis CI ]]></title>
                <link>https://tomasvotruba.com/blog/2018/10/29/7-tips-to-get-the-most-out-of-travis-ci</link>
                <description><![CDATA[ <p>Travis CI is the most spread CI in checking open-source projects. <br><br> Do you want to know how to use it <strong>3x faster</strong>? <br> How to make Travis <strong>generate code for you</strong>? <br> And how to make your <strong>tokens safe</strong>?</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="1-skip-x-debug">1. Skip x-debug</h2>
<p>Xdebug makes everything much slower in exchange for deep analysis. It's useful<strong>only for code coverage</strong> in CI.</p>
<p>Turn it off to get faster:</p>
<pre><code class="language-yaml">before_script:
    - phpenv config-rm xdebug.ini || return 0</code></pre>
<p>Do you use coverage? Just use condition:</p>
<pre><code class="language-yaml">before_script:
    # disable xdebug if not coverage
    - if [[ $COVERAGE == "" ]]; then phpenv config-rm xdebug.ini; fi</code></pre>
<h2 id="2-deliver-pr-checks-fast">2. Deliver PR Checks Fast</h2>
<p>The speed of feedback loop in PRs has the same effect as page load time. If the page is loading <strong>more than 4 seconds</strong>, <a href="https://www.hobo-web.co.uk/your-website-design-should-load-in-4-seconds">most people leaves thinking it's broken</a>.</p>
<p>What is <strong>must-have</strong> in PR check?</p>
<ul>
<li>tests</li>
<li>static analysis</li>
<li>coding style</li>
</ul>
<p>What can be <strong>checked later</strong>?</p>
<ul>
<li>code coverage</li>
<li>deploy</li>
<li>documentation build</li>
</ul>
<p>When tests, static analysis, and coding style can finish in 3 minutes including <code>composer install</code>, the code coverage and deploy could prolong waiting to <strong>9 minutes</strong>. For no added value, because it should be performed <em>on merge</em>.</p>
<p>Would you contribute to PR where you <strong>wait 9 minutes or 3 to know it passed</strong>?</p>
<p>For these reasons, there is <code>$TRAVIS_BRANCH</code> ENV var:</p>
<pre><code class="language-yaml">after_script:
    - |
      if [[ $COVERAGE == true &amp;&amp; $TRAVIS_BRANCH == "master" ]]; then
        vendor/bin/phpunit --coverage-clover coverage.xml
        wget https://github.com/php-coveralls/php-coveralls/releases/download/v2.1.0/php-coveralls.phar
        php php-coveralls.phar --verbose
      fi</code></pre>
<p>This way coverage is run just once the PR merged. Imagine the safe process time and human nerves in PR where were additional 10 commits after code-review.</p>
<h2 id="3-use-env-vars">3. Use ENV vars</h2>
<p>ENV vars is a standard approach to set secure values, pass options to containers and PHP application. It's a trend Symfony pushes every version, recently with this <a href="https://symfony.com/blog/new-in-symfony-4-2-important-deprecations">Symfony 4.2 deprecation</a>:</p>
<pre><code class="language-diff">-php bin/console command_name --env=test --no-debug
+APP_ENV=test APP_DEBUG=0 php bin/console command_name</code></pre>
<p>How to use them?</p>
<pre><code class="language-yaml">language: php

matrix:
    include:
      - php: 7.2
        env: STATIC_ANALYSIS=true
      - php: 7.2

script:
    - vendor/bin/phpunit

    - |
      if [[ $STATIC_ANALYSIS == true ]]; then
        vendor/bin/ecs check src
        vendor/bin/phpstan analyze src --level max
      fi</code></pre>
<p>Travis also allows <a href="https://docs.travis-ci.com/user/build-stages">Stages</a> oppose ENV variables. I've tried that and it has much more complicated YAML syntax, than just <code>VAR=value</code>. Also due to ENV trends lead by Docker, containers in general and Symfony, I'd stick with ENV vars for open-source projects.</p>
<p><strong>For private projects stages are great</strong> since you need to deploy migrations and the code itself. But for private projects, I think Gitlab CI is a much more valuable option. Ask <a href="https://janmikes.cz">Jan Mikeš</a> about that.</p>
<h2 id="4-use-travis-to-do-more-just-watching">4. Use Travis to do More Just Watching</h2>
<p>Most projects use Travis to check tests and analyze code. But did you know you can also use it for <strong>open-source deploy</strong>? And even more:</p>
<ul>
<li><strong>running validations</strong>, e.g. if all links are still responding with 200</li>
<li><strong>crawl websites</strong> and storing data to YAML</li>
<li><strong>Tweet</strong>!</li>
</ul>
<pre><code class="language-yaml">script:
    # make sure there are no duplicates
    - bin/console validate-groups

    # import data and genearte YAML
    - bin/console import

    # generate website to "/output" directory
    - vendor/bin/statie generate source</code></pre>
<p>Since filesystem exists as long as the container is running, you can download, dump and work with almost any data in it.</p>
<p>One more thing: <strong>Travis is super fast.</strong> What on my laptop takes 10 minutes, it can solve in 2.</p>
<h2 id="5-rebuild-your-github-pages-daily">5. Rebuild your GitHub Pages Daily</h2>
<p>One of the sexy features of Travis are <a href="https://docs.travis-ci.com/user/cron-jobs">Cron Jobs</a> in combination with Github Pages and <code>deploy</code>:</p>
<p>It is this easy to <a href="https://www.statie.org/docs/github-pages/#configure-travis">deploy Statie website</a> to Github Pages:</p>
<pre><code class="language-yaml">language: php

php: 7.2

install:
    - composer install

script:
    - vendor/bin/statie generate source

deploy:
    provider: pages
    skip_cleanup: true
    github_token: $GITHUB_TOKEN
    local_dir: output
    on:
        branch: master</code></pre>
<p>Check real life <code>.travis.yml</code> to getter better idea:</p>
<ul>
<li><a href="https://github.com/pehapkari/pehapkari.cz/blob/7cb58f17cedffc8222d063d632b7d353c7728342/.travis.yml#L35-L41">pehapkari.cz</a></li>
<li><a href="https://github.com/TomasVotruba/friendsofphp.org/blob/76f64d0fa48633abcd4e256eb575f8d99ba1d78b/.travis.yml#L24-L40">friendsofphp.org</a></li>
</ul>
<h2 id="6-stay-secure">6. Stay Secure</h2>
<p>When I said you can <strong>Tweet</strong> with your Travis, I mean it. That's what me lazy bastard <a href="https://github.com/TomasVotruba/tomasvotruba.com/tree/master/packages/StatieTweetPublisher">does</a> on this blog:</p>
<pre><code class="language-yaml">after_deploy:
    - |
      if [[ $TRAVIS_BRANCH == "master" &amp;&amp; $TRAVIS_PULL_REQUEST == "false" ]]; then
        packages/StatieTweetPublisher/bin/publish-new-tweet
      fi</code></pre>
<p>You may think &quot;that not secure, bro&quot;, and you're right! To be able to tweet Travis needs to know the auth tokens that Twitter generates for you:</p>
<pre><code class="language-yaml">language: php

env:
    - TWITTER_CONSUMER_KEY="asd0830GA709GA"
    - TWITTER_CONSUMER_SECRET="asd0830GA709GA"
    - TWITTER_OAUTH_ACCESS_TOKEN="asd0830GA709GA"
    - TWITTER_OAUTH_ACCESS_TOKEN_SECRET="asd0830GA709GA"
    # they're all fake, don't even try it!</code></pre>
<p>This could work, but then everyone would see it.</p>
<p><strong>How to do it in secret?</strong></p>
<p>You can actually <strong>enter them manually</strong> in Travis administration of your repository - <a href="https://github.com/TomasVotruba/tomasvotruba.com/tree/master/packages/StatieTweetPublisher#setup-travis-online">here is the tutorial</a>.</p>
<p>But still, what if someone will send you following PR:</p>
<pre><code class="language-yaml">script:
    - echo $TWITTER_CONSUMER_KEY
    - echo $TWITTER_CONSUMER_SECRET
    - echo $TWITTER_OAUTH_ACCESS_TOKEN
    - echo $TWITTER_OAUTH_ACCESS_TOKEN_SECRET</code></pre>
<p>That's not nice and you should not do that to your friends! No, really, it a good way of thinking how to hack - good job.</p>
<p>Travis thought about this:</p>
<ul>
<li>first, they will be displayed as <code>**secret**</code> everywhere in the code</li>
</ul>
<p>But what if you try:</p>
<pre><code class="language-php">$secret = getenv('TWITTER_CONSUMER_KEY');
for ($i = 0; $i &lt; strlen($secret); ++$i) {
    echo $secret[$i] . PHP_EOL;
}</code></pre>
<p>Well, that still won't work (I tried that), since these variable <strong>are available only for the repository owner</strong>.</p>
<p>But if you as an owner do echo it like this PHP script, you're screwed :).</p>
<h2 id="7-make-use-of-composer-scripts">7. Make use of Composer Scripts</h2>
<p>Did you know you can define your own composer scripts and run them with <code>composer &lt;name&gt;</code>? If not, check <a href="https://blog.martinhujer.cz/have-you-tried-composer-scripts">Have you tried Composer Scripts? You may not need Phing</a> that explains it in a very practical way.</p>
<p>So instead of writing it manually in Travis and locally and just waiting for a typo or miss use of invalid config:</p>
<pre><code class="language-yaml">script:
    # static analysis
    - vendor/bin/ecs check bin src test packages
    - vendor/bin/phpstan analyze packages bin src tests packages --level max</code></pre>
<p>you can actually use these in Travis as well:</p>
<pre><code class="language-yaml">script:
    # static analysis
    - composer check-cs
    - composer phpstan</code></pre>
<p>Anyone who needs to debug and know what's behind these shortcuts can just open <code>composer.json</code>:</p>
<pre><code class="language-json">{
    "scripts": {
        "check-cs": "vendor/bin/ecs check bin src tests packages",
        "phpstan": "vendor/bin/phpstan analyse bin src tests packages --level max"
    }
}</code></pre>
<p><br></p>
<p>Did I miss some tip you use every day or do you know a better one? <strong>Share in comments!</strong></p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/10/29/7-tips-to-get-the-most-out-of-travis-ci</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/10/29/7-tips-to-get-the-most-out-of-travis-ci#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Why AST Fixes your Coding Standard Better than Tokens ]]></title>
                <link>https://tomasvotruba.com/blog/2018/10/25/why-ast-fixes-your-coding-standard-better-than-tokens</link>
                <description><![CDATA[ <p>In the last post <a href="/blog/2018/10/22/brief-history-of-tools-watching-and-changing-your-php-code/"><em>Brief History of Tools Watching and Changing Your PHP Code</em></a> we saw there are over <strong>dozen tools in PHP that can modify code</strong>. So there is no surprise coding standard tools are &quot;upgrading&quot; code from PHP 5.6 to PHP 7.2 without knowing types and that AST is moving <code>false</code> to <code>!</code>. <br><br> Should coding standard upgrade your code? Should AST make your code cleaner? Should AST take of coding standard changes? <strong>Which is born for it?</strong></p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="tokens">Tokens</h2>
<p>PHP CS Fixer can upgrade to few features of new PHP using just <code>token_get_all()</code>:</p>
<div class="text-center">
    <img src="/assets/images/posts/2018/ast-tokens/php-cs-fixer-migrate.png" class="img-thumbnail"><p><a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer/blob/03e13fb91c775a151dc57ae51e80ba3f2abe7da6/src/RuleSet.php#L209-L240"><code>RuleSet.php</code></a></p>
</div>
<h2 id="ast">AST</h2>
<p><a href="https://github.com/rectorphp/rector">Rector</a> can solve rather low-level changes in <a href="https://github.com/rectorphp/rector/issues/424">code quality</a> level:</p>
<pre><code class="language-diff">-if (! $this-&gt;isTrue($condition) === false) {
+if ($this-&gt;isTrue($condition)) {</code></pre>
<pre><code class="language-diff">-count(func_get_args()) === 1);
+func_num_args() === 1</code></pre>
<h3 id="the-quot-code-quality-quot-level">The &quot;Code Quality&quot; Level</h3>
<p>It's the most favorite level in Rector. Why?</p>
<ul>
<li>it <strong>makes your code clear</strong></li>
<li>it's <strong>easy to use on any PHP code regardless framework</strong> you're using - from pure PHP, over Drupal, Wordpress, Magento, to frameworks like Symfony, Nette, and Laravel</li>
<li>it helps you to <strong>use direct PHP functions</strong> instead of wrapping them into complex structures ↓</li>
</ul>
<pre><code class="language-diff">-foreach ($this-&gt;oldToNewFunctions as $oldFunction =&gt; $newFunction) {
-    if ($currentFunction === $oldFunction) {
-        return $newFunction;
-    }
-}
-
-return null;
+return $this-&gt;oldToNewFunctions[$currentFunction] ?? null;</code></pre>
<p>Huge thanks to <a href="https://github.com/carusogabriel">Gabriel Caruso</a>, who brought this idea to Rector and helped me to shift my view to the one I'll show you below.</p>
<p><br></p>
<p>If there would be no AST, this all could be handled by <code>token_get_all</code> (<a href="/blog/2017/07/31/how-php-coding-standard-tools-actually-work">like PHP_CodeSniffer and PHP CS Fixer</a>/), but <strong>such implementation needs to be lot longer to achieve similar quality</strong>, since you have to check every previous and next tokens for any unexpected values.</p>
<blockquote class="blockquote text-center pb-5 pt-5">
    "I really don't like programming. I built this tool to program less so that I could just reuse code."
    <footer class="blockquote-footer">Rasmus Lerdorf
</footer></blockquote>
<h2 id="shifting-the-scope">Shifting the Scope</h2>
<p>We're here at the moment:</p>
<ul>
<li>tokens / coding standard === styling only</li>
<li>AST / static analysis === context aware only</li>
</ul>
<p>That's very narrow and old-school, but the shift has already begun...</p>
<h3 id="tokens-are-best-at">Tokens are Best at</h3>
<ul>
<li>
<p>spacing and exact positions</p>
<pre><code class="language-diff">-if ($condition )
-{
+if ($condition) {</code></pre>
</li>
<li>
<p>sign changes</p>
<pre><code class="language-diff">-$items = array(1, 2, 3;);
+$items = [1, 2, 3];</code></pre>
</li>
<li>
<p>doc block changes</p>
<pre><code class="language-diff">/**
-* @param    int|string
+* @param int|string $id
 */</code></pre>
</li>
</ul>
<h3 id="ast-is-best-at">AST is Best at</h3>
<ul>
<li>
<p>logic and structure changes</p>
<pre><code class="language-diff">-if (! $this-&gt;isTrue($condition) === false) {
+if ($this-&gt;isTrue($condition)) {</code></pre>
</li>
<li>
<p>code cleanup</p>
<pre><code class="language-diff">-$value = $value;</code></pre>
</li>
<li>
<p>context-aware names</p>
<pre><code class="language-diff">-$formBuilder-&gt;add('name', new TextType);
+$formBuilder-&gt;add('name', TextType::class);</code></pre>
</li>
</ul>
<h2 id="1-example-for-coding-standards-in-ast">1 Example for Coding Standards in AST</h2>
<p>Let's take this case of useless variable:</p>
<pre><code class="language-diff"> function () {
-    $a = true;
-    return $a;
+    return true;
 };</code></pre>
<p>My first thought was: &quot;Why is it assigned, is there some magic behind this? I need to explore more.&quot;
Well, there isn't - <strong>it's a trap</strong>. Both for the programmer and for PHP to interpret it.</p>
<p>So this change will not only make your code more readable but also faster. A nice side effect, right?</p>
<p>Let's briefly compare how tokens and AST approach this:</p>
<table class="table table-bordered table-responsive mt-5 mb-5"><thead class="thead-inverse"><tr><th class="text-center w-50">Tokens</th>
            <th class="text-center w-50">AST</th>
        </tr></thead><tr><td>PHP_CodeSniffer</td>
        <td>Rector</td>
    </tr><tr><td>
            <a href="https://github.com/slevomat/coding-standard/blob/5ae298bdb3bbdf573d506d0da3e8c6eadde6ba12/SlevomatCodingStandard/Sniffs/Variables/UselessVariableSniff.php">
                <code>UselessVariableSniff</code>
            </a>
        </td>
        <td>
            <a href="https://github.com/rectorphp/rector/blob/9855690778272de1033ad1f8c520bbee0a877201/packages/CodeQuality/src/Rector/Return_/SimplifyUselessVariableRector.php">
                <code>SimplifyUselessVariableRector</code>
            </a>
        </td>
    </tr><tr><td><strong>329 lines</strong></td>
        <td><strong>120 lines</strong></td>
    </tr><tr><td>2 helper services</td>
        <td>1 helper service</td>
    </tr></table>
<p>Note that it would be very difficult to write both versions shorter and keep reliability high and I believe <a href="https://github.com/kukulich">kukulich</a> is very good at implementing Sniffs effectively. <strong>It's a matter of used technology, not implementation skill</strong>.</p>
<p>To sum up, <strong>the AST version takes only 36,47 % of code what token version</strong>.</p>
<p><br></p>
<p>Also, AST implementation also solved this case without no extra work:</p>
<pre><code class="language-diff"> function test() {
     $a = 1;
     $b = 1;
-    $c = [
+    return [
         $b-- =&gt; $a++,
         --$b =&gt; ++$a,
     ];
-    return $c;
 }</code></pre>
<h2 id="coding-standards-on-steroids-with-ast">Coding Standards on Steroids with AST</h2>
<p>I still imagine how PHP would look like today if we had AST in <a href="https://github.com/nikic/PHP-Parser/issues/41">2012 when Fabien started PHP CS Fixer</a>.</p>
<img src="/assets/images/posts/2018/ast-tokens/scope.png" class="mb-2">
<p><br></p>
<ul>
<li>
<p>Would you be interested in such AST rules for coding standard?</p>
</li>
<li>
<p><strong>What rules would you add</strong> if it would be easier to create them with AST?</p>
</li>
</ul> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/10/25/why-ast-fixes-your-coding-standard-better-than-tokens</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 25 Oct 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/10/25/why-ast-fixes-your-coding-standard-better-than-tokens#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Brief History of Tools Watching and Changing Your PHP Code ]]></title>
                <link>https://tomasvotruba.com/blog/2018/10/22/brief-history-of-tools-watching-and-changing-your-php-code</link>
                <description><![CDATA[ <p>From coding standard tools, over static analysis to instant upgrade tools. This post is going to be a geeky history trip. <br> <br> Which tool was first? How they <strong>build on shoulders of each other</strong>?</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="1-coding-standard-tools">1. Coding Standard Tools</h2>
<h3 id="a-href-https-github-com-squizlabs-php-codesniffer-php-codesniffer-a-from-australia"><a href="https://github.com/squizlabs/PHP_CodeSniffer">PHP_CodeSniffer</a> from Australia</h3>
<p><span class="badge badge-light">Tokens</span>
<span class="badge badge-success">Modifies Code</span></p>
<p>The first tool that made it to the mainstream of coding standard tools was created around <strong>2007</strong> by Greg Sherwood from Australia. At least by date <a href="http://gregsherwood.blogspot.com/2006/12/if-not-test-first-then-test-really-soon.html">of the oldest post I could found</a>.</p>
<p>Greg has been maintaining the repository for last <strong>11 years</strong> (at least). I don't know anyone else who would take care of his project for such a long time without stepping back - <strong>much respect</strong>!</p>
<h3 id="a-href-https-github-com-friendsofphp-php-cs-fixer-php-cs-fixer-a-from-symfony"><a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer">PHP CS Fixer</a> from Symfony</h3>
<p><span class="badge badge-light">Tokens</span>
<span class="badge badge-success">Modifies Code</span></p>
<p>Reporting errors are helpful, but fixing them for you is even more helpful. More people got a similar need and around <a href="https://gist.github.com/fabpot/3f25555dce956accd4dd">Symfony 2.0 times and 2011</a> next tools were born - PHP CS Fixer.</p>
<p><a href="https://gist.github.com/fabpot/3f25555dce956accd4dd">The first version</a> was created by Fabien Potentier, author and founder of Symfony, and it used mostly regular expressions.</p>
<p>The decision to <strong>fix everything by default was the huge jump in history</strong> of these tools. It was the first case of a tool that would be so bold to change your code for you. You had to believe it, you had to overcome the fear of modifying it the wrong way or even deleting. I mean, now we're used to it like to cars, but at one point of history, they were just riding bombs.</p>
<p><br></p>
<p>With <a href="http://fabien.potencier.org/php-cs-fixer-finally-reaches-version-1-0.html">PHP CS Fixer 1.0 release in 2014</a> and rising popularity of <strong>automated fixes</strong> was <strong>big motivation for PHP_CodeSniffer</strong> to add similar feature - <a href="https://github.com/squizlabs/PHP_CodeSniffer/wiki/Fixing-Errors-Automatically"><em>code beautifier</em></a> - to version 2.</p>
<p>It also helped with another issue. The development of PHP_CodeSniffer 2.8 and later almost froze to zero. I remember because I started working on <a href="https://github.com/symplify/easy-coding-standard">EasyCodingStandard</a> right between
PHP_CodeSniffer 2.8 and 3.0 (depending on <code>3.0-dev</code>), which took 14 uncertain months.</p>
<p><strong>So PHP_CodeSniffer now holds <span class="badge badge-success">Modifies Code</span> as well.</strong></p>
<p><br></p>
<p>Both use <code>token_get_all()</code> that basically parses code to strings. Do you want to know <a href="/blog/2017/07/31/how-php-coding-standard-tools-actually-work/">how they actually work</a>?</p>
<h3 id="a-href-https-github-com-symplify-easy-coding-standard-easycodingstandard-a-from-the-czech-republic"><a href="https://github.com/symplify/easy-coding-standard">EasyCodingStandard</a> from the Czech Republic</h3>
<p><span class="badge badge-light">Tokens</span>
<span class="badge badge-success">Modifies Code</span></p>
<p>I saw many projects that use both tools, yet very poorly - because split attention divides the focus in the same ratio. The mission of this tool is <strong>to help new generations to adopt coding standard with almost no effort</strong>. So in <strong>2016</strong> the EasyCodingStandard was born.</p>
<h2 id="2-static-analysis-tools">2. Static Analysis Tools</h2>
<h3 id="a-href-https-github-com-nikic-php-parser-nikic-php-parser-a"><a href="https://github.com/nikic/PHP-Parser">nikic/php-parser</a></h3>
<p><span class="badge badge-danger">AST</span></p>
<p>This package is barely known for code analysis. But it provides the technology that all the other tool builds on - <em>abstract syntax tree</em> (known as <em>AST</em>).</p>
<p>It all started as a question on <a href="https://stackoverflow.com/questions/5586358/any-decent-php-parser-written-in-php">StackOverflow</a> - <em>Any decent PHP parser written in PHP?</em> nikic answered himself with a <a href="https://github.com/nikic/PHP-Parser"><code>php-parser</code></a> less than a 6 months later.</p>
<p>I would not write this post and neither have my fuel for passion without this tool, so <strong>huge thank you, Nikita, for creating it and maintaining it</strong>.</p>
<p><br></p>
<p>All following tools use an <strong>AST analyzer</strong> - that's how they know what object is <code>$object</code> variable, like in this example:</p>
<pre><code class="language-php">&lt;?php

class SomeObject
{
    public function exist()
    {
    }
}

$object = new SomeObject; // AST remembers that "$object" is "SomeObject" type
$object-&gt;missing(); // here we know that "missing" does not exist in "SomeObject"</code></pre>
<h3 id="a-href-https-github-com-phpstan-phpstan-phpstan-a-by-ondrej-mirtes"><a href="https://github.com/phpstan/phpstan">PHPStan</a> by Ondrej Mirtes</h3>
<p><span class="badge badge-danger">AST</span>
<span class="badge badge-info">
<a href="https://github.com/phpstan/phpstan/releases/tag/0.1">* 2016</a>
</span></p>
<p>If you don't use any static analysis tool, give PHPStan a try. I've made <a href="/blog/2017/01/28/why-I-switched-scrutinizer-for-phpstan-and-you-should-too/">minimalist intro that will help you with first steps </a>. It's worth investing even day or two to set it up because <strong>these tools will join toolkit of everyday use</strong>, like Composer or PHPUnit.</p>
<h3 id="a-href-https-github-com-phan-phan-phan-a-by-rasmus-lerdorf"><a href="https://github.com/phan/phan">Phan</a> by Rasmus Lerdorf</h3>
<p><span class="badge badge-danger">AST</span>
<span class="badge badge-info">
<a href="https://github.com/phan/phan/releases/tag/0.1">* 2015</a>
</span></p>
<h3 id="a-href-https-github-com-vimeo-psalm-vimeo-psalm-a-by-matthew-brown"><a href="https://github.com/vimeo/psalm">vimeo/psalm</a> by Matthew Brown</h3>
<p><span class="badge badge-danger">AST</span>
<span class="badge badge-info">
<a href="https://github.com/vimeo/psalm/releases/tag/0.1">* 2016</a>
</span>
<span class="badge badge-success">Modifies Code</span></p>
<p>Psalm is a very interesting tool that was born to fight Vimeo code complexity. It was the first tool from this group of 3, <strong>that started <a href="https://psalm.dev/docs/fixing_code">fixing the code</a></strong>.</p>
<h2 id="3-deprecation-detectors">3. Deprecation Detectors</h2>
<p>This group is widely used in the framework-agnostic PHP community.</p>
<h3 id="a-href-https-github-com-sstalle-php7cc-php-7-compatibility-checker-a"><a href="https://github.com/sstalle/php7cc">PHP 7 Compatibility Checker</a></h3>
<p><span class="badge badge-secondary">Deprecated</span>
<span class="badge badge-danger">AST</span></p>
<p>This tool checked for compatibility with PHP 7.</p>
<h3 id="a-href-https-github-com-sensiolabs-de-deprecation-detector-sensiolabs-de-deprecation-detector-a"><a href="https://github.com/sensiolabs-de/deprecation-detector">sensiolabs-de/deprecation-detector</a></h3>
<p><span class="badge badge-secondary">Deprecated</span>
<span class="badge badge-danger">AST</span></p>
<p>This package helped to look for Symfony 3 deprecations in your code.</p>
<h3 id="a-href-https-github-com-phpcompatibility-phpcompatibility-phpcompatibility-phpcompatibility-a"><a href="https://github.com/PHPCompatibility/PHPCompatibility">PHPCompatibility/PHPCompatibility</a></h3>
<p><span class="badge badge-light">Tokens</span></p>
<p>This tool checks for PHP cross-version compatibility. It allows you to analyze your code for compatibility with higher and lower versions of PHP.</p>
<p><br></p>
<p>It's useful to know what places are wrong, but you still have to fix them all manually.</p>
<h2 id="4-instant-upgrade-tools">4. Instant Upgrade Tools</h2>
<h3 id="a-href-https-github-com-umpirsky-symfony-upgrade-fixer-umpirsky-symfony-upgrade-fixer-a"><a href="https://github.com/umpirsky/Symfony-Upgrade-Fixer">umpirsky/Symfony-Upgrade-Fixer</a></h3>
<p><span class="badge badge-light">Tokens</span>
<span class="badge badge-success">Modifies Code</span>
<span class="badge badge-secondary">Deprecated</span></p>
<p>This tool was created in <strong>2015</strong> and it's revolutionary. Why? It wisely connects the token analysis of PHP CS Fixer with deprecations in Symfony 2 to 3. Imagine it like PHP CS Fixer + <code>sensiolabs-de/deprecation-detector</code> <strong>working for you</strong>.</p>
<p>Isn't that amazing? <strong>You just sit, run this tool and send invoices. Genius!</strong> The features are limited due to Tokens, but still, I love this.</p>
<h3 id="a-href-https-github-com-cakephp-upgrade-cakephp-upgrade-a"><a href="https://github.com/cakephp/upgrade">cakephp/upgrade</a></h3>
<p><span class="badge badge-success">Modifies Code</span></p>
<p>It's completely natural, that frameworks that evolve fast need a tool that helps their users to migrate.
CakePHP is jumping faster and faster in recent years, they made their own tool. It's based on regular expressions.</p>
<h3 id="a-href-https-github-com-silverstripe-silverstripe-upgrader-silverstripe-upgrader-a"><a href="https://github.com/silverstripe/silverstripe-upgrader">silverstripe-upgrader</a></h3>
<p><span class="badge badge-danger">AST</span>
<span class="badge badge-success">Modifies Code</span></p>
<p>SilverStripe is a PHP CMS coming from New Zealand. Its logic is very similar to Rector and I like it. It's also quite small, so the code is easy to understand. Be sure to check it!</p>
<h3 id="a-href-github-com-rectorphp-rector-rector-a"><a href="github.com/rectorphp/rector">Rector</a></h3>
<p><span class="badge badge-danger">AST</span>
<span class="badge badge-success">Modifies Code</span></p>
<p>It's <strong>2017</strong> and Rector still had to wait many months to be born. For what?</p>
<p>Well, it's built on php-parser and as it modifies the code and prints it back, it <strong>needed to keep spacing</strong>. That's one of AST drawbacks - it doesn't care about all that coding standards spacings.</p>
<p>They say &quot;history repeats&quot;, but I never trusted that. Untill I saw that similar need Fabien had while making the PHP CS Fixer in 2012 - <a href="https://github.com/nikic/PHP-Parser/issues/41">Optionally add nodes for whitespace</a>. More <strong>people wanted AST-based coding standards</strong>:</p>
<blockquote class="twitter-tweet" data-lang="cs"><p lang="en" dir="ltr"><a href="https://twitter.com/fabpot?ref_src=twsrc%5Etfw">@fabpot</a> zendframework, though we are moving afay from php-cs-fixer because it is not AST-based</p>— Supervising Program (@Ocramius) <a href="https://twitter.com/Ocramius/status/532622405290971136?ref_src=twsrc%5Etfw">12. listopadu 2014</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>php-parser <code>4.0-dev</code> already had this feature, so Rector ran on it since the very start. It was not until <a href="https://github.com/nikic/PHP-Parser/releases/tag/v4.0.0"><strong>February 2018</strong></a> when it was finally released.</p>
<p>Last giant Rector builds on is the one for type analysis - PHPStan. Thanks to that, it <strong>doesn't reinvent the wheel and can focus on the refactoring part</strong>.</p>
<p><br></p>
<p>And that's a brief history of big-brother tools that watch your code and modify it for you.</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/10/22/brief-history-of-tools-watching-and-changing-your-php-code</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 22 Oct 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/10/22/brief-history-of-tools-watching-and-changing-your-php-code#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How I Almost Missed My Talk in PHP Asia Conference ]]></title>
                <link>https://tomasvotruba.com/blog/2018/10/18/how-i-almost-missed-my-talk-in-php-asia-conference</link>
                <description><![CDATA[ <p>Last month you could not call me, cause I was on a month trip to Asia. For fun? Of course, <del>but also</del> for <a href="https://2018.phpconf.asia">PHP Conference Asia</a> where I talked about <a href="https://github.com/rectorphp/rector">Rector</a>. <br><br> It was my first trip to Asia ever, so obviously, it went wrong...</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="complex-over-simple">Complex over Simple</h2>
<p>I was flying to <a href="https://2018.phpconf.asia">PHP Conf Asia</a> that was held in Singapore from the beautiful city of Berlin... in 1 flight? No, that would too easy for me. Sometimes I want to go to my past me, <strong>slap him and make him choose the easy way for once</strong>.</p>
<p>So I picked rather <strong>dynamic trip</strong>:</p>
<ul>
<li>from Berlin to Riga - 1,5 hours flight</li>
<li>from Riga to Istanbul - 3 hours</li>
<li>and from Istanbul to Singapore - 10 hours!</li>
</ul>
<p>I had 4 hours break at each airport because airports are so fun, right? I took a risk in Riga and went from airport to the city center, just to get fresh rain and a good coffee. I made it - thanks EU internet treat!</p>
<p>I decided to spend my 4 hours in Istanbul Airport since it was my first time flying more than 3 hours and I was scared that I fill fuck something up if I'd got to the city.</p>
<p>I felt like a responsible traveler:</p>
<ul>
<li>I found a gate 709,</li>
<li>sit in front of it, <strong>3 meters</strong> from the table where airport worker checks your passport and ticket</li>
<li>checked the depart time 2:00 in the morning,</li>
<li>checked the <strong>gate closing time 1:35</strong>,</li>
<li>picked up my laptop and start working.</li>
</ul>
<p>I was there <strong>3 hours ahead</strong>, what could go wrong? There were a couple of Chinese and Japanese guys around, so it was obviously clear this is the flight to the right location.</p>
<h2 id="going-too-deep">Going Too Deep</h2>
<p>So, I'm coding, preparing a <a href="https://github.com/rectorphp/demo">new Rector demo repository</a> for the conference and fixing few bugs I found along. It's around 1:00 and a guy comes to the table - &quot;it will start soon and I'm right here, great&quot;, I thought to myself. <strong>This man made me feel secure</strong>, I would have to be really stupid to miss <em>his</em> last call right in front of me.</p>
<p><strong>I got back to coding and dove deep to the flow</strong>, fixing the code and making test pass like a machine gun. It's around 1:25 when I rise my ahead again. Still no boarding, hm. It's probably delayed a bit, that happened on my last flight, no big deal, 10 minutes here and there.</p>
<p>I don't know how that happened but when I raise my head again from the code, it was <strong>1:35</strong>. What is going on? Why the guy didn't come to me to tell me to board? I looked around and I saw nobody else was boarding. There were still the same 20 people I saw when I came here. I swear this is the first time I realized, it's a bit weird that there are only 20 people flying to Singapore. I mean, how big the plane is?</p>
<p><strong>My heart started to racing, I must have fucked up something.</strong> I closed the computer and almost jumped to the desk:</p>
<ul>
<li>&quot;Hi, is this the flight to Singapore?&quot;</li>
<li><em>&quot;Hello, I'm busy.&quot;</em></li>
</ul>
<p>I understood his not very clear English. <em>Fuck. Fuck. Fuck!</em> Noise in my head, <strong>this is not the right gate</strong>. What will I tell Mike? That I was on airport 4 hours in advance and that I missed my 3rd flight? That's a great way to start an international speaker career, Tom!</p>
<p>I run to displays and checked for my flight... It's here, 709. Good, uff... wait, it's 705. <em>Damn!</em> These are moments I appreciate really good UX. There were no number signs, except mine 709, so <strong>I started running in random direction</strong>... numbers were going up. I U-turned, hoping for at least <em>some</em> logic.</p>
<p>Good, it's rising! But the gate was closing at 1:35 and it was 1:38. Oh no, <strong>not that London experience again, when we missed the flight to Prague</strong> (the night end-up being awesome because there were 8 of us).</p>
<p>I run like crazy! This is my only chance!</p>
<p><br></p>
<p>Well, I missed the flight and spend my &quot;awesome&quot; month in Istanbul...</p>
<p><br></p>
<p>No, just kidding. <strong>I got almost heart attack, but in 10 seconds I found the right gate with 2 other last-call colleagues</strong>. I was thanking God, promising I'll never say anything bad to another living creature as thank-you reward for this gift.</p>
<p>Lesson learned? <strong>Ask, ask, ask!</strong> When I came to the group of people in 22:00, I could ask &quot;Is this flight to Singapore, right?&quot;. They'd say &quot;no&quot;, then I'd try to convince them it is, then I'd find the right gate. This one helped me a lot in next month, and it was just awesome!</p>
<h2 id="what-would-i-miss-on-php-conf-asia-if-i-d-miss-the-flight">What Would I Miss on PHP Conf Asia if I'd Miss the Flight?</h2>
<div class="text-center">
    <img src="https://2018.phpconf.asia/images/phpconfasia-logo.png"></div>
<p>I'm very glad I made it. People on the conference <strong>were possessed with kindness and generosity</strong> I never saw before on such a big IT event:</p>
<ul>
<li>from the best wing-woman &quot;Tom, have you met...&quot; that introduced me to many fellow-speakers and visitors,</li>
<li>over curious guys from all around Asia, who tried Rector and assumed every bug was their mistake,</li>
<li>to organizer <a href="https://twitter.com/coderkungfu">Michael Cheng</a>, who always let me rest from my first jet lag.</li>
</ul>
<div class="text-center">
    <img src="/assets/images/posts/2018/phpasia/round.jpg" class="img-thumbnail"></div>
<p><strong>I'm very grateful I could be their guys, I enjoyed talking with you, sharing experience and views on life and code.</strong></p>
<p>I also loved panel discussion <em>PHP - The journey so far (and what's ahead)</em> with Rasmus Lerdorf, Sebastian Bergmann and Derick Rethans. The questions from the community were insightful and touching really important moments.</p>
<p>I would not believe how much can change in software in 15 years.</p>
<div class="text-center">
    <img src="/assets/images/posts/2018/phpasia/coffee.jpg" class="img-thumbnail"></div>
<p>One more thing, <strong>the coffee was supreme</strong>. I never had better coffees at the conference - so good I had 6 of them in 2 hours.</p>
<h2 id="come-next-time">Come Next Time!</h2>
<p>Michael shared with a big secret: <strong>not many people from Europe knew about the CFP</strong> or were willing to fly such a distance, who knows - there were actually more free talks slots.</p>
<p>This conference really loves to support diversity and international exchange visitors. So if you want to talk somewhere abroad and you've been to your neighbor country already, <strong>follow <a href="https://twitter.com/phpconfasia">@phpconfasia</a> and be ready to send your talks</strong>.</p>
<div class="text-center">
    <img src="/assets/images/posts/2018/phpasia/mefie.jpg" class="img-thumbnail"></div>
<p>I'd be happy to go with you if I'll have the chance.</p>
<h2 id="what-is-singapore-like">What is Singapore Like?</h2>
<div class="text-center">
    <img src="/assets/images/posts/2018/phpasia/nature.jpg" class="img-thumbnail"></div>
<p>I got a chance to stay a whole week (thanks again, Michael!) there and I must say, it's a huge crazy city.</p>
<p>But it also has...</p>
<ul>
<li>cheap places to eat in,</li>
<li><strong>super cheap public transport</strong> - where Berlin costs 7 €/day, you'll spend that in Singapore in 3 days</li>
<li><strong>rich free gardens</strong>,</li>
<li><strong>great coffee</strong> + wifi right in the center (too bad I found out the night before I left the city)</li>
<li>awesome views from the top of buildings,</li>
</ul>
<p>...and many more for you to discover</p>
<p>Everyone speaks English so it's easy to ask, orientate and get it right.</p>
<h2 id="there-is-a-bigger-php-family-than-you-think">There is a Bigger PHP Family than You Think</h2>
<div class="text-center">
    <img src="/assets/images/posts/2018/phpasia/family.png" class="img-thumbnail"><p><a href="https://friendsofphp.org/">Friendsofphp.org</a></p>
</div>
<p><br></p>
<p>In the end, this conference gave me a lot to think about. There is more than Symfony, than Laravel, than PHP 7, than Europe.
There is huge PHP community I never knew about, with many awesome people... not people, <strong>but heroes who build their local communities, share their know-how and bring people together</strong> with much less payment and resource then we in Europe have.</p>
<p><strong>This gave me a kick from my bubble I live in</strong>. The kick I needed. Such a kick that during next 2 week I stayed in Malaysia it made me work on:</p>
<ul>
<li><a href="https://friendsofphp.org">Friendsofphp.org</a> - to grow from 200 PHP groups to 1023 PHP groups from the whole world</li>
<li><a href="https://github.com/rectorphp/rector/issues/638">Rector PHP Upgrades</a> - we all have framework preferences, but we all write code in some PHP version</li>
</ul>
<p><br></p>
<p>I had a great time - thank you Michael and the whole PHP Asia Conf team!</p>
<p>See you next time in Singapore.</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/10/18/how-i-almost-missed-my-talk-in-php-asia-conference</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 18 Oct 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/10/18/how-i-almost-missed-my-talk-in-php-asia-conference#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ What is Your Third Door? - Book Review ]]></title>
                <link>https://tomasvotruba.com/blog/2018/10/15/what-is-your-third-door-book-review</link>
                <description><![CDATA[ <p>Do you live in a big house? Then I guess you know this problem. There is the main door, there is the garden door and most people use these.
<br>
<br>
But what if the police come to bring you in for your financial frauds and child porn, <strong>what door do you take to run</strong>?</p> ]]></description>
                <content:encoded><![CDATA[ <img src="/assets/images/posts/2018/third-door/book.jpg" class="img-thumbnail">
<p>The <em>Third Door</em> book is actually a story of 18-year Alex, <strong>who chases a dream to interview people like</strong>:</p>
<ul>
<li>Bill Gates</li>
<li>Warren Buffet</li>
<li>Steve Wozniak - in this book I finally saw Steve Jobs from another point of view,</li>
<li>Jessica Alba - do you she owns <em>The Honest Company</em>?</li>
<li>Tim Ferris</li>
<li>Steven Spielberg</li>
<li>Larry King</li>
<li>Mark Zuckerberg</li>
</ul>
<p>I don't remember names usually, but I got all these from top of my head - that's how <strong>emotional and tense this book is</strong>.</p>
<h2 id="why">Why?</h2>
<p>He wants to find out, what all these people do differently. What skills got them to the place they are now.
This book is about <strong>hackers' minds</strong>.</p>
<p>And it's not an easy journey, it takes more than 4 years of struggle, pain, childhood traumas, rejections, a friend who turns to great liar but also mentor from heaven, support from family, friends and bigger community of people alike.</p>
<blockquote class="blockquote text-center">
    "Reading about Tony Hsieh’s journey—about the leaps of faith he took despite everything that could go wrong—helped me find the courage within myself I didn’t know I had. Reading about his dream fueled me to pursue my own."
</blockquote>
<p><strong>What would you do for 4 years in a row without getting above the profit line?</strong></p>
<h2 id="emotions-over-solutions">Emotions over Solutions</h2>
<p>What <strong>I love about this book</strong> is that it's different from all the other self-help porn. It doesn't include:</p>
<ul>
<li>&quot;10 ways to be more effective you can do right now&quot;</li>
<li>or better &quot;scientist found out, that average person spends 30 minutes a day in the deep-work state, aim for 8 hours to beat your competition&quot;</li>
</ul>
<p>These are all <strong>imperatives</strong>, we love to use them, but they barely work.</p>
<p>Do you know what spreads better than thoughts? <strong>Emotions</strong>! The Third Dood book tells the story with wisdom very neatly placed between the lines.</p>
<blockquote class="blockquote text-center">
    "A true hustler is always looking for the next one," he said.<br>
    "It's like playing a video game - let's say Mario Bros."
</blockquote>
<h2 id="single-honest-story">Single Honest Story</h2>
<p>I don't want to spoil much, but I'll say one thing: <strong><em>The Third Door</em>  is the most engagement book I've read in 2018</strong>. It sucked me in and let me go in a few weeks. I felt smart, I felt connected to Alex, I cried when... well, you'll see.</p>
<blockquote class="blockquote text-center">
    "When I was young, I admired clever people. Now that I am old, I admire kind people."
</blockquote>
<p>Many pop-science-self-help authors like <em>Daniel Pink</em>, <em>Simon Sinek</em> or <em>Cal Newport</em> pop one book after another. Their books are mostly based on research and many small stories and have high quality. They're helpful, but in time it gets boring when you have to think and don't learn much (do you remember school?). In and out.</p>
<p>What I want to say is that I love that <strong>Alex only wrote only this single one book</strong>. It's his life story. Do you connect better to single life's person or to 15 research papers and 50 small stories? And rapport is crucial in learning.</p>
<h2 id="give-it-a-1-chapter-try">Give it a 1-Chapter Try</h2>
<p>It's so hard not to spoil anything when the story was so good. You know like in the <em>Avengers: Infinity War</em>, when (spoiler protection), and you wanted to tell everyone?</p>
<blockquote class="blockquote text-center">
    "When it's in front of you... make your move."
</blockquote>
<p>So I stop here. If you feel you don't have time to read this book, just reach me in person and I'll tell you more.</p>
<p><br></p>
<p>But if you want to <strong>become better and more confident hacker</strong> in both life and software, <strong><a href="https://www.amazon.com/Third-Door-Uncover-Successful-Launched-ebook/dp/B076NS2JSW">download first chapter</a> for free</strong> and see if it fits you.</p>
<p><br><br></p>
<p>Happy hacking!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/10/15/what-is-your-third-door-book-review</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 15 Oct 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/10/15/what-is-your-third-door-book-review#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Hi, my name is Tom - Concat vs. Sprintf vs. In-String Variable ]]></title>
                <link>https://tomasvotruba.com/blog/2018/10/11/hi-my-name-is-tom-conctat-vs-in-sprintf-vs-in-string-variables</link>
                <description><![CDATA[ <p>My recent post about <a href="/blog/2018/09/17/7-tips-to-write-exceptions-everyone-will-love/">lovely exceptions</a> opened very interesting question. <a href="/blog/2018/09/17/7-tips-to-write-exceptions-everyone-will-love/#comment-4100904216">In comments bellow the post</a>, <a href="https://www.reddit.com/r/PHP/comments/9hehv6/7_tips_to_write_exceptions_everyone_will_love/e6d3hic">in Reddit thread</a> and <a href="https://mobile.twitter.com/geekovo/status/1043185111309713408">on  Twitter</a>.
<br>
<br>
A questions about <strong>connecting string with variables</strong>.
You have 3 options. Each has its strong and weak points. How do you pick the right one?</p> ]]></description>
                <content:encoded><![CDATA[ <p>In how many ways you can register a service in Symfony or call a service method in Laravel?
PHP and PHP frameworks are so free, that you often have 3+ ways to do one 1 thing. But that comes with a price.</p>
<p><strong>The more approaches you use, the more has to the reader learn about rules of coding and the less space he or she has for real algorithms</strong>. You can be really cool by using marginal PHP features, but if nobody except you understands it, you only hurt your code.</p>
<h2 id="how-to-pick-the-best-solution">How to Pick The Best Solution?</h2>
<p>Instead of using what you already use (the most common non-sense argument for everything), try to imagine that <strong>your colleague is about to create a pull-request with PHP features you've never seen before</strong>.</p>
<p>What should it be like?</p>
<ul>
<li><strong>easy to learn</strong></li>
<li><strong>easy to maintain</strong> = changed by somebody else who might see it for the first time</li>
<li><strong>hard to fuck up</strong></li>
</ul>
<p><br></p>
<p>Let's try the simplest example possible:</p>
<blockquote class="blockquote text-center">
    "Hi, my name is Tom."
</blockquote>
<h2 id="1-easy-to-learn">1. Easy To Learn</h2>
<pre><code class="language-php">&lt;?php

$name = 'Tom';

# 1. concat
$message = 'Hi, my name is ' . $name;

# 2. sprintf
$message = sprintf('Hi, my name is %s', $name);

# 3. in-string variable
$message = 'Hi, my name is $name';</code></pre>
<h3 id="em-class-fas-fa-fw-fa-check-text-success-fa-lg-em-concat"><em class="fas fa-fw fa-check text-success fa-lg"></em> Concat</h3>
<p>Just like a <code>+</code> for numbers, but for strings.</p>
<h3 id="em-class-fas-fa-fw-fa-times-text-danger-fa-lg-em-sprintf"><em class="fas fa-fw fa-times text-danger fa-lg"></em> Sprintf</h3>
<p>What the hell is <code>%s</code>? I'd have to read <a href="http://php.net/manual/en/function.sprintf.php">the manual</a>... <code>%s</code> for strings, <code>%d</code> for numbers.</p>
<h3 id="em-class-fas-fa-fw-fa-check-text-success-fa-lg-em-in-string-variable"><em class="fas fa-fw fa-check text-success fa-lg"></em> In-String Variable</h3>
<p>I guess I copy the variable inside the string.</p>
<h2 id="2-easy-to-maintain">2. Easy To Maintain</h2>
<p>Let's say, I'd like to tell more about myself.</p>
<pre><code class="language-diff"> &lt;?php

 $name = 'Tom';
+$love = 'PHP';

 # 1. concat
-$message = 'Hi, my name is ' . $name;
+$message = 'Hi, my name is ' . $name . ' and I love ' . $love;

 # 2. sprintf
-$message = sprintf('Hi, my name is %s', $name);
+$message = sprintf('Hi, my name is %s and I love %s', $name, $love);

 # 3. in-string variable
-$message = 'Hi, my name is $name';
+$message = 'Hi, my name is $name and I love $love';</code></pre>
<p>Or quote the name to express it's a variable string:</p>
<pre><code class="language-diff"> &lt;?php

 $name = 'Tom';
 $love = 'PHP';

 # 1. concat
-$message = 'Hi, my name is ' . $name . ' and I love ' . $love;
+$message = 'Hi, my name is "' . $name . '" and I love ' . $love;

 # 2. sprintf
-$message = sprintf('Hi, my name is %s and I love %s', $name, $love);
+$message = sprintf('Hi, my name is "%s" and I love %s', $name, $love);

 # 3. in-string variable
-$message = 'Hi, my name is $name and I love $php';
+$message = 'Hi, my name is "$name" and I love $php';</code></pre>
<h3 id="em-class-fas-fa-fw-fa-times-text-danger-fa-lg-em-concat"><em class="fas fa-fw fa-times text-danger fa-lg"></em> Concat</h3>
<p>1 new element = 2 new dots <code>.</code>. I have to think where to put it. Imagine there will be 4 elements one day.
I also type like a dyslexic, so seeing <code>'"'</code> hurts.</p>
<h3 id="em-class-fas-fa-fw-fa-check-text-success-fa-lg-em-sprintf"><em class="fas fa-fw fa-check text-success fa-lg"></em> Sprintf</h3>
<p>Nice to read.</p>
<h3 id="em-class-fas-fa-fw-fa-check-text-success-fa-lg-em-in-string-variable"><em class="fas fa-fw fa-check text-success fa-lg"></em> In-String Variable</h3>
<p>Still the same.</p>
<h2 id="3-hard-to-fuck-up">3. Hard to Fuck Up</h2>
<h3 id="em-class-fas-fa-fw-fa-times-text-danger-fa-lg-em-concat"><em class="fas fa-fw fa-times text-danger fa-lg"></em> Concat</h3>
<pre><code class="language-php">&lt;?php

$name = 'Tom';
$love = 'PHP';
$also =  'to travel';

$message = 'Hi, my name is ' . $name . ' and I love ' . $love . 'and also' . $also;</code></pre>
<p>Can you spot it? This already happened me million times. I never make extra spaces anywhere else in the code.</p>
<h3 id="em-class-fas-fa-fw-fa-check-text-success-fa-lg-em-sprintf"><em class="fas fa-fw fa-check text-success fa-lg"></em> Sprintf</h3>
<p>This also happens...</p>
<pre><code class="language-php">&lt;?php

$name = 'Tom';
$love = 'PHP';

$message = sprintf('Hi my name is %s and I love %s', $name);
// PHP Warning: sprintf(): Too few arguments</code></pre>
<p>...or this...</p>
<pre><code class="language-php">&lt;?php

$name = 'Tom';
$love = 'PHP';

$message = sprintf('Hi my name is %s and I love s', $name, $love);
// PHPStan: Call to sprintf contains 1 placeholder, 2 values given.</code></pre>
<p>...but PHP and PHPStan got us covered.</p>
<h3 id="em-class-fas-fa-fw-fa-times-text-danger-fa-lg-em-em-class-fas-fa-fw-fa-times-text-danger-fa-lg-em-in-string-variable"><em class="fas fa-fw fa-times text-danger fa-lg"></em><em class="fas fa-fw fa-times text-danger fa-lg"></em> In-String Variable</h3>
<p>I must confess, I've tricked you (and myself too until I tried <a href="https://3v4l.org/RXpu1">running the code</a>):</p>
<img src="/assets/images/posts/2018/connect-strings/quote-fuckup.png" class="img-thumbnail">
<p><strong>And PHP tells you... <em>nothing</em>, it happily prints the wrong strings.</strong></p>
<p>From removing magic quotes, I'm very happy that I don't have to think about what is really working.</p>
<p>This problem is <a href="http://php.net/manual/en/migration70.incompatible.php#migration70.incompatible.variable-handling.indirect">mentioned in PHP Doc</a> though, but who of you even read what <code>%f</code> in <code>sprintf</code> stands for:</p>
<img src="/assets/images/posts/2018/connect-strings/php-fuckup.png" class="img-thumbnail">
<p>And what about this, will it be escaped?</p>
<img src="/assets/images/posts/2018/connect-strings/escaped.png" class="img-thumbnail">
<p>Why stopping there. What about <strong>method calls</strong>?</p>
<pre><code class="language-php">&lt;?php

$nameProvider = new NameProvider();

# 1. concat
$message = 'Hi, my name is ' . $nameProvider-&gt;provide();

# 2. sprintf
$message = sprintf('Hi, my name is %s', $nameProvider-&gt;provide());

# 3. in-string variable
$message = 'Hi, my name is $nameProvider-&gt;provide()';
$message = 'Hi, my name is ${nameProvider}-&gt;provide()';
$message = 'Hi, my name is ${nameProvider-&gt;provide()}';
$message = 'Hi, my name is {$nameProvider-&gt;provide()}';
# ?</code></pre>
<p>This is so complex, that there is even a <strong>coding standard fixer for such cases</strong>:</p>
<img src="/assets/images/posts/2018/connect-strings/fixer.png" class="img-thumbnail">
<p>Next image is not exclusively related to strings, but it shines the same <em>instant coolness</em> that will hunt you down later:</p>
<img src="/assets/images/posts/2018/connect-strings/fuckup.png">
<p>And it's a hell to upgrade such a code (even with Rector). Read more about it in <a href="https://secure.php.net/manual/en/language.types.string.php#language.types.string.parsing">PHP Doc</a></p>
<p><br></p>
<h2 id="em-class-fas-fa-fw-fa-check-text-success-fa-lg-em-whatever-you-pick-stick-with-it"><em class="fas fa-fw fa-check text-success fa-lg"></em> Whatever You Pick, Stick With It</h2>
<p>We all <strong>start with one approach, then jump to another whenever we need</strong>. <em>Damn you, brain!</em></p>
<p>That's how such code is born:</p>
<img src="/assets/images/posts/2018/connect-strings/dual.png" class="img-thumbnail">
<p>And your code readers will have to think:</p>
<ul>
<li>Is there some hidden reason I don't know?</li>
<li>When is the line?</li>
<li>What to use when?</li>
</ul>
<p><a href="https://www.amazon.com/Dont-Make-Me-Think-Usability/dp/0321344758">Don't make them think</a> and stick with one approach in your code.
Your readers will have <strong>50 % more brain energy to improve your code</strong> then they'd have otherwise.</p>
<p><br></p>
<p>But still, <strong>which one of</strong>...</p>
<ul>
<li>concat</li>
<li><code>sprintf</code></li>
<li>in-string variable</li>
</ul>
<p>...<strong>is your favorite and why?</strong> Tell me in comments, I've definitely missed many fuckups.</p>
<p><br></p>
<p>Happy connecting!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/10/11/hi-my-name-is-tom-conctat-vs-in-sprintf-vs-in-string-variables</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 11 Oct 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/10/11/hi-my-name-is-tom-conctat-vs-in-sprintf-vs-in-string-variables#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ New in Symplify 5: Create, Merge and Split Monorepo with 1 Command ]]></title>
                <link>https://tomasvotruba.com/blog/2018/10/08/new-in-symplify-5-create-merge-and-split-monorepo-with-1-command</link>
                <description><![CDATA[ <p>Do you want to create, validate and manage your monorepo like a pro? There is no science behind it, just a few routine steps that you need to repeat.
<br><br>
And now there is a <strong>tool that will handle these steps for you</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <p>This package was initially released in Symplify 4.5, but it took some time to test in practice, remove WTFs and be sure it contains all people need.</p>
<p>Now there are 7 commands in total, but today we'll focus <strong>on the 4 most important ones</strong>.</p>
<p>First, install this package to an empty repository:</p>
<pre><code class="language-bash">composer require symplify/monorepo-builder --dev</code></pre>
<h2 id="1-create-your-monorepo">1. Create Your Monorepo</h2>
<p>You'll run this command <strong>just once</strong> to create a monorepo in the empty repository.</p>
<pre><code class="language-bash">vendor/bin/monorepo-builder init</code></pre>
<p>It will prepare basic monorepo structure with 2 packages:</p>
<pre><code class="language-bash">/packages
    /first-package
        /src
        composer.json
    /second-package
        /src
        composer.json
composer.json
monorepo-builder.yml # basic configuration</code></pre>
<p>Use <code>composer.json</code> as you know it for most sections. But to manage <strong><code>require</code>, <code>require-dev</code>, <code>autoload</code> and <code>autoload-dev</code></strong> sections use only <code>/packages/first-package/composer.json</code>, <code>/packages/second-package/composer.json</code> like they were standalone packages.</p>
<p>Extra - mostly-dev - dependencies are managed by <code>monorepo-builder.yml</code>.</p>
<p>Is that unclear to you? Don't worry, you'll see how it works in <code>merge</code> command below.</p>
<h2 id="2-validate-it">2. Validate it</h2>
<p>This command will tell you if your dependency versions are the same in every packages' <code>composer.json</code> and in root <code>composer.json</code>.</p>
<pre><code class="language-bash">vendor/bin/monorepo-builder validate</code></pre>
<img src="/assets/images/posts/2018/symplify-5-monorepo-builder/validate.png" class="img-thumbnail">
<p>You don't have to run this command manually since it's included in the next one.</p>
<h2 id="3-merge-code-composer-json-code">3. Merge <code>composer.json</code></h2>
<pre><code class="language-bash">vendor/bin/monorepo-builder merge</code></pre>
<p>Here you'll understand the magic from <code>init</code> command. With <code>merge</code> command, the Monorepo Builder will join all packages' <code>composer.json</code> - after validation of course.</p>
<p>And what about extra dependencies like PHPUnit, coding standards and static analysis?</p>
<pre><code class="language-yaml"># monorepo-builder.yml
parameters:
    # for "merge" command
    data_to_append:
        require-dev:
            phpunit/phpunit: '^7.3'</code></pre>
<p>That's what <code>data_to_append</code> section is for. These packages and versions will be added to <code>composer.json</code>.</p>
<p><em>Btw, all packages are nicely sorted by name so you always find them quickly.</em></p>
<h2 id="4-split-it-to-multiple-repositories">4. Split It to Multiple Repositories</h2>
<p>Let's do the split! Wait, do you even want to split packages into separate repositories? If so:</p>
<pre><code class="language-bash">vendor/bin/monorepo-builder split</code></pre>
<p>It's all prepared in config:</p>
<pre><code class="language-yaml">parameters:
    # for "split" command
    directories_to_repositories:
        packages/first-package: 'git@github.com:your-monorepo/first-package.git'
        packages/secnod-package: 'git@github.com:your-monorepo/second-package.git'
</code></pre>
<p>This step is optional. Most people use only <code>init</code> and <code>merge</code> command at the start.</p>
<h3 id="do-you-want-to-know-more">Do you Want to Know More?</h3>
<p>Discover other commands:</p>
<pre><code class="language-bash">vendor/bin/monorepo-builder</code></pre>
<p>and read <a href="https://github.com/symplify/monorepobuilder"><code>README</code></a> for detail usage and tricks.</p>
<p><br></p>
<p>Happy monorapping!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/10/08/new-in-symplify-5-create-merge-and-split-monorepo-with-1-command</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 08 Oct 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/10/08/new-in-symplify-5-create-merge-and-split-monorepo-with-1-command#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ New in Symplify 5: Public Method Order and External Final in CodingStandard ]]></title>
                <link>https://tomasvotruba.com/blog/2018/10/04/new-in-symplify-5-public-method-order-and-external-final-in-coding-standard</link>
                <description><![CDATA[ <p>Coding Standard 5 replaced fixers that renamed classes with more tolerant sniffs. What else is there?
<br>
New config options <strong>that shorten your config file</strong> and <strong>2 new checkers to keep your code in order</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <p>Don't you have this package installed yet?</p>
<pre><code class="language-bash">composer require symplify/coding-standard --dev</code></pre>
<p>Now enjoy the news ↓</p>
<h2 id="3-final-for-3rd-party-classes">3. Final for 3rd Party Classes</h2>
<p>If you're strict enough to <code>final</code> or <code>abstract</code> everywhere, you'll love this. Sometimes 3rd party code is not <code>final</code>, but you'd love to never see that class in your code - Abstract Controller, Abstract Doctrine Repository or Abstract Object.</p>
<p>Those <code>abstract</code> classes are full of <strong>magic everyone has to <a href="/blog/2018/08/27/why-and-how-to-avoid-the-memory-lock/">remember</a></strong>. What if you could <strong>prevent that spreading to your code without constant code-reviews</strong>?</p>
<p>Let PHPStan rule do the job:</p>
<pre><code class="language-yaml"># phpstan.neon
rules:
    - Symplify\CodingStandard\Rules\ForbiddenParentClassRule

parameters:
    symplify:
        forbidden_parent_classes:
            - 'Doctrine\ORM\EntityRepository'
            - 'Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository'</code></pre>
<p>This will prevent over-inheritance and embrace composition - like in <a href="/blog/2017/10/16/how-to-use-repository-with-doctrine-as-service-in-symfony/">Repositories as Services</a> approach:</p>
<p><em class="fas fa-fw fa-times text-danger fa-lg"></em></p>
<pre><code class="language-php">&lt;?php

use Doctrine\ORM\EntityRepository;

final class ProductRepository extends EntityRepository
{
}</code></pre>
<p><em class="fas fa-fw fa-check text-success fa-lg"></em></p>
<pre><code class="language-php">&lt;?php

use Doctrine\ORM\EntityRepository;

final class ProductRepository
{
    /**
     * @var EntityRepository
     */
    private $entityRepository;

    public function __construct(EntityRepository $entityRepository)
    {
        $this-&gt;entityRepository = $entityRepository;
    }
}</code></pre>
<p><br></p>
<p>That's all folks. Happy sniffing!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/10/04/new-in-symplify-5-public-method-order-and-external-final-in-coding-standard</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 04 Oct 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-08-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Aug 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/10/04/new-in-symplify-5-public-method-order-and-external-final-in-coding-standard#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ New in Symplify 5: Generate Rich, Precise and Smart Changelog in Seconds ]]></title>
                <link>https://tomasvotruba.com/blog/2018/10/01/new-in-symplify-5-generate-rich-precise-and-smart-changelog-in-seconds</link>
                <description><![CDATA[ <p>ChangelogLinker started as a small tool to complete links to PRs, authors, and versions in <code>CHANGELOG.md</code>. Then it started to <a href="/blog/2018/06/25/let-changelog-linker-generate-changelog-for-you/">generate</a> the <code>CHANGELOG.md</code>.
<br><br>
<strong>Where is now and how to start using it?</strong></p> ]]></description>
                <content:encoded><![CDATA[ <h3 id="tested-on-humans">Tested on Humans ✅</h3>
<p><a href="https://github.com/shopsys/shopsys/pull/446/files" class="btn btn-dark btn-sm mt-2">
<em class="fab fa-github fa-fw"></em>
See pull-request #446 on Shopsys
</a></p>
<blockquote class="blockquote text-center">
    "If you're not embarrassed by the first version of your product,<br>
    you've launched too late."
    <footer class="blockquote-footer"><a href="https://www.linkedin.com/pulse/arent-any-typos-essay-we-launched-too-late-reid-hoffman">Reid Hoffman</a>, Founder of Linkedin</footer></blockquote>
<p>The first version of any software is how the author(s) think people will use it. It's like trying to see the future of people you've never met. That's why the first version is <strong>better done than perfect</strong>. The important part is to <strong>collect feedback as soon as possible and improve based</strong> on it.</p>
<p>Saying that I recommended ChangelogLinker to Shopsys to manage news in their <a href="https://github.com/shopsys/shopsys">monorepo</a>. In exchange, I got informative and clear feedback with creative ideas on how to solve it from <a href="https://github.com/vitek-rostislav">Rostislav Vitek</a> and <a href="https://github.com/petrheinz">Petr Heinz</a>. <strong>Huge thanks for making this tool better belongs to you guys</strong>.</p>
<p><br></p>
<p>First, install this package:</p>
<pre><code class="language-bash">composer require symplify/changelog-linker --dev</code></pre>
<h2 id="1-multiple-code-changelog-md-code-for-smaller-versions">1. Multiple <code>CHANGELOG.md</code> for Smaller Versions</h2>
<p><a href="https://github.com/symplify/symplify/pull/1047/files#diff-3b69acbe6b33a88158b373e6e96de097" class="btn btn-dark btn-sm">
<em class="fab fa-github fa-fw"></em>
See pull-request #1047
</a></p>
<p>If you have more than 2 major versions, your changelog can be really long and hard to orientate. Some people want to see the news in your version 3, some are still using version 1 and need to upgrade gradually.</p>
<p>I got this inspiration from Symfony, where they have *<em>own CHANGELOG per minor versions</em>:</p>
<pre><code class="language-bash">CHANGELOG-4.0.md
CHANGELOG-4.1.md</code></pre>
<p>Good idea to keep files not huge and clear. So <strong>Now</strong> it's possible to work with each CHANGELOG file separately - just use file path as the first argument of any command:</p>
<pre><code class="language-php">vendor/bin/changelog-linker link # "CHANGELOG.md" is used
vendor/bin/changelog-linker link CHANGELOG-2.md
vendor/bin/changelog-linker link CHANGELOG-3.md</code></pre>
<h2 id="2-smarter-last-change-detection">2. Smarter Last Change Detection</h2>
<p><a href="https://github.com/symplify/symplify/commit/05d91b9412ebec49a66a4717d856a5a2c6718232" class="btn btn-dark btn-sm">
<em class="fab fa-github fa-fw"></em>
See commit
</a></p>
<p>This package generates changelog from merged PRs, that are not mentioned in your <code>CHANGELOG.md</code> yet.</p>
<pre><code class="language-bash">vendor/bin/changelog-linker dump-merges</code></pre>
<p><strong>Before</strong> it looks for the highest merged PR ID and added only PRs with higher id. But what if you merge PR with number 1000, but number 990 is still opened due to longer code review?</p>
<p><strong>Now</strong> it works with the <code>merged_at</code> instead, so no merged PR is left behind.</p>
<h2 id="3-remove-dead-links">3. Remove Dead Links</h2>
<p><a href="https://github.com/symplify/symplify/pull/1045/files" class="btn btn-dark btn-sm">
<em class="fab fa-github fa-fw"></em>
See pull-request #1045
</a></p>
<p>This is the best command to start with when you install this package for the first time.</p>
<p><code>CHANGELOG.md</code> can be edited, items removes, shifter above or links duplicated. To keep it fit and slim, you'd have to check this manually with every link. And believe me, if you have 500+ PRs, 50+ contributors and 30+ versions, it's not as fun as you imagine.</p>
<p>That's where &quot;cleanup&quot; rocks:</p>
<pre><code class="language-bash">vendor/bin/changelog-linker cleanup

# again, you can use the file as argument
vendor/bin/changelog-linker cleanup CHANGELOG-2.md</code></pre>
<p>In Symplify <code>CHANGELOG.md</code> itself it <a href="https://github.com/symplify/symplify/pull/1045/files#diff-4ac32a78649ca5bdd8e0ba38b7006a1e">removed 50 dead lines</a>.</p>
<h2 id="4-improved-category-detection">4. Improved Category Detection</h2>
<p><a href="https://github.com/symplify/symplify/pull/1064/files#diff-2ee93fc74523d03ea046d5419ae75a9a" class="btn btn-dark btn-sm">
<em class="fab fa-github fa-fw"></em>
See pull-request #1064
</a></p>
<p><small>
Thanks to <a href="http://github.com/petrheinz">Petr Heinz</a> ❤️️
</small></p>
<p><br></p>
<p>When you generate a <code>CHANGELOG.md</code> you can use <code>--in-categories</code> option:</p>
<pre><code class="language-bash">vendor/bin/changelog-linker dump-merges --in-categories</code></pre>
<p>It will assign PRs to one of 4 categories: <em>Added</em>, <em>Fixed</em>, <em>Changed</em> and <em>Removed</em>. I didn't make them up, it's a standard taken from <a href="https://keepachangelog.com/en/1.0.0">keepachangelog.com</a>.</p>
<p><strong>How it works?</strong> It uses regex to detect keywords in the pull-request title, e.g.</p>
<p><code>Added "cleanup" command</code> → Added
<code>Remove dead links</code> → Removed
<code>Fix ID detection</code> → Fixed</p>
<p>You can see all the regexes in <a href="https://github.com/symplify/symplify/blob/v5.0.0/packages/ChangelogLinker/src/ChangeTree/Resolver/CategoryResolver.php"><code>CategoryResolver</code></a>.</p>
<p>Peter added many keywords, but also showed me a new trick : <strong>the <a href="https://www.regular-expressions.info/wordboundaries.html"><code>\b</code> wrapper</a></strong>:</p>
<pre><code class="language-bash">-private const ADDED_PATTERN = '#(add|added|adds) #i';
+private const ADDED_PATTERN = '#\b(add(s|ed|ing)?)\b#i';</code></pre>
<p>It means, that words need to be standalone. Not part of any other string.
Regex <code>\b(is)\b</code> applied to <code>"This island is beautiful"</code> returns <code>["is"]</code>.</p>
<p>A very nice trick that made detection much more precise. Thanks, Peter!</p>
<p><br></p>
<p>Happy changing!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/10/01/new-in-symplify-5-generate-rich-precise-and-smart-changelog-in-seconds</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 01 Oct 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/10/01/new-in-symplify-5-generate-rich-precise-and-smart-changelog-in-seconds#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Open-Source Behind The Scenes - Finding the Rector Vision ]]></title>
                <link>https://tomasvotruba.com/blog/2018/09/27/open-source-behind-the-scenes-finding-the-rector-vision</link>
                <description><![CDATA[ <p>Open-source is not only about programming, maintaining, adding new features and spreading the word. It's also about other decisions of the maintainer, that are hidden from users.
<br><br>
I often ask myself: What values should it spread around the world? Where do I take time and money to develop it? How should it scale? How to make it useful to both people and me?</p> ]]></description>
                <content:encoded><![CDATA[ <p>It's not always easy to work with community feedback, as opinions and needs are often unique, sometimes contradictory. Sometimes clean-code kills growth, sometimes it's the legacy.</p>
<p>To give you a little <strong>insight into maintainer's mind</strong>, I'll share a letter I've to send to Symfony guys where I sum up events of recent months.</p>
<p><br></p>
<p>&quot;...thank you for your reply. It gave me a very nice kick and more energy to my blood to work on this.</p>
<p>Sorry for my late reply, but I had to explore my vision with Rector a lot. I had to face many blinds paths and demons.</p>
<p>I held talks in Berlin, Vienna, and Pardubice during past 3 months and had to think a lot about the following direction. I talked with Dan Leech, author of <a href="https://github.com/phpactor/phpactor">phpactor</a> (~= Rector as a plugin for Vim) and from Nils Adermann with insights from Private Packagist. I got plenty of feedback, offline and online.</p>
<p>Many people told me to go to the &quot;Symfony&quot; shift. It would make money, it would save bug reports from people since I'd be the one to manage it and I could invest that money to grow Rector a more.</p>
<p>But then <strong>I got feedback from more communities</strong>. I'm in touch with the CakePHP community. In last week I made this config that can do <a href="https://github.com/rectorphp/rector/pull/634/files#diff-66bde3273ac825a92cf71b2e0bb9f674">140 changes in Cake PHP 3.4</a>.</p>
<blockquote class="blockquote text-center">
    Everyone is having the same problem: <strong>they need to move fast wide-spread legacy code in their growing communities</strong>.
</blockquote>
<p>Also, a company from Vienna invited me again, sponsored my travel + stay and <a href="https://github.com/nikic/PHP-Parser/pull/533">we made live PR to php-parser in a matter of 30 seconds</a>. It got merged 2 days after. The company itself is almost finished with a migration of private legacy code to Laravel and they were interested in Rector's features.</p>
<p>Have you seen &quot;safe&quot; package in Github trends? Rector is now <a href="https://github.com/thecodingmachine/safe#automated-refactoring">helping people to migrate their code</a>.</p>
<p>Yes, I could go to one community and help only them to make the migration almost flawless. But now I see many communities using Rector creative way I could never think of. Also, I'm not doing this for money (like ClangMR from Google or Larashift), but so programmers can be free with the most recent version of the framework they love.</p>
<p>So, for now, I'm deciding to stay open, help here and there little with projects that come along, and see what inspiration it brings to people...&quot;</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/09/27/open-source-behind-the-scenes-finding-the-rector-vision</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 27 Sep 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/09/27/open-source-behind-the-scenes-finding-the-rector-vision#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ New in Symplify 5: 3 News in EasyCodingStandard to Smoother Your Experience ]]></title>
                <link>https://tomasvotruba.com/blog/2018/09/24/new-in-symplify-5-3-news-in-easy-coding-standard-to-smoother-your-experience</link>
                <description><![CDATA[ <p>Let's get lazier and lazier.</p> ]]></description>
                <content:encoded><![CDATA[ <p>You don't have this package installed yet?</p>
<pre><code class="language-bash">composer require symplify/easy-coding-standard --dev</code></pre>
<p>Now enjoy the news ↓</p>
<h2 id="1-friendlier-skips">1. Friendlier Skips</h2>
<p><a href="https://github.com/symplify/symplify/pull/948/files" class="btn btn-dark btn-sm">
<em class="fab fa-github fa-fw"></em>
See pull-request #948
</a></p>
<p>Little details make more pleasant developer experience UX. You already know <strong>you can use  <a href="http://php.net/manual/en/function.fnmatch.php"><code>fnmatch()</code></a> for skipping files</strong>. The problem is, it requires very specific format people struggle with and often end up using explicit 10 paths to many files.</p>
<p><strong>Before</strong> you had to hit the format:</p>
<pre><code class="language-php">&lt;?php

// ecs.php

declare(strict_types=1);

use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
use Symplify\EasyCodingStandard\Configuration\Option;

return static function (ContainerConfigurator $containerConfigurator): void {
    $parameters = $containerConfigurator-&gt;parameters();

    $parameters-&gt;set(Option::SKIP, [
        SomeFixer::class =&gt; [
            // this worked
            '*src/*CaseConverter.php',

            // this didn't work
            'src/*CaseConverter.php',
        ]]
    );
};
</code></pre>
<p><strong>Now</strong> you can use your intuition, copy paste the filename from error result and both versions work.</p>
<h2 id="2-in-lazy-we-trust">2. In Lazy We Trust</h2>
<p><a href="https://github.com/symplify/symplify/pull/832/files" class="btn btn-dark btn-sm">
<em class="fab fa-github fa-fw"></em>
See pull-request #832
</a></p>
<p><strong>Before</strong> you had to type the whole config name and use YAML:</p>
<pre><code class="language-bash">easy-coding-standard.yaml
easy-coding-standard.yml</code></pre>
<p>As you've already noticed, <strong>now</strong> you can use short version with <strong>normal PHP - <code>ecs.php</code></strong>:</p>
<h2 id="3-are-there-some-quot-array-quot-checkers">3. Are There Some &quot;array&quot; Checkers?</h2>
<p><a href="https://github.com/symplify/symplify/pull/967/files" class="btn btn-dark btn-sm">
<em class="fab fa-github fa-fw"></em>
See pull-request #967
</a></p>
<p>Many people asked for an overview of all checkers there are, if there any related to an array, to <code>strict_types</code> position and so on.</p>
<p><strong>Before</strong> you had to go to huge <code>README.md</code> files of PHP CS Fixer and PHP_CodeSniffer on Github to read it all. But <strong>why leave the luxury of CLI if these checkers are already downloaded</strong> on your machine?</p>
<p><strong>Now</strong> you can use &quot;find&quot; command:</p>
<img src="/assets/images/posts/2018/symplify-5-ecs/find.gif" class="img-thumbnail">
<p>Next time you'll wonder what are &quot;Symplify&quot; rules, keep your browser closed and just find them:</p>
<pre><code class="language-bash">vendor/bin/ecs find symplify</code></pre>
<p><br></p>
<p>Enjoy laziness, intuitive use and faster access to the information you look for.</p>
<p>We'll continue to make it this way!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/09/24/new-in-symplify-5-3-news-in-easy-coding-standard-to-smoother-your-experience</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 24 Sep 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-08-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Aug 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/09/24/new-in-symplify-5-3-news-in-easy-coding-standard-to-smoother-your-experience#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ New in Symplify 5: 3 New Cool Features of PackageBuilder ]]></title>
                <link>https://tomasvotruba.com/blog/2018/09/20/new-in-symplify-5-3-new-cool-features-of-package-builder</link>
                <description><![CDATA[ <p><a href="https://github.com/symplify/package-builder">PackageBuilder</a> was always sort of meta package with all <strong>the cool and shiny features anyone can use</strong>. After all, it's the most downloaded Symplify package hitting almost <a href="https://packagist.org/packages/symplify/package-builder/stats">1000 downloads a day</a>.
<br>
<br>
In Symplify 5 now it allows you to <strong>drop manual binds</strong> from Symfony configs, separate files from directories <strong>in one method</strong> and merge nested YAML parameters <strong>with 1&nbsp;service</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <p>You don't have this package installed yet?</p>
<pre><code class="language-bash">composer require symplify/package-builder</code></pre>
<p>Now enjoy the news ↓</p>
<h2 id="1-drop-manual-binds-in-symfony-configs">1. Drop Manual Binds in Symfony configs</h2>
<p><a href="https://github.com/symplify/symplify/pull/998" class="btn btn-dark btn-sm">
<em class="fab fa-github fa-fw"></em>
See pull-request #998
</a></p>
<p>You can add <a href="https://symfony.com/blog/new-in-symfony-3-4-local-service-binding">parameter binding since Symfony 3.4</a>:</p>
<pre><code class="language-yaml">services:
    _defaults:
        bind:
            $meetupComApiKey: '%meetup_com_api_key%'</code></pre>
<p>That's nice. But what if you have multiple configs that use multiple parameters?</p>
<pre><code class="language-yaml">services:
    _defaults:
        bind:
            $meetupComApiKey: '%meetup_com_api_key%'
            $facebookApiKey: '%facebook_api_key%'
            $maxPostOnHomepage: '%max_post_on_homepage%'

    App\FirstPackage\:
        resource: ..</code></pre>
<pre><code class="language-yaml">services:
    _defaults:
        bind:
            $facebookApiKey: '%facebook_api_key%'
            $maxPostOnHomepage: '%max_post_on_homepage%'

    App\SecondPackage\:
        resource: ..</code></pre>
<h3 id="not-for-lazy-programmer">Not for Lazy Programmer</h3>
<p>This way you'll be writing more bindings than there are parameters. And there is more! When you remove autodiscovered service that depends on a bound parameter, you'll get this &quot;nice&quot; exception:</p>
<blockquote class="blockquote">
    Unused binding "maxPostOnHomepage" in service "App\SomeUnterlatedService"
</blockquote>
<p>You can solve this all by having a huge config with all parameters, binding and services. Even if the config would be shorter than 100 lines, you still have to maintain parameters, bindings and services and it teaches other programmers to <em>put-everything-to-one-place</em> instead of SOLID principles.</p>
<p><br></p>
<p><strong>Would you like to get rid of this all extra maintenance, and just code cleanly instead?</strong> I would!</p>
<p>So, have you noticed the pattern?</p>
<ul>
<li><code>$variableName</code> &lt;=&gt; <code>%parameter_name</code></li>
<li><code>camelCase</code> &lt;=&gt; <code>underscore_case</code></li>
</ul>
<p>And exactly this can be automated! Just add <code>Symplify\PackageBuilder\DependencyInjection\CompilerPass\AutoBindParametersCompilerPass</code> compiler pass:</p>
<pre><code class="language-diff">&lt;?php

    // ...

 use Symfony\Component\DependencyInjection\ContainerBuilder;
 use Symfony\Component\HttpKernel\Kernel;
+use Symplify\PackageBuilder\DependencyInjection\CompilerPass\AutoBindParametersCompilerPass;

 final class YourAppKernel extends Kernel
 {
     // ...

+    protected function build(ContainerBuilder $containerBuilder): void
+    {
+        $containerBuilder-&gt;addCompilerPass(new AutoBindParametersCompilerPass());
+    }
 }</code></pre>
<p>And if you keep this convention, you can keep yours configs clear and minimalistic:</p>
<pre><code class="language-diff"> services:
-    _defaults:
-        bind:
-            $meetupComApiKey: '%meetup_com_api_key%'
-            $facebookApiKey: '%facebook_api_key%'
-            $maxPostOnHomepage: '%max_post_on_homepage%'</code></pre>
<p>Of course you can bind your parameters manually:</p>
<pre><code class="language-yaml">services:
    _defaults:
        bind:
            $anotherName: '%non_standard_parameter_naming%'

    SomeClass:
        arguments:
            - '%very_specfici_meetup_com_api_key%'</code></pre>
<h2 id="2-separate-files-from-directories">2. Separate Files from Directories</h2>
<p><a href="https://github.com/symplify/symplify/pull/963" class="btn btn-dark btn-sm">
<em class="fab fa-github fa-fw"></em>
See pull-request #963
</a></p>
<p>Do you need to work multiple file/directories arguments?</p>
<pre><code class="language-bash">vendor/bin/ecs check src tests/ThisFile.php</code></pre>
<p>Just use <code>Symplify\PackageBuilder\FileSystem\FileSystem</code>:</p>
<pre><code class="language-php">&lt;?php

$sources = [
   __DIR__ . '/SomeDirectory',
   __DIR__ . '/SomeFile.php'
];

$symplifyFileSystem = new Symplify\PackageBuilder\FileSystem\FileSystem;
[$files, $directories] = $symplifyFileSystem-&gt;separateFilesAndDirectories($sources);

// ...</code></pre>
<h2 id="3-merge-parameters-without-leaving-any-behind">3. Merge Parameters without Leaving Any Behind</h2>
<p><a href="https://github.com/symplify/symplify/pull/989" class="btn btn-dark btn-sm">
<em class="fab fa-github fa-fw"></em>
See pull-request #989
</a></p>
<p>At the moment, Symfony is unable to merge nested parameters <a href="https://github.com/symfony/symfony/issues/26713">for historical and other reasons</a>:</p>
<pre><code class="language-yaml"># config.yml
imports:
    - { resource: 'imported-file.yml' }

parameters:
    festivals:
        - three</code></pre>
<pre><code class="language-yaml"># imported-file.yml
parameters:
    festivals:
        - one
        - two</code></pre>
<p>This will end up with just 1 festival in classic Symfony Applicatoin. Do you want to use the <strong>full power of YAML, glob and imports</strong> and <strong>still keep all the parameters</strong>?</p>
<p>Use <code>Symplify\PackageBuilder\Yaml\ParameterMergingYamlLoader</code>:</p>
<pre><code class="language-php">&lt;?php

$parametersMergingYamlLoader = new Symplify\PackageBuilder\Yaml\ParameterMergingYamlLoader;
$parameterBag = $parametersMergingYamlLoader-&gt;loadParameterBagFromFile(
    __DIR__ . '/config.yml'
);

var_dump($parameterBag-&gt;get('festivals'));
// ['one', 'two', 'three']</code></pre>
<p><br></p>
<p>And that's all folks!</p>
<p><br></p>
<p>Happy tuning of your code!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/09/20/new-in-symplify-5-3-new-cool-features-of-package-builder</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 20 Sep 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/09/20/new-in-symplify-5-3-new-cool-features-of-package-builder#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ 7 Tips to Write Exceptions Everyone Will Love ]]></title>
                <link>https://tomasvotruba.com/blog/2018/09/17/7-tips-to-write-exceptions-everyone-will-love</link>
                <description><![CDATA[ <p><code>InvalidArgumentException</code>, <code>FileNotFoundException</code>, <code>InternalException</code>.
<br><br>
Have you ever had that feeling, that <strong>you've seen that exception before and you know what it means and how to solve?</strong> What if that would be clear even for those who see it for the first time? It would save yours and their time.
<br><br>
Exceptions are not just error state. <strong>Exceptions are the new documentation</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <p>I wrote a <a href="/blog/2018/02/12/sleep-shorter-to-get-62-percent-smarter/">50-page thesis about polyphasic sleep</a>. My opponent told me, that there is a missing part about uncontrolled intervening values. The part in pages 34-36 he probably skipped. Today we have too much going on <strong>we have to scan</strong>. Anything longer than 140 chars is exhausting. Moreover for us programmers, who dance among tsunami of information coming every hour as they code and investigate code of others.</p>
<h3 id="do-you-find-this-quot-circle-of-code-quot-familiar">Do you Find this &quot;Circle of Code&quot; Familiar?</h3>
<ol>
<li>you open the application</li>
<li>you code and code, life is great!</li>
<li>suddenly, it's broken by <code>InvalidStateException</code> exception (<a href="https://github.com/thecodingmachine/safe#the-problem">if we're lucky</a>)</li>
<li>you open exception in IDE to find out more... nothing</li>
<li>you open the documentation to find out more... nothing</li>
<li>you Google and StackOverflow to find out more... nothing</li>
<li>you close the application frustrated, have a ☕ or social joint to restore your will to overcome shit code</li>
</ol>
<p><strong>What if you could stay between 1, 2 and 3 much more often?</strong></p>
<p><br></p>
<p>When people used EasyCodingStandard for their first time, they experienced many WTFs. After 30&nbsp;minutes they gave up saying &quot;coding standards are hard&quot;. When I asked them to show me how they used it, <strong>it took me 3 minutes to solve</strong>. Why? Because I made it? Well maybe. But also because <strong>exceptions were so lousy, that nobody knew how to solve them</strong> and that's wrong. Shame on me.</p>
<h2 id="1-make-exception-names-for-humans">1. Make Exception Names for Humans</h2>
<p>Not machines but people read exceptions. Well, machines read it to but they just log it - humans have to make code work again.</p>
<blockquote class="blockquote">
    <em>InvalidStateException</em>
</blockquote>
<p>WTF? Could you be more clear?</p>
<blockquote class="blockquote">
     <em>ConfigurationFileNotFoundException</em>
</blockquote>
<p>A-ha, I create <code>ecs.php</code> and it works!</p>
<p><strong>+10 % happier programmer</strong></p>
<p>Do you need help with this? There is <a href="https://github.com/symplify/coding-standard#use-explicit-and-informative-exception-names-over-generic-ones">Sniff</a> that makes sure no exception is generic.</p>
<h2 id="2-use-quot-around-quot-statements">2. Use &quot; around&quot; Statements</h2>
<blockquote class="blockquote">
     <em>Filter class  VeryLongNamespace\InNestedNamespace\WithMissingClassInTheEnd was not found</em>
</blockquote>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return static function (ContainerConfigurator $containerConfigurator): void {
    $parameters = $containerConfigurator-&gt;parameters();
    $parameters-&gt;set('filters', [
        ' VeryLongNamespace\InNestedNamespace\WithMissingClassInTheEnd'
    ]);
};</code></pre>
<p>The class <strong>exists</strong> and it <strong>is</strong> autoloaded:</p>
<pre><code class="language-php">require_once __DIR__ . '/vendor/autolaod.php'

var_dump(class_exists(
    VeryLongNamespace\InNestedNamespace\WithMissingClassInTheEnd::class
));
// "true"</code></pre>
<p>So what is wrong?</p>
<p><br></p>
<p><em>5 minutes later...</em></p>
<pre><code class="language-diff"> &lt;?php

 declare(strict_types=1);

 use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

 return static function (ContainerConfigurator $containerConfigurator): void {
     $parameters = $containerConfigurator-&gt;parameters();
     $parameters-&gt;set('filters', [
-        ' VeryLongNamespace\InNestedNamespace\WithMissingClassInTheEnd'
+        'VeryLongNamespace\InNestedNamespace\WithMissingClassInTheEnd'
     ]);
 };</code></pre>
<p>Ah, there was a space, a single small space!</p>
<p>You probably noticed it, because there are 3 lines of code and they get all your attention. In reality, there are 80 lines of code, 5 files opened in your IDE/brain and your colleague is asking you for wise advice, so your chances to spot this are much lower.</p>
<p><strong>How to prevent this from happening ever again to anyone in the world?</strong></p>
<blockquote class="blockquote">
     <em>Filter class  VeryLongNamespace\InNestedNamespace\WithMissingClassInTheEnd was not found</em>
</blockquote>
<p><em>Filter class &quot; VeryLongNamespace\InNestedNamespace\WithMissingClassInTheEnd&quot; was not found</em></p>
<p><strong>Use quotes around every argument:</strong></p>
<pre><code class="language-php">throw new FilterClassNotFoundException(sprintf(
    'Filter class "%s" was not found',
    $filterClass
));</code></pre>
<p><strong>+20 % happier programmer</strong></p>
<h2 id="3-what-exactly-is-wrong">3. What Exactly is Wrong?</h2>
<blockquote class="blockquote">
     <em>main parameter is invalid</em>
</blockquote>
<pre><code class="language-php">throw new InvalidParameterException(sprintf(
    '%s parameter is invalid.',
    $parameterName
));</code></pre>
<p>What parameter?</p>
<blockquote class="blockquote">
     <em>"main" parameter is invalid</em>
</blockquote>
<pre><code class="language-diff"> throw new InvalidParameterException(sprintf(
-    '%s parameter is invalid.',
+    '"%s" parameter is invalid.',
     $parameterName
));</code></pre>
<p>Aha! Where do I find it? In the &quot;parameters&quot; section?</p>
<blockquote class="blockquote">
     <em>Parameter in "parameters &gt; page_name &gt; main" is invalid</em>
</blockquote>
<pre><code class="language-php">throw new InvalidParameterException(sprintf(
    'Parameter in "parameters &gt; page_name &gt; %s" is invalid.',
    $parameterName
));</code></pre>
<p>Aha, now I know where to find it, thanks!</p>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return static function (ContainerConfigurator $containerConfigurator): void {
    $parameters = $containerConfigurator-&gt;parameters();
    $parameters-&gt;set('page_name', [
        'main' =&gt; []
    ]);
};</code></pre>
<p><strong>+20 % happier programmer</strong></p>
<h2 id="4-what-is-the-wrong-value">4. What is The Wrong Value?</h2>
<blockquote class="blockquote">
     <em>Parameter in "parameters &gt; page_name &gt; main" is invalid</em>
</blockquote>
<p>We already know <em>where</em> it is, but <strong>what value it actually has</strong>?</p>
<blockquote class="blockquote">
     <em>Parameter value "false" in "parameters &gt; page_name &gt; main" is invalid</em>
</blockquote>
<p>I see, so &quot;main&quot; parameter can't have <code>false</code> value. What it <strong>can have</strong> then?</p>
<blockquote class="blockquote">
     <em>Parameter value "false" in "parameters &gt; page_name &gt; main" is invalid. It must be a string</em>
</blockquote>
<pre><code class="language-php">if (is_array($value)) {
    $value = 'array';
} elseif (is_bool($value)) {
    $value = ($value === true) ? 'true' : 'false';
}

throw new InvalidParameterException(sprintf(
    'Parameter value "%s" in "parameters &gt; page_name &gt; %s" is invalid. It must be a string.',
    $value,
    $parameterName
));</code></pre>
<p><strong>+15 % happier programmer</strong></p>
<p>Tip: You can use <a href="https://github.com/nette/tracy">Tracy</a> to delegate the value dumping.</p>
<h2 id="5-what-file-exactly-is-broken">5. What File Exactly is Broken?</h2>
<blockquote class="blockquote">
     <em>Invalid file</em>
</blockquote>
<p>In EasyCodingStandard, PHP_CodeSniffer, PHP CS Fixer, Rector or PHPStan there is always work with files. Is there some error with the file? Show it!</p>
<blockquote class="blockquote">
     <em>File /var/www/tomasvotruba.com/packages/src/TweetPublisher.php not found</em>
</blockquote>
<p>Oh, sorry:</p>
<blockquote class="blockquote">
     <em>File "/var/www/tomasvotruba.com/packages/src/TweetPublisher.php" not found</em>
</blockquote>
<p><strong>Absolute paths can be really long</strong> in Docker, CI or in the non-basic install. We don't need irrelevant information - every character counts!</p>
<p>How can we make it a bit more familiar to the user? Show the <strong>relative path</strong>:</p>
<blockquote class="blockquote">
     <em>File "packages/src/TweetPublisher.php" not found</em>
</blockquote>
<p><strong>How to do this nice and lazy in PHP?</strong></p>
<pre><code class="language-php">// "$filePath" can be absolute or relative; we don't care, it only must exists
$fileInfo = new SplFileInfo($filePath);

// remove absolute path start to cwd (current working directory)
$relativePath = substr($fileInfo-&gt;getRealPath(), strlen(getcwd()) + 1);

throw new FileProcessingException(sprintf(
    'File "%s" not found',
    $relativePath
));</code></pre>
<p><strong>+20 % happier programmer</strong></p>
<h2 id="6-what-options-do-i-have">6. What Options do I have?</h2>
<pre><code class="language-bash">vendor/bin/ecs check src --set laravel</code></pre>
<blockquote class="blockquote">
     <em>"Laravel" level was not found</em>
</blockquote>
<ul>
<li>Is incorrectly loaded?</li>
<li>Should I register it somehow?</li>
<li>Where do I find these levels so I know what are available?</li>
</ul>
<p><a href="https://www.amazon.com/Dont-Make-Think-Revisited-Usability-ebook-dp-B00HJUBRPG/dp/B00HJUBRPG">Don't make the programmer think</a>!</p>
<blockquote class="blockquote">
     <em>Level "laravel" was not found. Pick one of: "array", "clean-code", "comments", "common", "control-structures", "docblock", "namespaces", "php70", "php71", "phpunit", "psr12", "psr2", "spaces", "strict", "symfony", "symfony-risky", "symplify"</em>
</blockquote>
<p>That's better!</p>
<p>If there is the limited or reasonable amount of options, don't be shy. Show them!</p>
<pre><code class="language-php">$allLevels = $this-&gt;findAllLevelsInDirectory($configDirectory);

throw new LevelNotFoundException(sprintf(
    'Level "%s" was not found. Pick one of: "%s"',
    $levelName,
    implode('", "', $allLevels)
));</code></pre>
<p>This code is real! It's from <a href="https://github.com/symplify/symplify/blob/aad50fba97046f70416cce4d7c5b094c16bf770d/packages/PackageBuilder/src/Configuration/LevelFileFinder.php#L61-L70">Symplify\PackageBuilder code</a>.</p>
<p><strong>+40 % happier programmer</strong></p>
<h2 id="7-link-what-you-can-t-fit-140-chars">7. Link what You can't Fit 140 Chars</h2>
<p>Sometimes you might find yourself writing a poem instead of an exception:</p>
<pre><code class="language-php">throw new ConfigurationFileNotFound(
    'Class not found. Configure autoload, you can use either `parameters &gt; autoload_files`' .
    'or `parameters &gt; autoload_directories`. Be careful to use paths relative to the file you are using.'
);</code></pre>
<p>Who would read that? Except for the author of course.</p>
<p>To make it shorted and readable, we end up with a lousy statement like:</p>
<pre><code class="language-php">throw new ConfigurationFileNotFound('Class not found. Configure autoload first.');</code></pre>
<p>10 Tweets = 1 post, so just link it!</p>
<pre><code class="language-php">throw new ConfigurationFileNotFound(
    'Class not found. Configure autoload: https://github.com/rectorphp/rector/blob/master/README.md'
);</code></pre>
<p>A bit more perfect? <strong>Use headline anchor</strong>:</p>
<pre><code class="language-php">throw new ConfigurationFileNotFound(
    'Class not found. Configure autoload: https://github.com/rectorphp/rector/blob/master/README.md#extra-autoloading'
);</code></pre>
<p>Here is one pitfall - end of lines and line breaks in CLI. You might end up with this error message:</p>
<pre><code class="language-bash">https://github.com/rectorphp/rector/blob/
master/README.md#extra-autoloading</code></pre>
<p>Where only <code>https://github.com/rectorphp/rector/blob/</code> is a link. Invalid link.</p>
<p>How to save this?</p>
<pre><code class="language-php">throw new ConfigurationFileNotFound(
    'Class not found. Configure autoload:' .
    PHP_EOL .
    'https://github.com/rectorphp/rector/blob/master/README.md#extra-autoloading'
);</code></pre>
<p>Kaboom!</p>
<p><strong>+30 % happier programmer</strong></p>
<p><br></p>
<p>And in these 7 steps, you just made any programmer using your code 125 % happier!</p>
<p><strong>What are your the most favorite exceptions?</strong></p>
<p><br></p>
<p>Happy throwing!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/09/17/7-tips-to-write-exceptions-everyone-will-love</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 17 Sep 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-08-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Aug 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/09/17/7-tips-to-write-exceptions-everyone-will-love#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Your Brain is Your Garden ]]></title>
                <link>https://tomasvotruba.com/blog/2018/09/13/your-brain-is-your-garden</link>
                <description><![CDATA[ <p>After a few technical and open-source posts, it's time <a href="/blog/2018/05/03/how-do-you-treat-your-own-first-ai/">for brain hacking</a>. Thanks to the recent boom of AI, neuroscience starts to overlap with human psychology. When it comes to learning methods, humans and computers are more alike than ever before.
<br><br>
To overcome <a href="/blog/2017/12/04/life30-what-will-you-do-when-ai-takes-over-the-world/">AI disruption</a>, you'll be valuable by actually making AI or by hacking your brain to be super-adaptable and irreplaceable.</p> ]]></description>
                <content:encoded><![CDATA[ <p><em>This post consists of my personal experience and few books with research background. If you feel you need more science behind this, you can read <a href="https://www.amazon.com/gp/product/B00435DZ7S">The Happiness Advantage</a>, <a href="http://calnewport.com/books/deep-work">Deep Work</a> and <a href="https://www.amazon.com/Life-3-0-Being-Artificial-Intelligence-ebook-dp-B07474JB3Q/dp/B07474JB3Q">Life 3.0</a>.</em></p>
<p>I'm a father of 3,5-year-old that is in Czech educational system for last 1 year on one hand, a close observer of programming, machine learning, artificial intelligence on other hand and mentor, <a href="http://friendsofphp.org">Europe PHP-meetup traveler</a> that observes and helps people learning on the third hand.</p>
<p>In all these communities I see one common pattern - <strong>they all try to learn, adapt and teach as effectively as they can</strong>. Yet they each have <strong>own believes that holds them back</strong>. What a wonder  jump in human history would be a conference, where human-teachers learn from programmers about the most effective way to teach a machine various skills, and where programmers learn from teachers about the effect of long-term reinforced learning. <strong>Both groups could learn so much from each other's mistakes</strong>, instead of repeating them.</p>
<p>But let's get back to you, my dear reader, and your <a href="http://calnewport.com/blog/2017/11/30/on-the-complicated-economics-of-attention-capital">attention capital</a>. Recently I've been re-reading <a href="/blog/2017/09/25/3-non-it-books-that-help-you-to-become-better-programmer/#deep-work-by-cal-newport">Deep Work</a> to transform my shallow-habits to deep ones. I realized more and more that's <strong>all about the attitude of every single one of us</strong>. My attitude. Your attitude.</p>
<h2 id="treat-your-eyes-like-a-door-to-your-garden">Treat Your Eyes like a Door to Your Garden</h2>
<p>Imagine that your brain is your garden, with flowers and a tree of your choice. Every flower is a skill you know, every leaf of grass is a memory you bear. It's up to you, what flowers you take care about and what goes to compost. Only you can choose every day, who you let inside by your garden door.
Only you can choose if you let in 150 incoherent tweets of 10 page from a book if you let in 150 flowers that will die soon or let a part of the tree you'll continue to grow the next day. <strong>It's your attention span, that let's these in, you decide what you focus on.</strong></p>
<h2 id="big-trees-needs-times-and-care-to-grow">Big Trees Needs Times and Care to Grow</h2>
<p>Imagine there are 150 flowers in your garden. They need water, they need to be protected parasites and fertilized to grow strong. Where do you take time for that? You can give them all your day and energy and <strong>still some would probably die each week</strong>.</p>
<p>Or you can have 5 trees instead. Since trees are more fragile in the very beginning and much harder to grow, they need more of your attention at the very start. But as years go by, they <strong>become strong and standalone</strong>. You can climb on them, they have own seeds so they grow other trees for you and <strong>you can lean on them</strong>.</p>
<p>In reality, most people prefer flowers because they're easier to take care of now. It's natural since we're raised to <em>instant gratification</em> in schools, by our society and economy system and by our parents who were raised the same.</p>
<blockquote class="blockquote text-center">
    "Dream as if you will live forever. Live as if you will die today."
    <footer class="blockquote-footer">James Dean</footer></blockquote>
<p>But instant gratification doesn't work very well for a long term. You might learn a lot on a shallow level, but you'd not understand much in depth. One example for all, I went to school for 9 + 4 + <a href="/blog/2017/11/13/7-tips-you-should-know-before-going-to-university/">4 years</a> and I learned about somewhat 40 subjects. I <strong>would not dare to ask for a job in any of that</strong>. Luckily, my parent taught me to <em>learn what you want</em> principle so I grew my 5 trees that hold my back now outside the school myself.</p>
<h2 id="children-and-adult-are-alike-even-smarter">Children and Adult are Alike, Even Smarter</h2>
<p>You probably think now, that children have to learn basics to be able to build their know-how on them. I agree to some level. When I learn something completely new with 0 know-ledge - like how the PHP parser works -, I know I have to <strong>learn basics first</strong>. I give it <strong>30 minutes a day</strong> because I know trees take time to grow and you can't rush it up. If I'd give these basics 6 hours a day, like in a school, I know I would fail, feel bad that I'm slow and probably never learn it.</p>
<p>From my personal single-use-case observation and 3 years on Psychology University, I see that brain of children works the very similar way as adult one. It's still a neural network. Even better, because they're at the very beginning, <em>tabula rasa</em>, where they can land basics for their gardens.</p>
<p>Instead of doing it themselves, we see children as somewhat lower species that needs to be controlled, developed and programmed. So in school <strong>someone else is going to visit their garden and decide what's good for them and what flowers and trees they should grow</strong>. With no clear evidence why and mostly, without understanding the garden's owner. And <strong>understanding is the most important in learning</strong>, right?</p>
<p>And here is <strong>the place where artificial intelligence era can bring a lot to human education and vice versa</strong>. Machines are never treated this way, because that is not efficient. And we found out that by <a href="/blog/2018/09/10/5-advices-i-would-love-to-get-before-starting-to-maintain-open-source/#5-don-t-take-advise-as-granted-experiment-for-yourself">experimenting</a>, failing and learning from mistakes. Doing similar research on a human is restricted by human rights, so we're motivated to repeat the same mistakes over and over again on each new generation.</p>
<h2 id="experiment-and-learn-about-yourself">Experiment and Learn About Yourself</h2>
<p>Instead of going for average and &quot;what works for them must work for me&quot; approach, go experiment for yourself. <strong>Because science doesn't work with unique outliers</strong>:</p>
<div class="text-center">
    <img src="https://d2f99xq7vri1nk.cloudfront.net/AllDinosGrey_1.png"><br><a href="https://www.autodeskresearch.com/publications/samestats">The Datasaurus Dozen: Same Stats, Different Graphs</a>
</div>
<p><br></p>
<p>Your garden is the most important one and as one my very smart friend told me:</p>
<blockquote class="blockquote text-center">
    "Each of has our own universe and none one-is never ever get to understand it."
</blockquote>
<p>Take a break for a day or two, think about what you let in your garden world and what trees will hold your back if you'll ever need them. <strong>Your life is about you, your dreams, your universe and your garden</strong>. Take care of it well and your fruits will take care of you.</p>
<blockquote class="blockquote text-center">
    Don't waste your life by working on dreams of someone else.
</blockquote> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/09/13/your-brain-is-your-garden</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 13 Sep 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/09/13/your-brain-is-your-garden#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ 5 Advices I Would Love to Get Before Starting to Maintain an Open Source ]]></title>
                <link>https://tomasvotruba.com/blog/2018/09/10/5-advices-i-would-love-to-get-before-starting-to-maintain-open-source</link>
                <description><![CDATA[ <p>I wasn't always confident while making public every single line of PHP code I write. I had to take many blind paths, spend a night full of stress coding in unknown waters and make a lot of over-complicated code that backfired to me months later.
<br><br>
They say &quot;experience cannot be passed and it must be experienced&quot; and I agree with that, but still <strong>there are some shortcuts that would speed-up my path to joyful open-source coding</strong> I have today. Here are 5 of them.</p> ]]></description>
                <content:encoded><![CDATA[ <img src="/assets/images/posts/2018/advices-open-source/father-son.jpg" class="img-thumbnail">
<h2 id="1-be-open-to-change-any-package">1. Be Open to Change any Package</h2>
<p>Everything changes and when it comes to software, it's exponentially faster. How much changed the school system we have nowadays and how much changed content we absorb - mostly through the internet - every day in the last 5 years?</p>
<p>I used Nette for as my favorite framework for many many years. Later I found out what components and packages are and I picked few packages from Nette and few from Symfony for my base stack. One package was the hearth of all my packages - Dependency injection component. Nette\DI with default autowiring was light-years ahead in 2014. But Nette didn't have any new features anymore and the software grew exponentially. Symfony 2.8 came with autowiring. Symfony 3.3 came with <a href="/blog/2017/05/07/how-to-refactor-to-new-dependency-injection-features-in-symfony-3-3/">service autodiscovery</a>.</p>
<h3 id="share-your-doubts">Share Your Doubts</h3>
<p>I loved most of the new features in Symfony and I integrated them as packages to Nette. Since I know their both DI components by the hearth, it was easy for me. But it my lazy-brain stated itching. <strong>Why do I create, maintain and test a code that was already written in another framework?</strong></p>
<p>It was until one afternoon I was happy to share with <a href="https://www.martinhujer.cz">Martin Hujer</a>. I shared my itching and how I love these Symfony DI features and he asked me very simple yet powerful question:</p>
<blockquote class="blockquote text-center">
    Why don't you switch that component from Nette to Symfony?
</blockquote>
<p>I didn't know the answer and I promised to make <strong>an experiment that night</strong>. I tried it on Statie and <a href="https://github.com/symplify/symplify/pull/184">this PR was born</a>. I'm still happy when I see this pull-request with <code>+425 −723</code>. The best refactoring is the one where you <strong>leave less code, more readable and with better features</strong>.</p>
<p>The experiment worked and whole Symplify and Rector are now running on Symfony DependencyInjection (+ <a href="https://github.com/symplify/package-builder">few cool additions</a>).</p>
<p><strong>So if there are good reasons to switch, don't let your past preferences hold you back - just switch</strong>.</p>
<h2 id="2-don-t-keep-every-feature-you-have">2. Don't Keep Every feature You Have</h2>
<p>When I started my first open-source PHP packages, called Zenify, I focused to have as many features as possible. I thought it's the way to success - all frameworks did it.</p>
<p>Then I became <a href="https://github.com/apigen/apigen">ApiGen</a> maintainer in 2014. It had over 30 options to configure: file encoding, colors in the command line, coding style check (oh yeah), enable/disable progress bar, check for newer version and many more. First I added more features that were requested and felt great, that the package is growing in its value. <strong>But does eating more and more food make your more healthy? The more feature there was, the more difficult it was to refactoring, to test and to add new features.</strong></p>
<h3 id="find-out-what-you-don-t-need">Find Out What You Don't Need</h3>
<p>I investigate Github issues of ApiGen and found out, that many features were implemented after a single request. There was a possibility that only that single person needed it so there are 300 lines of PHP untested code just because the single person wanted a feature for that one run he used ApiGen.</p>
<blockquote class="blockquote text-center">
    The amount of code != the value of the code.
</blockquote>
<p>I realized there is a lot of &quot;dead&quot; code just a few people are using. This alone would be ok but dozens of <strong>these &quot;little&quot; features made the core code unable to maintain</strong>, so tool didn't work for 95 % users.</p>
<p>I didn't know which options are used and which are not, so <strong>I did a little experiment</strong>. I made a release candidate version without these options. If the features were really important, some would create an issue - and there were such rare cases. But <a href="https://github.com/ApiGen/ApiGen/releases/tag/v4.0.0">8 in total</a> of these features could be dropped at the spot.</p>
<p><strong>Instead of adding more and more features, you should focus on keeping the main value fit. Take 80/20 rule - drop 20 % of the least used features to make 80 % of those most valuable grow faster.</strong></p>
<h2 id="3-lock-to-lts-maintained-dependencies-and-green-php">3. Lock to LTS, Maintained Dependencies and green PHP</h2>
<p>I thought supporting the oldest version is the best because that's how you get the most users. I supported PHP 5.3, 5.4, 5.5, 5.6 and 7.0. What a wide range of diversity, who cares PHP 5.3 was in End of life, were still people using it so I have to be there for them!</p>
<p>How naive I was :) it only caused me troubles with maintaining and I taught people it's ok to use PHP versions without security fixes.
Now I support PHP 7.1 and 7.2 and it's just a fine amount of PHP versions to maintain.</p>
<p>You don't have to make the same mistakes as me. There are many great examples that work today:</p>
<ul>
<li><a href="https://github.com/sebastianbergmann/phpunit/wiki/Release-Process">Cyclic PHPUnit Release Process</a> - stick to <a href="/blog/2017/10/30/what-can-you-learn-from-menstruation-and-symfony-releases/"><em>menstruation</em> dependency</a></li>
<li><a href="http://php.net/supported-versions.php">PHP.net - Supported Versions</a> - stay green on PHP</li>
<li><a href="https://gophp71.org">gophp71.org</a> - go with the mainstream</li>
</ul>
<p><strong>Go through them and suck the gold in.</strong></p>
<p>But this can also backfire. I was so frustrated by maintaining more versions that I could manage, that I bounced to the other extreme - tried to &quot;educate&quot; people to update as early as they can. I tend to lock to the highest Symfony version, no matter if LTS or not. So until just a couple of months ago, Symplify supported only Symfony 4, not Symfony 3.4 today. I had many discussion about that, where I explained reasons like the one above. The last person who finally &quot;broke&quot; me for good was <a href="https://github.com/lchrusciel">Łukasz Chruściel</a> from Sylius when he asked:</p>
<blockquote class="blockquote text-center">
    "How difficult would it be to support Symfony 3.4 as well?"
</blockquote>
<p>I didn't know, so I made an experiment. And <a href="https://github.com/symplify/symplify/pull/818/files">this PR was born</a>.</p>
<p><strong>Since then I lock to <a href="https://symfony.com/roadmap#maintained-symfony-branches">Symfony LTS</a>, not higher.</strong></p>
<h2 id="4-all-you-need-to-maintain-is-1-repository">4. All You Need to Maintain is 1 Repository</h2>
<p>It's very easy to create a PHP package nowadays. It's very easy to create 10 of them. When I started with Zenify, then Symplify, the package-counter could be around 20 for 2 years. I thought that only people who earn living from the open-source project <a href="/blog/2017/06/01/thank-you-david/">David Grudl</a> could maintain such a big number of packages. I had zero income from them, but I wanted them to live, so maintained them... and then I burned out.</p>
<p>After that, I recall I was looking at Symfony repository - many packages but just repository. WTF? It took a few more months to find out, <a href="/clusters/#monorepo-from-zero-to-hero/">what monorepo is</a> and understand how it works and how to set it up in very very basic form.</p>
<p>Nowadays there are <strong>projects to guide you</strong>:</p>
<ul>
<li><a href="/clusters/#monorepo-from-zero-to-hero/">Monorepo: From Zero to Hero</a></li>
<li><a href="https://github.com/symplify/monorepobuilder">Symplify\MonorepoBuilder</a> for Travis split project</li>
</ul>
<p>...so if you know YAML syntax, how to open a command line and you have a Github account, you also know how to run your own monorepo in 10 minutes even if you see it for the first time.</p>
<p>In that time, <a href="https://phpfashion.com/prave-jsem-smazal-nette-framework">Nette went from monorepo to multirepo</a>. I didn't know if that opposite way was the right step for me but I wanted to know. <strong>So I made a small experiment</strong> - a monorepo with 2 packages. It was just awesome. 1 commit to all, instead of duplicated commits in each package.</p>
<p><strong>I never came back.</strong></p>
<h2 id="5-don-t-take-advise-as-granted-experiment-for-yourself">5. Don't Take Advise as Granted, Experiment for Yourself</h2>
<p><strong>No one knows the answer for your</strong>. The most of these fuckups above were based on the result of the experience of someone else. &quot;If he's doing this and this and he's popular, he's right.&quot; Or maybe he isn't, try it for yourself. Fail fast to learn fast what works best for your own situation.</p>
<p>I wouldn't know how to do it right if I didn't go wrong first.</p>
<p><br></p>
<p>Happy growing!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/09/10/5-advices-i-would-love-to-get-before-starting-to-maintain-open-source</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/09/10/5-advices-i-would-love-to-get-before-starting-to-maintain-open-source#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Develop Multiple Symfony Applications Fast while Keeping the Quality ]]></title>
                <link>https://tomasvotruba.com/blog/2018/09/06/how-to-develop-multiple-symfony-applications-fast-while-keeping-the-quality</link>
                <description><![CDATA[ <p>Do you take care of 2 or more projects on the same framework? Do you upgrade them both to the newest version of the framework from time to time?
Or maybe you're successful, you grow and have 10 such projects.
<br><br>
<strong>Today I'll show you how to maintain speed while keeping the maintenance cost low</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <p>This idea came originally from tech companies with large code bases and constantly growing products:</p>
<div class="text-center">
    <img src="/assets/images/posts/2018/multi-symfony/intro.png" class="img-thumbnail"><br><em>From <a href="https://danluu.com/monorepo/">the first post about monorepo</a> there is</em>
</div>
<p><br></p>
<p>Yet I never saw such approach in PHP world. I mean, I saw monoliths but never a monorepo. Last year I started to work more closely with Shopsys and they did one crazy thing - <a href="https://github.com/shopsys/shopsys/tree/master/project-base">put the sandbox project into monorepo repository</a>. Instead of having 2 repositories - <strong>monorepo and showcase project separated</strong> - like <a href="https://github.com/symfony/symfony">Symfony</a> and its <a href="https://github.com/symfony/demo">Demo</a>, Laravel, CakePHP, Nette or basically any PHP framework I've seen, <strong> it is just one</strong>.</p>
<p>I had my concerns about how packages and project development will go together, but now I see it was just fear from unknown.</p>
<h2 id="i-hate-repetitive-work-i-hate-repetitive-work">I hate Repetitive Work, I Hate Repetitive Work</h2>
<p>The fuel for the next step of this approach came last month. I'm currently working on 2 open-sourced Symfony Application (non CLI!) - <a href="https://github.com/TomasVotruba/open-training">open-training</a> and <a href="https://github.com/TomasVotruba/open-project">open-real-estate</a>.</p>
<p><strong>How are 2 Symfony applications different</strong>? Well, the entities, repository queries, templates, design and controller actions are unique.
But the PHP, used framework, bundle integration, database type, deploy strategy, own packages that <a href="https://github.com/TomasVotruba/open-project/tree/master/packages/auto-discovery">auto-discover entities</a> for example, Kernel boilerplate are the same.</p>
<p>One example from last month for all: I made first package that extends EasyAdminBundle (you can <a href="/blog/2018/08/20/painful-experience-over-solutions-extend-configuratin-in-easy-admin-bundle-with-collector">read it here</a>/) for <em>open-lecture</em> project. Of course, I need that for <em>open-real-estate</em>. Now I had to create a package, make own Github repository, register it on packagist, add it to other project and somehow switch between them for every update... ugh, I guess you would not want to pay me for this bureaucracy.</p>
<p>Since I'm the main investor of myself and I hate wasting time on repetitive work, I decided to give myself a question:</p>
<blockquote class="blockquote text-center">
    "Is possible to maintain 2 Symfony applications in a single repository with ease?"
</blockquote>
<p>Google answered by miss-leading <a href="https://jolicode.com/blog/multiple-applications-with-symfony2">Multiple Kernels</a> <a href="https://stackoverflow.com/questions/45925697/more-than-one-application-per-project-repository-with-symfony-4">for one Project</a>..</p>
<p><br></p>
<p>The goal is to run...</p>
<pre><code class="language-bash">*/bin/console server:run</code></pre>
<p>...and <strong>have a running website, with own database, own code and also no duplicated code</strong>.</p>
<p>After a few hours of playing with the code (my favorite game), I started to see light in the darkness.
I'm right in the very start of using this architecture, so you'll have the knowledge in the rawest form of fresh experience. It's easier to explain and understand, rather than something I do daily for the last 5 years and don't have to think about it.</p>
<h2 id="4-steps-to-turn-single-repository-project-to-parts-of-monorepo">4 Steps to turn Single-Repository project to Parts of Monorepo</h2>
<h3 id="1-del-app-del-unique-namespace">1. <del>App</del> Unique Namespace</h3>
<p>If there are 2 <code>App\Kernel</code> classes the application would break. Pick a name that is specific for the project - here it's &quot;OpenTraining&quot; - and rename it in <code>namespace App\</code>, <code>namespace App;</code>, <code>use App\</code> in PHP code. Don't forget the <code>composer.json</code> as well.</p>
<div class="text-center">
    <img src="/assets/images/posts/2018/multi-symfony/replace.png" class="img-thumbnail"><br><em>PHPStorm → Replace in path</em>
</div>
<pre><code class="language-diff">-namespace App;
+namespace OpenTraining;

 use Symfony\Component\HttpKernel\Kernel;

-final class AppKernel extends Kernel
+final class OpenTraining extends Kernel
 {
     // ...
 }</code></pre>
<p><br></p>
<p>And let composer know, what we did:</p>
<pre><code class="language-bash">composer dump-autoload</code></pre>
<h3 id="2-fix-autoload-paths">2. Fix Autoload Paths</h3>
<ul>
<li><code>bin/console</code></li>
</ul>
<pre><code class="language-diff">-require __DIR__ . '/vendor/autoload.php';
+require getcwd() .'/vendor/autoload.php';

// ...</code></pre>
<ul>
<li><code>public/index.php</code></li>
</ul>
<p>This is more complicated because the working directory is not in the monorepo root but in the project root (<code>/projects/open-training</code>):</p>
<pre><code class="language-diff">-require __DIR__ . '/../vendor/autoload.php';

+$possibleAutoloadFiles = [
+    // project
+    __DIR__  .'/../vendor/autoload.php',
+    // monorepo
+    __DIR__  .'/../../../vendor/autoload.php',
+];

+foreach ($possibleAutoloadFiles as $possibleAutoloadFile) {
+    if (file_exists($possibleAutoloadFile)) {
+        require $possibleAutoloadFile;
+    }
+}</code></pre>
<h3 id="3-bin-console">3. Bin\Console</h3>
<p>Instead of the old root as you're used to...</p>
<pre><code class="language-bash">bin/console server:run</code></pre>
<p>...you have to use projects' <code>bin/console</code>:</p>
<pre><code class="language-bash">projects/open-training/bin/console server:run
projects/open-real-estate/bin/console server:run</code></pre>
<h3 id="4-merge-projects-composer">4. Merge Projects Composer</h3>
<p>You might be already wondering <em>How do manage composer dependencies in all this madness?</em> Well, you have to update projects' <code>composer.json</code> separately, pick them all and copy to root <code>composer.json</code>. And <strong>be careful</strong> not to use different versions, it might cause the project to work on monorepo but fail after deploying on production...</p>
<p><em>Just kidding</em>, you know I'm too lazy for this</p>
<p>All you need to do is to update projects' <code>composer.json</code>. For the rest, there is a tool I use to manage Symplify monorepo dependencies that does the dirty work for you:</p>
<pre><code class="language-bash">composer require symplify/monorepo-builder

# make sure there is the same version for every package in every composer.json
vendor/bin/monorepo-builder validate

# merge "require", "require-dev", "autoload" and "autoload-dev" from projects to the root composer.json
vendor/bin/monorepo-builder merge

# to make sure we have installed projects' dependencies
composer update</code></pre>
<p>In the root <code>composer.json</code> you might want to add some coding standards and static analysis, that is not in projects.
See the <a href="https://github.com/TomasVotruba/open-project/blob/master/monorepo-builder.yml"><code>monorepo-builder.yml</code> config </a> in my <a href="https://github.com/TomasVotruba/open-project">open-project</a> monorepo repository to get the idea how to configure it.</p>
<p><br></p>
<p>And that's it! We have now one repository to maintain, no matter how many projects we have, and we met our goals:</p>
<ul>
<li>We have the entities, repository queries, templates, design and controller actions <strong>are unique</strong>.</li>
<li>PHP, used framework, bundle integration, database type, deploy strategy, own packages, Kernel boilerplate <strong>are the same</strong>.</li>
</ul>
<p>Now we can run application with <code>projects/open-training/bin/console server:run</code> and it works!</p>
<p><br></p>
<p>Happy maintaining!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/09/06/how-to-develop-multiple-symfony-applications-fast-while-keeping-the-quality</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 06 Sep 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/09/06/how-to-develop-multiple-symfony-applications-fast-while-keeping-the-quality#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ 4 Ways to Add Global Option or Argument to Symfony Console Application ]]></title>
                <link>https://tomasvotruba.com/blog/2018/09/03/4-ways-to-add-global-option-or-argument-to-symfony-console-application</link>
                <description><![CDATA[ <p>I'm working on <a href="https://github.com/symplify/changeloglinker">ChangelogLinker</a>, a package that makes managing <code>CHANGELOG.md</code> very easy - it generates it. It a CLI Application with a <a href="https://github.com/Symplify/ChangelogLinker/tree/master/src/Console/Command">3 Console Commands</a>. All was good, until <strong>I needed to add an argument to all commands at once</strong>... and in lazy, extensible, maintainable way.</p> ]]></description>
                <content:encoded><![CDATA[ <p>Why? Symplify <code>CHANGELOG.md</code> was growing and growing, keeping upgrade data about 3 major versions. Then I realized there can be more <code>CHANGELOG.md</code> files, right?</p>
<img src="/assets/images/posts/2018/global-option/multiple-changelog.png" class="img-thumbnail">
<p>At that time, the path to file was hardcoded as <code>getcwd() . '/CHANGELOG.md'</code>, so each command worked only with that file:</p>
<pre><code class="language-bash">vendor/bin/changelog dump-merges
vendor/bin/changelog link
vendor/bin/changelog cleanup</code></pre>
<p>But I needed to change the file:</p>
<pre><code class="language-bash">vendor/bin/changelog dump-merges CHANGELOG.md
vendor/bin/changelog link CHANGELOG-2.md
vendor/bin/changelog cleanup CHANGELOG-3.md</code></pre>
<p>We need to add global file argument. So, what option do we have?</p>
<h2 id="1-add-argument-to-each-command">1. Add Argument to Each Command</h2>
<pre><code class="language-diff"> use Symfony\Component\Console\Command\Command;
 use Symfony\Component\Console\Input\InputArgument;

 final class LinkCommand extends Command
 {
     protected function configure(): void
     {
         // ...
+        $this-&gt;addArgument('file', InputArgument::OPTIONAL, 'Path to changelog file to work wiht');
     }
 }

 final class DumpMergesCommandCommand extends Command
 {
     protected function configure(): void
     {
         // ...
+        $this-&gt;addArgument('file', InputArgument::OPTIONAL, 'Path to changelog file to work wiht');
     }
 }

 final class LinkCommand extends Command
 {
     protected function configure(): void
     {
         // ...
+        $this-&gt;addArgument('file', InputArgument::OPTIONAL, 'Path to changelog file to work wiht');
     }
 }</code></pre>
<h3 id="em-class-fas-fa-fw-fa-lg-fa-check-text-success-em-advantages"><em class="fas fa-fw fa-lg fa-check text-success"></em> Advantages</h3>
<ul>
<li>It's the fastest way - under 2 minutes including reading this post.</li>
<li>It's the most common way to add argument and options to Commands - most people would understand it.</li>
</ul>
<h3 id="em-class-fas-fa-fw-fa-lg-fa-times-text-danger-em-disadvantages"><em class="fas fa-fw fa-lg fa-times text-danger"></em> Disadvantages</h3>
<ul>
<li>Well, have you noticed the &quot;wiht&quot; typo? Now I have to <strong>fix it in every single class</strong>.</li>
<li>For every change, we have to find and modify every single place this <strong>duplicated code</strong> is in.</li>
<li>When a new command is added, you have to remember to <strong>add exactly this line there</strong> - you already know <a href="/blog/2018/08/27/why-and-how-to-avoid-the-memory-lock/">how memory-locks backfire</a>, right?</li>
</ul>
<p>Good for creating &amp; sell applications, bad for projects you want to work on for a couple of years.</p>
<h2 id="2-modify-application-definition">2. Modify Application Definition</h2>
<p>I'll tell you a secret. There is one place you can <strong>modify definition not just for active command, but for the whole application</strong> - it's Application Definition!</p>
<p>The first simple &amp; short solution you'd <a href="https://gist.github.com/dhrrgn/8847309">Googled up</a> is to modify it in bin file:</p>
<pre><code class="language-diff"> &lt;?php

 use Symplify\EasyCodingStandard\Console\Application;
 use Symfony\Component\Console\Input\InputArgument;

 $application = $container-&gt;get(Application::class);
+$applicationDefinition = $application-&gt;getDefinition();
+$applicationDefinition-&gt;addArguments([
+    new InputArgument('file', InputArgument::OPTIONAL, 'Path to changelog file to work wiht');
+]);
 $application-&gt;run();</code></pre>
<h3 id="em-class-fas-fa-fw-fa-lg-fa-check-text-success-em-advantages"><em class="fas fa-fw fa-lg fa-check text-success"></em> Advantages</h3>
<ul>
<li>1 place to maintain the code</li>
</ul>
<h3 id="em-class-fas-fa-fw-fa-lg-fa-times-text-danger-em-disadvantages"><em class="fas fa-fw fa-lg fa-times text-danger"></em> Disadvantages</h3>
<ul>
<li>
<p>we program outside the Application - when we get the application somewhere else (e.g. tests), it might break</p>
<pre><code class="language-php">$application = $container-&gt;get(Application::class);
$application-&gt;run();
// passing `CHANGELOG-2.md` as argument → invalid argument error</code></pre>
</li>
<li>
<p>that's why the should be encapsulated - always prefer tree dependencies over these circle ones</p>
</li>
</ul>
<h2 id="3-the-del-symfony-del-event-subscriber-way">3. The <del>Symfony</del> Event Subscriber Way</h2>
<p>I found this approach on <a href="https://matthiasnoback.nl/2013/11/symfony2-add-a-global-option-to-console-commands-and-generate-pid-file">Matthias Noback's blog</a>. The process is similar to above, just wrapped in event subscriber that hooks into the Console Application cycle:</p>
<pre><code class="language-php">&lt;?php

use Symfony\Component\Console\Event\ConsoleCommandEvent;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Component\Console\ConsoleEvents;

final class FileArgumentEventSubscriber implements EventSubscriberInterface
{
    /**
     * @return string[]
     */
    public static function getSubscribedEvents(): array
    {
        return [ConsoleEvents::COMMAND =&gt; 'onConsoleCommand'];
    }

    public function onConsoleCommand(ConsoleCommandEvent $event): void
    {
        $applicationDefinition = $event-&gt;getCommand()-&gt;getApplication()-&gt;getDefinition();
        $applicationDefinition-&gt;addArguments([
           new InputArgument('file', InputArgument::OPTIONAL, 'Path to changelog file to work with')
        ]);
    }
}</code></pre>
<h3 id="em-class-fas-fa-fw-fa-lg-fa-check-text-success-em-advantages"><em class="fas fa-fw fa-lg fa-check text-success"></em> Advantages</h3>
<ul>
<li>there is 1 place to maintain the code</li>
<li>our application is consistent everywhere</li>
</ul>
<h3 id="em-class-fas-fa-fw-fa-lg-fa-times-text-danger-em-disadvantages"><em class="fas fa-fw fa-lg fa-times text-danger"></em> Disadvantages</h3>
<p>There are now new memory-locks, that not really needed:</p>
<ul>
<li>we have to have/add event dispatcher - <code>composer require symfony/event-dispatcher</code></li>
<li>we have to load it with subscribers/listeners</li>
<li>we have to pass event dispatcher to symfony console</li>
<li>we break one of <a href="https://williamdurand.fr/2013/06/03/object-calisthenics/#5-one-dot-per-line">object calisthenics</a></li>
</ul>
<p>Also, would you add routes this way?</p>
<pre><code class="language-php">class SomeController
{
    public function someAction(Request $request)
    {
        $router = $request-&gt;getAttribute('controller')-&gt;getContainer()-&gt;get('router');
        $router-&gt;addRoute('...');
    }
}</code></pre>
<p>Above, we ask event to get a service, to invoke a callback on another service. <strong>When you ask event (unique object) for a service (global class), there is something wrong</strong>. Events should work with unique information - they're value objects after all.</p>
<p><br></p>
<p>The post is 5 years old and I don't think Matthias still sees this as the best way to go, yet Google shows it in top 5 results. Matthias has a popular and valuable blog (I learned a lot myself back in my early years in Symfony) and some people might think this is the best practice. To add more salt to the wound, this answer also <a href="https://stackoverflow.com/questions/40674814/how-to-add-a-new-command-line-option-to-symfony-console">spread to StackOverflow</a> without concurrency.</p>
<p><br></p>
<p>What is really important? <strong>The definition of application</strong>, nothing more.</p>
<h2 id="4-extend-the-application">4. Extend the Application</h2>
<p>I'm very happy to see that <a href="https://github.com/composer/composer/pull/1110/files">composer code has this right</a>. There is global option <code>--working-dir</code>, that allows you simply run composer in another directory:</p>
<pre><code class="language-bash">composer update --working-dir projects/open-training

# equals to
cd projects/open-training
composer update
cd ../..</code></pre>
<p>How did I find this out? I needed to remove one of the basic options Symfony Console Application has out of the box:</p>
<img src="/assets/images/posts/2018/global-option/basic.png" class="img-thumbnail">
<p>It took me a while but the track lead to <a href="https://github.com/symfony/symfony/blob/59fad59886fc2e47c4e49bcb668a6e1e0795a6d7/src/Symfony/Component/Console/Application.php#L951"><code>Application::getDefaultInputDefinition()</code></a> method.</p>
<pre><code class="language-diff"> &lt;?php

 use Symfony\Component\Console\Application;
 use Symfony\Component\Console\Input\InputArgument;

 final class SomeApplication extends Application
 {
+    protected function getDefaultInputDefinition()
+    {
+        $definition = parent::getDefaultInputDefinition();
+        $definition-&gt;addArgument(new InputArgument('file', InputArgument::OPTIONAL, 'Path to changelog file to work with'));
+
+        return $definition;
+    }
 }</code></pre>
<p><code>Symfony\Component\Console\Application</code> is <strong>one of very few classes I'd allow to <a href="https://ocramius.github.io/blog/when-to-declare-classes-final">extend</a></strong>. It's just 1:1 = easy to maintain and change. Not like entity repository, that can have dozens of children.</p>
<h3 id="em-class-fas-fa-fw-fa-lg-fa-times-text-danger-em-disadvantages"><em class="fas fa-fw fa-lg fa-times text-danger"></em> Disadvantages</h3>
<ul>
<li>
<p>very little known → very hard to discover and debug - we should add a note about this to <code>config.yml</code></p>
<pre><code class="language-yaml">services:
    # we extend default definition here with `file` argument
    SomePackage\Console\SomeApplication: ~</code></pre>
</li>
</ul>
<h3 id="em-class-fas-fa-fw-fa-lg-fa-check-text-success-em-advantages"><em class="fas fa-fw fa-lg fa-check text-success"></em> Advantages</h3>
<ul>
<li><strong>one place</strong>, that creates a consistent code</li>
<li><strong>we use API that is designed for these changes</strong></li>
<li>you don't need any extra packages, adding anything to the application</li>
<li>very simple to add: it takes 10 lines</li>
<li>it just works :)</li>
</ul>
<p><br></p>
<p>For all these reasons, this is the one I prefer. Do you want to see it in the real world? Here <a href="https://github.com/symplify/symplify/pull/1047/commits/c07c49ae4eff067db7cfe5e5ed1b283ae37c8c29#diff-3b69acbe6b33a88158b373e6e96de097">is a commit</a> from Monorepo Builder for our <code>file</code> argument.</p>
<p><br></p>
<h2 id="think-in-anti-patterns">Think in (Anti) Patterns</h2>
<p>This post is not just about adding an option/argument to console. It's about applying the best choice in every feature you add. <strong>And if you don't know, look for it</strong>. Don't just blindly take the first result provided Google. It might be popular, widespread, but that doesn't mean it's high quality and valid solution.</p>
<p>Do you see similar anti-patterns as 1, 2 or 3 in your code you're now happy with? How could you make it better?</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/09/03/4-ways-to-add-global-option-or-argument-to-symfony-console-application</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 03 Sep 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/09/03/4-ways-to-add-global-option-or-argument-to-symfony-console-application#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Ways I Fucked Up Open Source Code: Mock Everything and Test Units ]]></title>
                <link>https://tomasvotruba.com/blog/2018/08/30/ways-i-fucked-up-open-source-code-mock-everything-and-test-units</link>
                <description><![CDATA[ <p>In a normal job, decisions are made by those above you. They pay you and when it goes down, you leave in 2 months. Open-source code is different because <strong>you're the one making choices but also the one who deals with results when it fails</strong>. Moreover, if you love the project and want to spend years with it.
<br>
<br>
Today I'll show you one of my many fuckups - let's mock units!</p> ]]></description>
                <content:encoded><![CDATA[ <p>I was using <a href="https://github.com/apigen/apigen">ApiGen</a> back in 2014. I had no commit for past 2 years so no surprise it didn't work for PHP 5.5+. I was young inexperienced... <em>a complainer</em> in that time, so I created issues and I blamed every contributor for creating such a bad project.</p>
<p>At the same time, I had a baby on the way and I didn't want to teach him to complain. <em>Change it or let it go</em> - that's what I wanted to teach him, so I wrote an email to Jarda, joined the project, <strong>started making the code better and failing at it</strong>.</p>
<h2 id="mock-almost-everything">Mock (Almost) Everything</h2>
<p>The project had 0 % coverage, so every line I changed raised my heart-beat and blood pressure to enormous levels. I broke completely unrelated code (= regression bug) many times making the project even more bugged than it was before I came.</p>
<p>&quot;Let's increase the coverage to 90 %&quot;, I thought. I read this number on the Internet, so it had to be true. In that time I was pretty new to unit testing and mocking was on the hype. I didn't know that <em>hype</em> is <em>fake success</em> and that everything popular needs to be tested first instead of blindly integrated.</p>
<p>I took mocking, aimed for a high coverage and make unit tests strictly unit. Each class had standalone. After all, that will make the project, successful and easy to maintain. That what I thought at least. I managed to go to 84 % of coverage and burn out in the process. But it was &quot;clean&quot; and I thought the open-source is hard to make, so it <em>felt</em> right.</p>
<h2 id="how-i-found-out-i-failed">How I Found Out I Failed?</h2>
<p>The story could end here with success final note. I turned 0  % coverage to 84 % on a project I never coded before. I used mocks and unit test - that's cool and great, right? It wasn't until 2 years later I worked on the code again to experience the real &quot;added&quot; value. Without exposing to feedback there is no place to improve.</p>
<img src="/assets/images/posts/2018/fuckups/before-after.png" class="img-thumbnail">
<p>ApiGen used 3rd party reflection package that was not developed for 4 years in that time. The only reasonable way to add PHP 5.5+ and features was to use BetterReflection. I won't go in much details here, but you can <a href="/blog/2017/09/04/how-apigen-survived-its-own-death/">read the whole story of migration here</a>.</p>
<img src="/assets/images/posts/2018/fuckups/change.png" class="img-thumbnail">
<p>The specific change is not that important. It might have been another situation like Symfony\Console was dead for 5 years and a new better package needed to replace it, or PHP 8.0 is out with many new API changes. The important part is mocking and unit testing. <strong>Do you know what happens if you have 84 % test coverage, mostly unit-tested with mocks and you need to switch 1 single package</strong>?
Refactoring usually mean that you replace the code in <code>/src</code> with a new one, run tests and fixes anomalies. Not in this case! I had to refactor all the unit tests to respect the new API. Rename every single class, rename every single method in your tests and find out how they work internally and re-simulate they behavior with the new package:</p>
<pre><code class="language-diff">-/** @var OldReflectionClass|\PHPUnit\Framework\MockObject\MockObject $oldReflectionClassMock */
+/** @var NewReflectionClass|\PHPUnit\Framework\MockObject\MockObject $oldReflectionClassMock */
-$reflectionClassMock = $this-&gt;createMock('OldReflectionClass');
+$reflectionClassMock = $this-&gt;createMock('NewReflectionClass');
-$reflectionClass-&gt;method('oldReflectionMethod')
+$reflectionClass-&gt;method('newReflectionMethod')
-    -&gt;willReturnCallback(...);
+    -&gt;willReturnCallback(...);</code></pre>
<p>Uff. I was refactoring old code to a new one for weeks. It was hell, hell that made me think why I'm doing it like this? What I <strong>really need</strong>? <strong>I really needed to develop safely when working code of ApiGen and enjoy it</strong>. If I don't enjoy it, I burn out and no matter how &quot;professional&quot; code looks like, it will perish in the past. <em>Better done than perfect</em>.</p>
<p>Let's turn it into the code language:</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

namespace Apigen\Tests;

use PHPUnit\Framework\TestCase;

final class ApiGenTest extends TestCase
{
    public function test()
    {
        exec('bin/apigen tests/test-source --output tests/generated-source');

        $this-&gt;assertSame('tests/expected-source', 'tests/generated-source');
    }
}</code></pre>
<p>This is clearly opposite extreme thinking, that has its flaws. Mock everything and unit test every single class? Run just bin file and before/after? In the end, I found the best deal is somewhere in the middle:</p>
<ul>
<li>
<p>Instead of testing the lowest levels, <strong>I started to use the main parts of the application with before/after approach</strong>. You can see it nicely in this <a href="https://github.com/symplify/symplify/blob/e35b7e0564e08028f626241ca4860123c29a5b5e/packages/CodingStandard/tests/Fixer/Property/ArrayPropertyDefaultValueFixer/ArrayPropertyDefaultValueFixerTest.php#L34-L40">Symplify\CodingStandard test</a>. They've proven to be easily extendable and easier to understand. You see PHP code before and PHP code after. Good old common sense.</p>
</li>
<li>
<p>Instead of mocking, <strong>I started to use <a href="/blog/2018/06/11/how-to-turn-mocks-from-nightmare-to-solid-kiss-tests/">anonymous classes</a></strong>. They've proven to be readable, programmers understand them (it's PHP code, you know) and there are no strings or plugins attached.</p>
</li>
</ul>
<h2 id="what-i-learned-from-this-fail">What I Learned From this Fail?</h2>
<p><strong>I ask more</strong> and go for experience and small experiments.</p>
<h3 id="1-is-it-hype-or-is-it-quality">1. Is it Hype or is it Quality?</h3>
<p>Why do I think it's a good solution? Is it based on opinions or experience? If the first one, I make a little experiment to know and prevent huge consequences. I also found out that famous people are taken seriously... or rather miss taken seriously. Without knowing their experience and whys, people take blindly their statements. Take me as an example - I went for strict unit testing and 90 % coverage without really knowing why.</p>
<p>These statements are usually out of context and <strong>based on their specific experience</strong>. I might be working with 10-years-old PHP project where there is no space (budget) for automated refactorings or code-self-improvement, so I go for unit tests of everything I can. But <strong>does it make sense in your context</strong> where your leader is more educated and focuses on the effectivity in the long-run over today?</p>
<p>Advice have meaning in their context, <strong>you have to create your own</strong>. The same applies to my me. I share my own views, that is based on my own experience. It might work for you, but it doesn't mean it's right for everybody. Even if I don't write explicitly in every post my whole history, try to think about the background I'm from, what projects I work on and how that relates to you.</p>
<p>This <em>false positive</em> is called <a href="https://www.google.cz/search?q=anecdotal+evidence+example">anecdotal evidence</a> in psychology research.</p>
<img src="https://pixfeeds.com/images/32/608973/1200-608973-7125124.jpg" class="img-thumbnail">
<p><em>Fail fast and fail safe.</em> Try 2 frameworks to understand the first one, try <a href="/blog/2017/10/02/easy-coding-standard-and-phpstan-meet-3-symfony-ecommerce-projects/">3 e-commerce projects to make yours better</a>, try 10-20 projects to understand yours.</p>
<h3 id="2-what-maintenance-cost-it-brings">2. What Maintenance Cost it Brings?</h3>
<p>If I'd work in the agency that takes every year new project, I would not mind. I would create code that somebody else would have to rewrite in 5 years and got paid for it. But <strong>I prefer long-term projects and the challenge of keeping them fit and slim even after many years of development</strong>.</p>
<p>Every feature will make something better, so it doesn't make sense to ask if the project will be better with it. Even the school system gives you something. That's not the point. Instead for every new code feature, I ask - <strong>is added value bigger than an increase in maintenance cost it adds to our daily routine</strong>? I mean it's great to have online support form in javascript, but if it takes 1 hour daily due to bugs of the unstable package... - again, there is space for an experiment.</p>
<p><br></p>
<h2 id="out-of-context-takeaways">Out of Context Takeaways</h2>
<p>So that's my fuckup story based on repeated in headlines and one-line advice I've heard.</p>
<p>What should you take as one-line takeaways?</p>
<ul>
<li>Personal experience from fast and safe experiment over external ideas out of context.</li>
<li>Stick with a project at least for a year, to see consequences of your early decisions.</li>
<li>It's ok to fail. It's not ok to fail over and over again with the same mistake.</li>
<li>Go out and fail to learn!</li>
</ul>
<p><br></p>
<p>Happy failing!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/08/30/ways-i-fucked-up-open-source-code-mock-everything-and-test-units</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 30 Aug 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/08/30/ways-i-fucked-up-open-source-code-mock-everything-and-test-units#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Why and How to Avoid the Memory Lock ]]></title>
                <link>https://tomasvotruba.com/blog/2018/08/27/why-and-how-to-avoid-the-memory-lock</link>
                <description><![CDATA[ <p>When you close the door of my home, they're closed and you need a key to get in. But what if your door has door handle? You have to also lock them.
<br><br>
Instead of just closing the door you have to close the door and <em>that one more thing</em>. Why is that a bad thing in the code and how to avoid it?</p> ]]></description>
                <content:encoded><![CDATA[ <p>I started <a href="https://github.com/javiereguiluz/easybook/pull/185">refactoring <em>easybook</em> package</a> last week and I found a few interesting snippets there.</p>
<p>Let's start with a simple question: which of following 7 code snippets <strong>opens space for potential bug</strong> that will take your new colleague 2-3 hours to solve?</p>
<p><br></p>
<p>1.</p>
<pre><code class="language-php">&lt;?php

// ...

foreach ($this-&gt;publishingItems as $item) {
   $item['content'] = $this-&gt;decorateContent($item['content']);
}</code></pre>
<p><br></p>
<p>2.</p>
<pre><code class="language-php">&lt;?php

use Symfony\Component\EventDispatcher\EventSubscriberInterface;

final class SomeEventSubscriber implements EventSubscriberInterface
{
    /**
     * @return string[]
     */
    public static function getSubscribedEvents(): array
    {
         return ['processEvent'];
    }

    public function processEvent(ItemAwareEvent $itemAwareEvent)
    {
        $item = $itemAwareEvent-&gt;getItem();
        $item['content'] = 'new content';
    }
}</code></pre>
<p><br></p>
<p>3.</p>
<pre><code class="language-php">&lt;?php

// ...

$this-&gt;bookGenerator-&gt;setBookDirectory($bookDirectory);
$this-&gt;bookGenerator-&gt;generate();</code></pre>
<p><br></p>
<p>4.</p>
<pre><code class="language-php">&lt;?php

// ...

protected function setUp(): void
{
    $this-&gt;epub2Publisher = $this-&gt;container-&gt;get(Epub2Publisher::class);
}</code></pre>
<p><br></p>
<p>5.</p>
<pre><code class="language-php">&lt;?php

class SomeController
{
    public function someAction()
    {
        // ...

        $product = ...;

        $this-&gt;entityManager-&gt;persist($product);
        $this-&gt;entityManager-&gt;flush();
    }
}</code></pre>
<p><em>Don't mind the presence of Doctrine in Controller here. That's a code smell we don't look for right now.</em></p>
<p><br></p>
<p>6.</p>
<pre><code class="language-php">&lt;?php

use Symfony\Component\Console\Command\Command;

class SomeCommand extends Command
{
    /**
     * @var SomeDependency
     */
    private $someDependency;

    public function __construct(SomeDependency $someDependency)
    {
        $this-&gt;someDependency = $someDependency;
    }

    // ...
}</code></pre>
<p><br></p>
<p>7.</p>
<pre><code class="language-php">&lt;?php
use PhpParser\NodeTraverser;

class SomeNodeTraverser extends NodeTraverser
{
    /**
     * @var SomeDependency
     */
    private $someDependency;

    public function __construct(SomeDependency $someDependency)
    {
        $this-&gt;someDependency = $someDependency;
    }

    public function process()
    {
        foreach ($this-&gt;visitors as $visitor) {
            // ...
        }
    }
}</code></pre>
<p>Do you have your favorite number? Good, try to remember it.</p>
<p>The memory-lock <strong>is very difficult to spot</strong>. We owe that to <em>author blindness</em> and <em>thinking heuristics</em> (brain short-cuts), that limits our ability to work effectively in the chaos or under pressure. If you've read <a href="https://www.amazon.com/Thinking-Fast-Slow-Daniel-Kahneman-ebook/dp/B005MJFA2W/ref=sr_1_1?ie=UTF8&amp;qid=1535407760&amp;sr=8-1&amp;keywords=Thinking%2C+Fast+and+Slow">Thinking, Fast and Slow</a> (must have for anyone curious about his or her brain false positives) or any other book about social psychology, you know where I'm heading.</p>
<h2 id="when-expectations-are-met">When Expectations are Met</h2>
<p>Why it's difficult to spot? <strong>It depends on other code and it might code work if our expectations are met</strong>. What does it mean?</p>
<p>Let's take code snippet 7. Will this work or not? Under what condition?</p>
<pre><code class="language-php">&lt;?php

foreach ($this-&gt;visitors as $visitor) {
    // ...
}</code></pre>
<p><a href="https://github.com/nikic/PHP-Parser/pull/528">This pull-request</a> reveals the answer.</p>
<p>Now back to your coding:</p>
<ul>
<li>Do you want to create a code that works under certain assumption?</li>
<li>Do you want to remember to do the B after each A?</li>
<li>Do you want to <strong>keep over 50 of such A-B pairs in your head</strong> every time you open your main project?</li>
</ul>
<p>I don't. I want to be effective and create a valuable bullet-proof code that can be used only one way. A code that doesn't put the burden on the developer to investigate my code first. A code that is safe to use and cannot be broken (if possible).</p>
<p><br></p>
<p>So which of those 7 code snippets above are dangerous?</p>
<p><br></p>
<p><em>Drum rolls...</em></p>
<p><br></p>
<p><strong>Yes, all of them!</strong> I knew you'd reveal my poor confusion.</p>
<h3 id="don-t-make-the-programmer-think">Don't make the Programmer Think</h3>
<p>I'm taking the title from my favorite <a href="http://sensible.com/dmmt.html">intro UX book</a> because it really punches the line. <strong>There are 3 groups of memory-locks that could be done better</strong> in the code snippets above.</p>
<h2 id="1-change-array-return">1. Change Array Return</h2>
<div class="card">
    <div class="card-body">
        The memory lock: <em>after I change array value, I have to put it back into an original set of an array or return it</em>.
    </div>
</div>
<p>Snippets 1 and 2.</p>
<p>This code would change the <code>$item['content</code>] value, but <code>$this-&gt;publishingItems</code> remains unchanged:</p>
<pre><code class="language-php">&lt;?php

// ...

foreach ($this-&gt;publishingItems as $item) {
    $item['content'] = $this-&gt;decorateContent($item['content']);
}</code></pre>
<h3 id="how-to-solve-it">How to Solve it?</h3>
<pre><code class="language-diff"> &lt;?php

 // ...

-foreach ($this-&gt;publishingItems as $item) {
+foreach ($this-&gt;publishingItems as $key =&gt; $item) {
     $item['content'] = $this-&gt;decorateContent($item['content']);
+    $this-&gt;publishingItems[$key] = $item;
 }</code></pre>
<p><strong>Use object instead</strong>:</p>
<pre><code class="language-diff"> &lt;?php

 // ...

 foreach ($this-&gt;publishingItems as $item) {
-     $item['content'] = $this-&gt;decorateContent($item['content']);
+     $item-&gt;changeContent($this-&gt;decorateContent($item['content']));
 }</code></pre>
<p>Objects <a href="https://gist.github.com/nikic/5015323">consume less memory</a> anyway and <strong>you are safe</strong> - more importantly, <strong>anyone extending this code ever after is safer</strong>.</p>
<h2 id="2-double-method-call">2. Double-Method Call</h2>
<div class="card">
    <div class="card-body">
       The memory lock: <em>After I call this method I have to call that method to make it really work</em>.
    </div>
</div>
<p>Snippets 3 and 5.</p>
<p>You also have to think about the C - the order:</p>
<pre><code class="language-php">$this-&gt;bookGenerator-&gt;setBookDirectory($bookDirectory);
$this-&gt;bookGenerator-&gt;generate();</code></pre>
<p>vs.</p>
<pre><code class="language-php">$this-&gt;bookGenerator-&gt;generate();
$this-&gt;bookGenerator-&gt;setBookDirectory($bookDirectory);</code></pre>
<p>vs.</p>
<pre><code class="language-php">$this-&gt;bookGenerator-&gt;generate();</code></pre>
<h3 id="how-to-solve-it">How to Solve it?</h3>
<p>Use one method that handles it both:</p>
<pre><code class="language-diff"> &lt;?php

 // ...

-$this-&gt;bookGenerator-&gt;setBookDirectory($bookDirectory);
-$this-&gt;bookGenerator-&gt;generate();
+$this-&gt;bookGenerator-&gt;generateFromDirectory($bookDirectory);</code></pre>
<p>Same applied to code snippet 5:</p>
<pre><code class="language-diff"> &lt;?php

 // ...

-$this-&gt;entityManager-&gt;persist($product);
-$this-&gt;entityManager-&gt;flush();
+$this-&gt;productRepository-&gt;save($product);</code></pre>
<p>I dare you to generate the book or save the product the wrong way now!</p>
<h2 id="3-parent-logic">3. Parent Logic</h2>
<p>Snippets 4, 6 and 7.</p>
<div class="card">
    <div class="card-body">
       The memory lock: <em>After I call anything in parent method, I have check if I need to call the constructor to prepare some logic</em>.
    </div>
</div>
<p>This would actually fail:</p>
<pre><code class="language-php">&lt;?php

foreach ($this-&gt;visitors as $visitor) {
    // ...
}</code></pre>
<p>Why? Because in <code>parent::__construct()</code> is set default value for property with null:</p>
<pre><code class="language-php">&lt;?php

// ...

public function __construct()
{
    $this-&gt;visitors = [];
}</code></pre>
<h3 id="how-to-solve-it">How to Solve it?</h3>
<p>In this case just add default value to property itself:</p>
<pre><code class="language-diff">-private $visitors;
+private $visitors = [];</code></pre>
<p>There is even coding <a href="https://github.com/symplify/coding-standard#array-property-should-have-default-value-to-prevent-undefined-array-issues">standard fixer for that</a>.</p>
<p>Also, <strong>do not add any logic to constructor</strong> apart dependency injection. Constructor injection is the main reason to use the constructor in 99 %, so most people probably don't expect any extra logic there. Create extra method instead or decouple a class, put it into the constructor and call the method on it.</p>
<p><strong>Try to avoid these patterns in code, in door design or in architecture of the application as a whole.</strong> One day some programmer will silently thank you when he or she will find what <em>memory lock</em> is (the painful way).</p>
<p><br></p>
<p>Do you know any other <em>memory locks</em> we should watch out for? Share them in the comment!</p>
<p><br></p>
<blockquote class="twitter-tweet" data-lang="cs"><p lang="en" dir="ltr">"90% of the bugs I produced were for one of the two reasons:<br>1. Doing multiple things at one place<br>2. Doing one thing at multiple places" - <a href="https://twitter.com/pseudo_coder?ref_src=twsrc%5Etfw">@pseudo_coder</a></p>— Programming Wisdom (@CodeWisdom) <a href="https://twitter.com/CodeWisdom/status/998180793385209856?ref_src=twsrc%5Etfw">20. května 2018</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p><br></p>
<p>Happy brain cells liberation!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/08/27/why-and-how-to-avoid-the-memory-lock</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 27 Aug 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/08/27/why-and-how-to-avoid-the-memory-lock#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ 9 Features of Symfony Plugin You Should Not Miss in Gifs ]]></title>
                <link>https://tomasvotruba.com/blog/2018/08/23/9-features-of-symfony-plugin-you-should-not-miss-in-gifs</link>
                <description><![CDATA[ <p>After very successful <a href="/blog/2018/08/16/whats-new-in-php-73-in-30-seconds-in-diffs/">PHP 7.3 diffs post</a>, let's dive to gifs of <a href="https://plugins.jetbrains.com/plugin/7219-symfony-plugin">Symfony Plugin for PHPStorm</a>. You might know them, but they <strong>might surprise you like they did surprise me</strong>. Let's go!</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="0-be-grateful">0. Be Grateful ❤️️</h2>
<img src="/assets/images/posts/2018/symfony-plugin/thank-you.png" class="img-thumbnail">
<p><a href="https://github.com/Haehnchen/idea-php-symfony2-plugin#building-debugging-and-other">Click PayPal in README</a></p>
<p><br></p>
<h2 id="1-enable-the-plugin">1. Enable the Plugin</h2>
<p>Easy, but must have step!</p>
<img src="/assets/images/posts/2018/symfony-plugin/enable.gif" class="img-thumbnail">
<p><br></p>
<h2 id="2-faster-translation-autocreate-twig">2. Faster Translation Autocreate (TWIG)</h2>
<img src="/assets/images/posts/2018/symfony-plugin/translate-add-key.gif" class="img-thumbnail">
<p><br></p>
<h2 id="3-autocomplete-translation-key-twig">3. Autocomplete Translation Key (TWIG)</h2>
<p>Write your <code>|trans</code> first.</p>
<img src="/assets/images/posts/2018/symfony-plugin/translate-autocomplete.gif" class="img-thumbnail">
<p><br></p>
<h2 id="4-instant-service-autocomplete-in-yaml-yaml">4. Instant Service Autocomplete in YAML  (YAML)</h2>
<p>The trick is go after <code>:</code>.</p>
<img src="/assets/images/posts/2018/symfony-plugin/yaml-class.gif" class="img-thumbnail">
<p><br></p>
<h2 id="5-forget-the-tag-yaml">5. Forget The Tag (YAML)</h2>
<img src="/assets/images/posts/2018/symfony-plugin/yaml-tag.gif" class="img-thumbnail">
<p><br></p>
<h2 id="6-jump-from-href-to-route-twig">6. Jump from Href to Route (TWIG)</h2>
<img src="/assets/images/posts/2018/symfony-plugin/route-in-twig.gif" class="img-thumbnail">
<p><br></p>
<h2 id="7-instant-route-in-controller-php">7. Instant Route in Controller (PHP)</h2>
<img src="/assets/images/posts/2018/symfony-plugin/route-in-php.gif" class="img-thumbnail">
<p><br></p>
<h2 id="8-faster-queries-in-doctrine-repository-php">8. Faster Queries in Doctrine Repository (PHP)</h2>
<img src="/assets/images/posts/2018/symfony-plugin/doctrine-query-autocomplete.gif" class="img-thumbnail">
<p><br></p>
<h2 id="9-template-autocomplete-php">9. Template Autocomplete (PHP)</h2>
<p>You know the basic template autocomplete from <code>/templates</code>. But how to do that for decoupled templates in <code>/packages/Provision/templates</code>?</p>
<img src="/assets/images/posts/2018/symfony-plugin/template-elsewhere.gif" class="img-thumbnail">
<p><br></p>
<p>That's it!</p>
<p>What number was <strong>new to you</strong>? And which feature I missed?</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/08/23/9-features-of-symfony-plugin-you-should-not-miss-in-gifs</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 23 Aug 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/08/23/9-features-of-symfony-plugin-you-should-not-miss-in-gifs#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Painful Experience over Solutions: Extend Configuration in Easy Admin Bundle ]]></title>
                <link>https://tomasvotruba.com/blog/2018/08/20/painful-experience-over-solutions-extend-configuratin-in-easy-admin-bundle-with-collector</link>
                <description><![CDATA[ <p><em>Use SOLID to write Clean Code...</em> Are you tired of theoretical post about how to do achieve some therm? So am I.
<br>
Instead, let's <strong>dive into real problems I came across while coding and let the code speak the theory between lines</strong>.
<br><br>
Today we try to add own config option to YAML of Easy Admin Bundle (without pull-request to the package).</p> ]]></description>
                <content:encoded><![CDATA[ <blockquote class="blockquote text-center">
    Hindsight is 20/20.
</blockquote>
<p>Instead of writing about solution how to do and how awesome I am to know the solution right from the start of this page, I start right from the beginning, where I know nothing about it just like you.</p>
<p><br></p>
<h3 id="the-application">The Application</h3>
<p>I'm coding an open-sourced training platform build Symfony 4.2 and Doctrine 2.7 for <a href="https://github.com/pehapkari">Pehapkari community training</a>. It's fully open-sourced on Github under the typical open-source name - <a href="https://github.com/tomasvotruba/open-training">Open Training</a>.</p>
<p>Admin is just a CRUD to maintain few entities, so I use <a href="https://github.com/easyCorp/EasyAdminBundle">EasyAdminBundle</a> to handle forms, grids, update, create, delete actions in controllers for me. Huge thanks to <a href="https://github.com/javiereguiluz">Javier Eguiluz</a> for this amazingly simple and powerful idea.</p>
<img src="https://symfony.com/doc/current/bundles/EasyAdminBundle/_images/easyadmin-default-backend.png">
<h3 id="the-need">The Need</h3>
<p>There is <code>Training</code> entity with <code>name</code> and relation to <code>TrainingTerm</code> entity:</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

namespace App\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Mapping as ORM;

/**
 * @ORM\Entity
 */
class Training
{
    /**
     * @ORM\Id()
     * @ORM\GeneratedValue()
     * @ORM\Column(type="integer")
     * @var int
     */
    private $id;

    /**
     * @ORM\Column(type="string", length=255)
     * @var string
     */
    private $name;

    // ...

    /**
     * @ORM\OneToMany(targetEntity="App\Entity\TrainingTerm", mappedBy="training")
     * @var TrainingTerm[]|ArrayCollection
     */
    private $trainingTerms = [];
}</code></pre>
<p>I want to edit this entity in administration, so I add it to <code>config/packages/easy_admin.yaml</code>:</p>
<pre><code class="language-yaml">easy_admin:
    entities:
        Training:
            class: 'App\Entity\Training'</code></pre>
<p>This creates a grid and form with all the entity properties - <code>name</code> and <code>trainingTerms</code>. So, when I click <em>Add</em> in the admin I can change them both. <strong>But I want to change the <code>name</code> only and handle <code>TrainingTerm</code> entity in a standalone form.</strong></p>
<h3 id="google-first">Google First</h3>
<p>Now what? I Google <em>easy admin custom field form</em> and after while I find <a href="https://symfony.com/doc/current/bundles/EasyAdminBundle/book/edit-new-configuration.html#customize-the-properties-displayed"><em>Customize the Properties Displayed</em></a> tutorial. It looks like exactly what I need.</p>
<pre><code class="language-diff"> easy_admin:
     entities:
         Training:
             class: 'App\Entity\Training'
+            fields: ['name']</code></pre>
<p>It works! The <code>trainingTerms</code> property is hidden in the form.</p>
<p><br></p>
<h3 id="but">But...</h3>
<p>After 2 hours I need to add <code>price</code>.</p>
<pre><code class="language-diff"> &lt;?php declare(strict_types=1);

 namespace App\Entity;

 use Doctrine\Common\Collections\ArrayCollection;
 use Doctrine\ORM\Mapping as ORM;

 /**
  * @ORM\Entity
  */
 class Training
 {
     // ...

+    /**
+     * @ORM\Column(type="integer")
+     * @var int
+     */
+    private $price;</code></pre>
<p>Price is there, great! Now we can earn some money. I <em>edit</em> training in admin... but, where is the price?</p>
<p>Because I'm coding many other features I don't realize, there is <em>memory-vendor-lock</em> - <strong>a code smell, when after doing the A, you always have to remember the B</strong>. Do you see it? When I add a property, I always have a to add it to <code>fields</code> in config.</p>
<pre><code class="language-diff"> easy_admin:
     entities:
         Training:
             class: 'App\Entity\Training'
-            fields: ['name']
+            fields: ['name', 'price']</code></pre>
<p>If this is the only case, that would be ok-ish. But now there are 10 entities with 50 properties. How the hell will I remember to do this on every new property I add?</p>
<pre><code class="language-diff"># ...
-            fields: ['name', 'price']
+            fields: ['name', 'price', 'capacity']</code></pre>
<p>And how can will anyone else find this out without me doing the code-review and remembering?</p>
<pre><code class="language-diff"># ...
-            fields: ['name', 'price', 'capacity']
+            fields: ['name', 'price', 'capacity', 'duration']</code></pre>
<p>So much <em>memory-leaks</em> it hurts my neurons.</p>
<h3 id="creative-time">Creative Time</h3>
<p>Life is not perfect and every code is legacy by the time you end the line with <code>;</code>.</p>
<blockquote class="blockquote text-center">
    There are no solutions. Just trade-offs.
</blockquote>
<p>I stop and think a bit. How can I write less code to prevent possible bugs and make changes as effective as possible?
<strong>I see there are fewer properties to exclude than properties to include</strong>, by 1:10. It would not be perfect code, but still 10 times safer and more effective code. Worth it!</p>
<pre><code class="language-diff"> easy_admin:
     entities:
         Training:
             class: 'App\Entity\Training'
-            fields: ['name', 'price', 'capacity', 'duration', 'perex', 'description', 'place', 'trainer']
+            exclude_fields: ['trainingTerms']</code></pre>
<h3 id="make-that-happen-and-face-false-expectations">Make that Happen and Face False Expectations</h3>
<p>But is that <code>exclude_fields</code> or <code>excluded_fields</code> or maybe <code>skip_fields</code>? I want to see the documentation, so I Google <a href="https://www.google.cz/search?q=easy+admin+bundle+exclude+fields&amp;oq=easy+admin+bundle+exclude+fields&amp;aqs=chrome..69i57.4891j0j7&amp;sourceid=chrome&amp;ie=UTF-8"><em>easy admin bundle excludes fields</em></a>. I find <a href="https://github.com/EasyCorp/EasyAdminBundle/issues/589"><em>Exclude fields in list fields</em> issue in EasyAdminBundle</a>. I read it and see the content <strong>is not what I need</strong>. It looks like this option is not supported. I'm sad. What now?</p>
<p><br></p>
<p>Open-source packages are closed to extension more than you'd expect. To add one custom feature, you have to basically copy and extend the whole class or use reflection. It's not <strong>because it's difficult to create an extendable code, it's because nobody <em>believes</em> it can be done in a nice way</strong>. It <em>can</em>, just keep reading.</p>
<p><br></p>
<p>Being that suspicious I start my <em>inner over-engineer</em> voice:</p>
<ul>
<li>&quot;Create own extension that will hack into the <code>EasyAdminExtension</code> and get the config and add <code>exclude_fields</code> option&quot;</li>
<li>&quot;Create own <code>BetterEasyAdminBundle</code> that will be run before the <code>EasyAdminBundle</code> and will pass parameters there&quot;</li>
</ul>
<p><strong>This might end-up wasting many hours</strong> on custom and useless solution (like &quot;create own Doctrine&quot; idea, true story). Instead I try to invest a bit more time and I continue the brainstorming:</p>
<ul>
<li>&quot;Send pull-request with this feature to the core code&quot;</li>
</ul>
<p>Slightly better, but what if Javier doesn't like it? Or what if he's on holiday for 3 weeks? I know, it's summer and very rare to happen, but I have to finish the app in 2 weeks and I don't want to think about bugs like these in the meantime. The <strong>least I can do is to create <a href="https://github.com/EasyCorp/EasyAdminBundle/issues/2325">an issue</a></strong> with this idea and my reasons for it.</p>
<h2 id="wander-in-the-code">Wander in the Code</h2>
<p>I need a solution and I need it today. What can I do? No hacking, no pull-request, just looking for something in files:</p>
<img src="/assets/images/posts/2018/collector-easy-admin-bundle/random.png" class="img-thumbnail">
<p>Do you think this is just a random screen-shot not worth your attention?</p>
<ul>
<li>there is a checkbox in <em>Match case</em> because <code>'fields'</code> is lowercased and we want to focus on that only (no properties or methods with <code>Fields</code>)</li>
<li>there is a limit to <code>*.php</code> because that <em>would be probably</em> place to extend</li>
<li>there is a limit to <em>Directory</em>: <code>/../vendor/easycorp</code>, because we want to hack into this package</li>
<li>there is <code>fields</code> word in search; later I improve it to <code>'fields'</code> to narrow results, because we know it's a string</li>
</ul>
<p><br></p>
<p><strong>I still have no idea about the solution I'll pick. I'm only randomly looking for the light, blindfolded in a dark foggy forest.</strong>
This is called <em>creative chaos</em> in coaching circles and it's the most important part of the client's work.</p>
<p><br></p>
<p>I scroll down a bit looking at both code and the file name. Suddenly, the fog starts slowly disappearing...</p>
<img src="/assets/images/posts/2018/collector-easy-admin-bundle/pass.png" class="img-thumbnail">
<p>I notice <code>*ConfigPass</code> suffix. Is that like <code>CompilerPassInterface</code>, a collector-pattern used in Symfony to modify services in the container?</p>
<p>Being curious I open <code>NormalizerConfigPass.php</code> file:</p>
<pre><code class="language-php">&lt;?php

// ...

namespace EasyCorp\Bundle\EasyAdminBundle\Configuration;

use Symfony\Component\DependencyInjection\ContainerInterface;

class NormalizerConfigPass implements ConfigPassInterface
{
    // ...
}</code></pre>
<p>An interface! That's a good sign.</p>
<h3 id="keep-wandering">Keep Wandering</h3>
<p>So I look for <code>ConfigPassInterface</code> in somewhere else than just <code>implements ConfigPassInterface</code>.</p>
<p>That doesn't work, so I try to look for <code>ConfigPass</code>.</p>
<p>That doesn't work, so I try to look for any file, not just <code>*.php</code>. That show as valuable, since services are defined in YAML or XML.</p>
<img src="/assets/images/posts/2018/collector-easy-admin-bundle/services.png" class="img-thumbnail">
<p>I see a tag: <code>easyadmin.config_pass</code>. Let's look for that string:</p>
<img src="/assets/images/posts/2018/collector-easy-admin-bundle/bingo.png" class="img-thumbnail">
<p>Warmer! <strong>I've just <a href="/clusters/#collector-pattern-the-shortcut-hack-to-solid-code/">found a collector</a>.</strong> To config, I look for service under <code>easyadmin.config.manager</code> name - <a href="https://github.com/EasyCorp/EasyAdminBundle/blob/07194017918aebe382e1ab0e53c68f6242547a0e/src/Configuration/ConfigManager.php#L112-L119"><code>ConfigManager</code></a> and look for <code>foreach</code> on collected services:</p>
<pre><code class="language-php">private function doProcessConfig($backendConfig): array
    {
    foreach ($this-&gt;configPasses as $configPass) {
        $backendConfig = $configPass-&gt;process($backendConfig);
    }

    return $backendConfig;
}</code></pre>
<p>Bingo! <strong>That means, when I register a service with <code>easyadmin.config_pass</code> tag, I'll be able to read and modify the YAML configuration</strong>.</p>
<p>So I register a service:</p>
<pre><code class="language-yaml">services:
    ExcludeFieldsConfigPass:
        tags:
             -
                 name: "easyadmin.config_pass"
                 priority: 120 # it took me more time to figure out if -100 or 0 or 100 or 1000 means "the first"</code></pre>
<p>That does 1 thing:</p>
<p><code>fields</code> (value to be set) = entity properties − <code>exclude_fields</code> (value I set in the config)</p>
<p><br></p>
<p>It allows me to do simplify <code>config/packages/easy_admin.yaml</code> config:</p>
<pre><code class="language-diff"> easy_admin:
     entities:
         Training:
             class: 'App\Entity\Training'
-            fields: ['name', 'price', 'capacity', 'duration', 'perex', 'description', 'place', 'trainer']
+            exclude_fields: ['trainingTerms']</code></pre>
<p>You can see full code of <a href="https://github.com/TomasVotruba/open-training/pull/7/files#diff-318660bf4cd1ad8a5d0e608e94df8fae"><code>ExcludeFieldsConfigPass</code> on Github</a>.</p>
<p>Very smart move Javier - thank you!</p>
<h2 id="learn-1-algorithm-instead-of-10-solutions">Learn 1 Algorithm instead of 10 Solutions</h2>
<p>And that's all folks. I hope I've shown you how to approach problems and how to find a way in situations you're the first time in.
The same way I don't memorize Wikipedia and just Google it instead, <strong>I don't remember solutions to 100 PHP problems, but have a couple of algorithms to approach problem solving</strong>.</p>
<ul>
<li>Try A - Failed?</li>
<li>Try B - Failed?</li>
<li>Try C - Failed?</li>
<li>Take a break to prevent <a href="https://en.wikipedia.org/wiki/Learned_helplessness">learned helplessness</a> :)</li>
<li>Try D - Failed?</li>
<li>Try E - Failed?</li>
<li>Try F - Kaboom! It works!</li>
</ul>
<p><br>
If artificial intelligence could figure this all out for us, we'd be screwed :).</p>
<p>Btw, are you coming to <a href="https://www.hlai-conf.org">Human Level AI Conference</a> in Prague this weekend? I'll be there and I'd be happy if you stop me and say Hi!</p>
<p><br></p>
<p>Happy solving!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/08/20/painful-experience-over-solutions-extend-configuratin-in-easy-admin-bundle-with-collector</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 20 Aug 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/08/20/painful-experience-over-solutions-extend-configuratin-in-easy-admin-bundle-with-collector#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ What&#039;s New in PHP 7.3 in 30 Seconds in Diffs ]]></title>
                <link>https://tomasvotruba.com/blog/2018/08/16/whats-new-in-php-73-in-30-seconds-in-diffs</link>
                <description><![CDATA[ <p>No time but eager to hear PHP news? PHP 7.3 is out in December 2018 and it brings <a href="https://github.com/php/php-src/blob/PHP-7.3/NEWS">173 changes</a>. Which are the most useful ones?</p> ]]></description>
                <content:encoded><![CDATA[ <p>From features that might be the most interesting to those lesser ones, that anybody will rarely use.</p>
<h2 id="1-comma-after-the-last-argument">1. Comma After the Last Argument</h2>
<p><a href="https://wiki.php.net/rfc/trailing-comma-function-calls" class="btn btn-info btn-sm">
<em class="fab fa-php fa-fw"></em>
&nbsp;
See RFC
</a></p>
<p>Do you know this?</p>
<pre><code class="language-diff"> $array = [
     1,
+    2,
 ];</code></pre>
<p>We'll be able to do this:</p>
<pre><code class="language-diff"> $this-&gt;someFunction(
     $arg,
+    $arg2,
 );</code></pre>
<p>But <strong>still not this</strong>:</p>
<pre><code class="language-diff"> function someFunction(
     $arg,
+    $arg2,
 ) {}</code></pre>
<p>Thanks <a href="/blog/2018/08/16/whats-new-in-php-73-in-30-seconds-in-diffs/#comment-4056622976">Jacob</a> for pointing <a href="https://wiki.php.net/rfc/trailing-comma-function-calls#wait_didn_t_we_just_vote_on_this">this difference</a> out.</p>
<p><br></p>
<p><em>25 seconds to go...</em></p>
<p><br></p>
<h2 id="2-first-and-last-array-key">2. First and Last Array Key</h2>
<p><a href="https://wiki.php.net/rfc/array_key_first_last" class="btn btn-info btn-sm">
<em class="fab fa-php fa-fw"></em>
&nbsp;
See RFC
</a></p>
<ul>
<li><a href="http://php.net/manual/en/function.array-key-first.php"><code>array_key_first</code></a></li>
</ul>
<pre><code class="language-diff"> $items = [
     1 =&gt; 'a',
     2 =&gt; 'b',
 ];

-reset($items);
-$firstKey = key($items);
+$firstKey = array_key_first($items);
 var_dump($firstKey); // 1</code></pre>
<ul>
<li><a href="http://php.net/manual/en/function.array-key-last.php"><code>array_key_last</code></a></li>
</ul>
<pre><code class="language-diff"> $items = [
     1 =&gt; 'a',
     2 =&gt; 'b',
 ];

-end($items);
-$lastKey = key($items);
+$lastKey = array_key_last($items);
 var_dump($lastKey); // 2</code></pre>
<p>These will be handy in <a href="https://github.com/symplify/symplify/blob/84987acb99b68748997fe205e9e5506035a36cfc/packages/TokenRunner/src/Wrapper/FixerWrapper/ClassWrapper.php#L118-L120">coding standard</a> <a href="https://github.com/symplify/symplify/blob/84987acb99b68748997fe205e9e5506035a36cfc/packages/CodingStandard/src/Fixer/Strict/BlankLineAfterStrictTypesFixer.php#L59-L60">tools</a>.</p>
<p><br></p>
<p><em>Still 15 seconds...</em></p>
<p><br></p>
<h2 id="3-countable-for-risky-variables">3. Countable for Risky Variables</h2>
<p><a href="https://wiki.php.net/rfc/is-countable" class="btn btn-info btn-sm">
<em class="fab fa-php fa-fw"></em>
&nbsp;
See RFC
</a></p>
<p>I don't think having a variable of 2 forms is a good idea:</p>
<pre><code class="language-php">&lt;?php

$items = null; // same as "private $items;" in a class

echo sprintf('There is %d items', count($items));
// error Warning: count(): Parameter must be an array or an object that implements Countable</code></pre>
<p>But in case of that smelly (3rd party) code, there is a help:</p>
<ul>
<li><a href="http://php.net/manual/en/function.is-countable.php"><code>is_countable</code></a></li>
</ul>
<pre><code class="language-diff"> $items = null;

+if (is_countable($items)) {
-echo sprintf('There is %d items', count($items));
+     echo sprintf('There is %d items', count($items));
+}</code></pre>
<p><em>Only 5 seconds, hurry!</em></p>
<p><br></p>
<h2 id="4-safer-json-parsing">4. Safer JSON Parsing</h2>
<p><a href="https://wiki.php.net/rfc/json_throw_on_error" class="btn btn-info btn-sm">
<em class="fab fa-php fa-fw"></em>
&nbsp;
See RFC
</a></p>
<pre><code class="language-diff">-json_encode($data);
+json_encode($data, JSON_THROW_ON_ERROR);</code></pre>
<pre><code class="language-diff">-json_decode($json);
+json_decode($json, false, 512, JSON_THROW_ON_ERROR);</code></pre>
<p>So you'll be able to do:</p>
<pre><code class="language-php">try {
    return json_decode($json, false, 512, JSON_THROW_ON_ERROR);
} catch (JsonException $exception) {
    // ...
}</code></pre>
<p>I've used similar technique for years thanks to <a href="https://doc.nette.org/en/2.4/json">Nette\Utils</a> and I've never complained:</p>
<pre><code class="language-php">&lt;?php

try {
    return Nette\Utils\Json::encode($value);
} catch (Nette\Utils\JsonException $exception) {
    // ...
}</code></pre>
<p><em>...0, you made it! Congrats, now get back to pwning the world!</em></p>
<p><br></p>
<p>Did I miss a feature you plan to use from day 1 of your PHP 7.3? I might too, drop it in the comments!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/08/16/whats-new-in-php-73-in-30-seconds-in-diffs</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/08/16/whats-new-in-php-73-in-30-seconds-in-diffs#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Hidden Gems of PHP Packages: Symfony\Finder and SplFileInfo ]]></title>
                <link>https://tomasvotruba.com/blog/2018/08/13/hidden-gems-of-php-packages-symfony-finder-and-spl-file-info</link>
                <description><![CDATA[ <p>The series on not-so-well-known packages that might save your ass more than you think continues.
Today we look on <strong>files as objects</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="why-i-use-it">Why I Use it?</h2>
<ol>
<li>
<p>Do you work with files in 5 different places in your application in a single way and you miss consistent naming?</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

function processFile(string $file) {
     // is absolute?
     // relative to what?
}

function processFile(string $fileAbsolute) {}
function processFile(string $filePath) {}
function processFile(string $absoluteFile) {}
function processFile(string $relativePath) {}
function processFile(string $filename) {}</code></pre>
</li>
<li>
<p>Do you need to test file paths on various CI machines?</p>
<pre><code class="language-diff">Expected test string didn't match:
-Error was found in: /home/im-very-cool-guy/my-website/www/my-home-porn-web/public/index.php
+Error was found in: /travic-ci/travis-directory-for-this-web/public/index.php</code></pre>
</li>
<li>
<p>Do you want to report the user the relative path instead of hard to read absolute one?</p>
<pre><code class="language-diff">-Error was found in: /home/im-very-cool-guy/my-website/www/my-home-porn-web/public/index.php
+Error was found in: public/index.php</code></pre>
</li>
<li>
<p>Do you want to forget all those <code>file_*</code> functions and just work with the file instead?</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

file_exists($file);
is_file($file);
is_directory($file); // actually: is_dir($file);
is_readable($file);
is_absolute($file); // well, you have to create this one yourself, and don't forget the Windows and Linux differences!</code></pre>
</li>
</ol>
<p><strong>Thanks to Symfony\Finder and its custom <code>SplFileInfo</code> I can be lazy, use object API and work safer and faster</strong> in all these cases above and more. Actually, I started to using <code>SplFileInfo</code> over <em>stringly</em> file paths/names after too many bugs appeared in my code and I'm happier and more relaxed ever since.</p>
<p>What is <a href="http://php.net/manual/en/class.splfileinfo.php"><em>splFileInfo</em></a>? It's native object in PHP - like <code>DateTime</code> - that wraps the file and provides nice object API for it. The Symfony\Finder package adds 3 extra methods that make work with files just a bit smoother. They go very well together since the package creates all the <code>splFileInfo</code> instances for you.</p>
<h2 id="how-to-install">How to Install</h2>
<pre><code class="language-bash">composer require symfony/finder</code></pre>
<h2 id="how-i-use-it">How I Use it</h2>
<p>We'll find all available feature in <a href="https://symfony.com/doc/current/components/finder.html">the documentation</a>, but basic usage it like this:</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

use Symfony\Component\Finder\Finder;

$finder = Finder::create()
    -&gt;files()
    -&gt;in(__DIR__)
    -&gt;name('composer.json')
    -&gt;getIterator();

foreach ($finder as $splFileInfo) {
    var_dump($splFileInfo); // instance of "Symfony\Component\Finder\SplFileInfo"
}</code></pre>
<h2 id="code-symfony-component-finder-finder-code"><code>Symfony\Component\Finder\Finder</code></h2>
<h3 id="code-name-code"><code>name()</code></h3>
<p>This method accepts also regular expressions. Do you want to find all YAML files?</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

use Symfony\Component\Finder\Finder;

$finder = Finder::create();
$finder-&gt;name('#\.(yaml|yml)$#');</code></pre>
<h3 id="code-append-code"><code>append()</code></h3>
<p>Do you want to add just a single file that finder criteria would not find? Normally, you'd have to create <code>SplFileInfo</code> manually, think of relative/absolute paths etc. So much work. Instead, you can just append it and Finder will add it for you.</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

use Symfony\Component\Finder\Finder;

return Finder::create()
    -&gt;name('#\.php$#')
    -&gt;in(__DIR__ . '/Source')
    -&gt;append([__DIR__ . '/Source/SomeClass.twig']);</code></pre>
<h3 id="code-notpath-code-or-code-exclude-code"><code>notPath()</code> or <code>exclude()</code></h3>
<p>It's common and bad practice to put tests files into <code>/src</code>. It's historical reason mostly, but we still have to deal with that.
You don't want to work with 3rd party code tests, right?</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

use Symfony\Component\Finder\Finder;

$finder = Finder::create()
    // directories
    -&gt;exclude('spec')
    -&gt;exclude('test')
    -&gt;exclude('Tests')
    -&gt;exclude('tests')
    -&gt;exclude('Behat')
    -&gt;name('*.php');

// or match path name
$finder-&gt;notPath('#tests#');</code></pre>
<h2 id="code-symfony-component-finder-splfileinfo-code"><code>Symfony\Component\Finder\SplFileInfo</code></h2>
<h3 id="code-getrelativepath-code"><code>getRelativePath()</code></h3>
<p>Let's get back to the <code>composer.json</code> example above (from in <a href="https://github.com/Symplify/MonorepoBuilder/blob/71d81fe279b43b3353d107560198fd5cf52d487c/src/PackageComposerFinder.php#L23-L38">MonorepoBuilder</a>). This is how we get relative <strong>directory</strong>:</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

/** @var \Symfony\Component\Finder\SplFileInfo $splFileInfo */
$splFileInfo-&gt;getRelativePath(); // "/"</code></pre>
<h3 id="code-getrelativepathname-code"><code>getRelativePathname()</code></h3>
<p>This method is bit different - it returns <strong>relative filename</strong>:</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

/** @var \Symfony\Component\Finder\SplFileInfo $splFileInfo */
$splFileInfo-&gt;getRelativePath(); // "composer.json"</code></pre>
<p>This is very handy for output reporting in PHP CLI Apps like ECS, PHP CS Fixer, PHP_CodeSniffer or PHPStan. Compare yourself - the computer absolute scope:</p>
<pre><code class="language-diff">An error was found in /home/im-very-cool-guy/my-website/www/my-home-porn-web/public/index.php</code></pre>
<p>and human relative scope:</p>
<pre><code class="language-diff">An error was found in public/index.php</code></pre>
<h3 id="honorable-mentions">Honorable Mentions</h3>
<p>There are few more methods that I use from time to time:</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

/** @var \Symfony\Component\Finder\SplFileInfo $splFileInfo */
$splFileInfo-&gt;getRealPath();
// absolute path - returns "/var/www/this-post/composer.json"

$splFileInfo-&gt;getContents();
// gets the content of file with error propagated to an exception - very nice!

$splFileInfo-&gt;getBasename('.' . $splFileInfo-&gt;getExtension());
// returns "composer"</code></pre>
<p><br></p>
<p>Do you like it? <strong>Go and give <a href="https://github.com/symfony/finder">Symfony\Finder</a> or at least <a href="http://php.net/manual/en/class.splfileinfo.php"><code>SplFileInfo</code></a> a try</strong>.</p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/08/13/hidden-gems-of-php-packages-symfony-finder-and-spl-file-info</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 13 Aug 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/08/13/hidden-gems-of-php-packages-symfony-finder-and-spl-file-info#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Why is Your Company Losing Money By Not Open Sourcing 2: Code Quality ]]></title>
                <link>https://tomasvotruba.com/blog/2018/08/09/why-is-your-company-losing-money-by-not-open-sourcing-2-code-quality</link>
                <description><![CDATA[ <p>There is more high-quality code in open-source than in closed-source. Open-source code is rarely rewritten from the scratch investing loads of time and effort - <a href="https://blog.codinghorror.com/version-1-sucks-but-ship-it-anyway">apart 1st version because it's designed to be dropped</a>. This case is not so rare in the private sector in long-term projects.
<br><br>
<strong>Rubber ducking. Standard-bias of public behavior. Social learning. Embodied know-how.</strong> Values natural for open-source, yet seen only in high-standard private coding. Why is that? And <strong>how to make your project benefit from these values</strong>?</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="1-cheap-standards-vs-expensive-private-few-person-based-solutions">1. Cheap Standards vs. Expensive Private Few-Person-Based Solutions</h2>
<h3 id="why-even-bother-with-standards">Why Even Bother With Standards?</h3>
<p>Standards are not just a set of rules to bully your individual approach as a programmer or as a team. Spaces and tabs are not here to make teams, although the in-group and out-group effect is strong. Standards are brought up naturally by people, who do so much repetitive work, they want to automate it. <strong>They see a pattern a small majority is using to save time from too little details and invest in values that matter for them instead</strong>. Whether it's sustainable code people will love so much they'll want to grab a beer with you or 1-minute deployment of your application.</p>
<p>That's the reason all these PSR-2, PSR-4 etc. were created. Huge thanks to all guys from FIG - <strong>especially for <a href="https://medium.com/php-fig">monthly summaries on Medium</a></strong>.</p>
<p>Btw, do you know <a href="https://www.php-fig.org/faqs/#what-does-psr-stand-for">what does <em>PSR</em> stand for</a>? <em>PHP Strict Rules...</em>? That's would terrible. It's <strong>PHP Standard Recommendation</strong>. Read it as:</p>
<blockquote class="blockquote text-center">
    "Here is a baseline for a thing you don't want to think about. You can work with it and most people will understand it without you explaining anything. Just like that."
</blockquote>
<p>When I talk about standards, there lays much more value beyond PSRs. That's how we get to <em>the money</em>.</p>
<h3 id="where-is-your-company-losing-money">Where is Your Company Losing Money?</h3>
<p>If your team start a big project, you need to resolve many <em>first-steps</em>:</p>
<ul>
<li>What rules should belong to coding standard?</li>
<li>How to deploy and where?</li>
<li>Should you use MVC or plain PHP?</li>
<li>How to design architecture that will last over 5 years?</li>
<li>How to make sure that after you leave, others will still understand and effectively contribute the code?</li>
<li>etc.</li>
</ul>
<p><strong>You can waste thousands of company money by reinventing everything from scratch. Everything that community already solved for you.</strong></p>
<p>By choosing a framework that is not much adopted or doesn't respect standard, <strong>naturally leads to extra pointless expenses</strong>:</p>
<ul>
<li>To pay somebody to teach them the framework</li>
<li>To pay people to learn the specific non-standard behavior of the framework</li>
<li>To pay for bugs that will be created by not following a framework that has such practices embodied in the code</li>
<li>To pay for the eventual rewriting of your coupled code in next 10 years to a new framework the next team will choose, after the first team will leave you for a better experience - personally, I've seen a code of 8 such projects.</li>
</ul>
<h3 id="frameworks-teach-bad-practises">Frameworks Teach Bad Practises</h3>
<p>I hear you: &quot;but most PHP frameworks teach people bad practice just to vendor lock them&quot;. I <a href="https://matthiasnoback.nl/2014/10/unnecessary-contrapositions-in-the-new-symfony-best-practices">agree</a>. <strong>But it's still easier to learn what works and what doesn't from standard frameworks. Why? The amount of paths to create a website is limited, so is the scope we have to orientate. Compared to plain PHP where you can use zillion ways to create a website.</strong></p>
<p>It's like having parents - they bring you something good and something bad. Yet it's still better to learn from them than from no parents at all.</p>
<h3 id="get-embodied-know-how-for-free">Get Embodied Know-How For Free</h3>
<p>So instead of putting money into lecturers that will teach you rarely used technologies, you can adopt standards that are natural in open-source and to a big part of the PHP community. <strong>That way the know-how is embedded into your code and you don't need a lecturer to explain it.</strong></p>
<p>What does it mean? Imagine Symfony. Just by using this framework, you'll get access to many PSRs that Symfony uses. That allows you to use many PHP packages that support these PRSs. Instead of writing Doctrine yourself from scratch, just use it and save yourself loads of money.</p>
<h2 id="2-how-to-get-all-services-for-your-project-for-0-a-month">2. How to Get All Services for Your Project for 0 $ a Month?</h2>
<p>From Travis, Github, Gitlab, CircleCI, Github Pages, to Slack, Cloudflare and many more - they give you <strong>free services for open-sourced code</strong>. They probably believe most people will start there for free. Then they grow and change to closed-source when the code base is so huge to be kept at high standards. Maybe they need to do some nasty things that people should not know.</p>
<p>Instead, you can go vice-versa. Drop Jenkins, private Github, private Travis and all the other services and <strong>go from 5000 $ of expenses to 0 $ in one week</strong>.</p>
<h3 id="all-about-the-money">All About the Money</h3>
<p>A reminder this is not solely about the money. You can save money for private Github and Travis just by migrating to private Gitlab that you can even host. Many friends and projects of I know work this way. But the benefit I talk about works the best in one wave with all other benefits, like embodied know-how, mentoring from experts and <a href="/blog/2018/07/26/why-is-your-company-losing-money-by-not-open-sourcing-1-hiring/">open-source hiring</a>.</p>
<h2 id="3-how-to-pay-top-php-mentors-0">3. How to Pay Top PHP Mentors 0 $</h2>
<p>Tom Preston-Werner, one of Github founders <a href="https://tom.preston-werner.com/2011/11/22/open-source-everything.html">wrote</a>:</p>
<blockquote class="blockquote">
    "<strong>Smart people like to hang out with other smart people. Smart developers like to hang out with smart code</strong>. When you open source useful code, you attract talent. Every time a talented developer cracks open the code to one of your projects, you win. I've had many great conversations at tech conferences about my open source code. Some of these encounters have led to ideas that directly resulted in better solutions to problems I was having with my projects. In an industry with such a huge range of creativity and productivity between developers, the right eyeballs on your code can make a big difference."
</blockquote>
<p>The best people don't go after money, nor powerful Docker cluster setup, nor extra 5 days of holiday. These might be important elements and their absence won't appreciate, but the best programmers strive for something extra.</p>
<p><strong>The best programmers go for know-how, credit, and impact.</strong></p>
<h3 id="impact-or-5-days-of-extra-holiday">Impact or 5 Days of Extra Holiday?</h3>
<p>Imagine this: you contribute a feature to a private project for selling cars. If you're lucky, 2 more programmers will see your code during the code review, then it gets merged and forgotten until there is a bug with your name in <code>git blame</code> line.</p>
<p>On the other hand, <strong>if you contribute to a Symfony project, around 10-20 people on average will see your code pull-request</strong>. And if it gets merged? <strong>Your code will be downloaded to <a href="https://packagist.org/packages/symfony/http-kernel/stats">110 000+ applications every day</a></strong>.</p>
<p>Of course, it's nonsense to compare your <em>about-to-be-open-sourced</em> project with 13-years old Symfony. Yet 10 downloads a week is a huge success compared to current zero. This number will be only growing if you continue the package development.</p>
<p>I remember EasyCodingStandard had 3 downloads a day (my, my girlfriend and my mum ;)). Now a 1,5 year later it has over <a href="https://packagist.org/packages/symplify/easy-coding-standard/stats">500 installs a day</a>.</p>
<h3 id="give-me-the-mentors">Give Me the Mentors</h3>
<p>So where do the mentors come from? They're people using your package or - and that's more common than you think - <strong>a people who love to spread their gene code into commits of your package by</strong> cleaning it up or adding their package that will help you with the code.</p>
<p>Here are few examples of <em>win-win</em> situation I noticed on Github:</p>
<ul>
<li><a href="https://github.com/nikic/PHP-Parser/pull/408">Tomas Votruba fixing coding style in php-parser</a></li>
<li><a href="https://github.com/php/php-src/pulls?q=is%3Apr+author%3Acarusogabriel+is%3Aclosed+sort%3Aupdated-desc">Gabriel Caruso and his 110 PRs to php-src</a></li>
<li><a href="https://github.com/cakephp/cakephp/pull/9943">Ondrej Mirtes adding PHPStan to CakePHP</a></li>
</ul>
<p><strong>One could say that by open-sourcing a project you'll get the attention of alfa-males programmers.</strong></p>
<p>Such programmers will give you contributions for free. They'll talk with you for free, they'll suggest you or send you features for free and that's definitely less than what your company is paying programmers for the work. Well, not for free, but <strong>for the credit that open-source project's popularity will give them back</strong>. They wouldn't do it if you'd remove their names from commits messages.</p>
<h3 id="be-opened-to-free-fixes">Be Opened to Free Fixes</h3>
<p>By open-sourcing, you also say: &quot;Do we have a bug? Come and fix it, please&quot;. One example for all:</p>
<p>I was using <a href="http://naucmese.cz">Naucmese.cz</a> a lecture from anyone to anyone portal about 5 years ago. I found a bug. 2 bugs. After the 3rd bug, I wrote them &quot;just open-source the project and I'll fix it for free&quot;. I was frustrated by those bugs that <strong>I'd be happy to invest 30 minutes of my free time to fix them and make using the application much nicer experience</strong>. If that project would be open-sourced, they'd get 2-3 hours per week of my work for free in that time. Instead, they hired me but that's another story.</p>
<p>My approach still stands for other projects, just write me about freshly open-sourced code and I'd be happy to be your first contributor on GitHub.</p>
<h2 id="4-the-coding-naked-man">4. The Coding Naked Man</h2>
<p>Do you know <a href="https://blog.codinghorror.com/rubber-duck-problem-solving">rubber ducking</a>? In short: <strong>it's way of working with an invisible second person next to you that increases the quality of code you produce</strong>.</p>
<p>I've experienced this myself in many layers:</p>
<p>When I was working in Brno on freelance and had a small flat just for myself, I spent 1/3 of my work time playing games and watching porn.
I wanted to stop, I wanted to focus, to code, to work, but it was extremely difficult for every single of 3 months I was there alone.
Then I moved to coworking center into open-space and suddenly - it stopped. I began to be 200 % more productive in the first week. How was that possible? Well, obviously I was shy to watch porn and masturbate in the public so I worked that 1/3 of time, but there is more. <strong>Just by having people around me, I wanted to be like them, to work, to bring values. In such a place as coworking hub, it was standard to work and to do meaningful work</strong>. So I adapted for better just by being there.</p>
<p>The same goes for <em>Coding Naked Man</em> principle. When I put my first code open-source (after 2 years of hiding in fear from rejection and being a fraud) on GitHub in 2010, I was super ashamed for the code. It felt like I'm putting my favorite porn on school page where every single schoolmate could see it.</p>
<p>By simply putting the code out I realized that I can do much better with the code. But what's the most important, <strong>I started to see path what exactly can I learn</strong> just by seeing other similar projects.</p>
<h3 id="hide-your-private-shame">Hide Your Private Shame</h3>
<p>You can probably see this principle work even in your company. Have you ever seen an open-source project where maintainers say, that you can use static methods, public properties, and service locators if you know why? I don't say that happens, but it's very rare.</p>
<p>On the other hand, when I code-review private projects on such code smells, I get almost brain-washed answers like:</p>
<ul>
<li>&quot;we had to use it there&quot;,</li>
<li>&quot;we know it's not optimal, but...&quot;,</li>
<li>&quot;we didn't have time&quot;,</li>
<li>&quot;we know we have to keep it only in that place&quot;.</li>
</ul>
<p>But when I ask more, I see they have no deeper idea why. They only know the 1 reason to write bad code even if they really don't have to. <strong>It's like a candy you steal but nobody knows about it</strong>. Nobody else will ever see this code, and if they'll do, you'd be already in that another company.</p>
<p>And it's super difficult to think open while being closed. But by having code open-source, you'll adopt this mindset by natural in just a few months. After years, I can now feel if I'm hacking something the wrong way <a href="/blog/2018/04/26/how-i-got-into-static-trap-and-made-fool-of-myself/">that will hunt me down 2 years later</a> or if the code really can't be better.</p>
<p><br><br></p>
<p>And that's it!</p>
<p>Happy open-sourcing</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/08/09/why-is-your-company-losing-money-by-not-open-sourcing-2-code-quality</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 09 Aug 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/08/09/why-is-your-company-losing-money-by-not-open-sourcing-2-code-quality#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Stylish and Standard Console Output with Symfony Style ]]></title>
                <link>https://tomasvotruba.com/blog/2018/08/06/stylish-and-standard-console-output-with-symfony-style</link>
                <description><![CDATA[ <p>Even if you don't use any component from Symfony or even installed one, you can use this trick in your PHP CLI App.
<br><br>
It's simple, provides standard and makes your output look like a design from Apple - useful and nice at the same time.</p> ]]></description>
                <content:encoded><![CDATA[ <p>We want to <strong>report various states</strong> in PHP CLI Apps. Success message on the finish, errors message in case of failure or just simple note so users know that command is not stuck but working.</p>
<h2 id="too-many-ways-to-do-1-thing">Too Many Ways to Do 1 Thing</h2>
<p>You can use plain PHP like <a href="https://github.com/squizlabs/PHP_CodeSniffer/blob/f893189392f9a0566aa837c4bcad3929c60d5348/src/Runner.php#L199">in PHP_CodeSniffer</a>:</p>
<pre><code class="language-php">&lt;?php

try {
    // code
} catch (Exception $exception) {
    echo $exception-&gt;getMessage();
    return $exception-&gt;getCode();
}</code></pre>
<p>There is also a bit advanced use of native <code>OutputInterface</code> in command like <a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer/blob/1c10240da97479274fd40a136c3857ff94f7f93f/src/Console/Command/FixCommand.php#L236-L239">PHP CS Fixer</a>:</p>
<pre><code class="language-php">&lt;?php

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

final class SomeCommand extends Command
{
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        // ...

        $output-&gt;write('Working on it!');

        // ...
    }
}</code></pre>
<p>The advantage of these approaches is <strong>they cannot be simpler and they're ready to be used</strong>. I bet everyone can use <code>echo 'DONE';</code>:</p>
<img src="/assets/images/posts/2018/console-output/plain.png">
<p>The second approach is not as easy, but if you're in a Symfony Command class using PHPStorm all you have to do is hit <code>Ctrl + Space</code> on an <code>$output</code> variable. And in their time they were good enough.</p>
<p>But we want more than a plain text. <strong>If websites can have CSS, colors, and pictures, why not the CLI output?</strong></p>
<img src="/assets/images/posts/2018/console-output/console.png">
<p>But it's not about colors, <strong>it's about UX</strong>. <em class="text-white bg-success p-2">Green</em> and <em class="text-white bg-danger p-2">red</em> lines instead of white on black spaghetti like on the first image.</p>
<img src="/assets/images/posts/2018/console-output/tracy.png">
<p><br></p>
<p>Last but not least, Symfony <code>$output</code> has <a href="https://symfony.com/doc/current/console/coloring.html#using-color-styles">few predefined styles</a>:</p>
<pre><code class="language-php">&lt;?php

// green text
$output-&gt;writeln('&lt;info&gt;foo&lt;/info&gt;');

// white text on a red background
$output-&gt;writeln('&lt;error&gt;foo&lt;/error&gt;');</code></pre>
<p>And also some colors and <strong><u>cool stuff</u></strong>:</p>
<pre><code class="language-php">// green text
$output-&gt;writeln('&lt;fg=green&gt;foo&lt;/&gt;');

// bold text with underscore
$output-&gt;writeln('&lt;options=bold,underscore&gt;foo&lt;/&gt;');</code></pre>
<p><br></p>
<p>Which one do you like so far? So many colors, so many options... maybe too many.</p>
<h3 id="united-we-stand-divided-we-autumn">United We Stand, Divided We Autumn</h3>
<p>Do you remember when there were <a href="https://github.com/container-interop/container-interop">a dozen ways to create Dependency Injection Container</a>? Fortunately, the <a href="https://www.php-fig.org/psr/psr-11">PSR-11 was born</a> to solve this and moved our focus to things that matter more.</p>
<p>We don't want to play with colors, with <code>fg</code>, <code>underscore</code>, <code>green</code>, <code>cyan</code> (wtf is cyan?) words. Also, you know what they say:</p>
<blockquote class="blockquote text-center">
    Strings?<br>
    Break things.
</blockquote>
<p><strong>We want to print the error and get back to coding</strong>.</p>
<h2 id="symfony-2-8-to-the-rescue">Symfony 2.8 to the Rescue</h2>
<p>I was super happy when the <a href="https://symfony.com/blog/new-in-symfony-2-8-console-style-guide">SymfonyStyle</a> helper class came with Symfony 2.8. Simple wrapper about all mentioned above, <code>success()</code> method, <code>error()</code> method, all in API.</p>
<img src="https://farm1.staticflickr.com/666/23555673406_6cbd4f5460_o.png">
<p>I think it's not an understatement to say that <code>SymfonyStyle</code> is state of art in this matter.</p>
<h3 id="1-it-s-easy-to-integrate-into-symfony-command">1. It's Easy to Integrate into Symfony Command</h3>
<p>PHPStan is <a href="https://github.com/phpstan/phpstan/blob/1e232b3da00671a578b0ba451c5d15c904a82fd5/src/Command/ErrorsConsoleStyle.php#L9">using it</a>:</p>
<pre><code class="language-diff"> &lt;?php

 use Symfony\Component\Console\Command\Command;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
+use Symfony\Component\Console\Style\SymfonyStyle;

 final class SomeCommand extends Command
 {
     protected function execute(InputInterface $input, OutputInterface $output)
     {
         $output-&gt;write('Working on it!');
+         $symfonyStyle = new SymfonyStyle($input, $output);
+         $symfonyStyle-&gt;note('Working on it!');
+         $symfonyStyle-&gt;success('DONE!');
    }
}</code></pre>
<h3 id="2-don-t-make-user-think">2. Don't make User Think</h3>
<p>When I was 13 years old I've accidentally read <a href="https://www.sensible.com/dmmt.html"><em>Don’t Make Me Think</em></a>, amazing book about UX, programming and psychology for dummies (I'm about to read 2014-revised version). The main point of the book was the Apple, the UX, and the DX mantra - <strong>create a design that users already expect, don't teach them doing common things differently</strong>.</p>
<p>I recall many CLI Apps that each has different output - no colors, different font-size, cool underlines, error message is not red but success is green etc. <strong>User have to focus on the design and understand it instead of enjoying your app</strong>. WTF of non-red exception is just great!</p>
<p>This class offers a common way not to make use think. ECS users it, Statie uses it, PHPStan uses it, Rector uses and <a href="https://github.com/lmc-eu/steward/blob/66b90dc1b7325f680481e104ae19f7e6d77e7133/src/Console/Command/Command.php#L52">Steward</a> use it.</p>
<h3 id="3-symfonystyle-as-a-service">3. SymfonyStyle as a Service</h3>
<p>You can create <code>SymfonyStyle</code> in simple static construction as in point 1, but what if you need it somewhere else than in a command? Imagine you have 1200 long Command (~= Controller) and you want to extract logic to another class?</p>
<p>Do you have to pass the whole command there or move the <code>SymfonyStyle</code> manually?</p>
<p>Save <a href="/blog/2018/04/26/how-i-got-into-static-trap-and-made-fool-of-myself/">the vendor-locking statics</a> for value objects and enjoy the constructor injection. There are more lines than one because we need to register <code>Input</code> and <code>Output</code> as a service and autowire their interfaces.</p>
<pre><code class="language-yaml">services:
    # SymfonyStyle
    Symfony\Component\Console\Input\ArgvInput: ~
    Symfony\Component\Console\Input\InputInterface:
        alias: 'Symfony\Component\Console\Input\ArgvInput'
    Symfony\Component\Console\Output\ConsoleOutput: ~
    Symfony\Component\Console\Output\OutputInterface:
        alias: 'Symfony\Component\Console\Output\ConsoleOutput'
    Symfony\Component\Console\Style\SymfonyStyle: ~</code></pre>
<pre><code class="language-diff"> &lt;?php

 use Symfony\Component\Console\Command\Command;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
 use Symfony\Component\Console\Style\SymfonyStyle;

 final class SomeCommand extends Command
 {
+    /**
+     * @var SymfonyStyle
+     */
+    private $symfonyStyle;
+
+    public function __construct(SymfonyStyle $symfonyStyle)
+    {
+        $this-&gt;symfonyStyle = $symfonyStyle;
+    }
+
     protected function execute(InputInterface $input, OutputInterface $output)
     {
-         $symfonyStyle = new SymfonyStyle($input, $output);
-         $symfonyStyle-&gt;note('Working on it!');
+         $this-&gt;symfonyStyle-&gt;note('Working on it!');
-         $symfonyStyle-&gt;success('DONE!');
+         $this-&gt;symfonyStyle-&gt;success('DONE!');
    }
}</code></pre>
<h3 id="4-show-your-style">4. Show Your Style</h3>
<p>Last little detail that makes the whole experience nice and smooth. EasyCodingStandard uses SymfonyStyle, but it needed to add 1 extra method.</p>
<ul>
<li>There could be 2 services but that extra burden for the contributors... but <strong>we don't make the user think</strong>.</li>
<li>Then I tried composition, so I had to replicate many public methods. It shoots me back with too much maintenance and duplicated code.</li>
<li>After seeing these options, I've happily settled with extension:</li>
</ul>
<pre><code class="language-php">final class OurStyle extends SymfonyStyle
{
    public function pink(string $message)
    {
        // ...
    }
}</code></pre>
<p><em>One real example for all, check <a href="https://github.com/lmc-eu/steward/blob/724f72da6ae732065142f10b4100ea65b7282406/src/Console/Style/StewardStyle.php"><code>StewardStyle</code> class on Github</a>.</em></p>
<p><br><br></p>
<p>And that's it!</p>
<p>Try the simple approach today and you'll see you won't regret it:</p>
<pre><code class="language-php">&lt;?php

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;

final class SomeCommand extends Command
{
     protected function execute(InputInterface $input, OutputInterface $output)
     {
         $symfonyStyle = new SymfonyStyle($input, $output);
         $symfonyStyle-&gt;note('Working on it!');
         $symfonyStyle-&gt;success('DONE!');
    }
}</code></pre>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/08/06/stylish-and-standard-console-output-with-symfony-style</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 06 Aug 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/08/06/stylish-and-standard-console-output-with-symfony-style#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ 5 Gotchas of the Bin File in PHP CLI Applications ]]></title>
                <link>https://tomasvotruba.com/blog/2018/08/02/5-gotchas-of-the-bin-file-in-php-cli-applications</link>
                <description><![CDATA[ <p>This post from <a href="/clusters/#master-php-cli-apps-with-symfony/">Master PHP CLI Apps with Symfony</a> cluster will focus on bin files. It's the smallest part of PHP CLI Application, so I usually start with it.
<br><br>
Yet, there are still a few blind paths you can struggle with. I'll drop a few extra tricks to make your bin file clean and easy to maintain.</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="what-is-the-bin-file">What is the Bin File?</h2>
<p>The bin file is not a trash bin. It's a binary file, the entry point to your application the same way <code>www/index.php</code> is. You probably already use them:</p>
<ul>
<li><a href="https://github.com/symplify/symplify/blob/master/packages/EasyCodingStandard/bin/ecs">vendor/bin/ecs</a></li>
<li><a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer/blob/master/php-cs-fixer">vendor/bin/php-cs-fixer</a></li>
<li><a href="https://github.com/squizlabs/PHP_CodeSniffer/blob/master/bin/phpcs">vendor/bin/phpcs</a></li>
<li><a href="https://github.com/phpstan/phpstan/blob/master/bin/phpstan">vendor/bin/phpstan</a></li>
</ul>
<h2 id="1-create-it">1. Create it</h2>
<h3 id="the-name">The Name</h3>
<p>The bin file should be <strong>named after the application</strong>, <strong>short</strong> and <strong>easy to type</strong>.
So when I first released EasyCodingStandard, I used <code>easy-coding-standard</code> name. It was easy to remember, but when I had a talk I often miss-typed such a long name. After a while, I moved to <code>ecs</code>.</p>
<p>It should be also <strong>easy to remember</strong> and <strong>unique</strong>.
Imagine that <code>php-cs-fixer</code> would be <code>phpcf</code> or <code>phpcf</code>. Since there is already <code>phpcs</code> taken, it might be trouble to remember. I think that's why the name is a little bit longer.</p>
<h3 id="the-location">The Location</h3>
<p>Where to put the file? Few people in the past put it in the root directory (only <code>php-cs-fixer</code> from 4 projects above have it that way). But <strong>the trend is to use <code>bin</code> directory</strong>. The same way <code>index.php</code> was moved to <code>www/index.php</code> or <code>public/index.php</code>.</p>
<pre><code class="language-bash">bin/your-bin-file</code></pre>
<h2 id="2-composer-autoload">2. Composer Autoload</h2>
<p>With structure like this:</p>
<pre><code class="language-bash">/bin/your-bind-file
/src
/vendor/autoload.php</code></pre>
<p>The obvious code to add to <code>/bin/your-bind-file</code> is:</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

require_once  __DIR__ . '/../vendor/autoload.php';</code></pre>
<p>And that's it!</p>
<p><br></p>
<p>Not that fast. It might work for your <code>www/index.php</code> file in your application, but is <strong>that application ever installed as a dependency</strong>?</p>
<p>How do we cover autoload for a dependency? Imagine somebody would install <code>your-vendor/your-package</code> on his application. The file structure would look like this:</p>
<pre><code class="language-bash">/src/
/vendor/autoload.php
/vendor/your-vendor/your-package/bin/your-bin-file</code></pre>
<p>Now we need to get to <code>/vendor/autoload.php</code> of that application:</p>
<pre><code class="language-diff"> &lt;?php declare(strict_types=1);

-require_once  __DIR__ . '/../vendor/autoload.php';
+require_once  __DIR__ . '/../../../../vendor/autoload.php',</code></pre>
<p>Great, people can use our package now. But it stopped working for our local repository. We'll probably have to seek for both of them:</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

$possibleAutoloadPaths = [
    // local dev repository
    __DIR__ . '/../vendor/autoload.php',
    // dependency
    __DIR__ . '/../../../../vendor/autoload.php',
];

foreach ($possibleAutoloadPaths as $possibleAutoloadPath) {
    if (file_exists($possibleAutoloadPath)) {
        require_once $possibleAutoloadPath;
        break;
    }
}</code></pre>
<p><strong>Comments are very important</strong> because this is very easy to get lost in. Trust me, I managed to fail a dozen times. Also, other people will appreciate it because it's WTF to see loading more than one <code>vendor/autoload.php</code>.</p>
<p>Imagine you'd move your package to a <a href="/clusters/#monorepo-from-zero-to-hero/">monorepo structure</a>:</p>
<pre><code class="language-diff"> $possibleAutoloadPaths = [
-    // local dev repository
+    // after split repository
     __DIR__ . '/../vendor/autoload.php',
     // dependency
     __DIR__ . '/../../../../vendor/autoload.php',
+    // monorepo
+    __DIR__ . '/../../../vendor/autoload.php',
 ];</code></pre>
<h3 id="exceptionally-well-done">Exceptionally Well Done</h3>
<pre><code class="language-diff"> &lt;?php declare(strict_types=1);

 $possibleAutoloadPaths = [
     // local dev repository
     __DIR__ . '/../vendor/autoload.php',
     // dependency
     __DIR__ . '/../../../../vendor/autoload.php',
 ];

+$isAutoloadFound = false;
 foreach ($possibleAutoloadPaths as $possibleAutoloadPath) {
     if (file_exists($possibleAutoloadPath)) {
         require_once $possibleAutoloadPath;
+        $isAutoloadFound = true;
         break;
     }
 }
+
+if ($isAutoloadFound === false) {
+    throw new RuntimeException(sprintf(
+        'Unable to find "vendor/autoload.php" in "%s" paths.',
+        implode('", "', $possibleAutoloadPaths)
+    ));
+}</code></pre>
<h2 id="3-she-bangs">3. She Bangs</h2>
<p>Since the bin file doesn't have a <code>.php</code> suffix by convention a system doesn't know, what language it's in. What happens when we run the bin file?</p>
<pre><code class="language-bash">bin/your-bin-file</code></pre>
<p>↓</p>
<pre><code class="language-bash">vendor/bin/your-bin-file: 1: vendor/bin/your-bin-file: Syntax error: "(" unexpected</code></pre>
<p>Well, we know it's in PHP so run it with PHP:</p>
<pre><code class="language-bash">php bin/your-bin-file</code></pre>
<p>All works! But do we ever run this?</p>
<pre><code class="language-php">php composer</code></pre>
<p>No, because <strong>we're lazy and we want to type as less as possible</strong>. How do we achieve the same effect for our file?</p>
<p>We add a <a href="https://www.youtube.com/watch?v=5ihtX86JzmA"><em>shebang</em></a> - a special line that will tell the system what interpret should be used:</p>
<pre><code class="language-php">#!/usr/bin/env php
&lt;?php declare(strict_types=1);

// ...</code></pre>
<p>It can be translated to:</p>
<pre><code class="language-bash">/usr/bin/env php bin/your-bin-file</code></pre>
<p>Try it. Does it work?</p>
<h2 id="4-free-access-rights">4. Free Access Rights</h2>
<p>This allows to run the bin file on other people's computer:</p>
<pre><code class="language-php">chmod +x bin/your-bin-file</code></pre>
<h2 id="5-the-composer-symlink">5. The Composer Symlink</h2>
<p>If we install your package, we'll find the bin file here:</p>
<pre><code class="language-bash">/vendor/your-vendor/your-package/bin/your-bin-file</code></pre>
<p>But not in:</p>
<pre><code class="language-bash">/vendor/bin/your-bin-file</code></pre>
<p>Too bad. We're super lazy, so we want it there. How can we make it happen?</p>
<p>The Composer has <a href="https://getcomposer.org/doc/articles/vendor-binaries.md#how-is-it-defined-">special <em>bin</em> section</a>, where we can <strong>define the symlink path for your bin file</strong>. Just add this to <code>composer.json</code> of your package:</p>
<pre><code class="language-json">{
    "bin": "bin/your-bin-file"
}</code></pre>
<p>Tada! After we install such a package, we'll find it in the right place.</p>
<pre><code class="language-bash">/vendor/bin/your-bin-file</code></pre>
<h2 id="final-version">Final Version</h2>
<pre><code class="language-php">#!/usr/bin/env php
&lt;?php declare(strict_types=1);

$possibleAutoloadPaths = [
     // local dev repository
     __DIR__ . '/../vendor/autoload.php',
     // dependency
     __DIR__ . '/../../../autoload.php',
];

foreach ($possibleAutoloadPaths as $possibleAutoloadPath) {
    if (file_exists($possibleAutoloadPath)) {
        require_once $possibleAutoloadPath;
        break;
    }
}

// your PHP code to run

$container = (new ContainerFactory)-&gt;create();
$application = $container-&gt;get(Application::class);
exit($application-&gt;run());</code></pre>
<p>And that's it!</p>
<p>Do you want to know more? See the <a href="/clusters/#master-php-cli-apps-with-symfony/">PHP CLI APP cluster</a>.</p>
<p><br></p>
<p>Happy and stress-free coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/08/02/5-gotchas-of-the-bin-file-in-php-cli-applications</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 02 Aug 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/08/02/5-gotchas-of-the-bin-file-in-php-cli-applications#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Hidden Gems of PHP Packages: Nette\Utils ]]></title>
                <link>https://tomasvotruba.com/blog/2018/07/30/hidden-gems-of-php-packages-nette-utils</link>
                <description><![CDATA[ <p>In this series, I will show you <strong>not-so-known PHP packages, that I happily use in my daily workflow</strong>. They're hard to describe in few words for their various features, but awesome and simple to use.
<br><br>
Today we start with <a href="https://github.com/nette/utils">Nette\Utils</a> package.</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="why-i-use-it">Why I Use it</h2>
<ol>
<li>
<p>Do you know how is called the PHP function that checks the presence of a string in another string?</p>
</li>
<li>
<p>Do you know what is the difference between those 3 calls?</p>
</li>
</ol>
<pre><code class="language-php">$contains = strpos('content', $lookFor) === 0;</code></pre>
<pre><code class="language-php">$contains = strpos('content', $lookFor) == 0;</code></pre>
<pre><code class="language-php">$contains = strpos('content', $lookFor) === false;</code></pre>
<p><strong>If you can tell the difference under 1 s</strong>, good job!</p>
<p><br></p>
<p>I can't. I have to think hard to remember what was that danger WTF of <a href="http://php.net/manual/en/function.strpos.php#refsect1-function.strpos-returnvalues"><code>strpos()</code> function</a>...</p>
<img src="/assets/images/posts/2018/nette-utils/warning.png" class="img-thumbnail">
<p>...that makes this code run into condition, even though you don't want to:</p>
<pre><code class="language-php">$contains = strpos('content', $lookFor);
if ($contains) {
   // ... should I be here?
}</code></pre>
<ol start="3">
<li>Do you prefer exceptions over <code>false</code>? Do you prefer exceptions over learning various errors codes in PHP native functions like <code>file_get_contents()</code> or <code>preg_replace</code>?</li>
</ol>
<img src="/assets/images/posts/2018/nette-utils/preg_replace.png" class="img-thumbnail">
<ol start="4">
<li>
<p>Do you prefer thinking less about PHP language details and doing more effective work while being safe?</p>
</li>
<li>
<p>Do you prefer PHPStan not reporting forgotten validation of <code>bool|string</code> return type?</p>
</li>
</ol>
<pre><code class="language-php">if (file_exists($filePath)) {
    // can return `false|string`
    $fileContent = file_get_contents($filePath);
}</code></pre>
<p><strong>Thanks to Nette\Utils I can be lazy, safe and much faster</strong> in all these cases above and more.</p>
<h2 id="how-to-install">How to Install</h2>
<pre><code class="language-bash">composer require nette/utils</code></pre>
<h2 id="how-i-use-it">How I Use it</h2>
<p>We can look at <a href="https://doc.nette.org/en/2.4/utils">the Nette\Utils documentation</a> to find 12 classes with many methods and study their API... and leave the page overwhelmed by details and over-bored.</p>
<p>Instead, <strong>we can look at real-life examples in Symplify code</strong>. That's much more interesting and relevant, right? When we use Github search, we see that Symplify packages use Nette\Utils package at <a href="https://github.com/search?l=&amp;q=Nette%5CUtils+repo%3Asymplify%2Fsymplify+extension%3Aphp&amp;type=Code">100+ places</a>. What are these cases?</p>
<h2 id="code-strings-code-class"><code>Strings</code> class</h2>
<h3 id="code-replace-code"><code>replace()</code></h3>
<p>It accepts content, pattern to look for and replacement. This is basic building stone for packages like <a href="/blog/2018/07/05/how-to-convert-latte-templates-to-twig-in-27-regular-expressions/">LatteToTwigConverter</a>:</p>
<pre><code class="language-php">// in Latte: {var $var = $anotherVar}
// in Twig: {% set var = anotherVar %}
$content = Nette\Utils\Strings::replace($content, '#{var \$?(.*?) = \$?(.*?)}#s', '{% set $1 = $2 %}');</code></pre>
<p>It's nice that you don't have to deal with PHP native edge-cases of regular expressions. I think regulars are difficult enough to work with, so this piece comes very handy.</p>
<h3 id="code-contains-code"><code>contains()</code></h3>
<p>It accepts the content and the string we look for:</p>
<pre><code class="language-php">if (Nette\Utils\Strings::contains($key, '.')) {
    // is a code
    $this-&gt;skippedCodes[$key] = $settings;
} else {
    // is a class
    $this-&gt;skipped[$key] = $settings;
}</code></pre>
<h3 id="code-startswith-code"><code>startsWith()</code></h3>
<p>How to detect a nullable type?</p>
<pre><code class="language-php"># &lt; 1 s of thinking
return Nette\Utils\Strings::startsWith($type, '?');</code></pre>
<pre><code class="language-php"># &gt; 1 s of thinking
return strpos('Content', $lookingFor) === ?;
# or was it this one?
return strpos('Content', $lookingFor) === strlen($lookingFor);</code></pre>
<h3 id="code-endswith-code"><code>endsWith()</code></h3>
<pre><code class="language-php">if (Strings::endsWith($class, 'Interface')) {
    // is interface
}</code></pre>
<h2 id="code-filesystem-code-class"><code>FileSystem</code> class</h2>
<h3 id="code-read-code"><code>read()</code></h3>
<p>If we know the file will be there (e.g. it's convention or we just put it there), we can use <code>file_get_contents()</code>.</p>
<pre><code class="language-php">$content = file_get_contents($accidentallyMissingFile);
// $content is `FALSE`</code></pre>
<p>But we find out 35 lines later in this method:</p>
<pre><code class="language-php">private function processContent(string $content)
{
    // ...
}</code></pre>
<p>But all we see is <em>$content should be string, bool passed</em> error. Just great, isn't it?</p>
<p>Of course, you can put <code>file_exists()</code> and <code>is_file()</code> validation everywhere and teach every programmer in your team to use them and also create a sniff, that will enforce this behavior in CI level (which nobody really does) and spend hundreds of hours on regression bugs or...</p>
<p>...you could use helper method and make yourself useful instead:</p>
<pre><code class="language-php">Nette\Utils\FileSystem::read($accidentallyMissingFile);</code></pre>
<p><em class="fas fa-fw fa-check text-success fa-lg"></em> Kaboom! An Exception!</p>
<h3 id="code-createdir-code"><code>createDir()</code></h3>
<p>Do you want to create a directory for your cache?</p>
<pre><code class="language-php">mkdir($cacheDiretory);</code></pre>
<p>Oh, but what if that already exists?</p>
<p><em class="fas fa-fw fa-times text-danger fa-lg"></em> <strong>Already exists error!</strong></p>
<p>Ok, let's say you're lucky, your hard drive was wiped out and it doesn't exist yet.</p>
<pre><code class="language-php">mkdir($cacheDiretory);</code></pre>
<p>But what if the directory is <code>some/cache</code>?</p>
<p><em class="fas fa-fw fa-times text-danger fa-lg"></em> <strong>Nested directory error!</strong></p>
<p>Ok, but what if we don't care about these because <strong>all we need is to create a directory</strong>?</p>
<pre><code class="language-php">Nette\Utils\FileSystem::createDir($cacheDirectory);</code></pre>
<p><em class="fas fa-fw fa-check text-success fa-lg"></em></p>
<h3 id="code-delete-code"><code>delete()</code></h3>
<p>We want to delete temporary data in tests or a gallery of pictures. All we have is a <code>$source</code> variable.</p>
<p>I admit I often have to Google the name of this function because it's super counter-intuitive to first that pops to my mind - <code>delete(file|directory)</code>.</p>
<p>So let's try:</p>
<pre><code class="language-php">unlink($source);</code></pre>
<p><em class="fas fa-fw fa-times text-danger fa-lg"></em> <strong>It's a directory error.</strong></p>
<p>Ah, let's try this then:</p>
<pre><code class="language-php">rmdir($source);</code></pre>
<p><em class="fas fa-fw fa-times text-danger fa-lg"></em> <strong>The directory is not empty error.</strong></p>
<p>Doh, I already imagine some <code>glob()</code> of <code>Finder</code> madness.</p>
<p>Or maybe <strong>we just want to delete it</strong>:</p>
<pre><code class="language-php">Nette\Utils\FileSystem::delete($source);</code></pre>
<p><em class="fas fa-fw fa-check text-success fa-lg"></em></p>
<p><br></p>
<p>Do you like it? <strong>Go and give <a href="https://github.com/nette/utils">Nette\Utils</a> a try</strong>. It's the only package I allow to use static methods and that's a lot, since <a href="/blog/2018/04/26/how-i-got-into-static-trap-and-made-fool-of-myself/">I'm very strict to them</a>.</p>
<blockquote class="blockquote text-center mt-5 mb-5">
    Do you want to play with details someone else already solved for you<br>
    or<br><strong>build your awesome application instead</strong>?
</blockquote>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/07/30/hidden-gems-of-php-packages-nette-utils</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 30 Jul 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/07/30/hidden-gems-of-php-packages-nette-utils#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Why is Your Company Losing Money by not Open Sourcing: 1. Hiring ]]></title>
                <link>https://tomasvotruba.com/blog/2018/07/26/why-is-your-company-losing-money-by-not-open-sourcing-1-hiring</link>
                <description><![CDATA[ <p>Do you want to hire developers? Do you want to hire those developers who help your company in the long term? Do you want to save money for random picks of <em>HR</em> agencies? Do you want to hire developers who already know your code before even meeting you?
<strong>Do you want to attract developers in the long term with zero investment?</strong>
<br>
<br>
Go Open-source!
<br>
<br>
Did you miss my talk on <a href="https://phpprague.cz">PHPPrague 2018</a> Conference about this topic? Read this post.</p> ]]></description>
                <content:encoded><![CDATA[ <p>As a PHP meetup organizer in the Czech Republic, I'm in contact with many companies and HR agencies that try to hire PHP developers. I used <em>try</em> because the most of them use old-school methods, <a href="/blog/2017/11/20/how-to-write-interesting-job-offers-for-programmers/">boring job offers</a>, employees benefits like meal vouchers, possibility to work from home for only 1 day a week. They often end-up in giving up or using body shopping of random programmers for huge amounts of money.</p>
<blockquote class="twitter-tweet text-center" data-lang="cs"><p lang="cs" dir="ltr">On <a href="https://twitter.com/PhpPrague?ref_src=twsrc%5Etfw">@PhpPrague</a> <a href="https://twitter.com/VotrubaT?ref_src=twsrc%5Etfw">@VotrubaT</a> about How to use Open Source to Hire. <a href="https://twitter.com/hashtag/OpenSource?src=hash&amp;ref_src=twsrc%5Etfw">#OpenSource</a> <a href="https://twitter.com/hashtag/Hiring?src=hash&amp;ref_src=twsrc%5Etfw">#Hiring</a> <a href="https://t.co/X7rUBv5zso">pic.twitter.com/X7rUBv5zso</a></p>— Veronika Hlavacova (@Sput_Nika) <a href="https://twitter.com/Sput_Nika/status/1010547562783354880?ref_src=twsrc%5Etfw">23. června 2018</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>Honor exceptions like <a href="https://twitter.com/sput_nika">Veronika Hlaváčová</a>, who goes to meetups with disruptive ideas and is doing great job in teaching this the HR world.</p>
<h3 id="open-source-everything">Open-Source Everything</h3>
<p>And you don't have to take my word for it. Do you know Github? It was founded in 2008 by 3 guys. One of them Tom Preston-Werner who wrote a post about investors vs. values in <em><a href="https://tom.preston-werner.com/2010/10/18/optimize-for-happiness.html">Optimize for Happiness</a></em> and <strong>also <em><a href="https://tom.preston-werner.com/2011/11/22/open-source-everything.html">Open Source (Almost) Everything</a></em></strong>. If you
have only 5 minutes to read a post today, go read one of them instead. It's well of pure wisdom.</p>
<p>I found this post 2 weeks after my talk and I must say, I was surprised how many ideas I share with him. 7 years prior to my talk! Tom shares great insight on how to run a huge company while keeping human values in the center.</p>
<h2 id="how-to-attract-programmers-in-2018-way">How to Attract Programmers in 2018 Way?</h2>
<p>In this part we'll focus on the point where the companies I meet suffer the most - <strong>a hiring process</strong>. I think this is a big problem because they're not willing to accept it, which hurts both the company and developers.</p>
<p><br></p>
<p>Your company is growing and you get more project offers than your team can handle. <strong>You'd be actually losing profit if you had smaller team</strong>. Let's start hiring with HR!</p>
<p>And by HR mean I mean a <strong>person who can handle relationships a slightly better than the job they're hiring for</strong>.</p>
<h2 id="a-the-story-of-traditional-hiring">A. The Story of Traditional Hiring</h2>
<p>You're skilled HR, so you prepare a job offer with a story about your company, list of benefits, that you're using PHP 7.1 and Symfony 4. <strong>You'd pay 2 most popular job advertisement websites to spread the job offer</strong>. If you're lucky and your programmers are proud of working at your company, they will share it on their Twitter accounts.</p>
<p>You'll collect over 50 replies from developers in 2 weeks period and you invite them to a job interview. You might ask them to make an entrance task (which will tell you nothing) that will be evaluated by one of your senior programmers and <strong>cost his time</strong>.</p>
<p>You'll pick top 20 people on the job interview and ask the senior programmer to join you. 30 minutes per each, you and the senior programmer → <strong>another cost for 10 hours of 2 people</strong>.</p>
<p>After some evaluation, you'll pick 2 developers to join your team on full-time. <strong>After only 30 minutes of spending time with them</strong>, where was probably no coding. And if there was some live coding on the interview - it really was waste of time, because programmer who can't work on their machine and they have to work in front of 2 people intensively watching them, <strong>they're not really in the best position to show their real skills</strong>.</p>
<blockquote class="blockquote text-center">
    Imagine you'd meet 20 girls for 30 minutes each<br>
    and then you'd decide to live with one of them the next week.
</blockquote>
<p>These 2 developers come to the work for their first week and they try to integrate to the team. Senior programmers found out they know much less then they told during the interview and have to teach them few skills <strong>in his paid working time</strong>. That way, the project is suffering.</p>
<p>In the end, you decide to pick 1 programmer because you have only 1 senior who can teach them and they have a very different skill set.</p>
<h3 id="evaluate">Evaluate!</h3>
<ul>
<li>Estimated HR hours: <strong>20</strong></li>
<li>Estimated senior programmer hours: <strong>60</strong></li>
<li>Estimated total costs: <strong>10000 $</strong></li>
<li>The person hired: <strong>1</strong></li>
<li>How much of this work can be automated next time: <strong>~10 %</strong> (the job offer is already written)</li>
</ul>
<h2 id="b-the-story-of-open-hiring">B. The Story of Open Hiring</h2>
<p>You're a senior developer in your company and you have few open-sourced packages on Github. It's <a href="https://github.com/lmc-eu/steward">Selenium wrapper</a> or set of the <a href="https://github.com/lmc-eu/steward">coding standard</a>. You're looking for a very specific developer. The one that understands the code you write finds it interesting and clean but also looks for a code where he or she can learn new skills. <strong>So you won't post a general job offer anywhere</strong>, because you know that would only attract people looking for any PHP job.</p>
<div class="text-center">
    <img src="/assets/images/posts/2018/open-source-money/match.jpg"></div>
<p>What you're looking for <strong>a double match</strong> right from the beginning. A programmer wants you and you want a programmer.
So instead of posting a job offer and paying agencies which knows nothing about your company culture nor your code level, you'll get straight to the source of people who already know you.</p>
<p>You go to your package on Github and open page with all the contributors. You know you need people that are active now, not years ago, so you limit only to last year or so.</p>
<div class="text-center">
    <img src="/assets/images/posts/2018/open-source-money/contributors.gif" class="img-thumbnail"></div>
<p><strong>You know these people are your focus group, because they know your code, you know them, they know how to contribute</strong>, they know git (obviously but not standard), your team accepted their solution to your code, so they will be much better colleagues than just anyone who knows PHP 7 and Symfony 4 and if they contributed twice and more, you know they're into you.</p>
<p>Then, your HR and you will prepare a short email to <strong>express your gratitude for their contributions, to praise their skills and to ask them if they're looking for a job</strong>. You'll send such post to 10 most active contributors you find.</p>
<p>4 of them will reply with interest and you'll invite them to the interview, with you and your HR. Thanks to the low number of contestants, you can spend 1 hour with them and invite them for a lunch to get to know them as a person. Because that who you'll be working with - a whole person - and you want to be sure you'll match each other.</p>
<div class="text-center">
    <img src="/assets/images/posts/2017/job-offers/attitude.jpg" class="img-thumbnail"></div>
<p><strong>You don't need to see any code, because you already know their level from merged pull-requests</strong>. Neither do they, because they can imagine your company code level from open-sourced packages. But you know your public and private code differs, so you'll show them part of private code anyway, just to be sure they're ok with it.</p>
<p>After these 4 hours, you'll mutually 2 developers that you'll hire for a full-time. <strong>You know their level well at that moment</strong>, no surprises here.</p>
<p>In the end, you decide to pick 1 programmer because neither this process is ideal.</p>
<h3 id="evaluate">Evaluate!</h3>
<ul>
<li>Estimated HR hours: <strong>4</strong></li>
<li>Estimated senior programmer hours: <strong>6</strong></li>
<li>Estimated total costs: <strong>2000 $</strong></li>
<li>The person hired: <strong>1</strong></li>
<li>How much of this work can be automated next time: <strong>~80 %</strong></li>
</ul>
<p><br></p>
<p>So, how much money is your company losing by not open-sourcing?</p>
<h2 id="slowly-but-surely">Slowly, but Surely</h2>
<p>The B. process is not ideal if you're doing the first time, because there are a lot of new things to learn. But I think your HR can handle it and get there on the 3rd round.</p>
<p><br></p>
<p><strong>Have you tried something similar to <em>open hiring</em>?</strong> And what are your proven practice to get the best colleagues? Let me know in the comments.</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/07/26/why-is-your-company-losing-money-by-not-open-sourcing-1-hiring</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 26 Jul 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/07/26/why-is-your-company-losing-money-by-not-open-sourcing-1-hiring#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ 5 Signs You Should Never Have a Talk Abroad ]]></title>
                <link>https://tomasvotruba.com/blog/2018/07/23/5-signs-should-never-have-a-talk-abroad</link>
                <description><![CDATA[ <p>I find PHP meetups abroad more and more valuable to my programming life. They're the best place to diverse my skills and knowledge without eating dump and self-proclaiming Twitter feeds.
<br>
<br>
Wait, don't rush to your train ticket so fast to enjoy the presence of great developers, interesting topic, surprisingly open-minded people and tasty beer afterward.
<br>
<br>
I'm about to tell you why you should not do it.</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="1-you-re-not-famous-enough-to-be-accepted">1. You're not Famous Enough to be Accepted</h2>
<p><em class="fas fa-fw fa-times text-danger fa-2x"></em></p>
<p>I'm sorry, but you were not born lucky enough to be Linus Torvalds, Rasmus Lerdorf, Fabien Potencier or Marco Pivetta. You'd have to work hard on yourself, have at least 1000 followers, 3 popular open-source packages and own website with real PHP blog posts.</p>
<p>From my experience, if you response to Call for Papers to one of <a href="http://php.net/conferences/index.php">the PHP conferences</a> there are free 10 times fewer talk slots than talk suggestions.</p>
<div class="text-center mb-4">
    <img src="/assets/images/posts/2018/friends/ou.png" class="img-thumbnail"><br><img src="/assets/images/posts/2018/friends/ou2.png" class="img-thumbnail"><br><em>Selection of my rejections</em>
</div>
<p>Only a madman would not give up this, right?</p>
<p><em class="fas fa-fw fa-check text-success fa-2x"></em></p>
<p>How wrong was I thinking this? Meetups and conferences are a completely different field. Meetups are held almost every month and I can tell you, every organizer is super happy for an active speaker who writes him with a talk proposal. And an active speaker from abroad? <strong>Shut-up up and take my money!</strong></p>
<p>What do you need to do? Go to a meetup.com event detail, ask in comments to have a talk with this title, 2-3 sentences what it's about and length in minutes. It usually didn't take longer than 2 days before I got <em>you're accepted</em> email.</p>
<p>Some groups make this experience even more exceptional, like:</p>
<div class="text-center">
    <img src="/assets/images/posts/2018/friends/berlin.png" class="img-thumbnail"><br><em><a href="http://www.bephpug.de/">Berlin PHP User Group</a> is fully open-sourced on Github, so all you need to do send PR</em>

    <br><img src="/assets/images/posts/2018/friends/vienna.png" class="img-thumbnail"><br><em><a href="https://www.meetup.com/viennaphp/">Vienna PHP</a> provides simple form, also on homepage → click &amp; send it
</em></div>
<h2 id="2-you-re-too-shy-to-talk">2. You're too Shy to Talk</h2>
<p><em class="fas fa-fw fa-times text-danger fa-2x"></em></p>
<p>People living abroad are much more skilled, have high standards and are very critique. Just imagine you'd confuse <code>sort</code> with <code>asort</code> - you're dead.</p>
<p><em class="fas fa-fw fa-check text-success fa-2x"></em></p>
<p>I'm not sure if that's <em>the Czech Republic</em> or <em>home-country</em> effect, but I find programmers in other countries more curious, with questions, own ideas, and own experiments. Instead of saying how your idea is bad or why they propose situations when it could go wrong and want to hear arguments from you. Also, they're not so focused on nitpicking, but rather they try to understand the main idea of your talk.</p>
<p>And as for mistakes? I think going abroad is the best to battle-test anything. When people go on holidays, they're naturally more open to people, because they know they'll never see them again (unless you go 10 years to the same destination over and over again).</p>
<p>Are you shy? Don't have a talk in your hometown where everyone knows you, but go somewhere new where nobody knows you.</p>
<h2 id="3-you-re-not-very-good-at-english-tongue">3. You're not very Good at English Tongue</h2>
<p><em class="fas fa-fw fa-times text-danger fa-2x"></em></p>
<p>Abroad, there are only native English speakers and they will always correct your mistakes, typos and non-precise wording. Why do you think English programmers go to meetup anyway?</p>
<p><em class="fas fa-fw fa-check text-success fa-2x"></em></p>
<p>This could not be far from the truth. In my experience, I've been meeting roughly 10 % of native English speakers. Instead, they're from Germany, France, Italy, Spain, Hungary, Slovakia, Netherlands, Belgium or Poland. Imagine having all these nationalities together, in one room, almost all of them having English as seconds language (in the best case scenario).</p>
<p>In such a group being too good in English would actually hurt you. The most common vocabulary that everyone understands the most wins.
After all, <a href="https://xkcd.com/simplewriter">1000 words</a> are all you need.</p>
<h2 id="4-you-don-t-have-money-for-traveling-and-airbnb">4. You don't have Money for Traveling and AirBnb</h2>
<p><em class="fas fa-fw fa-times text-danger fa-2x"></em></p>
<p>Let's admit it, traveling abroad is not cheap. A return ticket from Prague to Berlin can cost over 50 €! And the AirBnb once more the same amount. And who of our programmers with poor pays can afford that?</p>
<p>If there only would be organizer you ask for accommodation or one of the other speakers or a friend. But that would be pure hope, no chance.</p>
<p><em class="fas fa-fw fa-check text-success fa-2x"></em></p>
<p>All you need to do is check <a href="https://www.meetup.com/sfugberlin/events">the meetup</a> and write to the organizer and the speakers. Why? Because these people are usually the most opened one. Thanks, <a href="http://mhlavac.net">Martin Hlaváč</a> for an awesome stay that helped me for this tip.</p>
<h2 id="5-it-s-very-hard-to-find-these-meetups">5. It's Very Hard to Find these Meetups</h2>
<p><em class="fas fa-fw fa-times text-danger fa-2x"></em></p>
<p>You can go to meetup.com and <a href="https://www.meetup.com/find/events/?allMeetups=false&amp;keywords=php">search for PHP</a>. But meetup.com is designed for all meetups, not just PHP, so there are many boiler place features you don't need and nice map around your location is missing. Despite that, not all groups are there, they' use GitHub Page, Facebook, Twitter or own calendar.</p>
<div class="text-center mb-4">
    <img src="/assets/images/posts/2018/friends/meetupcom.png" class="img-thumbnail"><br><em>Search on meetup.com is not really friendly</em>
</div>
<p>The second option is to go to <a href="http://php.ug">php.ug</a> and try to find meetups around you. This project is much better than meetup.com because it's <a href="https://github.com/php-ug/php.ug">open-sourced</a> and community can fix it, but it's not very active for the last 2 years.</p>
<div class="text-center">
    <img src="/assets/images/posts/2018/friends/phpug.png" class="img-thumbnail"><br><em>Current Meetup coverage at php.ug</em>
</div>
<p><em class="fas fa-fw fa-check text-success fa-2x"></em></p>
<p>Make no mistake, <a href="https://github.com/heiglandreas">Andreas Heigl</a> is doing a great job with <a href="http://php.ug">php.ug</a>, with Slack promotion and so on. I talked with him about this project, because I really missed a place where people could see meetups around them that would just work. Nothing more, nothing less.</p>
<p><strong>Thank you, Andreas, for inspiration, working API on php.ug and super fast bugfixes under 60 minutes from reporting</strong>. Be sure to check <a href="http://andreas.heigl.org">his blog</a> - I love his kind and wise style of sharing his experience.</p>
<h2 id="find-your-next-meetup-on-friendsofphp-org">Find Your Next Meetup on FriendsOfPHP.org</h2>
<p>Today, this one last reason <em>Not to have a talk abroad</em> became history.</p>
<p>I <a href="/blog/2017/09/25/3-non-it-books-that-help-you-to-become-better-programmer/#steal-like-and-artist-by-austing-kleon">Steal like an Artist</a> from many projects:</p>
<ul>
<li><a href="https://leafletjs.com">Leaflet.js</a></li>
<li><a href="https://www.meetup.com/meetup_api">Meetup.com API</a></li>
<li><a href="https://php-ug.github.io/php.ug/api">php.ug API</a></li>
<li><a href="http://gophp7.org">PHP7.org design</a></li>
<li><a href="https://pages.github.com">GitHub Pages</a></li>
<li><a href="https://www.statie.org">Statie</a></li>
<li><a href="https://docs.travis-ci.com/user/cron-jobs">Travis Daily Cron</a></li>
<li>and <a href="https://symfony.com/events">Symfony Events</a></li>
</ul>
<p>to put down a simple page with meetups in Europe:</p>
<p><a href="https://friendsofphp.org/"></p>
<img src="/assets/images/posts/2018/friends/homepage.png" class="img-thumbnail">
<p></a></p>
<p>It's a fresh MVP (<em>not model-view-presenter</em> but <em>minimum viable product</em>) from last week, but you know that they say - <em>release early, release often</em>. You can find it on <a href="https://github.com/tomasvotruba/friendsofphp.org">Github</a> (obviously), try it, run it locally without any database thanks to YAML and Statie.</p>
<p><br></p>
<p>The mission of <a href="https://friendsofphp.org">friendsofphp.org</a> page is simple:</p>
<blockquote class="blockquote text-center">
    Help programmers to share their ideas and travel as easy as possible
</blockquote>
<p><br></p>
<p><strong>So get up, forget all the reasons in your head stopping you from going to your first meetup aboard and enjoy it!</strong></p>
<p>That's all the life about :)</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/07/23/5-signs-should-never-have-a-talk-abroad</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 23 Jul 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/07/23/5-signs-should-never-have-a-talk-abroad#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Make Github and Travis Split Monorepo to Multiple Git Repositories for You ]]></title>
                <link>https://tomasvotruba.com/blog/2018/07/19/how-to-make-github-and-travis-split-monorepo-to-multiple-git-repositories-for-you</link>
                <description><![CDATA[ <p>Do you use a <a href="/clusters/#monorepo-from-zero-to-hero/">monorepo</a>? Then you know <a href="https://blog.shopsys.com/how-to-maintain-multiple-git-repositories-with-ease-61a5e17152e0">How to maintain multiple Git repositories with ease</a>. If you're not there yet, you may wonder <a href="https://blog.shopsys.com/how-to-merge-15-repositories-to-1-monorepo-keep-their-git-history-and-add-project-base-as-well-6e124f3a0ab3">How to Merge 15 Repositories to 1 Monorepo and Keep their Git History</a>.
<br><br>
Are you and your monorepo ready? Today we'll focus on <strong>fast, secured and outsourced monorepo auto split</strong> - all that under 10 minutes.</p> ]]></description>
                <content:encoded><![CDATA[ <p>It's great to be alive in this era. We have solved maintaining multiple repositories, even merge migration of their git history to one repository. Creating huge code bases was more never cost effective and never had a steeper learning curve.</p>
<p>The same way it was never easier to drive an autonomous car. You just sit in the car, press the button of your destination, and Tesla will drive you there when you check all the news on <a href="https://www.reddit.com/r/PHP">/r/PHP</a>.</p>
<p>Well, the monorepo paradigm is not there yet but it's getting there.</p>
<h2 id="the-split-problem">The Split Problem</h2>
<p>One of the last problems I'm aware of is splitting the monorepo to particular packages. Imagine you have <a href="https://github.com/symfony/symfony">Symfony monorepo</a> and you're trying to split it to all standalone packages like <a href="https://github.com/symfony/console">symfony/console</a>, <a href="https://github.com/symfony/dependency-injection">symfony/dependency-injection</a> and so on.</p>
<h3 id="current-status">Current Status</h3>
<p>This whole &quot;take a code from this directory and put it into this repository in <code>master</code> branch and last tag&quot; process is now:</p>
<ul>
<li>complex</li>
<li>slow</li>
<li>requires a lot of setups</li>
</ul>
<p>Instead, we want it to be:</p>
<ul>
<li><strong>simple so you will understand it at the end of reading this post</strong></li>
<li><strong>fast like Travis build of your project</strong></li>
<li><strong>easy to set up in 1 composer package and 5 lines of YAML</strong></li>
</ul>
<p>Why? So you could amaze your friends at the party that you just set-up a monorepo split and they can enjoy merged PRs in a matter of minutes (even if you know almost nothing about git or PHP).</p>
<p>Do you think we can get there? You'll see.</p>
<h2 id="the-best-solutions-to-split-so-far">The Best Solutions to Split (So Far)</h2>
<p>Feel free to explore these following solutions. I did it for you and here are a few blockers that hold them from being massively adopted.</p>
<p>On the other hand, <strong>I'm grateful for each one of them, because they're pushing the evolution further and further. Thanks to them we don't have to reinvent the wheel and we can build on their shoulders</strong>.</p>
<h3 id="1-splitsh-lite">1. splitsh/lite</h3>
<ul>
<li><a href="https://github.com/splitsh/lite">https://github.com/splitsh/lite</a></li>
<li>You need to know Go and bash and be able to resolve conflicts of their dependencies.</li>
</ul>
<h3 id="2-dflydev-git-subsplit">2. dflydev/git-subsplit</h3>
<ul>
<li><a href="https://github.com/dflydev/git-subsplit">https://github.com/dflydev/git-subsplit</a></li>
<li>Extra splits that are not needed</li>
<li>Complex configuration</li>
<li>Requires manual bash install</li>
<li>It was used by Laravel and then by Symplify</li>
</ul>
<h2 id="what-would-the-ideal-state-look-like">What Would the Ideal State Look Like?</h2>
<p>Before diving into solution and how to do it, I try to stop and go into a wonderland. What would the ideal solution look like? How would I use it? How would I explain it to others? How fast would it be? Try to break away from your know-how limits (because they're limiting your thinking) and be free to come up with absolutely non-sense answers:</p>
<ul>
<li>&quot;1 command to install&quot;</li>
<li>&quot;zero setup&quot;</li>
<li>&quot;1 command to run&quot;</li>
<li>&quot;1 minute to finish the whole process&quot;</li>
<li>&quot;split only what I and people really need&quot;</li>
</ul>
<p><br></p>
<p>If we put it in the code, it might look like:</p>
<pre><code class="language-bash">composer require symplify/monorepo-builder --dev</code></pre>
<pre><code class="language-yaml"># monorepo-builder.yml
parameters:
    directories_to_repositories:
        packages/MonorepoBuilder: 'git@github.com:Symplify/MonorepoBuilder.git'</code></pre>
<pre><code class="language-bash">vendor/bin/monorepo-builder split</code></pre>
<p>That could do, right? At least from a <a href="https://symfony.com/blog/making-the-symfony-experience-exceptional">developer's experience</a> view.</p>
<p><br></p>
<p>But what would <a href="https://www.michalspacek.com">security expert Michal Špaček</a> say to lousy code like that?</p>
<img src="/assets/images/posts/2018/monorepo-split/found-keys.jpg" class="img-thumbnail">
<h2 id="how-to-avoid-rape-on-github-and-travis">How To Avoid Rape on Github and Travis?</h2>
<blockquote class="blockquote text-center">
    "So, anyone can now push to your repository whatever he wants?"
</blockquote>
<p>This is a valid question that was probably scratching your mind when you saw <em>Github + Travis + git + open-source</em> combination.
Travis is basically a terminal, that runs few command lines. What would prevent someone from using this to &quot;play with&quot; your repository?</p>
<p>Let's look at the repository address in our example:</p>
<pre><code class="language-bash">git@github.com:Symplify/MonorepoBuilder.git</code></pre>
<p>This basically means <strong>we need to make ssh key or username and a password public</strong>. Does that sound like a good idea to you?</p>
<p>Don't worry, Github and Travis thought about these cases - with a hashed <code>GITHUB_TOKEN</code> environment variable.</p>
<h3 id="1-create-a-personal-access-token-on-github">1. Create a Personal Access Token on Github</h3>
<p>First, you need to create a custom token, that will authorize access to your Github repositories from any command line where it will be used.</p>
<p>Read <a href="https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line">the Github docs</a> or use <strong>tl;dr;</strong>:</p>
<ul>
<li>Go to your <a href="https://github.com/settings/tokens">Github Tokens</a></li>
<li>Click <em>Generate new token</em></li>
<li>Check only <em>repo</em> scope
<img src="/assets/images/posts/2018/monorepo-split/github-token.png" class="img-thumbnail"></li>
<li>Click <em>Generate token</em></li>
</ul>
<h3 id="2-add-code-github-token-code-in-repository-settings-on-travis">2. Add <code>GITHUB_TOKEN</code> in Repository Settings on Travis</h3>
<p>Then we need to store this token to Travis build, so Travis can be authorized to manipulate with your repositories without any password or ssh key.</p>
<p>Read <a href="https://docs.travis-ci.com/user/environment-variables/#Defining-Variables-in-Repository-Settings-">the Travis docs</a> or use <strong>tl;dr;</strong>:</p>
<ul>
<li>Go to Travis settings of your repository - <code>https://travis-ci.org/&lt;your&gt;/&lt;repository&gt;/settings</code></li>
<li>Jump to <em>Environment Variables</em> section</li>
<li>Create <code>GITHUB_TOKEN</code> with the value from Github</li>
<li>Click <em>Add</em></li>
</ul>
<p>In the end, it should look like this:</p>
<div class="text-center">
    <img src="/assets/images/posts/2018/monorepo-split/token-after.png" class="img-thumbnail"></div>
<p><em>If you got lost in this tl;dr;s, try <a href="https://developer.ibm.com/recipes/tutorials/separating-continuous-integration-from-continuous-deployment-using-github-and-travis-ci">this nice post with so many screenshots</a>.</em></p>
<h3 id="github-and-travis-protects-you">GitHub and Travis Protects You</h3>
<p>Now the best part. If you accidentally commit your access token in <code>.travis.yml</code> (like I did while testing), <strong>GitHub will immediately disable it</strong> and sends you an email (to bad I found that out the next day after 4 hours of debugging with that token).</p>
<p>And if you add the token to your repository on Travis as above, <strong>it will hide it in all logs for you</strong>. No need to hash it.</p>
<p>So instead of insecure</p>
<pre><code class="language-bash">git@github.com:Symplify/MonorepoBuilder.git
# or
https://aFjk02FJlkj1675jlk@github.com/Symplify/MonorepoBulder.git</code></pre>
<p>everyone will see:</p>
<pre><code class="language-bash">https://[secure]@github.com/Symplify/MonorepoBulder.git</code></pre>
<p>Sound and safe!</p>
<p><br></p>
<p><strong>Now we have:</strong></p>
<ul>
<li>the <code>symplify/monorepo-builder</code> package as a local dependency</li>
<li>configured package to repository paths in <code>monorepo-builder.yml</code></li>
<li>secured <code>GITHUB_TOKEN</code> in Travis settings for your monorepo repository</li>
<li>a command to run the split: <code>vendor/bin/monorepo-builder split</code></li>
</ul>
<p>Something is missing...</p>
<p>Oh right, <strong>when</strong> will the monorepo be split? Do we have to do it manually? How often? Should Travis CRON do it on daily basis?</p>
<h2 id="when-is-the-best-time-to-split-our-monorepo">When is the Best Time to Split our Monorepo?</h2>
<p>In times like these, get back to our ideal product:</p>
<ul>
<li>&quot;1 command to install&quot;</li>
<li>&quot;zero setup&quot;</li>
<li>&quot;1 command to run&quot;</li>
<li><strong>&quot;1 minute to finish the whole process&quot;</strong></li>
<li>&quot;split only what maintainer and users really need&quot;</li>
</ul>
<p>It often happens <strong>we merge fix or feature to monorepo and we want to try it</strong> before rushing to tagging a stable release. We want to do it <strong>as soon as possible</strong>, <strong>without manually triggering Travis</strong> to do it. Also, we <strong>don't want Travis to waste energy on pull-requests</strong> that are not merged to master. That would only slow the whole CI process down and frustrate contributors and maintainer.</p>
<p>Saying that how <code>.travis.yml</code> should look like?</p>
<pre><code class="language-yaml">language: php

# required for "git tag" presence for MonorepoBuilder split and ChangelogLinker git tags resolver
# see https://github.com/travis-ci/travis-ci/issues/7422
git:
  depth: false

matrix:
  include:
    - php: 7.2
      env: MONOREPO_SPLIT=true
    # ... other builds

install:
  - composer install

# ... other scripts

after_script:
  # split monorepo to packages - only on merge to master
  - |
    if [[ $TRAVIS_EVENT_TYPE == "push" &amp;&amp; $MONOREPO_SPLIT == true &amp;&amp; $TRAVIS_BRANCH == "master" ]]; then
      vendor/bin/monorepo-builder split -v
    fi</code></pre>
<p>That way the split command is run only merge to <code>master</code> and <strong>exactly once after each merge</strong>. So you can test your feature in a matter of minutes...</p>
<p>Wait wait, no vague statements like <em>a matter of minutes</em>. How <strong>fast it really is</strong>? To give you an idea, this is Symplify Travis build with a split of 10 packages:</p>
<img src="/assets/images/posts/2018/monorepo-split/speed.png" class="img-thumbnail mb-4">
<p><strong>It takes under 7,5 minutes</strong> including all the tests, static analysis and code style validation.</p>
<p>That's all folks. You're ready to go and try it on your monorepo.</p>
<p><br></p>
<h2 id="are-you-into-git-internals">Are You Into Git Internals?</h2>
<p>I knew you are, so here are few details.</p>
<p>All it' wrapped in a bash file at the moment. It could be done in <code>symfony\process</code>, but the original source <a href="https://github.com/dflydev/git-subsplit">subsplit.sh</a> was in bash so I used it.</p>
<p>There are ~160 lines but most of them are arguments and options configuration, their resolving, preparing the repository and other boring stuff. The interesting part is really <a href="https://github.com/Symplify/MonorepoBuilder/blob/db9a1aa840092a66234c166cbcc9d6d9196d81b1/packages/Split/bash/subsplit.sh#L107">in this 1</a> and <a href="https://github.com/Symplify/MonorepoBuilder/blob/db9a1aa840092a66234c166cbcc9d6d9196d81b1/packages/Split/bash/subsplit.sh#L123-L126">these 3 lines</a>:</p>
<pre><code class="language-bash">git remote add origin "git@github.com:Symplify/MonorepoBuilder.git"

git checkout -b "master"
git subtree split -q --prefix="/packages/MonorepoBuilder" --branch="master"
git push -q --force origin "master"</code></pre>
<p>I used &quot;real values&quot; instead of <code>$VARIABLES</code>, so it's more clear to you.</p>
<p>In human words it works like this:</p>
<pre><code class="language-bash"># in what repository should we push the code?
git remote add origin "git@github.com:Symplify/MonorepoBuilder.git"

# what branch do we push there?
git checkout -b "master"

# the split magic!
git subtree split -q --prefix="/packages/MonorepoBuilder" --branch="master"

# push this branch to remote branch
git push -q --force origin "master"</code></pre>
<p>That is really it!</p>
<p><strong>If you're git split geek (like me), feel free to explore the whole <a href="https://github.com/Symplify/MonorepoBuilder/blob/master/packages/Split/bash/subsplit.sh"><code>subsplit.sh</code> script</a></strong>. There are many nice little details to learn from.</p>
<p><br></p>
<p>So, do you think you're ready to fascinate your friends tonight with all your brand new monorepo split setup?</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/07/19/how-to-make-github-and-travis-split-monorepo-to-multiple-git-repositories-for-you</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 19 Jul 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/07/19/how-to-make-github-and-travis-split-monorepo-to-multiple-git-repositories-for-you#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Notes from &#039;Peace is Every Step&#039; Book ]]></title>
                <link>https://tomasvotruba.com/blog/2018/07/12/20-notes-from-peace-is-every-step-book</link>
                <description><![CDATA[ <p>Zen To Done, Deep Work, ZenHabits... You've probably noticed I'm a fan of Leo Babauta. The first person I met on the Internet who explained to me that I'm not weird, but a minimalist.
<br><br>
Leo <a href="https://zenhabits.net">writes</a> minimalist tips from daily life that is easy to relate to. Thanks to quotes in his posts I got chance to meet <em>Thich Nhat Hanh</em>, a Buddhist monk who helped to restore peace between the USA and Vietnam...
<br><br>
...and recently I've finished reading his book <em>Peace Is Every Step: The Path of Mindfulness in Everyday Life</em>. What was it about?</p> ]]></description>
                <content:encoded><![CDATA[ <p><em>Btw, Leo also writes little books. If there is one I enjoyed the most, it's <a href="https://zenhabits.net/little-book">The Little Book of Contentment</a>. Not because it's free and short, but because it helped me to focus on my inner passion and my own meaning and fears that were stopping me.</em></p>
<p><br></p>
<p>I really enjoyed reading <em>Peace is Every Step</em> and it gave me a broader view of conflicts around me as well as deeper understanding of my inner conflicts and ways to enjoy the way I am. Without judging myself against past or future and other, yet acting with more loving kindness and courage to overcome past fears and failures.</p>
<img src="/assets/images/posts/2018/peace/book.jpg" class="col-6">
<p>Instead of a random summary, I'll leave you to absorb a handful of quotes that really resonated with me.</p>
<h2 id="part-one-breathe-you-are-alive">Part One: Breathe! You Are Alive</h2>
<h3 id="10-years-for-diploma-beats-the-present-moment">10-years for Diploma beats the Present Moment</h3>
<blockquote class="blockquote">
    We know how to sacrifice ten years for a diploma, and we are willing to work very hard to get a job, a car, a house, and so on. But we have difficulty remembering that we are alive in the present moment, the only moment there is for us to be.
</blockquote>
<blockquote class="blockquote">
    When I hold a bowl of rice or a piece of bread, I know that I am fortunate, and I feel compassion for all those who have no food to eat and are without friends or family. This is a very deep practice.
</blockquote>
<h3 id="aware-or-not-at-all">Aware or Not At All</h3>
<blockquote class="blockquote">
    The foundation of happiness is mindfulness. The basic condition for being happy is our consciousness of being happy. If we are not aware that we are happy, we are not really happy.
</blockquote>
<blockquote class="blockquote">
    <strong>Enlightenment, peace, and joy will not be granted by someone else.</strong>
</blockquote>
<blockquote class="blockquote">
    There is no way to peace, peace is the way.
</blockquote>
<h2 id="part-two-transformation-and-healing">Part Two: Transformation and Healing</h2>
<h3 id="we-are-our-feelings">We are Our Feelings</h3>
<blockquote class="blockquote">
    Mindful observation is based on the principle of "non- duality": our feeling is not separate from us or caused merely by something outside us; our feeling is us, and for the moment we are that feeling. We are neither drowned in nor terrorized by the feeling, nor do we reject it. Our attitude of not clinging to or rejecting our feelings is the attitude of letting go, an important part.
</blockquote>
<h3 id="throw-away-parts-of-yourself">Throw Away Parts of Yourself?</h3>
<blockquote class="blockquote">
    When we have something irregular in our body, too often they advise us to have an operation. The same seems to be true in psychotherapy. <strong>Therapists want to help us throw out what is unwanted and keep only what is wanted</strong>. But what is left may not be very much. <strong>If we try to throw away what we don't want, we may throw away most of ourselves</strong>.
    <br>
    ...
    <br>
    We do not need surgery to remove our anger. If we become angry at our anger, we will have two angers at the same time. We only have to observe it with love and attention.
</blockquote>
<h3 id="teach-by-creating-teachers">Teach by Creating Teachers</h3>
<blockquote class="blockquote">
    A teacher has to give birth to the teacher within his student, and a psychotherapist has to give birth to the psychotherapist within his patient.
</blockquote>
<h3 id="what-if-somebody-is-angry-at-you">What if Somebody is Angry at You?</h3>
<blockquote class="blockquote">
    His dishonesty and hatefulness may be real, imaginary, or exaggerated, but, in fact, the root of the problem is the anger itself, and we have to come back and look first of all inside ourselves. It is best if we do not listen to or look at the person whom we consider to be the cause of our anger. <strong>Like a fireman, we have to pour water on the blaze first and not waste time looking for the one who set the house on fire</strong>.
</blockquote>
<blockquote class="blockquote">
    When we are angry, our anger is our very self. To suppress or chase it away is to suppress or chase away our self. When we are joyful, we are the joy. When we are angry, we are the anger. When anger is born in us, we can be aware that <strong>anger is an energy in us, and we can accept that energy in order to transform it into another kind of energy</strong>.
</blockquote>
<h3 id="understand-garbage-in-people">Understand Garbage in People</h3>
<blockquote class="blockquote">
    The key is knowing a person's suchness. We do not expect a person always to be a flower. We have to understand his or her garbage as well.
</blockquote>
<h3 id="what-to-say-before-dying">What to Say Before Dying</h3>
<blockquote class="blockquote">
    "Whenever you miss me, look into your hand, and you will see me immediately." How penetrating these simple, sincere words!
</blockquote>
<h3 id="focus-on-pain-grows-pain">Focus on Pain Grows Pain</h3>
<blockquote class="blockquote">
    We often ask, "What's wrong?" Doing so, we invite painful seeds of sorrow to come up and manifest. We feel suffering, anger, and depression, and produce more such seeds. We would be much happier if we tried to stay in touch with the healthy, joyful seeds inside of us and around us. We should learn to ask, "What's not wrong?" and be in touch with that.
</blockquote>
<blockquote class="blockquote">
    We don't need to wait until we have asthma to enjoy our breathing.
</blockquote>
<h3 id="blame-or-understand">Blame or Understand?</h3>
<blockquote class="blockquote">
    Blaming has no positive effect at all, nor does trying to persuade using reason and arguments. That is my experience. No blame, no reasoning, no argument, just understanding. <strong>If you understand, and you show that you understand, you can love, and the situation will change</strong>.
</blockquote>
<h3 id="all-relationship-are-mutual">All Relationship are Mutual</h3>
<blockquote class="blockquote">
    "Mommy, remember to water me. I am your lettuce." I was so pleased that she had understood my point completely. Then I heard her mother reply, "Yes, my daughter, and I am your lettuce also. So please don't forget to water me too."
</blockquote>
<blockquote class="blockquote">
    <strong>Once there is seeing, there must be acting. Otherwise, what is the use of seeing?</strong>
</blockquote>
<h3 id="bring-peace-to-2-enemies">Bring Peace to 2 Enemies</h3>
<blockquote class="blockquote">
    We get angry, we shout, but rarely do we rise above all this to look at a conflict <strong>the way a mother would who is watching her two children fighting. She seeks only their reconciliation</strong>.
</blockquote>
<img src="/assets/images/posts/2018/peace/mononoke.jpg">
<h3 id="how-to-say-sorry-people-you-ve-hurt">How to Say Sorry People You've Hurt</h3>
<blockquote class="blockquote">
    There are few things to do. The first thing is to take the time to say, "I am sorry, I hurt you out of my ignorance, out of my lack of mindfulness, out of my lack of skillfulness. I will try my best to change myself. I don't dare to say anything more to you."
</blockquote>
<h2 id="part-three-peace-is-every-step">Part Three: Peace Is Every Step</h2>
<h3 id="do-you-suffer-for-a-day-delay-of-your-order">Do You Suffer for a Day Delay of Your Order?</h3>
<blockquote class="blockquote">
    There were "boat people" who were just one or two years old, who were about to be sent back to their country because they were classified as illegal immigrants. <strong>They had lost both father and mother during the trip. When you see that kind of suffering, you know that the suffering your friends in Europe and America are undergoing is not very great</strong>.
</blockquote>
<blockquote class="blockquote">
    Do not accumulate wealth while millions are hungry. Do not take as the aim of your life fame, profit, wealth, or sensual pleasure. <strong>Live simply and share time, energy, and material resources with those who are in need</strong>.
</blockquote>
<h3 id="keep-community-strong-with-the-right-words">Keep Community Strong with the Right Words</h3>
<blockquote class="blockquote">
    Do not utter words that can create discord and cause the community to break. Make every effort to reconcile and resolve all conflicts, however small.
</blockquote>
<blockquote class="blockquote">
    I have enjoyed our journey together. I hope you have enjoyed it too. We shall see each other again.
</blockquote>
<p><br></p>
<p>Did you? <a href="https://www.amazon.com/Peace-Every-Step-Mindfulness-Everyday-ebook/dp/B0038AUYSW/">Give a try to free first chapter</a> to Kindle app</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/07/12/20-notes-from-peace-is-every-step-book</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 12 Jul 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/07/12/20-notes-from-peace-is-every-step-book#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ 6 Reasons Why Doctrine is Alive and Kicking ]]></title>
                <link>https://tomasvotruba.com/blog/2018/07/09/6-reasons-why-doctrine-is-alive-and-kicking</link>
                <description><![CDATA[ <p>Almost 1,5 year ago I wrote <a href="/blog/2017/03/27/why-is-doctrine-dying/">Why is Doctrine Dying</a>. I didn't use <em>dead</em>, because it's is just state of time being. Open-source projects - like people - tend to find themselves on the top, being stuck or struggling with the right path from time to time. It's a completely normal process of evolution.
<br><br>
I don't know if that post helped it, but since then many <strong>things changed for better in Doctrine project</strong>. Saying that this post deprecates my old view and celebrate changes.
<br><br>
<strong>May this be an inspiration for open-source projects that find themselves stuck and the maintainers that find themselves unhappy</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <p>What's new in Doctrine and what might help you and your project to restart?</p>
<h2 id="1-bump-php-7-1-without-waiting-for-major-release">1. Bump PHP 7.1 Without Waiting for Major Release</h2>
<p>Doctrine bumped <strong>all packages</strong> to min PHP 7.1. This change reduces a lot of features that have to be maintained. But that's not the best benefits in my opinion. The best thing is <strong>the maintainer doesn't have to keep in mind all the clutter know-how</strong> he or she probably uses only for this project, like arrays should be written in <code>array()</code>, there is no <code>void</code> yet or <code>yield</code> yet etc. This makes development much faster and enjoyable.</p>
<p>In <a href="https://www.doctrine-project.org/2017/07/25/php-7.1-requirement-and-composer.html">the official post</a> they explain why this not a BC (back-compatibility) break and I must say I really like it and often refer to it:</p>
<blockquote class="blockquote mt-5 mb-5">
    One question we frequently hear is, "isn't dropping support for a PHP version a BC break"? In a nutshell, no. <strong>A BC break happens when there is an incompatible change that your package manager can't handle</strong>. For example, changing a method signature in a minor version is a no-go, since the composer version constraints mentioned above assume any minor upgrade can safely be used.
    <br><br>
However, when we drop support for an older version of PHP, <strong>composer will not consider the new version if the PHP version requirement is no longer fulfilled</strong>. Thus, you won't end up with a fatal error due to a wrong method signature, you just won't get the new version.
</blockquote>
<p>Until we agree on regular PHP minor version bumping as a community, I think it's the best to jump to <em>the unicorn</em> versions. Those with the biggest impact, the most stable and helpful - and <a href="https://gophp71.org">go PHP 7.1</a> as one.</p>
<h2 id="2-use-coding-standard">2. Use Coding Standard</h2>
<p>Although the coding standard is standard nowadays, it's not very easy to setup them to existing projects. Moreover more complex ones than a few basic rules. I'm very happy to see that Doctrine made this happen. The <a href="https://github.com/doctrine/coding-standard/blob/master/lib/Doctrine/ruleset.xml"><code>ruleset.xml</code></a> is quite rich.</p>
<p>Coding Standard makes contributing much more fearless since <strong>you don't have to worry I'll get smashed in code-review by &quot;extra space here&quot; comment</strong>.</p>
<p>Since it uses only PHP_CodeSniffer and not PHP CS Fixer, these still is a lot of manual work and space for huge cost-effective improvement. I tried to help with EasyCodingStandard implementation many months ago, but in that time ECS required PHP 7.1 and Doctrine not and used Neon of YAML to configure. Not anymore! <a href="/blog/2018/03/26/new-in-easy-coding-standard-4-clean-symfony-standard-with-yaml-and-services/">YAML is now default since ECS 4</a>, so the path is open from the technical point of view.</p>
<h2 id="3-cut-the-weight-to-save-yourself">3. Cut the Weight to Save Yourself</h2>
<p>Let's stay with YAML for a few more moments. There was PR to Doctrine to <a href="https://github.com/doctrine/doctrine2/pull/5932">remove all YAML references</a> (mainly Entity mapping) in the time of writing my former post, but it was not clear when that will happen.</p>
<img src="/assets/images/posts/2018/doctrine-alive/yaml-drop.png" class="img-thumbnail">
<p>Now it's clear the Doctrine 3.0 will include this drop. This is very similar to PHP 7.1 change. The most healthy benefit is that maintainers don't have to constantly think about PHP, XML, YAML and Annotation support in everything they do - just in case it might be related to it. Instead, <strong>the focus is now more narrow, clear and as a side effect - development is more enjoyable</strong>.</p>
<div class="text-center">
    <img src="/assets/images/posts/2018/doctrine-alive/balloon.jpg" class="img-thumbnail"><br><em>
        It's like a hot air balloon.<br>
        If you have too many sandbags, you won't fly as high you want no matter how hard you try.
        <br>
        Drop just a few of them and you'll see how life becomes much lighter.
    </em>
</div>
<h3 id="get-rid-of-over-support-as-part-of-psychohygiene">Get rid of Over-Support as part of Psychohygiene</h3>
<p><em>Over-support</em> is very common in open source. It happened to me in ECS, <a href="/blog/2017/09/04/how-apigen-survived-its-own-death//">I saw it ApiGen</a> and almost burned out while getting rid of it (it also took me many months to even realize it and step out of it). <strong>People request features, your project is popular, you gave people these features and that makes it more popular, so more people request features... it's challenging to keep on track when you're on celebrity power-trip</strong>.</p>
<p>It's very healthy to be <a href="/blog/2018/06/21/open-source-is-selfish//">selfish in open-source</a>, not just for you for for the project to live and prosper.</p>
<h2 id="4-give-people-vision-to-follow">4. Give People Vision to Follow</h2>
<p>How can people orientate in the product, the package, the ideas, if you have no information about it? People need to know, what will happen when - at least approximately, but moreover in software that changes so fast. There were times when there was one post for a whole year <a href="https://www.doctrine-project.org/blog">on Doctrine's blog</a>. That changed!</p>
<p>The blog was refreshed, <a href="https://github.com/doctrine/doctrine-website">fully-open sourced</a> and now runs on Sculpin, a project that I used before and get a lot of inspiration for <a href="https://www.statie.org">Statie</a>.</p>
<p>There is news about Doctrine ORM 3.0 about PHP 7.1 bump etc. Even these small notes give a great feeling of trust, of <em>something is going on</em> feeling, that creates a relationship.</p>
<h2 id="5-from-talks-and-post-evangelization-to-code-improvements">5. From Talks and Post Evangelization to Code Improvements</h2>
<p>I didn't really measure myself this so <a href="https://www.goodreads.com/quotes/300097-i-only-believe-in-statistics-that-i-doctored-myself">I can't fake it</a>, but I have a feeling that there are fewer talks and posts about Doctrine than years before. And that's a good thing. Why? Because this energy is now directed to the code.</p>
<img src="/assets/images/posts/2018/doctrine-alive/contrib.png" class="img-thumbnail">
<p>Don't take me wrong, both development and popularization are important, but if the project is not moving ahead, the popularization only vendor-lock know-ledge to slowly deprecating code.</p>
<div class="text-center">
    <img src="/assets/images/posts/2018/doctrine-alive/hide.jpg" class="img-thumbnail"><em>
        So don't forget to hide from time to time from the public and deep-work on your project.<br>
        The world will wait in excitement for your news.
    </em>
</div>
<h2 id="6-new-release-as-a-baseline">6. New Release as a Baseline</h2>
<p>Last but not least, take a time and <a href="http://how-to-stay-organized.blogspot.com/2011/08/declutter-desk.html">declutter your desk</a> once a few months.</p>
<img src="https://4.bp.blogspot.com/-uISp2pDSrTs/Tjr1Rr_07NI/AAAAAAAAAls/F3cq72YywMw/s320/computer-desk-before.JPG" width="400px" class="img-thumbnail">
<p>↓</p>
<img src="https://4.bp.blogspot.com/-W7YoCGWIlP4/Tjr1y2qZaxI/AAAAAAAAAlw/RWqZI7ECmfQ/s320/computer-desk-after.JPG" width="400px" class="img-thumbnail">
<p>I think you know what a great feeling is to work with a clean desk. How does that relate to an open-source project?</p>
<p>Packages <strong>tagging</strong> is like <a href="https://www.doctrine-project.org/2017/07/25/php-7.1-requirement-and-composer.html">publishing a book</a>. You summarize all you know, all you did up-to-the one point of time. It's a big step, you celebrate it and... then you continue working on your next book.</p>
<img src="/assets/images/posts/2018/doctrine-alive/packages.png" class="img-thumbnail">
<p><strong>Tag from time to time just to put your work out, to get feedback, to share it with the world</strong> so anyone can <a href="/blog/2017/09/25/3-non-it-books-that-help-you-to-become-better-programmer/#steal-like-and-artist-by-austing-kleon">steal it</a>.</p>
<p><br><br></p>
<p>And that's all folks. <strong>I'm happy Doctrine is moving forward to the version 3.0 and I really look forward to it</strong> - it will run on PHP 7.2, one more sandbag dropped to make code better.</p>
<p>How is your project doing? What do you do when you feel stuck for a while? Let me know in the comments.</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/07/09/6-reasons-why-doctrine-is-alive-and-kicking</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 09 Jul 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/07/09/6-reasons-why-doctrine-is-alive-and-kicking#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Convert Latte Templates to Twig in 27 Regular Expressions ]]></title>
                <link>https://tomasvotruba.com/blog/2018/07/05/how-to-convert-latte-templates-to-twig-in-27-regular-expressions</link>
                <description><![CDATA[ <p>Statie - a tool for generating static open-sourced website like this blog or <a href="https://github.com/pehapkari/pehapkari.cz">Pehapkari.cz</a> - runs on YAML and Symfony DI Container. That way it's easy to understand by the PHP community worldwide.
<br><br>
But there are some pitfalls left. Like templates - being Latte the only one is a pity. Twig is often requested feature and one of the last big reasons not to use Statie.
<br><br>
Well, <strong>it was</strong>. Statie now supports <a href="https://github.com/symplify/symplify/pull/892">Twig</a>.
<br><br>
<strong>Are you a Twig fan? As a side effect, I made 27 regular expression to handle 80 % of the Latte to Twig migration for you.</strong></p> ]]></description>
                <content:encoded><![CDATA[ <img src="/assets/images/posts/2018/latte-twig/latte.png" class="mt-5 ml-5">
<img src="/assets/images/posts/2018/latte-twig/twig.jpg">
<p>This regex saga started as an experiment on this site. I tested the Twig support in Statie here. This web had ~20 files in Latte and I needed them to be in Twig, so I know the Twig support works with all the edge cases I use on daily basis.</p>
<p>After the 5th change of code from <code>{$value}</code> to <code>{{ value }}</code> I started to have a weird feeling of being a robot or <a href="/blog/2018/05/03/how-do-you-treat-your-own-first-ai/">a very slow AI</a>. So I stopped to think a bit...</p>
<blockquote class="blockquote text-center">
    "The question you should be asking isn't, "What do I want?" or "What are my goals?" but "What would excite me?"
    <footer class="blockquote-footer">Tim Ferriss</footer></blockquote>
<p>And what excites me? <strong>Investing 5 hours to automate 30-minutes manual work under 10 seconds, so no-one else will have to do that ever again.</strong></p>
<h2 id="brother-from-another-mother">Brother from Another Mother</h2>
<p>The biggest difference between Latte, Twig, Smarty, Blade and all other templating engines is rather in the way they're written inside than in the syntax itself.</p>
<p>See Latte code:</p>
<pre><code class="language-html">{foreach $values as $key =&gt; $value}
    {$value-&gt;getName()}

    {if isset($value['position'])}
        {$value['position']|noescape}
    {else}
        {var $noPosition = true}
    {/if}
{/foreach}</code></pre>
<p>And see Twig code:</p>
<pre><code class="language-twig">{% for key, value in values %}
    {{ value.getName() }}

    {% if value.position is defined %}
        {{ value.position|raw }}
    {% else %}
        {% set noPosition = true %}
    {% endif %}
{% endfor %}</code></pre>
<p>And that's how 27 regular expressions solution was born step by step.</p>
<p><br></p>
<p>I'm not using <code>preg_replace</code>, but rather util method <a href="https://github.com/nette/utils/blob/8eda0c33f798f7ce491715e9dae8797f191e9b00/src/Utils/Strings.php#L475"><code>Nette\Utils\String::replace()</code></a> that handles compile-time errors, run-time errors and few more tricks in a fancy way. Do you want to use it too? Just run <code>composer update nette/utils</code>.</p>
<p><strong>Do you want to skip details and use it?</strong> Jump to <em><a href="#install-and-use-it">Install and Use It</a></em> section.</p>
<h3 id="1-block-define-include">1. Block, Define, Include</h3>
<ul>
<li><a href="https://latte.nette.org/en/macros#toc-blocks">in Latte</a></li>
<li><a href="https://twig.symfony.com/doc/2.x/tags/block.html">in Twig</a></li>
</ul>
<pre><code class="language-php">use Nette\Utils\Strings;

// ...

// {block someBlock}...{/block} =&gt;
// {% block anotherBlock %}...{% endblock %}
$content = Strings::replace($content, '#{block (\w+)}(.*?){\/block}#s', '{% block $1 %}$2{% endblock %}');

// {include "_snippets/menu.latte"} =&gt;
// {% include "_snippets/menu.latte" %}
$content = Strings::replace($content, '#{include ([^}]+)}#', '{% include $1 %}');

// {define sth}...{/define} =&gt;
// {% block sth %}...{% endblock %}
$content = Strings::replace($content, '#{define (.*?)}(.*?){\/define}#s', '{% block $1 %}$2{% endblock %}');

// {% include ... %} =&gt;
// {{ block('...') }}
$content = Strings::replace($content, '#{% include \'?(\w+)\'? %}#', '{{ block(\'$1\') }}')</code></pre>
<p>The most useful expression here is <code>(.*?)</code>. <strong>It will capture everything until the next pattern</strong>. In this case it keeps everything between 2 tags.</p>
<p>Also, <strong>mind the <code>#s</code> modifier</strong>. <code>(.*?)</code> matches newlines as well thanks to that. You can read more about modifiers in <a href="http://php.net/manual/en/reference.pcre.pattern.modifiers.php">PHP Documentation</a></p>
<p>The last notable tip I learned is <code>\w</code>, that matches <code>[a-zA-Z0-9_]</code> characters - usually all you need for variable names.</p>
<h3 id="2-capture-set">2. Capture, Set</h3>
<ul>
<li><a href="https://latte.nette.org/en/macros#toc-variable-declaration">in</a> <a href="https://latte.nette.org/en/macros#toc-capturing-to-variables">Latte</a></li>
<li><a href="https://twig.symfony.com/doc/2.x/tags/set.html">in Twig</a></li>
</ul>
<pre><code class="language-php">use Nette\Utils\Strings;

// ...

// {var $var = $anotherVar} =&gt;
// {% set var = anotherVar %}
$content = Strings::replace($content, '#{var \$?(.*?) = \$?(.*?)}#s', '{% set $1 = $2 %}');

// {capture $var}...{/capture} =&gt;
// {% set var %}...{% endset %}
$content = Strings::replace($content, '#{capture \$(\w+)}(.*?){\/capture}#s', '{% set $1 %}$2{% endset %}');</code></pre>
<p>As Twig doesn't use <code>$var</code> but just <code>var</code> as variable name, we need to get rid of the dollar <code>$</code> sign.</p>
<p>That's what this expression does:</p>
<pre><code class="language-bash">\$?(.*?)</code></pre>
<p>It will capture anything, but if there is <code>$</code>, it will remove it.</p>
<h3 id="3-comments">3. Comments</h3>
<ul>
<li><a href="https://latte.nette.org/en/macros">in Latte</a></li>
<li><a href="https://twig.symfony.com/doc/2.x/templates.html#comments">in Twig</a></li>
</ul>
<pre><code class="language-php">use Nette\Utils\Strings;

// ...

$content = Strings::replace($content, '#{\*(.*?)\*}#s', '{#$1#}');</code></pre>
<h3 id="4-conditions-if-ifset">4. Conditions, If, Ifset</h3>
<ul>
<li><a href="https://latte.nette.org/en/macros#toc-conditions">in Latte</a></li>
<li><a href="https://twig.symfony.com/doc/2.x/tags/if.html">in Twig</a></li>
</ul>
<pre><code class="language-php">use Nette\Utils\Strings;

// ...

// https://regex101.com/r/XKKoUh/1/
// {if isset($post['variable'])}...{/if} =&gt;
// {% if $post['variable'] is defined %}...{% endif %}
$content = Strings::replace(
    $content,
    '#{if isset\((.*?)\)}(.*?){\/if}#s',
    '{% if $1 is defined %}$2{% endif %}'
);

// {ifset $post}...{/ifset} =&gt;
// {% if $post is defined %}..{% endif %}
$content = Strings::replace($content, '#{ifset (.*?)}(.*?){\/ifset}#s', '{% if $1 is defined %}$2{% endif %}');

// {% if $post['deprecated'] =&gt;
// {% if $post.deprecated
// https://regex101.com/r/XKKoUh/2
$content = Strings::replace($content, '#{% (\w+) \$([A-Za-z]+)\[\'([\A-Za-z]+)\'\]#', '{% $1 $2.$3');

// {if "sth"}..{/if} =&gt;
// {% if "sth" %}..{% endif %}
// https://regex101.com/r/DrDSJf/1
$content = Strings::replace($content, '#{if (.*?)}(.*?){\/if}#s', '{% if $1 %}$2{% endif %}');

$content = Strings::replace($content, '#{else}#', '{% else %}');

$content = Strings::replace($content, '#{elseif (.*?)}#', '{% elseif $1 %}');</code></pre>
<p>Nothing fancy here, just another great use case for <code>(.*?)</code> group.</p>
<h3 id="5-filters">5. Filters</h3>
<ul>
<li><a href="https://latte.nette.org/en/filters">in Latte</a></li>
<li><a href="https://twig.symfony.com/doc/2.x/filters/index.html">in Twig</a></li>
</ul>
<pre><code class="language-php">use Nette\Utils\Strings;

// ...

// {$post['updated_message']|noescape} =&gt;
// {{ post.updated_message|noescape }}
$content = Strings::replace($content, '#{\$([A-Za-z_-]+)\[\'([A-Za-z_-]+)\'\]\|([^}]+)}#', '{{ $1.$2|$3 }}');

// | noescape =&gt;
// | raw
$content = Strings::replace($content, '#\|(\s+)?noescape#', '|$1raw');

// {% if count($var) %} =&gt;
// {% if $var|length) %}
$content = Strings::replace($content, '#{% (.*?) count\(\$?(\w+)\)#', '{% $1 $2|length');</code></pre>
<p>No surprises here.</p>
<h3 id="6-loops-while-for-foreach">6. Loops, While, For, Foreach</h3>
<ul>
<li><a href="https://latte.nette.org/en/macros#toc-loops">in Latte</a></li>
<li><a href="https://twig.symfony.com/doc/2.x/tags/for.html">in Twig</a></li>
</ul>
<pre><code class="language-php">use Nette\Utils\Strings;

// ...

// {foreach $values as $key =&gt; $value}...{/foreach} =&gt;
// {% for key, value in values %}...{% endfor %}
$content = Strings::replace(
    $content,
    '#{foreach \$([()\w ]+) as \$([()\w ]+) =&gt; \$(\w+)}#',
    '{% for $2, $3 in $1 %}'
);

// {foreach $values as $value}...{/foreach} =&gt;
// {% for value in values %}...{% endfor %}
$content = Strings::replace($content, '#{foreach \$([()\w ]+) as \$([()\w ]+)}#', '{% for $2 in $1 %}');
$content = Strings::replace($content, '#{/foreach}#', '{% endfor %}');

// {sep}, {/sep} =&gt; {% if loop.last == false %}, {% endif %}
$content = Strings::replace($content, '#{sep}([^{]+){\/sep}#', '{% if loop.last == false %}$1{% endif %}');</code></pre>
<h3 id="7-variables">7. Variables</h3>
<ul>
<li><a href="https://latte.nette.org/en/macros#toc-variable-printing">in Latte</a></li>
<li><a href="https://twig.symfony.com/doc/2.x/templates.html#variables">in Twig</a></li>
</ul>
<pre><code class="language-php">use Nette\Utils\Strings;

// ...

// {$google_analytics_tracking_id} =&gt;
// {{ google_analytics_tracking_id }}
// {$google_analytics_tracking_id|someFilter} =&gt;
// {{ google_analytics_tracking_id|someFilter }}
$content = Strings::replace($content, '#{\$(\w+)(\|.*?)?}#', '{{ $1$2 }}');

// {$post-&gt;getId()} =&gt;
// {{ post.getId() }}
$content = Strings::replace($content, '#{\$([\w]+)-&gt;([\w()]+)}#', '{{ $1.$2 }}');

// {$post['relativeUrl']} =&gt;
// {{ post.relativeUrl }}
$content = Strings::replace($content, '#{\$([A-Za-z_-]+)\[\'([A-Za-z_-]+)\'\]}#', '{{ $1.$2 }}');

// {% if $post['rectify_post_id'] is defined %} =&gt;
// {% if post.rectify_post_id is defined %}
$content = Strings::replace($content, '#({% \w+) \$(\w+)\[\'(\w+)\'\]#', '$1 $2.$3');</code></pre>
<p>This was the simplest set so far. Always start with the easiest first.</p>
<h3 id="8-suffix">8. Suffix</h3>
<pre><code class="language-php">use Nette\Utils\Strings;

// ...

// "_snippets/menu.latte" =&gt;
// "_snippets/menu.twig"
$content = Strings::replace($content, '#([A-Za-z_/"]+).latte#', '$1.twig');</code></pre>
<h3 id="9-include-with-vars">9. Include With Vars</h3>
<p>This is the most complex solution in the set. What it does?</p>
<pre><code class="language-diff">-{% include "_snippets/menu.latte", "data" =&gt; $data %}
+{% include "_snippets/menu.twig" with { "data": data } %}</code></pre>
<p>It looks pretty simple, but I could not find an easier way to work with the nested array items.</p>
<pre><code class="language-php">use Nette\Utils\Strings;

// include var:
// {% include "_snippets/menu.latte", "data" =&gt; $data %} =&gt;
// {% include "_snippets/menu.twig", { "data": data } %}
// see https://twig.symfony.com/doc/2.x/functions/include.html
// single lines
// ref https://regex101.com/r/uDJaia/1
$content = Strings::replace($content, '#({% include [^,]+,)([^}^:]+)(\s+%})#', function (array $match) {
    $variables = explode(',', $match[2]);
    $twigDataInString = ' { ';
    $variableCount = count($variables);
    foreach ($variables as $i =&gt; $variable) {
        [$key, $value] = explode('=&gt;', $variable);
        $key = trim($key);
        $value = trim($value);
        $value = ltrim($value, '$'); // variables do not start with
        $twigDataInString .= $key . ': ' . $value;
        // separator
        if ($i &lt; $variableCount - 1) {
            $twigDataInString .= ', ';
        }
    }
    $twigDataInString .= ' }';

    return $match[1] . $twigDataInString . $match[3];
});

// {% include "sth", =&gt;
// {% include "sth" with
$content = Strings::replace($content, '#({% include [^,{]+)(,)#', '$1 with');</code></pre>
<p>What is here to take away? The <code>[^,{]+</code> set. It tells <em>find everything until the first <code>,</code> or <code>{</code> character</em>.
That way we catch everything we don't really work with.</p>
<h2 id="install-and-use-it">Install and Use It</h2>
<pre><code class="language-bash">composer require symplify/latte-to-twig-converter:@dev --dev
vendor/bin/latte-to-twig-converter convert app/templates</code></pre>
<p>It will find all the <code>*.twig</code> files, look for Latte code in it and if that matches, it will convert it to Twig. That way your <code>*.latte</code> files will keep Latte as long as you don't rename them.</p>
<p>I'd link you to <a href="http://github.com/symplify/lattetotwigconverter">README</a> now for more, but actually, there is no more, this is all the usage.</p>
<p><br></p>
<h3 id="how-does-this-set-work-in-real-project">How Does This Set Work in Real Project?</h3>
<p>Just see <a href="https://github.com/TomasVotruba/tomasvotruba.com/pull/380">the PR on this website</a>
or <a href="https://github.com/pehapkari/pehapkari.cz/pull/486">the PR to Pehapkari.cz website</a>.</p>
<img src="/assets/images/posts/2018/latte-twig/diff.png" class="img-thumbnail">
<h2 id="twig-to-latte-converter">Twig To Latte Converter?</h2>
<p>Are you Latte fan and do you want to migrate to Latte? Let's do this! There <a href="https://github.com/symplify/symplify/tree/a6b7c71a90fd984d2f31c5ed28957e2927608001/packages/LatteToTwigConverter/tests/LatteToTwigConverterSource">is a test set of both engines</a>, that can help you to start.</p>
<p>All you need to do is create the <strong>exact reverse of the match to replace rules</strong>:</p>
<p>For example from <a href="https://github.com/symplify/symplify/blob/master/packages/LatteToTwigConverter/src/CaseConverter/ConditionCaseConverter.php"><code>Symplify\LatteToTwigConverter\CaseConverter\ConditionCaseConverter</code></a>:</p>
<pre><code class="language-php"># Twig to Latte
use Nette\Utils\String;

$content = Strings::replace($content, '{% else %}', '#{else}#');</code></pre>
<p>↓</p>
<pre><code class="language-php"># Latte to Twig
use Nette\Utils\String;

$content = Strings::replace($content, '#{else}#', '{% else %}');</code></pre>
<p><br><br></p>
<h2 id="go-out-and-play">Go Out and Play</h2>
<p>In the end, I'd like to encourage you to do more of such experiments. I meet many programmers over meetups all across Europe and they often don't have space - either the time in work or they won't allow themselves - to do such experiments.</p>
<p>In my open-source experience, these experiments give you the most knowledge. Instead of choosing the first solution because <em>I don't have time and I have to deliver the value</em>, I tried 3-4, tested them and then picked the one that worked the best. It was not the first one of course, and even if it was, I'd be much more convinced the solution is right instead of just blindly believing it.</p>
<p>I learned a lot about regular expressions, about delimiters and universal capturing groups (easter egg: seek &quot;http&quot; in the source code and you'll find all the tips I found and found useful) thanks to StackOverflow and <a href="https://regex101.com">regex101.com</a>. I also must thank Jáchym Toušek and Ondra Mirtes with PHPStan who got me more engaged in regular expressions in a useful and not-so-frustrating way.</p>
<p><br>
<br></p>
<p><strong>Free your mind and experiment! It's the best way to get better every iteration.</strong></p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/07/05/how-to-convert-latte-templates-to-twig-in-27-regular-expressions</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 05 Jul 2018 00:00:00 +0000</pubDate>
                                    <updated>2019-03-01UTC00:00:000</updated>
                    <atom:updated>Fri, 01 Mar 2019 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Fri, 01 Mar 2019 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/07/05/how-to-convert-latte-templates-to-twig-in-27-regular-expressions#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Cluster: More Interactive than a Book, Deeper than a Post ]]></title>
                <link>https://tomasvotruba.com/blog/2018/07/02/cluster-more-interactive-than-book-deeper-than-post</link>
                <description><![CDATA[ <p>I started this 2-part series by <a href="/blog/2018/06/28/dont-read-books/">Don't Read Books</a>. What should we do instead?
<br><br>
There is no silver bullet, but I have few proposals that anyone sharing knowledge in text form can do to rise quality of the content better and make readers get more out of it in the long-term.
<br>
It will not earn as much money as &quot;bestselling&quot; books, but if you value education more than money like me, keep on reading.</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="tested-content-is-easier-to-keep-up-to-date">Tested Content is Easier To Keep Up-To-Date</h2>
<p>Is there a code in your post or chapter, piece of text? It <a href="/blog/2019/09/16/why-software-articles-must-be-ci-tested/">should be tested</a>. Back to our Symfony book. Imagine you buy it, you read it and there is section about forms. But thanks to <em>everlasting deprecation</em> effect, you happen to use Symfony 4.1, but book is about Symfony 3.0, so it doesn't work and you've just wasted 20 $ in money for a book and hundreds $ in time investment.</p>
<p>Now imagine this post would be tested, with unit tests and Travis CI that would run daily to make sure the content is still valuable in the present. The day new Symfony with BC break is released, the new version of post is published. And that works super easily for version 4, version 5, version 6...</p>
<p>Btw, I know you can find up-to-date know-how for Symfony Forms in the documentation, but this is just an example. It could be any more complex non-documented code, like writing a <a href="/blog/2018/05/28/build-your-first-symfony-console-application-with-dependency-injection-under-4-files/">Console application with Dependency Injection</a>.</p>
<h2 id="let-people-into-your-hearth">Let People Into Your Hearth</h2>
<p>...or at least your thoughts. <strong>A book content is one-man-show, with one-man ideas</strong> and I think that is dangerous, unless we talk about God that helps us all and everyone can agree on that. I don't think my ideas are the best and that I know everything (or anything). I just want to open discussion in the best direction I believe at the moment.</p>
<blockquote class="blockquote text-center">
    "The community of people knows much more<br>
    than the most skilled person in it."
</blockquote>
<p>If people cooperate and talk to each other, they can bring much more value and higher quality solutions.
That's probably the reason companies have more than 1 employee, right? :)</p>
<p>How to allow this in written content? <strong>Simple - allow comments.</strong> Allow them all the time, <a href="/blog/2018/01/29/how-to-deal-with-haters-in-comments-and-github/">without censorship of opposed ideas</a>.</p>
<p>That way people can express themselves and improve content to be:</p>
<ul>
<li>community-proofed</li>
<li>validated by more than 1 person</li>
<li>questioned if that is really the best there is (at the time of reading)</li>
</ul>
<h2 id="let-people-build-the-content">Let People Build the Content</h2>
<p>If you allow comments, it's the first step to improve the content. But most people read the content and not the comments - by naturally, you need to read the post, so you could understand comments under it.</p>
<p>What if the readers could change the content? And what if you make it as easy for them as <a href="https://github.com/TomasVotruba/tomasvotruba.com/edit/master/source/_posts/2018/2018-06-28-dont-read-books.md">clinking a link</a>.</p>
<p>That way the content is cooperative work of more people, more authors would be happy to share it and get credit for it. 3 posts about Symfony Console <a href="https://www.linkedin.com/pulse/proven-practices-process-stan-garfield">proven practice</a> by 3 different authors can never be as good as 1 written by 3 authors together.</p>
<div class="text-center mb-3">
    <img src="/assets/images/posts/2018/no-books/contributors.png" class="img-thumbnail"><br>
    This is number of contributors to this blog. It's not like we're writing together all the time, but I'm very happy it's more than 0, much more. Thank <a href="https://github.com/TomasVotruba/tomasvotruba.com/graphs/contributors">you all</a>!
</div>
<h2 id="levelling-up-tailored-to-your-personal-needs">Levelling Up Tailored to Your Personal Needs</h2>
<p>Each of us has different experience, past, motivation and know-how. It makes no sense that all of us read whole book about Symfony.</p>
<p>Also each skill has a group - <em>a cluster</em> of knowledge of various levels that you can master.</p>
<div class="text-center mb-3">
    <img src="/assets/images/posts/2018/no-books/hollocracy.png" class="img-thumbnail" width="500"><br><em>A cluster pattern in <a href="https://sylius.com/blog/holacracy-our-future-is-teal">Holacracy organization</a>
</em></div>
<p>It makes no sense that everyone would read the same book from beginning till the end. Instead you can start at level 5, I can start
at level 2, and somebody only wants the level 10, if there is something new he can learn in the field he thinks he masters already.</p>
<p>With a cluster of posts, you can see clearly where to start and what you want to read.</p>
<h3 id="the-next-nearest-skill">The Next Nearest Skill</h3>
<p>This is connected to <em>prerequisite skill</em> system. Each skill is followed by the nearest one that is super easy to learn thanks to previous experience. Compare 2 learning scenarios:</p>
<ul>
<li>You drive a bike, then motorcycle, then a car and than a bus.</li>
<li>You drive a bike and jump directly to the bus.</li>
</ul>
<p>Which can build on previous experience and utilize neuron patterns faster?</p>
<h2 id="inform-clearly-about-deprecations-and-changes">Inform Clearly about Deprecations and Changes</h2>
<p>The last but most least, people often return to content they believe in and look for iterative improvement in it. That's why we use StackOverflow and see answers that worked in 2015 to have 100 vote, but also there is a new one in 2018, that has already 20 votes and in 2020 there will come even better one...</p>
<p>That's why I try to make clear what and how changed right in the beginning on such posts.</p>
<p><a href="/blog/2017/12/17/new-in-symplify-3-doc-block-cleaner-fixer/"></p>
<img src="/assets/images/posts/2018/no-books/updated-post.png" class="img-thumbnail">
<p></a></p>
<p>And also not to promote outdated deprecated know-how:</p>
<p><a href="/blog/2017/06/19/symbiotic-controller-nette-presenter-with-freedom/"></p>
<img src="/assets/images/posts/2018/no-books/deprecated-post.png" class="img-thumbnail">
<p></a></p>
<p>You might see this as redundant work and that I'm a nerd (guilty!), but <strong>I'm super-focused on you, my readers and I want you to understand every change that happens so you can learn fast in safe environment</strong>.</p>
<p><br></p>
<h2 id="the-clusters-in-progress">The Clusters in Progress</h2>
<p>First, I started this series as to show you the idea of <a href="/clusters">clusters</a> on my site, but then it went much further beyond that.</p>
<p>Check the idea and feedback me, what do you think about that.</p>
<p><br><br></p>
<p>Happy clustering!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/07/02/cluster-more-interactive-than-book-deeper-than-post</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 02 Jul 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/07/02/cluster-more-interactive-than-book-deeper-than-post#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Don&#039;t Read Books ]]></title>
                <link>https://tomasvotruba.com/blog/2018/06/28/dont-read-books</link>
                <description><![CDATA[ <p>You're probably thinking: &quot;He's joking, right? That's kind of that title, that is a parody to show us we should do the opposite. You won't get us again, Tomas.&quot;
<br>
<br>
<strong>No, I really don't think we should read books nor feel bad for not reading them</strong>. And now talk about those non-fiction books with the knowledge that readers want to use in their lives.
<br>
<br>
Do you still think this is sarcasm? Keep on reading.</p> ]]></description>
                <content:encoded><![CDATA[ <div class="text-center">
    <img src="/assets/images/posts/2018/no-books/fahrenheit-book.jpg" class="img-thumbnail"><br><em>Don't worry, it's not illegal to read books yet...</em>
</div>
<p><br></p>
<p>I've read <a href="/blog/2018/04/12/the-best-5-of-256-bloghacks-book/">256 Bloghacks</a>, <a href="/blog/2017/09/25/3-non-it-books-that-help-you-to-become-better-programmer/">Steal Like an Artist, Deep Work, No More Mr. Nice Guy</a>, <a href="/blog/2018/06/18/14-surprising-tip-from-selling-is-human-to-influence-others/">Selling is Human</a> and <a href="/blog/2017/12/04/life30-what-will-you-do-when-ai-takes-over-the-world/">Life 3.0</a> during last 2 years and a couple more I haven't written about yet.</p>
<p>I mostly love books.</p>
<p>I just don't think <strong>it's the best-written format to learn from and that such format can actually hurt learning</strong>. It's not the author, the topic, but really <strong>the historical format to blame</strong>.</p>
<h2 id="single-person-monolog">Single Person Monolog</h2>
<p>When you read a book, you absorb information without much critical thinking. There is no space to express disagreement, to pose a question, to clarify, to add a tip of your own. So we get used to just read, be silent and absorb. Can you recall any other situation on your life, where you absorb information without a doubt? I can't.</p>
<p>And be sure to let me know <a href="#comments">in the comments</a> if you <a href="http://www.paulgraham.com/disagree.html">disagree</a>.</p>
<h2 id="best-seller-vs-best-read">Best-Seller vs. Best-Read</h2>
<p>I'm known to be a minimalist so my bookshelf bears only 5 books, while all my other friends have 20-30 books. I always wondered &quot;do they read so fast, wow they're smart&quot;? So I was curious:</p>
<ul>
<li>&quot;Which are your favorite books?&quot;</li>
<li>&quot;What do you read now?&quot;</li>
<li>&quot;Well, how many have you read actually?&quot;</li>
</ul>
<p>The answers vary a bit, but the last question usually hits the nail on the head. It's barely a 1/4 on average.</p>
<h3 id="buy-a-book-to-have-friends">Buy a Book to Have Friends</h3>
<p>Then I realized that &quot;bestseller&quot; has nothing to do with the content. It's like having a cool free application in your phone that you never use or famous &quot;friend&quot; on Facebook you never write but anyone can see you're &quot;friends&quot;.</p>
<p>Hype beats knowledge, at least at the time being. <strong>It's less important the how book really is valuable to the reader than how cool it is, how nice cover it has, how many of my friends and celebrities recommend it</strong>.</p>
<p>I personally know many technical books from Czech authors that people bought, but never read. Which makes me sad for both sides, the reader and the author, and also for the trees that will now lie dead on a shelf made from another tree.</p>
<h2 id="the-longer-the-vaguer">The Longer, The Vaguer</h2>
<p>Imagine this post would have 20 pages. I would go on detail, start to talk about my day and how everyday life is connected to reading books and what I read in my childhood and formed me to who I am... blah blah blah.</p>
<p>It's called state of <em>flow</em> and you can see it very clearly when somebody gives a talk that lasts 30+ minutes. It's not a rule, but the easiest way to spot it in the public.</p>
<p>Why? Because <a href="https://www.ted.com/talks/mihaly_csikszentmihalyi_on_flow">flow makes people happy</a> and they <a href="https://en.wikipedia.org/wiki/Flow_(psychology)">thoroughly focus on the present, hours seem to pass by the minute</a>.</p>
<blockquote class="blockquote text-center">
    "Give me a man a week to finish a 4-hour work – he'll finish it in a week.
    <br>
    Give him 4 hours to finish a week work – he'll finish it in 4 hours."
</blockquote>
<p>One example for all: have you ever read my bachelor thesis about polyphasic sleep that has 50+ pages? Me neither, so I made <a href="/blog/2018/02/12/sleep-shorter-to-get-62-percent-smarter/">a short post</a>.</p>
<h2 id="the-book-chapter-format-vs-skill-leveling">The Book Chapter Format vs. Skill Leveling</h2>
<p>The book format is great for stories. There is a beginning, plot... well, the classic <em>Hero's Journey</em>.</p>
<img src="/assets/images/posts/2018/no-books/heros-journey.png" class="img-thumbnail" width=500>
<p>It works for stories, but what about skills and know-how? Let's say you have a new job and you want to learn a new framework - Symfony.
Do you buy &quot;a Symfony book&quot; and read it? And then you know Symfony? You might and you'll be feeling great about it.</p>
<div class="text-center">
    <img src="/assets/images/posts/2018/no-books/know.jpg" class="img-thumbnail"></div>
<blockquote class="blockquote text-center">
    "It's interesting how the brain works when you have no clue."
    <footer class="blockquote-footer">Jakob Oberhummer at <a href="https://www.meetup.com/viennaphp/events/djtpjpyxjbcc/">Vienna PHP</a></footer></blockquote>
<p>But what do so much of random education (it has its meaning, but not here) if your first task is to create a contact form? Maybe there are <a href="https://github.com/pehapkari/awesome-symfony-education#forms">posts about writing forms that go beyond the documentation</a> that take you 20 minutes to read.</p>
<p>Having a whole book would probably confuse you and make you feel great at the same time.</p>
<h2 id="everlasting-deprecation">Everlasting Deprecation</h2>
<p>Like <a href="/blog/2017/10/30/what-can-you-learn-from-menstruation-and-symfony-releases/">menstruation</a>, the cycle of life is very similar to the cycle of knowledge - or to <em>a paradigm</em> if you prefer.</p>
<img src="/assets/images/posts/2018/no-books/seasons.jpg" class="img-thumbnail" width=500>
<p>Think of PHP application you work on right now. You start fresh and with PHP 7.2, with the newest version of Symfony 4.1 and all goes great. Do you think that in 3 years you'll be using PHP 8.0 and Symfony 5.0 or rather stick to the old ones? And what about in next 3 years?</p>
<p>I'd pick first because the trend is they're faster, easier to learn and more intuitive to use.</p>
<p>Using old one (for whatever business reasons) is called <em>vendor lock</em> or <em>legacy code</em>.</p>
<img src="/assets/images/posts/2018/no-books/legacy.png" class="img-thumbnail" width=500>
<p>Same vendor lock happens to knowledge. You can see it the most in school systems, where 40-year-old people teach 15-year-olds their &quot;up-to-date&quot; know-how. People write PHP 7 as PHP 5.3 because there are so many old books out there about PHP 5.3.</p>
<h3 id="wikipedia-2010-in-2018">Wikipedia 2010 in 2018?</h3>
<p><strong>Imagine that Wikipedia would be published just once 10 years as a book</strong>. So today, in 2018, somebody would quote a 8-year-old information in his school essay. It's crazy, right? But that's how books work naturally.</p>
<p><br><br></p>
<p>Yet, is there a better way to share <strong>inter-connected deep knowledge than in books that would be longer a single standalone post</strong>?</p>
<p>We'll explore few ideas in the following post.</p>
<p><br></p>
<p>Happy reading and let me know in the comments what you think about all this.</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/06/28/dont-read-books</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 28 Jun 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/06/28/dont-read-books#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Let Changelog Linker Generate CHANGELOG.md for You ]]></title>
                <link>https://tomasvotruba.com/blog/2018/06/25/let-changelog-linker-generate-changelog-for-you</link>
                <description><![CDATA[ <p>Do you have an open-source project on Github? Do you want your users to know about new features and changes without you writing posts about it?
Do you <a href="https://keepachangelog.com/en/1.0.0">keep a changelog</a>? Do you struggle with keeping it up-to-date and descriptive and with all the links to all merged pull-requests?
<br>
<br>
Yes? Then you'll love <em>Changelog Linker</em>. A PHP CLI tool that does all this boring work for you.</p> ]]></description>
                <content:encoded><![CDATA[ <p>Changelogs have many forms.</p>
<p>From standard <a href="https://keepachangelog.com/en/1.0.0">keepachangelog.com</a> with <em>Added</em>, <em>Changed</em>, <em>Fixed</em> and <em>Removed</em>:</p>
<img src="/assets/images/posts/2018/generate-changelog/keepachangelog.png" class="img-thumbnail">
<p>Through <a href="https://raw.githubusercontent.com/symfony/symfony/master/CHANGELOG-4.1.md">Symfony dump</a>:</p>
<img src="/assets/images/posts/2018/generate-changelog/symfony.png" class="img-thumbnail">
<p>Over <a href="https://github.com/phpstan/phpstan/releases/tag/0.10">PHPStan Release notes</a>:</p>
<img src="/assets/images/posts/2018/generate-changelog/phpstan.png" class="img-thumbnail">
<h2 id="why-is-every-changelog-different">Why is Every Changelog Different?</h2>
<p>There is a standard recommendation in <a href="https://keepachangelog.com/en/1.0.0">keepachangelog.com</a>, so it can all be the same, right?
I think it's because <strong>there is no easy way to generate such changelog</strong>. And by easy I mean automated = 1 click solution. And we don't even talk about <a href="/clusters/#monorepo-from-zero-to-hero/">monorepo</a> changelog yet.</p>
<p>When I looked on Github <a href="https://github.com/symplify/symplify/issues/841">for inspiration</a>, I found only <a href="https://github.com/github-changelog-generator/github-changelog-generator">github-changelog-generator</a> - that has over 4600 stars on Github. Yet, it still doesn't work with <em>Added</em>, <em>Changed</em> etc. categories and requires labeling issues and pull-requests and adding milestones. <strong>I wanted to save time, not to add extra work.</strong></p>
<h2 id="category-monorepo-support">Category + Monorepo Support?</h2>
<p>All I wanted to do is run 1 command and update <code>CHANGELOG.md</code> with content like this:</p>
<pre><code class="language-markdown">## [v4.4.0] - 2018-06-03

### Added

#### BetterPhpDocParser

- [#811] Add multi-types method support
- [#810] Add `AbstractPhpDocInfoDecorator`
- [#809] Allow `PhpDocInfoFactory` extension without modification
- [#807], [#808] Add `replaceTagByAnother()`
- [#806] Add `getParamTypeNodeByName()`
- [#804] Add `hasTag()` to `PhpDocInfo` and other improvements
- [#801] Add `PhpDocModifier` class

#### CodingStandard

- [#851] Add _ support to PropertyNameMatchingTypeFixer
- [#845] Extended RemoveEmptyDocBlockFixer fix
- [#836] Improve cognitive complexity error, Thanks to [@enumag]
- [#823] Add Cognitive complexity sniff</code></pre>
<p>I aim for 80/20 rule = let 80 % of manual work, manual linking, collecting of <em>Added</em>, grouping by <em>CodingStandard</em> package etc. handle program for us. Then we can polish the rest 20 %, like adding a description to the release or moving PR that the program failed to classify.</p>
<p>I imagined something like:</p>
<pre><code class="language-bash">vendor/bin/changelog-linker dump-mergers</code></pre>
<p>That would be much better than looking on Github, going through commits and putting it all together manually, right? Or bare git dump that no-one except you orients in.</p>
<p>Well, 2 months of work later and after detailed feedback from <a href="https://github.com/MattCzerner">Matouš Czerner</a> and <a href="https://github.com/vitek-rostislav">Rosťa Vítek</a> whom I'm very thankful, a <a href="https://github.com/symplify/changeloglinker">Symplify\ChangelogLinker</a> package was born.</p>
<h2 id="5-steps-to-your-generated-changelog">5 Steps to Your Generated CHANGELOG</h2>
<ol>
<li>
<p>Install it</p>
<pre><code class="language-bash">composer require --dev symplify/changelog-linker</code></pre>
</li>
<li>
<p>Add target to your <code>CHANGELOG.md</code></p>
<pre><code class="language-markdown"># CHANGELOG

This is a changelog, you know?

&lt;!-- changelog-linker --&gt;</code></pre>
<p>There will be dumped the list of changes.</p>
</li>
<li>
<p>Run it dry</p>
<pre><code class="language-bash">vendor/bin/changelog-linker dump-merges --dry-run</code></pre>
<p>to see this preview:</p>
<pre><code class="language-markdown">## Unreleased

- [#868] [ChangelogLinker] Add ChangeTree to manage merge messages
- [#867] [ChangelogLinker] Change Worker registration from implicit to explicit
- [#864] [MonorepoBuilder] improve coverage
</code></pre>
</li>
<li>
<p>There are 2 more cool options: <code>--in-packages</code> and <code>--in-categories</code>. How to they work?</p>
<p>This...</p>
<pre><code class="language-bash">vendor/bin/changelog-linker dump-merges --dry-run --in-categories</code></pre>
<p>...will create:</p>
<pre><code class="language-markdown">## Unreleased

### Added

- [#868] [ChangelogLinker] Add ChangeTree to manage merge messages

### Changed

- [#867] [ChangelogLinker] Change Worker registration from implicit to explicit
- [#864] [MonorepoBuilder] improve coverage
</code></pre>
<p>And this...</p>
<pre><code class="language-bash">vendor/bin/changelog-linker dump-merges --dry-run --in-packages</code></pre>
<p>...will create:</p>
<pre><code class="language-markdown">## Unreleased

### ChangelgoLinker

- [#868] Add ChangeTree to manage merge messages
- [#867] Change Worker registration from implicit to explicit

### MonorepoBuilder

- [#864] improve coverage
</code></pre>
<p>Pro tip: you can combine them and set the priority by order:</p>
<pre><code class="language-bash">vendor/bin/changelog-linker dump-merges --dry-run --in-categories --in-packages
vendor/bin/changelog-linker dump-merges --dry-run --in-packages --in-categories</code></pre>
</li>
<li>
<p>When you're ready, run dump to <code>CHANGELOG.md</code>:</p>
<pre><code class="language-bash">vendor/bin/changelog-linker dump-merges --in-packages --in-categories</code></pre>
</li>
</ol>
<h2 id="do-you-have-existing-code-changelog-md-code">Do You Have Existing <code>CHANGELOG.md</code>?</h2>
<p>The Changelog Linker doesn't work only for new changes, <strong>it can also link your existing file</strong>:</p>
<pre><code class="language-bash">vendor/bin/changelog-linker linkify</code></pre>
<h2 id="protip-use-composer-script-and-forget">ProTip: Use Composer Script and Forget</h2>
<p>Composer scripts are handy, if you use CLI command with many options and <strong>you don't want to remember and type them over and over again</strong>.</p>
<p>This is how I simplify my setup for Symplify <code>CHANGELOG.md</code>:</p>
<pre><code class="language-json">{
    "scripts": {
        "changelog": "vendor/bin/changelog-linker dump-merges --in-categories --in-packages"
    }
}</code></pre>
<p>So all I need to do is run...</p>
<pre><code class="language-bash">composer changelog</code></pre>
<p>...and the <code>CHANGELOG.md</code> file is updated. Pretty cool, huh?</p>
<p>Find more about Composer scripts in <em><a href="https://blog.martinhujer.cz/have-you-tried-composer-scripts">Have you tried Composer Scripts? You may not need Phing</a></em> post by amazing Martin Hujer.</p>
<p><br></p>
<p>That's it.</p>
<p><br></p>
<p><strong>For more features like linked <em>thanks</em>, package aliases or linked words see <a href="https://github.com/symplify/changeloglinker">README</a>.</strong></p>
<p><br></p>
<p>Enjoy your new free time!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/06/25/let-changelog-linker-generate-changelog-for-you</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 25 Jun 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/06/25/let-changelog-linker-generate-changelog-for-you#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Open Source is Selfish ]]></title>
                <link>https://tomasvotruba.com/blog/2018/06/21/open-source-is-selfish</link>
                <description><![CDATA[ <p>Most people I meet see <em>open-source</em> as &quot;putting all your work free to the public&quot;. Do you think that I'd love it so much if that was the case?
<br><br>
That's why I want to talk about the selfish benefits of open-source, that come first, almost always, but just a few people can see them. And that <em>selfish open-source</em> is a good thing.</p> ]]></description>
                <content:encoded><![CDATA[ <p>There are 2 major views I see in open-source: <em>a victim</em> and <em>a selfish egoist</em>.</p>
<h2 id="open-source-as-a-victim">Open-Source as a Victim</h2>
<p>We had a panel discussion at <a href="http://www.phplive.cz">PHPLive 2018</a>  about the pros and cons of making your code open-source and <strong>it surprised me how negatively open-source is viewd</strong>. This might be related mainly to Czech &amp; Slovak programmers, since we were raised victims by default in communism till 1993.</p>
<p>What am I talking about? That open-source code is something you do for the public, in your free time. You expect them to contribute to your project; in a way you expect the code to be written. You feel like a boss and you own all the keys.</p>
<p>People are not listening to you, you have to raise them, you do it for them, you help them, you take care of them. You were the chosen one and you know the best, because you have programmed for much longer than them, you're older and you earn at least triple their income.</p>
<p>They should be thankful!</p>
<p><br></p>
<p>You see the victim?</p>
<h3 id="how-does-it-work">How Does it Work?</h3>
<p>I'm exaggerating a bit, but this can easily happen to anyone, due to the <em>power trip effect</em>. It has happened to me before and I still have to be careful not to give in to strong emotions. <strong>This is the best way to drive people away, trust me.</strong></p>
<h2 id="open-source-as-a-selfish-act">Open-Source as a Selfish Act</h2>
<p><a href="http://jakubkratina.cz">Jakub Kratina</a> is a friend of mine, who organizes livestreams in Péhápkaři. He helped me a lot to become a better businessman and - little may he know - about <em>self-love</em> in open-source.</p>
<p>One day I was frustrated with <a href="https://github.com/symplify/easy-coding-standard">EasyCodingStandard</a> - I wanted to have the best (the all) features and resolve all the issues as fast as possible <em>to make people happy</em>. <strong>Inside I felt I want to do something else.</strong> Instead, I wanted to migrate from magic in extension to explicit services. I felt like those people are stopping me from being happy, I was a victim of all those issues.</p>
<p>Luckily I talked with Jakub and he told me very wise words (I even printed on my <a href="https://www.danpink.com/pinkcast">love board</a> later):</p>
<p>&quot;It's your open-source, your code, your passion, and your work. If you want to do it, do it. What is the point of doing work if it's not making you happy?&quot;</p>
<p>I realized a very simple point:</p>
<h3 id="the-open-source-work-has-to-make-you-happy">The Open-Source Work Has To Make You Happy</h3>
<p>And if not, I'm doing something wrong and I have to change that, or I will burn out. This helped me to <a href="https://github.com/symplify/symplify/pull/660">push my idea</a> to a PR a few days later at Epicon.</p>
<p><br></p>
<h2 id="there-is-more-than-meets-the-eye">There is More than Meets the Eye</h2>
<p>How does open-sourcing makes your code grow, get your company to hire great developers, or give you a super boost in programming skills?
More posts to come on this topic.</p>
<img src="https://pehapkari.cz/assets/images/conferences/prague-2018/logo.png" class="img-thumbnail">
<p>Oh, you can't wait that long and want to challenge my points in person? I'll have a talk <em>Why Your Company Loses Money By Not-Open-Sourcing</em> on <a href="https://phpprague.cz">PHPPrague</a> this Saturday. Be sure to come!</p>
<p><br></p>
<p>You can go further on <a href="https://jlongster.com/Why-Frequently-Absent-Open-Source">Why I'm Frequently Absent from Open Source
</a> by James Long.</p>
<p><br></p>
<p>Happy code-loving!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/06/21/open-source-is-selfish</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 21 Jun 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/06/21/open-source-is-selfish#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ 14 Surprising Tips from Selling is Human to Influence Others ]]></title>
                <link>https://tomasvotruba.com/blog/2018/06/18/14-surprising-tip-from-selling-is-human-to-influence-others</link>
                <description><![CDATA[ <p>Recently, I've read <a href="https://www.youtube.com/watch?v=nKrBitIQrgo&amp;feature=youtu.be&amp;t=290">Selling is Human</a> by Daniel Pink. He's famous for <a href="https://www.danpink.com/pinkcast">Pinkcast</a> - an espresso of knowledge. I like him, because he's often right to the point, with examples, stories, and science.
<br><br>
What can we learn about selling?
Lucky for you, you don't have to read the whole book - here are the top 10 points I found very useful.</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="how-is-selling-useful-to-programmers">How is Selling Useful to Programmers?</h2>
<p><em>Selling</em> is not just you buying a cup of coffee or selling a computer on the online store you made. Selling is rather an abstract term, to sell your ideas, to persuade people around you. But not just to make them abide you but to cooperate with you. <strong>To be a leader people love.</strong></p>
<p>You probably think &quot;I'm a programmer, I don't handle selling, I just do my job by making the best code I can.&quot;</p>
<p>Let me give you few examples when I had to <em>sell</em> to be able to write the best I can:</p>
<ul>
<li>When I wanted to write tests in an application with 0 % coverage a get paid for it.</li>
<li>When I wanted to write open-source code and be paid for it.</li>
<li>When I wanted to convince other that Doctrine is wiser to use than writing their own ORM.</li>
<li>When I have a talk about ECS and I want to people starting using coding standard even thou got burned in the past by complexity of other tools.</li>
</ul>
<p>And so on. I believe you can think of 2 ideas right know where <strong>do you want to sell your ideas better</strong>.</p>
<p>How does <em>Selling is human</em> can help us with it?</p>
<p>Take following quotes as list of notes you'd make by reading the whole book. Save time to win knowledge.</p>
<h2 id="1-selling-win-win-in-long-term">1. Selling = Win-Win in Long Term</h2>
<img src="/assets/images/posts/2018/selling/quote.png" class="img-thumbnail">
<p><br></p>
<h2 id="2-self-boost-before-the-pitch">2. Self-Boost Before the Pitch</h2>
<blockquote class="blockquote">
    "I'm the best. This is going to be a breeze," and that might give you a short-term emotional boost. <strong>But if you instead ask, "Can I make a great pitch?" the research has found that you provide yourself something that reaches deeper and lasts longer.</strong>
    <br><br>
    You might respond to yourself "Well, yes, I can make a great pitch. In fact, I've probably pitched ideas at meetings two dozen times in my life." You might remind yourself of your preparation. "Sure, I can do this. I know this material inside out and I've got some great examples to persuade the people who might be skeptical." You might also give yourself specific tactical advice. "At the last meeting like this, I spoke too quickly - so this time I'll slow down."
</blockquote>
<hr />
<blockquote class="blockquote">
    "Questioning self-talk elicits the reasons for doing something and reminds people that many of those reasons come from within."
</blockquote>
<hr />
<blockquote class="blockquote">
    Ask yourself: "Can I move these people?" As social scientists have discovered, interrogative self-talk is often more valuable than the declarative kind. <strong>But don't simply leave the question hanging in the air like a lost balloon. Answer it - directly and in writing. List 5 specific reasons why the answer to your question is yes. These reasons will remind you of the strategies that you'll need to be effective on the task, providing a sturdier.</strong>
</blockquote>
<p><br></p>
<h2 id="3-too-much-positive-harms">3. Too much Positive Harms</h2>
<blockquote class="blockquote">
    Once positive emotions outnumbered negative emotions by 3:1 - that is, for every three instances of feeling gratitude, interest, or contentment, they experienced only one instance of anger, guilt, or embarrassment - people generally flourished. Those below that ratio usually did not. But Fredrickson and Losada also found that positivity had an upper limit. <storng>Too much can be as unproductive as too little. Once the ratio hit about 11 to 1, positive emotions began doing more harm than good.</storng></blockquote>
<p><br></p>
<h2 id="4-working-with-feedback-that-hurts">4. Working with Feedback that Hurts</h2>
<p>I wrote <a href="/blog/2018/01/29/how-to-deal-with-haters-in-comments-and-github/">How to Deal With Haters in Comments and Github</a> a while ago. And Daniel Pink shows 2 tips that can be added there right away:</p>
<blockquote class="blockquote">
    When something bad occurs, ask yourself three questions - and come up with an intelligent way to answer each one "no": 1. Is this permanent? Bad response: "Yes. I've completely lost my skill for moving others." Better response: "No. I was flat today because I haven't been getting enough sleep." 2. Is this pervasive?"
</blockquote>
<blockquote class="blockquote">
    The more you explain bad events as temporary, specific, and external, the more likely you are to persist even in the face of adversity.
</blockquote>
<p><br></p>
<h2 id="5-compare-give-a-context-to-bare-phrases">5. Compare, Give a Context to Bare Phrases</h2>
<p>A blind man was collecting money on the street with a sign: <em>I am blind</em>. A researcher goes around and adds 4 words: <em>It is spring time and</em>. It results in:</p>
<p><strong>It is spring time and</strong>
<br>
<strong>I am blind</strong></p>
<blockquote class="blockquote">
    That's why the most essential question you can ask is this: Compared to what?
</blockquote>
<p><br></p>
<h2 id="6-potential-with-imagination-beats-real-achievements">6. Potential With Imagination beats Real Achievements</h2>
<blockquote class="blockquote">
    People often find potential more interesting than accomplishment because it's more uncertain, the researchers argue. That uncertainty can lead people to think more deeply about the person they're evaluating - and the more intensive processing that requires can lead to generating more and better reasons why the person is a good choice.
    <br><br>
    So next time you're selling yourself, don't fixate only on what you achieved yesterday. Also, emphasize the promise.
</blockquote>
<p><br></p>
<h2 id="7-juices-over-numbers">7. Juices over Numbers</h2>
<blockquote class="blockquote">
I've learned that <strong>rational questions are ineffective for motivating resistant people</strong>. <br>
Instead, I've found that <strong>irrational questions actually motivate people better</strong>.
</blockquote>
<p><br></p>
<h2 id="8-focus-on-roots-of-motivation-instead-of-blaming">8. Focus on Roots of Motivation instead of Blaming</h2>
<p>Your daughter is about to have a test tomorrow, but she's procrastinating so she might fail.
You ask her: &quot;On scale 1 to 10, how confident do you feel you'll make the test?&quot;</p>
<p>&quot;I guess 4&quot;, she replies.</p>
<blockquote class="blockquote">
    "Why didn't you pick a lower number?" This is the question that catches everybody off guard," Pantalon writes in his book Instant Influence.
    <br><br><strong>She moves from defending her current behavior to articulating why, at some level, she wants to behave differently</strong>. And that says Pantalon, allows her to clarify her personal, positive, and intrinsic motives for studying, which increases the chances she actually will. So, on a scale of 1 to 10, how ready are you to try Pantalon's two-question technique? And why isn't your number lower?"
</blockquote>
<p><br></p>
<h2 id="9-how-was-em-the-elevator-pitch-em-born">9. How was <em>the Elevator Pitch</em> Born?</h2>
<img src="/assets/images/posts/2018/selling/elevator-pitch.jpg" class="img-thumbnail">
<blockquote class="blockquote">
    One afternoon, he gathered convention-goers for a demonstration. He climbed onto the platform and directed an assistant to hoist the elevator to its top height, about three stories off the ground. Then, as he stood and gazed down at the crowd, Otis took an ax and slashed the rope that was suspending the elevator in midair.
    <br><br>
    The audience gasped. The platform fell. But in seconds, the safety brake engaged and halted the elevator's descent. Still alive and standing, Otis looked out at the shaken crowd and said, "All safe, gentlemen. All safe."
</blockquote>
<p><br></p>
<h2 id="10-langauge-hacking">10. Langauge Hacking</h2>
<p>Daniel shares a link to <a href="http://www.danpink.com/pitch">Get ready for your pitch</a> and also talks about <strong>1-word pitch</strong>. What's that?</p>
<ul>
<li>Google - &quot;search&quot;</li>
<li>Facebook - &quot;social networks&quot;</li>
<li>Rector - &quot;instant upgrades&quot;</li>
<li>Your-project - ?</li>
</ul>
<p>People need to associate yours with <strong>the 1 word</strong>. Pick it and take it!</p>
<p><br></p>
<h2 id="11-should-i-be-the-first-or-the-last-to-pitch-or-speak">11. Should I be the First or the Last to Pitch or Speak?</h2>
<blockquote class="blockquote">
    "Go first if you're the incumbent, last if you're the challenger. In competitive sales presentations, where a series of sellers make their pitches one after another, the market leader is most likely to get selected if it presents first, according to Virginia Tech University researchers. But for a challenger, the best spot, by far, is to present last."
</blockquote>
<p>How widely this applies to other settings isn't clear from the research, but in general, <strong>the middle is the place you're most overseen</strong>.</p>
<p><br></p>
<h2 id="12-329-over-80">12. 329 over 80 %</h2>
<blockquote class="blockquote">
    Granular numbers are more credible than coarse numbers. A University of Michigan study asked participants to estimate the battery life of two GPS devices. One device claimed to have a battery life of "up to 2 hours"; the other had an identical, but more finely grained claim of "up to 120 minutes." Participants estimated the first battery would last 89 minutes, but the second would last longer - 106 minutes.
</blockquote>
<p><br></p>
<h2 id="13-rejection-is-an-offer">13. Rejection is an Offer</h2>
<blockquote class="blockquote">
    "But he's unlikely to say only that. He's more likely to say, "Sorry, I can't give two hundred dollars." That's an offer."
</blockquote>
<p><br></p>
<h2 id="14-improvisation-together">14. Improvisation Together</h2>
<blockquote class="blockquote">
    Improv artists have long understood that helping your fellow performer shine helps you both create a better scene. <strong>Making your partner look good doesn't make you look worse; it actually makes you shine</strong>.
</blockquote>
<blockquote class="blockquote">
    "That's so interesting!" The maneuver gives her time to conjure a question, but it also spins the weather vane in a friendlier direction. And when she poses a question, I have to stop a moment, think, and offer an intelligent answer.
</blockquote>
<img src="/assets/images/posts/2018/selling/book.png" class="img-thumbnail">
<p><br></p>
<p>Do you want to get 53 more tips? <a href="https://www.amazon.com/Sell-Human-Surprising-Persuading-Influencing-ebook/dp/B00AO3K05S/ref=tmm_kin_swatch_0?_encoding=UTF8&amp;qid=&amp;sr=">Get free 1st chapter</a> to your Smartphone Kindle App and try it for yourself.</p>
<p><br></p>
<p>Happy reading!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/06/18/14-surprising-tip-from-selling-is-human-to-influence-others</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 18 Jun 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/06/18/14-surprising-tip-from-selling-is-human-to-influence-others#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Collector Pattern for Dummies ]]></title>
                <link>https://tomasvotruba.com/blog/2018/06/14/collector-pattern-for-dummies</link>
                <description><![CDATA[ <p>I wrote <em><a href="/blog/2018/03/08/why-is-collector-pattern-so-awesome/">Why is Collector Pattern so Awesome</a></em> a while ago, but I got feeling and feedback that it's way too complicated.
<br><br>
The pattern itself is simple, but put in framework context, it might be too confusing to understand.
<br><br>
That's why we look on collector pattern in minimalistic plain PHP way today.</p> ]]></description>
                <content:encoded><![CDATA[ <p>Let's say you have a simple <code>PriceCalculator</code> class that calculates a price for a product with a VAT:</p>
<pre><code class="language-php">class PriceCalculator
{
    public function calculate(Product $product): float
    {
        // compute vat
        $price = $product-&gt;getPrice() * 1.15;

        return $price;
    }
}</code></pre>
<p>Then we decide to have 50 % discount for admins:</p>
<pre><code class="language-diff"> class PriceCalculator
 {
     public function calculate(Product $product): float
     {
         // compute vat
         $price = $product-&gt;getPrice() * 1.15;

+        // discount for admin
+        if ($this-&gt;currentUser-&gt;getRole() === 'admin') {
+            $price *= 0.5;
+        }
+
         return $price;
     }
 }</code></pre>
<p>And another 20 % discount for students:</p>
<pre><code class="language-diff"> class PriceCalculator
 {
     public function calculate(Product $product): float
     {
         // compute vat
         $price = $product-&gt;getPrice() * 1.15;

         // discount for admin
         if ($this-&gt;currentUser-&gt;getRole() === 'admin') {
             $price *= 0.5;
         }

+        // discount for students
+        if ($this-&gt;currentUser-&gt;getOccupation() === 'student') {
+            $price *= 0.8;
+        }
+
         return $price;
     }
 }</code></pre>
<p>Our <code>PriceCalculator</code> grows and grows, our e-commerce platform expands all over Europe and we found out they have a different strategy to calculate price with VAT. How do we solve it?</p>
<p>&quot;Override the whole class and implements <code>calculate()</code> method for yourself.&quot;</p>
<pre><code class="language-php"> class UnitedKingdomPriceCalculator extends PriceCalculator
 {
     public function calculate(Product $product): float
     {
         // compute vat
         $price = $product-&gt;getPrice() * 1.15;

         return $price;
     }
 }</code></pre>
<p>That's an easy solution for the end-user. But it also means zero reusable code that leads to duplicated work. Imagine there will be 20 websites in the UK and <strong>each of them will have their own code to calculate price with VAT</strong>. 100 % similar code (if written correctly), because it applies to the whole country.</p>
<h2 id="sharing-is-caring">Sharing is Caring</h2>
<p>Instead, such UK solution can be one of many, that is openly shared.</p>
<ul>
<li>Do you need a UK price calculator? Plug it in.</li>
<li>Do you need a configurable discount based on role? Plug it in.</li>
<li>Do you need to decrease all price by 100 € if possible? Plug it in.</li>
</ul>
<p>No need to write it more than once for all of the e-commerce sites.</p>
<h2 id="how-does-that-look-in-the-code">How Does That Look in the Code?</h2>
<h3 id="1-turn-your-main-class-to-a-collector">1. Turn Your Main Class to A Collector</h3>
<pre><code class="language-php">class PriceCalculatorCollector
{
    /**
     * @var PriceCalculatorInterface[]
     */
    private $priceCalculators = [];

    /**
     * @param PriceCalculatorInterface[] $priceCalculators
     */
    public function __construct(array $priceCalculators)
    {
        $this-&gt;priceCalculators = $priceCalculators;
    }

    public function calculate(Product $product): float
    {
        $price = $product-&gt;getPrice();

        foreach ($this-&gt;priceCalculators as $priceCalculator) {
            $price = $priceCalculator-&gt;calculate($price);
        }

        return $price;
    }
}</code></pre>
<p>with interface decoupling:</p>
<pre><code class="language-php">interface PriceCalculatorInterface
{
    public function calculate(float $price): float;
}</code></pre>
<h3 id="2-converts-each-case-to-collected">2. Converts Each Case to Collected</h3>
<pre><code class="language-php">final class CzechVatPriceCalculator implements PriceCalculatorInterface
{
    public function calculate(float $price): float
    {
        return $price * 1.21;
    }
}</code></pre>
<pre><code class="language-php">final class AdminDiscountPriceCalculator implements PriceCalculatorInterface
{
    public function calculate(float $price): float
    {
        if (! $this-&gt;currentUser-&gt;getRole() === 'admin') {
            return $price;
        }

        return $price *= 0.5;
    }
}</code></pre>
<pre><code class="language-php">final class UnitedKingdomPriceCalculator implements PriceCalculatorInterface
{
   public function calculate(float $price): float
   {
       return $price * 1.15;
   }
}</code></pre>
<h3 id="3-let-collector-collect-what-you-need">3. Let Collector Collect What You Need</h3>
<p>Based on your needs, collect this or that service.</p>
<pre><code class="language-php">$priceCalculatorCollector = new PriceCalculatorCollector([
    new AdminDiscountPriceCalculator(),
    new UnitedKingdomPriceCalculator(),
]);

$price = $priceCalculatorCollector-&gt;calculatePrice($product);</code></pre>
<p><em class="fas fa-fw fa-lg fa-check text-success"></em> single entry point for <code>Collector</code></p>
<p><em class="fas fa-fw fa-lg fa-check text-success"></em> each solution that implements <code>PriceCalculatorInterface</code> <strong>is reusable</strong></p>
<p><em class="fas fa-fw fa-lg fa-check text-success"></em> <strong>to extend</strong> <code>PriceCalculatorCollector</code> with another feature, e.g. have a discount for Lenovo laptops from now till the end of June 2018, <strong>we don't have to modify</strong> it - just register a new <code>PriceCalculator</code></p>
<p><em class="fas fa-fw fa-lg fa-check text-success"></em> <strong>to reflect 1 change in reality</strong>, e.g. from 15 % to 20 % VAT, all we need to do it <strong>change 1 class for everyone</strong></p>
<p><br></p>
<p><strong>Win for the end-user, win for your project and win for the code.</strong></p>
<p><br></p>
<p><em>And that's all there is.</em> Just kidding, there is much more, but that's out of the scope of this simple tutorial.
Why the collector class doesn't implement the interface and other questions will be answered in following posts.</p>
<p><br><br></p>
<p>Happy collecting!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/06/14/collector-pattern-for-dummies</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 14 Jun 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/06/14/collector-pattern-for-dummies#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Turn Mocks from Nightmare to Solid Kiss Tests ]]></title>
                <link>https://tomasvotruba.com/blog/2018/06/11/how-to-turn-mocks-from-nightmare-to-solid-kiss-tests</link>
                <description><![CDATA[ <p><a href="http://mhlavac.net">Martin Hlaváč</a> had a very nice talk about testing in <a href="http://www.bephpug.de/2018/06/05/june.html">Berlin PHP Meetup</a> last week (while I hosted with <a href="https://github.com/rectorphp/rector">Rector</a>), and one of the topic was mocking.
<br><br>
I often see developers fighting with this, in places they don't have to, just because this topic is so widespread all over the internet and unit tools.
<br><br>
Did you know there is easier and more clear way to do &quot;mocking&quot;?</p> ]]></description>
                <content:encoded><![CDATA[ <p>At the time being, there is only 1 post about <a href="http://mnapoli.fr/anonymous-classes-in-tests">anonymous classes in tests</a> (thanks to Matthieu!). Compared to that, there are many PHP tool made just for mocking: Prophecy, Mockery, PHPUnit native mocks, Mockista and so on. If you're a developer who uses one of them, knows that he needs to add proper annotations to make autocomplete work, has the PHPStom plugin that fixes bugs in this autocomplete and it works well for you, just stop reading.</p>
<p>This post is for developers who struggle with mocking and have a feeling, that they're doing something wrong.</p>
<p><strong>You're not. It's the mocking part</strong>. Mocks are often the bottleneck of understanding in tests. They're so easy to make, that they can overpopulate your tests... the same way units test can test every getter and setter of all your entities in 20 minutes <em>(hint: not a way to go)</em>.</p>
<h2 id="was-it-code-willreturn-code-code-willreturnany-code-or-code-willreturnexact-code">Was it <code>willReturn()</code>, <code>willReturnAny()</code> or <code>willReturnExact()</code>?</h2>
<p>Let's get to code. <a href="https://github.com/shopsys/shopsys/commit/b73fc8da82f7d2679f05c8aedd29f010fd5d0630#diff-f1a8f90cb34e69e324153cce909467a2R92">Real open source code</a> from one of my code-reviews that inspired me to make this post:</p>
<pre><code class="language-php">namespace PHPUnit\Framework\TestCase;

final class SomeTest extends TestCase
{
    public function test()
    {
        $heurekaCategoryFacade = $this-&gt;createHeurekaCategoryFacadeMock();

        // ...
    }

    /**
     * @return \PHPUnit\Framework\MockObject\MockObject|\Shopsys\ProductFeed\HeurekaBundle\Model\HeurekaCategory\HeurekaCategoryFacade
     */
    private function createHeurekaCategoryFacadeMock()
    {
        $returnCallback = function ($categoryId) {
            if ($categoryId === self::CATEGORY_ID_FIRST) {
                return $this-&gt;heurekaCategory;
            }
            return null;
        };

        /** @var HeurekaCategoryFacade|\PHPUnit\Framework\MockObject\MockObject $heurekaCategoryFacadeMock */
        $heurekaCategoryFacadeMock = $this-&gt;createMock(HeurekaCategoryFacade::class);

        $heurekaCategoryFacadeMock
            -&gt;method('findByCategoryId')
            -&gt;willReturnCallback($returnCallback);

        return $heurekaCategoryFacadeMock;
    }
}</code></pre>
<p>The code is intentionally more complex, so we have real-life example, instead of made-up code with <code>Car</code> class and <code>open()</code> method that no-one can relate to.</p>
<p><strong>Now answer me in 5 seconds:</strong></p>
<ul>
<li>What does mock do?</li>
<li>How would you extends it to work with number 7?</li>
</ul>
<p>Now try to implement your idea. If you made it under another 60 seconds and your tests pass, you master mocking well and there is nothing for you to learn from this post.</p>
<h3 id="documentation-google-and-stackoverflow-juggling">Documentation, Google and Stackoverflow Juggling</h3>
<p>What happened to use in reality? <strong>We got stuck for at least 30 minutes on modification of methods like that</strong>. <a href="https://phpunit.readthedocs.io/en/7.1/test-doubles.html?highlight=mocking">Studying PHPUnit manual</a> and looking to StackOverflow with my favorite <a href="https://stackoverflow.com/questions/5988616/phpunit-mock-method-multiple-calls-with-different-arguments">PHPUnit mock method multiple calls with different arguments</a>.</p>
<p>That's not what tool should do for you. <strong>Tools should work for you, not you for them.</strong></p>
<h2 id="pure-php-code">Pure PHP Code</h2>
<p>Let me show an alternative approach that has the same result.</p>
<p>~ 95 % developers can read this code, even if they see PHPUnit for the first time:</p>
<pre><code class="language-php">namespace PHPUnit\Framework\TestCase;

final class SomeTest extends TestCase
{
    public function test()
    {
        $heurekaCategoryFacade = $this-&gt;createHeurekaCategoryFacade();

        // ...
    }

    private function createHeurekaCategoryFacadeMock()
    {
        // anonymous class mock
        return new class extends HeurekaCategoryFacade
        {
            public function findByCategoryId($categoryId)
            {
                if ($categoryId === self::CATEGORY_ID_FIRST) {
                    return $this-&gt;heurekaCategory;
                }

                return null;
            }
        };
    }
}</code></pre>
<p>We don't need no PHPStorm plugin, memorized methods from mock framework nor duplicated|annotations.</p>
<p>I believe now we all made it under 5 seconds with both answers:</p>
<pre><code class="language-diff"> namespace PHPUnit\Framework\TestCase;

 final class SomeTest extends TestCase
 {
     public function test()
     {
         $heurekaCategoryFacade = $this-&gt;createHeurekaCategoryFacade();

         // ...
     }

     private function createHeurekaCategoryFacade()
     {
         // anonymous class mock
         return new class extends HeurekaCategoryFacade
         {
             public function findByCategoryId($categoryId)
             {
-                if ($categoryId === self::CATEGORY_ID_FIRST) {
+                if ($categoryId === self::CATEGORY_ID_FIRST || $categoryId === 7) {
                     return $this-&gt;heurekaCategory;
                 }

                 return null;
             }
         };
     }
 }</code></pre>
<h2 id="your-code-guides-you-just-be-open-to-listening">Your Code Guides You, Just Be Open to Listening</h2>
<p>The code already tells us what to do next.</p>
<p>Some people mock because they follow good practice and <strong><a href="https://ocramius.github.io/blog/when-to-declare-classes-final">make every class abstract or final</a></strong>. They don't want to deal with constructors, that would often lead to more mocking. It's great practice and super easy to put make classes final with Rector CI:</p>
<pre><code class="language-bash">composer require rector/rector --dev</code></pre>
<pre><code class="language-php">&lt;?php

// rector.php

declare(strict_types=1);

use Rector\SOLID\Rector\Class_\FinalizeClassesWithoutChildrenRector;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return static function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();
    $services-&gt;set(FinalizeClassesWithoutChildrenRector::class);
};</code></pre>
<p>Yes, it's that simple, you just saved your project from most of its legacy code. But <code>final</code> classes should <strong>not be the reason to choose to mocks</strong>. Well, you can also <a href="https://phpfashion.com/how-to-mock-final-classes">hack the <code>final</code> and use mocking right away</a>, or you can go with the code flow. Dance with it!</p>
<h2 id="solid-code-as-a-side-effect">SOLID Code as a Side Effect</h2>
<p>You don't need to go on a mocking spree. The <em>constructor issue</em> naturally lead us to <strong>abstract an interface</strong> refactoring.</p>
<p>We create a new interface:</p>
<pre><code class="language-php">interface CategoryFacadeInterface
{
    public function findByCategoryId($categoryId);
}</code></pre>
<p>And use it in anonymous class:</p>
<pre><code class="language-diff"> private function createHeurekaCategoryFacade()
 {
     // anonymous class mock
-    return new class extends HeurekaCategoryFacade
+    return new class implements CategoryFacadeInterface
     {
         public function findByCategoryId($categoryId)
         {
            // ...
         }
     };
 }</code></pre>
<p>And now you respect SOLID principles - your code is:</p>
<ul>
<li>extendable (<em>O</em>pen-closed principle - open to extension, closed to modification)</li>
<li>and replaceable (<em>D</em>ependency inversion principle).</li>
</ul>
<p>Also, your application can now use abstraction (= interface) instead of specific implementation (= class). That leads to autowiring benefits, decoupling from monolith and better service replace-ability.</p>
<h2 id="1000x-code">1000x Code</h2>
<p>They say <strong>your code is 10x more read than written</strong> on average. I believe it's at least 1000x in open-source. Knowing that we want our code, not to be just clear and readable, but to be</p>
<ul>
<li>super-readable,</li>
<li>deterministic = with only one clear way one can understand it,</li>
<li>with <a href="/blog/2018/05/21/is-your-code-readable-by-humans-cognitive-complexity-tells-you/">cognitive complexity</a> &lt; 8,</li>
<li>easy to fix,</li>
<li>easy to extend,</li>
<li>easy to test.</li>
</ul>
<p><br></p>
<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/ab/William_of_Ockham_-_Logica_1341.jpg/220px-William_of_Ockham_-_Logica_1341.jpg">
<p>Let's close this with <a href="https://en.wikipedia.org/wiki/Occam%27s_razor">Occam's razor</a>:</p>
<blockquote class="blockquote text-center mt-5 mb-5">
    One should select the answer that makes the fewest assumptions
</blockquote>
<p>Pick a solution that is understandable to the most people. No tool, posts or studying tutorials or reading books is needed. <strong>People will thank you and your code will attract more people because they'll feel confident to manage the code</strong>. Then naturally, your code will get more contributions from happy developers. Win win :)</p>
<p><br><br></p>
<p>Happy anonymocking!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/06/11/how-to-turn-mocks-from-nightmare-to-solid-kiss-tests</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-08-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Aug 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/06/11/how-to-turn-mocks-from-nightmare-to-solid-kiss-tests#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Migrate From PHP CS Fixer to EasyCodingStandard in 6 Steps ]]></title>
                <link>https://tomasvotruba.com/blog/2018/06/07/how-to-migrate-from-php-cs-fixer-to-easy-coding-standard</link>
                <description><![CDATA[ <p>We looked at how to migrate from PHP_CodeSniffer to Easy Coding Standard on Monday. But what if your weapon of choice is PHP CS Fixer and you'd to run also some sniffs?
<br>
There are <strong>a few simple A → B changes</strong>, but one has to know about them or will get stuck. Let's learn about them.</p> ]]></description>
                <content:encoded><![CDATA[ <p>ECS is a tool build on Symfony 3.4 components that <a href="/blog/2017/05/03/combine-power-of-php-code-sniffer-and-php-cs-fixer-in-3-lines/">combines PHP_CodeSniffer and PHP CS Fixer</a>. It's super easy to start to use from scratch:</p>
<pre><code class="language-bash">composer require symplify/easy-coding-standard --dev
vendor/bin/ecs check src --set psr12</code></pre>
<p>But what if you already have PHP CS Fixer on your project and want to switch?</p>
<h2 id="1-from-string-codes-to-autocompleted-classes">1. From String Codes to Autocompleted Classes</h2>
<p>You use string references like <code>strict_types</code> in your <code>.php_cs</code> file. You need to remember them, <a href="https://github.com/friendsofphp/php-cs-fixer">copy paste them from README</a> and <strong>copy-paste them right</strong>.</p>
<pre><code class="language-php">return PhpCsFixer\Config::create()
    -&gt;setRules([
        'strict_types' =&gt; true,
    ])
    -&gt;setFinder($finder);</code></pre>
<p>That can actually cause typos like:</p>
<pre><code class="language-diff"> return PhpCsFixer\Config::create()
     -&gt;setRules([
-        'strict_types' =&gt; true,
+        'declare_strict_types' =&gt; true,
     ])
     -&gt;setFinder($finder);</code></pre>
<p>How to do that in ECS? Copy paste the fixer name, capitalize first letter and remove <code>_</code>:</p>
<p>Then hit the &quot;ctrl&quot; + &quot;space&quot; for class autocomplete in PHPStorm (it works even now when I write this post in markdown, nice!).</p>
<pre><code class="language-php">&lt;?php

// ecs.php

declare(strict_types=1);

use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return static function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();
    $services-&gt;set(PhpCsFixer\Fixer\Strict\DeclareStrictTypesFixer::class);
};</code></pre>
<p>No more typos with <em>strong</em> over <em>string typing</em>.</p>
<h2 id="2-from-code-notpath-code-to-code-skip-code-parameter">2. From <code>notPath()</code> to <code>skip</code> Parameter</h2>
<p>If you'd like to skip nasty code from being analyzed, you'd probably use this in PHP CS Fixer.</p>
<pre><code class="language-php">$finder = PhpCsFixer\Finder::create()
    -&gt;exclude('somedir')
    -&gt;notPath('my-nasty-dirty-file.php')
    -&gt;in(__DIR__);</code></pre>
<p>Do you need <code>DeclareStrictTypesFixer</code> to skip this file? Sorry, PHP CS Fixer will skip it for ever rule.</p>
<p>ECS solves this common case - to skip a file, just use <code>skip</code> parameter:</p>
<pre><code class="language-php">&lt;?php

// ecs.php

declare(strict_types=1);

use PhpCsFixer\Fixer\Strict\DeclareStrictTypesFixer;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
use Symplify\EasyCodingStandard\Configuration\Option;

return static function (ContainerConfigurator $containerConfigurator): void {
    $parameters = $containerConfigurator-&gt;parameters();

    $parameters-&gt;set(Option::SKIP, [
        DeclareStrictTypesFixer::class =&gt; [
            __DIR__ . '/my-nasty-dirty-file.php',
            // you can add more files
            __DIR__ . '/Legacy/too-legacy-to-look-at.php',

            // or directories
            __DIR__ . '/Legacy',

            // or mask paths with fnmatch()
            __DIR__ . '/*/Command',
        ]
    ]);
};</code></pre>
<p>Do you really want to skip <strong>1 fixer</strong> for all files?</p>
<pre><code class="language-php">&lt;?php

// ecs.php

declare(strict_types=1);

use PhpCsFixer\Fixer\Strict\DeclareStrictTypesFixer;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
use Symplify\EasyCodingStandard\Configuration\Option;

return static function (ContainerConfigurator $containerConfigurator): void {
    $parameters = $containerConfigurator-&gt;parameters();

    $parameters-&gt;set(Option::SKIP, [
        DeclareStrictTypesFixer::class =&gt; null,
    ]);
};</code></pre>
<p>For all other <code>skip</code> options, <a href="https://github.com/symplify/easy-coding-standard/#ignore-what-you-cant-fix">see README</a>.</p>
<h2 id="3-from-code-php-cs-code-to-php-config">3. From <code>.php_cs</code> to PHP Config</h2>
<p>PHP CS Fixer looks for <code>.php_cs</code> file in the root directory by default.</p>
<p><strong>And ECS looks for <code>ecs.php</code></strong></p>
<p>What about non-default locations or names?</p>
<p>From:</p>
<pre><code class="language-bash">vendor/bin/php-cs-fixer fix /path/to/project --config=custom/location.yml --dry-run</code></pre>
<p><strong>to:</strong></p>
<pre><code class="language-bash">vendor/bin/ecs check /path/to/project --config custom/location.php</code></pre>
<h2 id="4-configuring-fixer-values">4. Configuring Fixer Values</h2>
<p>From PHP configuration in PHP CS Fixer:</p>
<pre><code class="language-php">return PhpCsFixer\Config::create()
    -&gt;setRules([
        'array_syntax' =&gt; ['syntax' =&gt; 'short'],
    ])
    -&gt;setFinder($finder);</code></pre>
<p><strong>to explicit Symfony service parameters in EasyCodingStandard:</strong></p>
<pre><code class="language-php">&lt;?php

// ecs.php

declare(strict_types=1);

use PhpCsFixer\Fixer\ArrayNotation\ArraySyntaxFixer;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return static function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();

    $services-&gt;set(ArraySyntaxFixer::class)
        -&gt;call('configure', [[
            'syntax' =&gt; 'short'
        ]]);
};</code></pre>
<p>Nice and clear!</p>
<h2 id="5-from-no-code-dry-run-code-to-code-fix-code-option">5. From no <code>--dry-run</code> to <code>--fix</code> option</h2>
<p>From PHP CS Fixer:</p>
<pre><code class="language-bash">vendor/bin/php-cs-fixer fix /path/to/project --dry-run
vendor/bin/php-cs-fixer fix /path/to/project</code></pre>
<p>to EasyCodingStandard equivalent:</p>
<pre><code class="language-bash">vendor/bin/ecs check /path/to/project
vendor/bin/ecs check /path/to/project --fix</code></pre>
<h3 id="6-from-code-rules-code-to-code-imports-code">6. From <code>@Rules</code> to <code>imports</code></h3>
<p>Do you like to use standards like PSR-2 or even <a href="/blog/2018/04/09/try-psr-12-on-your-code-today/">PSR-12</a>?</p>
<p>From <code>@strings</code> in PHP CS Fixer:</p>
<pre><code class="language-php">$config = PhpCsFixer\Config::create()
    -&gt;setRules([
        '@PSR2' =&gt; true,
    ]);</code></pre>
<p><strong>to autocompleted set constant in PHP file in ECS</strong>:</p>
<pre><code class="language-php">&lt;?php

// ecs.php

declare(strict_types=1);

use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
use Symplify\EasyCodingStandard\Configuration\Option;use Symplify\EasyCodingStandard\ValueObject\Set\SetList;

return static function (ContainerConfigurator $containerConfigurator): void {
    $parameters = $containerConfigurator-&gt;parameters();
    $parameters-&gt;set(Option::SETS, [
        SetList::PSR_12,
    ]);
};</code></pre>
<p><br></p>
<h3 id="give-it-a-try">Give it a Try...</h3>
<p>...and you won't regret it. Sylius, <a href="https://github.com/pestphp/drift">PestPHP</a>, LMC, Shopsys and Nette did and never came back.</p>
<p><br></p>
<p>Did I forget a step that you had to fight with? <strong>Please, let me know in the comments or just send PR to this post to add it</strong>, so we help other readers.</p>
<p><br>
<br></p>
<p>Happy code sniffixing!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/06/07/how-to-migrate-from-php-cs-fixer-to-easy-coding-standard</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 07 Jun 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-08-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Aug 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/06/07/how-to-migrate-from-php-cs-fixer-to-easy-coding-standard#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Migrate From PHP_CodeSniffer to EasyCodingStandard in 7 Steps ]]></title>
                <link>https://tomasvotruba.com/blog/2018/06/04/how-to-migrate-from-php-code-sniffer-to-easy-coding-standard</link>
                <description><![CDATA[ <p>Last year, I helped <a href="https://github.com/shopsys/coding-standards">Shopsys Coding Standards</a> and <a href="https://github.com/lmc-eu/php-coding-standard">LMC PHP Coding Standard</a> to migrate from PHP_CodeSniffer to EasyCodingStandard.
<br><br>
There are <strong>a few simple A → B changes</strong>, but one has to know about them or will get stuck.
<br><br>
<strong>Do you also use PHP_CodeSniffer and give it EasyCodingStandard a try</strong>? Today we look at how to migrate step by step.</p> ]]></description>
                <content:encoded><![CDATA[ <p>ECS is a tool build on Symfony 3.4 components that <a href="/blog/2017/05/03/combine-power-of-php-code-sniffer-and-php-cs-fixer-in-3-lines/">combines PHP_CodeSniffer and PHP CS Fixer</a>. It's super easy to start to use from scratch:</p>
<pre><code class="language-bash">composer require symplify/easy-coding-standard --dev
vendor/bin/ecs check src --set psr12</code></pre>
<p>But what if you already have PHP_CodeSniffer on your project and want to switch?</p>
<h2 id="1-from-string-codes-to-autocompleted-classes">1. From String Codes to Autocompleted Classes</h2>
<p>You probably use string references to sniffs in your <code>*.xml</code> configuration for PHP_CodeSniffer. You need to remember them, copy paste them and <strong>copy-paste them right</strong>.</p>
<pre><code class="language-xml">&lt;!-- phpcs.xml --&gt;
&lt;rule ref="Generic.Comenting.DocComment"/&gt;</code></pre>
<p>That can actually cause typos like:</p>
<pre><code class="language-diff">-&lt;rule ref="Generic.Comenting.DocComment"/&gt;
+&lt;rule ref="Generic.Commenting.DocComment"/&gt;</code></pre>
<p>How to do that in EasyCodingStandard? Copy paste the last name <code>DocComment</code> and add rule in <code>set()</code> method. Hit CTRL + Space and  PHPStorm will autocomplete class for you:</p>
<pre><code class="language-php">&lt;?php

// ecs.php

declare(strict_types=1);

use PHP_CodeSniffer\Standards\Generic\Sniffs\Commenting\DocCommentSniff;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return static function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();
    $services-&gt;set(DocCommentSniff::class);
};</code></pre>
<p>No more typos with strong over string typing.</p>
<h2 id="2-from-code-codingstandardsignorestart-code-to-code-skip-code-parameter">2. From <code>@codingStandardsIgnoreStart</code> to <code>skip</code> Parameter</h2>
<p>If you'd like to skip nasty code from being analyzed, you'd use <code>@codingStandardsIgnoreStart</code> in PHP_CodeSniffer.</p>
<pre><code class="language-php">#  packages/framework/src/Component/Constraints/EmailValidator.php

private function isEmail($value)
{
    // @codingStandardsIgnoreStart
    $atom = "[-a-z0-9!#$%&amp;'*+/=?^_`{|}~]"; // RFC 5322 unquoted characters in local-part
    // @codingStandardsIgnoreEnd
}</code></pre>
<p>One big cons of this is <strong>that all sniffs will skip this code</strong>, not just one. So even if here we need to only allow double quotes <code>"</code>, all other checks will miss it.</p>
<p>To skip this in EasyCodingStandard just use <code>skip</code> parameter:</p>
<pre><code class="language-php">&lt;?php

// ecs.php

declare(strict_types=1);

use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
use Symplify\EasyCodingStandard\Configuration\Option;
use PHP_CodeSniffer\Standards\Squiz\Sniffs\Strings\DoubleQuoteUsageSniff;

return static function (ContainerConfigurator $containerConfigurator): void {
    $parameters = $containerConfigurator-&gt;parameters();
    $parameters-&gt;set(Option::SKIP, [
        DoubleQuoteUsageSniff::class =&gt; [
            __DIR__ . '/packages/framework/src/Component/Constraints/EmailValidator.php',

            // or whole directory
            __DIR__ . '/packages/framework/src/Component',

            // or for mask directory
            __DIR__ . '/packages/*/src/Component',
        ]
    ]);
};</code></pre>
<h2 id="3-from-code-lt-severity-gt-0-lt-severity-gt-code-and-code-lt-exclude-name-gt-code-to-code-skip-code-parameter">3. From <code>&lt;severity&gt;0&lt;/severity&gt;</code> and <code>&lt;exclude name="..."&gt;</code> to <code>skip</code> Parameter</h2>
<p>Do you need to skip only 1 part of the sniff? In PHP_CodeSniffer:</p>
<pre><code class="language-xml">&lt;rule ref="Generic.Commenting.DocComment.ContentAfterOpen"&gt;
    &lt;severity&gt;0&lt;/severity&gt;
&lt;/rule&gt;</code></pre>
<p>or</p>
<pre><code class="language-xml">&lt;rule ref="Generic.Commenting.DocComment"&gt;
    &lt;exclude name="Generic.Commenting.DocComment.ContentAfterOpen"/&gt;
&lt;/rule&gt;</code></pre>
<p>In EasyCodingStandard, we put that again under <code>skip</code> parameter in format <code>&lt;Sniff&gt;.&lt;CodeName&gt;</code>:</p>
<pre><code class="language-php">&lt;?php

// ecs.php

declare(strict_types=1);

use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
use Symplify\EasyCodingStandard\Configuration\Option;
use PHP_CodeSniffer\Standards\Generic\Sniffs\Commenting\DocCommentSniff;

return static function (ContainerConfigurator $containerConfigurator): void {
    $parameters = $containerConfigurator-&gt;parameters();
    $parameters-&gt;set(Option::SKIP, [
        DocCommentSniff::class . '.ContentAfterOpen' =&gt; null,
    ]);
};</code></pre>
<p>For all other <code>skip</code> options, <a href="https://github.com/symplify/easy-coding-standard/#ignore-what-you-cant-fix">see README</a>.</p>
<p><br></p>
<p>In case you need to <strong>skip the whole sniff</strong>:</p>
<pre><code class="language-xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;ruleset name="ruleset"&gt;
    &lt;rule ref="Generic.Commenting.DocComment"&gt;
        &lt;severity&gt;0&lt;/severity&gt;
    &lt;/rule&gt;
&lt;/ruleset&gt;</code></pre>
<p>or</p>
<pre><code class="language-xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;ruleset name="ruleset"&gt;
    &lt;rule ref="ruleset.xml"&gt;
        &lt;exclude name="Generic.Commenting.DocComment"/&gt;
    &lt;/rule&gt;
&lt;/ruleset&gt;</code></pre>
<p><strong>Put it under <code>skip</code> parameter:</strong></p>
<pre><code class="language-php">&lt;?php

// ecs.php

declare(strict_types=1);

use PHP_CodeSniffer\Standards\Generic\Sniffs\Commenting\DocCommentSniff;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
use Symplify\EasyCodingStandard\Configuration\Option;

return static function (ContainerConfigurator $containerConfigurator): void {
    $parameters = $containerConfigurator-&gt;parameters();

    $parameters-&gt;set(Option::SKIP, [
        DocCommentSniff::class =&gt; null,
    ]);
};</code></pre>
<h2 id="4-from-xml-to-php-config-paths">4. From XML to PHP Config Paths</h2>
<p>These names are looked for in the root directory by PHP_CodeSniffer:</p>
<pre><code class="language-bash">- .phpcs.xml
- phpcs.xml
- .phpcs.xml.dist
- phpcs.xml.dist</code></pre>
<p><strong>And by ECS just plain <code>ecs.php</code> PHP file</strong></p>
<p>What about non-default locations or names?</p>
<p>From:</p>
<pre><code class="language-bash">vendor/bin/phpcs /path/to/project --standard=custom/location.xml</code></pre>
<p><strong>to:</strong></p>
<pre><code class="language-bash">vendor/bin/ecs check /path/to/project --config custom/location.php</code></pre>
<h2 id="5-configuring-sniff-values">5. Configuring Sniff Values</h2>
<p>From XML configuration in PHP_CodeSniffer:</p>
<pre><code class="language-xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;ruleset name="ruleset"&gt;
    &lt;rule ref="Generic.Metrics.CyclomaticComplexity"&gt;
        &lt;properties&gt;
            &lt;property name="complexity" value="13"/&gt;
            &lt;property name="absoluteComplexity" value="13"/&gt;
        &lt;/properties&gt;
    &lt;/rule&gt;
&lt;/ruleset&gt;</code></pre>
<p><strong>to PHP parameters in ECS:</strong></p>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

// ecs.php

use PHP_CodeSniffer\Standards\Generic\Sniffs\Metrics\CyclomaticComplexitySniff;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return static function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();

    $services-&gt;set(CyclomaticComplexitySniff::class)
        -&gt;property('complexity', 13)
        -&gt;property('absoluteComplexity', 13);
};</code></pre>
<h2 id="6-from-severity-and-warning-to-just-errors">6. From Severity and Warning to Just Errors</h2>
<p>There are different levels in PHP_CodeSniffer. You can set severity, make sniff report as warning or as an error.</p>
<pre><code class="language-xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;ruleset name="ruleset"&gt;
    &lt;rule ref="Generic.Commenting.DocComment"&gt;
        &lt;severity&gt;5&lt;/severity&gt;
    &lt;/rule&gt;
&lt;/ruleset&gt;</code></pre>
<p>This complex matrix leveling lead to confused questions for many people:</p>
<ul>
<li>Is it a warning or is an accepted error?</li>
<li>What is this warning even active when it doesn't fail CI?</li>
<li>Why do we have an accepted error - is it like the tests that are allowed to fail?</li>
</ul>
<p>And so on.</p>
<p>Thus these confusing options are not supported and EasyCodingStandard simplifies that to <strong>errors only</strong>
CI server either passes or not. <strong>The rule is required and respected or removed. Simple, clear and without any confusion.</strong></p>
<p>Saying that you don't need to fill values for warning properties.</p>
<h2 id="7-from-beautifier-to-code-fix-code-option">7. From Beautifier to <code>--fix</code> option</h2>
<p>Do you need to fix the code? From 2 commands in PHP_CodeSniffer:</p>
<pre><code class="language-bash">vendor/bin/phpcs /path/to/project --standard=custom/location.xml
vendor/bin/phpcbf /path/to/project --standard=custom/location.xml</code></pre>
<p>to 1 in EasyCodingStandard:</p>
<pre><code class="language-bash">vendor/bin/ecs check /path/to/project --config custom/location.php
vendor/bin/ecs check /path/to/project --config custom/location.php --fix</code></pre>
<p><br></p>
<h3 id="give-it-a-try">Give it a Try...</h3>
<p>...and you won't regret it. Sylius, <a href="https://github.com/pestphp/drift">PestPHP</a>, LMC, Shopsys, Nette did and never came back.</p>
<p><br></p>
<p>Did I forget a step that you had to fight with? <strong>Please, let me know in the comments or just send PR to this post to add it</strong>, so we help other readers.</p>
<p><br>
<br></p>
<p>In the next post we look on how to migrate from PHP CS Fixer!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/06/04/how-to-migrate-from-php-code-sniffer-to-easy-coding-standard</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-08-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Aug 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/06/04/how-to-migrate-from-php-code-sniffer-to-easy-coding-standard#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Symfony vs Laravel vs Nette - Which PHP Framework Should You Choose ]]></title>
                <link>https://tomasvotruba.com/blog/2018/05/31/symfony-vs-laravel-vs-nette-which-php-framework-you-should-choose</link>
                <description><![CDATA[ <p>I have been asked this question over hundred times, in person, as <a href="https://github.com/TomasVotruba/tomasvotruba.com/issues/278">a post request</a>. When to use Symfony? How is Laravel better than Symfony? What are Nette killer features compared to Symfony and Laravel?
<br><br>
Today, we look on the answer.</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="so-which-php-framework-is-the-silver-bullet">So Which PHP Framework is the Silver Bullet?</h2>
<p>According to Wikipedia &quot;the only weapon that is effective against a werewolf, witch, or other monsters&quot;. But also &quot;a direct and effortless solution to a problem.&quot; Spoiler alert: <strong>Silver bullet does not exist.</strong></p>
<p>What does that mean in the software world? Let's say you use framework A. You have many problems - bad documentation, missing package in the core for command bus etc. - with it and you've heard that all of them solves framework B. So you migrate to framework B. Many problems solved. You use it for 2 years and  new problems appear and you've just heard that all of them solves framework C...</p>
<blockquote class="blockquote text-center mt-lg-5 mb-lg-5">
    There are no solutions. There are only trade-offs.
</blockquote>
<h3 id="sex-for-one-night-vs-love-for-the-lifetime">Sex for One Night vs. Love for The Lifetime</h3>
<p>And that does not apply only framework, I've seen very good programmer moving from PHP to PHP Framework, from PHP to Python, from Python to Javascript... It's a way but has some trade-offs.</p>
<p><strong>If you have a new partner every 2 years, how well do you think you'll get to know them?</strong> Same goes for frameworks (or any field, really).</p>
<h2 id="the-best-php-framework-based-on-my-experience">The Best PHP Framework based on My Experience</h2>
<p>So which PHP framework would I recommend to you in 2018? You know from my posts and from founding PHP group &quot;Symfonists&quot; in the Czech Republic in 2016, that <strong>I'm all over the Symfony</strong>. Even though there are <a href="/blog/2017/02/12/drop-all-service-tags-in-your-nette-and-symfony-applications/#get-rid-of-tagging-in-symfony">many</a> <a href="https://github.com/symfony/symfony/pull/26686">things</a> I <a href="/blog/2018/04/23/how-to-slowly-turn-your-symfony-project-to-legacy-with-action-injection/">disagree</a> with.</p>
<p>Luckily, I'm aware of this <em>confirmation bias</em>, so when somebody asks me the question in the title, <strong>I think the right answer is</strong>:</p>
<blockquote class="blockquote text-center mt-lg-5 mb-lg-5">
    Use what you love. There is no better way to do things.
</blockquote>
<p>Yes, <strong>it can be that simple</strong>. I could give you technical arguments like:</p>
<ul>
<li>drop 3 lines of framework A code and show that in framework B it takes 20 to do the same,</li>
<li>show that framework A can process 35 % more requests than framework B,</li>
<li>show <a href="https://medium.com/@taylorotwell/measuring-code-complexity-64356da605f9">a metric that is 4 times bigger</a> in framework B than in framework A,</li>
<li>argue that this framework has 10 times more plugins, that one has autowiring and that one has not.</li>
</ul>
<p>But that's not really the point - it's not a contest, it's fun. Programming needs to be fun, because:</p>
<blockquote class="blockquote text-center mt-lg-5 mb-lg-5">
    If you're not doing a job you want to do for the rest of your life... why are you doing it?
</blockquote>
<h3 id="but-where-to-start">But Where to Start?</h3>
<p>Ok, let's say you're looking for your first framework to fall in love with. What is the best place to start?</p>
<p><br></p>
<h2 id="the-one-thing-i-love-about-nette">The one Thing I love about Nette</h2>
<img src="https://files.nette.org/git/www/nette-logo-blue.png" width="300">
<p>I really fell in love with Nette mainly because of monthly meetups called <a href="https://www.posobota.cz">Posobota</a>. In English: last Saturday shortened to &quot;LaSaturday&quot;. Maintained for last ~5 years by <a href="https://honzacerny.com">Honza Černý</a> who's keeping an awesome job of running them.</p>
<p>It's a meetup with 50 developers, a <strong>regular</strong> meetup. Regular meetups is the best place <strong>to build deep meaningful relationships</strong>, where you can <strong>learn a massive amount of knowledge</strong> over the years and <strong>to share ideas and get feedback on them</strong>.</p>
<p>This could never happen on conferences, no matter how big.</p>
<p><br></p>
<h2 id="the-one-thing-i-love-about-laravel">The one Thing I love about Laravel</h2>
<img src="https://www.loadsys.com/wp-content/uploads/laravel_loadsys.png" width="300">
<p>There is <strong>a place where can you learn almost everything about Laravel</strong>. It's called <strong><a href="https://laracasts.com">Laracasts</a></strong>, it's entertaining, it's short (mostly 3-5 mins long videos) and to the point. A very rare combination in software educational sources.</p>
<p>I got into it with free series <a href="https://laracasts.com/series/how-to-be-awesome-in-phpstorm">Be Awesome in PHPStorm</a> series, where <a href="https://github.com/JeffreyWay">Jeffrey Way</a> gave me the best basic about PHPStorm I could dream of. To this day I still use 70 % knowledge I learned there.</p>
<p><br></p>
<h2 id="the-one-thing-i-love-about-symfony">The one Thing I love about Symfony</h2>
<img src="https://www.rostemespolecne.cz/copohwegoiwhe/uploads/2017/01/symfony_black_02.png" width=300>
<p>What I love the most about Symfony? It has people, education, sharing, the newest information, dopamine-driven reward system... guess!</p>
<p><br></p>
<p><strong>It's a <a href="https://stackoverflow.com/questions/tagged/symfony">StackoverFlow support for Symfony</a>.</strong> I learned a lot of basic know-how there and almost all of the edge-cases. The answers are experienced and right to the point. I just love it. And when I find an outdated answer, I can improve it. That way it's clear, what was the best-proven practice in Symfony 2, in Symfony 3 and is now in Symfony 4 in one page - one example for all <a href="https://stackoverflow.com/questions/13901256/how-do-i-read-from-parameters-yml-in-a-controller-in-symfony2">How to get Parameter in Controller</a>. Its like <a href="https://github.com/rectorphp/rector">Rector</a> just to humans.</p>
<h2 id="it-s-all-about-you-community">It's all About You - Community</h2>
<img src="/assets/images/posts/2018/frameworks/community.jpg">
<p>It might be weird to see that software is all about people. It's about people, emotions, relationships, what people create from their love - a post, a package, a book, a video series, a local meetup, a beer meetup, a shirt with a logo, a hat with a log, stickers, open-source package, conference, a talk...</p>
<p><strong>There would be no frameworks without you - people talking about it on meetups, online forums, people who write about it with passion in comments on Reddit.</strong></p>
<p>So just go out there on a meetup, grab a beer. No pressure, you can stay there just for 30 minutes and then go home - but try to <strong>feel the mood and see how people work in that group</strong>. See how that fits you. That way you'll know you have found the best framework for you, not by some random metrics.</p>
<p>As they say:</p>
<blockquote class="blockquote text-center mt-lg-5 mb-lg-5">
    One loves vanilla ice-cream, the other pistachio.
</blockquote>
<p><br><br></p>
<p>Spread love! That's all there is :)</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/05/31/symfony-vs-laravel-vs-nette-which-php-framework-you-should-choose</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 31 May 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/05/31/symfony-vs-laravel-vs-nette-which-php-framework-you-should-choose#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Build Your First Symfony Console Application with Dependency Injection Under 4 Files ]]></title>
                <link>https://tomasvotruba.com/blog/2018/05/28/build-your-first-symfony-console-application-with-dependency-injection-under-4-files</link>
                <description><![CDATA[ <p>Series about PHP CLI Apps continues with 3rd part about writing Symfony Console Application with Dependency Injection in the first place. Not last, not second, <strong>but the first</strong>.
<br>
Luckily, is easy to start using it and very difficult to</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="symfony-evolution">Symfony Evolution</h2>
<p><a href="http://richardmiller.co.uk/2011/04/15/symfony2-controller-as-service">7 years ago it was a total nightmare to use Controllers as services</a>. Luckily, Symfony evolved a lot in this matter and using Symfony 4.0 packages in a brand new application is much simpler than it was in Symfony 2.8 or even 3.2. The very same evolution allowed to enter Dependency Injection to Symfony Console-based PHP CLI App.</p>
<h3 id="commands-as-services">Commands as Services</h3>
<p>I already wrote about <a href="/blog/2018/05/07/why-you-should-combine-symfony-console-and-dependency-injection/#3-symfony-console-meets-symfony-dependencyinjection">why is this important</a>, today we look at <strong>how to actually do it</strong>. To be clear, how to do it without the need of bloated FrameworkBundle, that is an official but <a href="https://matthiasnoback.nl/2013/10/symfony2-console-commands-as-services-why">rather bad-practice solution</a>.</p>
<h2 id="3-steps-to-first-command-as-a-service">3 Steps to First Command as a Service</h2>
<p>All we need are these 3 elements:</p>
<ul>
<li><code>service.yml</code> file with PSR-4 autodiscovery,</li>
<li>classic Kernel</li>
<li>and the bin file - entry point to our application.</li>
</ul>
<p>The simplest things first.</p>
<h3 id="1-code-services-yml-code">1. <code>services.yml</code></h3>
<p>Create <code>config/services.yml</code> with classic <a href="https://github.com/symfony/symfony/pull/21289#issue-101559374">PSR-4 autodiscovery/autowire setup</a> and register <code>Symfony\Component\Console\Application</code> as well. We will use this class later.</p>
<pre><code class="language-yaml"># config/services.yml
services:
    _defaults:
        autowire: true

    App\:
        resource: '../app'

    Symfony\Component\Console\Application:
        # why public? so we can get it from container in bin file
        # via "$container-&gt;get(Application::class)"
        public: true</code></pre>
<h3 id="2-kernel">2. Kernel</h3>
<p>The basic stone of all Symfony Applications. Nothing extra here, we just load the <code>config/services.yml</code> from the previous step:</p>
<pre><code class="language-php">&lt;?php

# app/Kernel.php

use Symfony\Component\Config\Loader\LoaderInterface;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\DependencyInjection\ContainerBuilder;

final class AppKernel extends Kernel
{
    /**
     * In more complex app, add bundles here
     */
    public function registerBundles(): array
    {
        return [];
    }

    /**
     * Load all services
     */
    public function registerContainerConfiguration(LoaderInterface $loader): void
    {
        $loader-&gt;load(__DIR__ . '/../config/services.yml');
    }
}</code></pre>
<p>There is one more thing. We'll</p>
<h3 id="3-the-bin-file">3. The bin file</h3>
<p>Last but not least the entry point to our application - <code>bin/some-app</code>. That's basically twin-brother of <a href="https://github.com/symfony/demo/blob/beb3aa8e988527f16ac50f792eede240fafbfdfc/public/index.php#L35-L39"><code>public/index.php</code></a>, just for CLI Apps.</p>
<pre><code class="language-php"># bin/some-app

require_once __DIR__ . '/vendor/autoload.php';

use Symfony\Component\Console\Application;

$kernel = new AppKernel;
$kernel-&gt;boot();

$container = $kernel-&gt;getContainer();
$application = $container-&gt;get(Application::class)
$application-&gt;run();</code></pre>
<p>So let's say we have a <code>App\Command\SomeCommand</code> with <code>some</code> name and we want to run it:</p>
<pre><code class="language-bash">bin/some-app some</code></pre>
<p>But we get:</p>
<pre><code class="language-bash">Command "some" is not defined.</code></pre>
<p>Why? We're sure that:</p>
<ul>
<li>the <code>App\Command\SomeCommand</code> class exists</li>
<li>it's located in <code>app/Command/SomeCommand.php</code> file</li>
<li>the <code>config/services.yml</code> loads it</li>
<li><code>composer.json</code> section <code>autoload</code> is correctly configured</li>
<li><code>vendor/autoload.php</code> was dumped with <code>composer dump</code>...</li>
</ul>
<p>What are we missing? Oh, we forgot to <strong>load commands to the <code>Application</code> service</strong>. Everything works, but our application doesn't know about our commands. It's like if the web application doesn't know where to find the controller.</p>
<h3 id="how-to-add-all-services-of-type-a-to-service-of-type-b">How to Add All Services of Type A to Service of Type B</h3>
<p>With FrameworkBundle we'd add <code>autoconfigure</code> option to <code>services.yml</code> config - it works with tags, but here we need to use clean PHP.
<a href="/blog/2017/02/12/drop-all-service-tags-in-your-nette-and-symfony-applications/">Tags magic that is often overused in wrong places</a>, so this extra works is actually a good thing. We know what happens... but <strong>mainly readers of our code know it too</strong>.</p>
<p>This is the place to use <a href="/blog/2018/03/08/why-is-collector-pattern-so-awesome/#drop-that-expression-language-magic">famous collector pattern</a> via <code>CompilerPass</code>:</p>
<pre><code class="language-php"># app/DependencyInjection/CompilerPass/CollectCommandsToApplicationCompilerPass.php

namespace App\DependencyInjection\CompilerPass;

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Reference;

final class CollectCommandsToApplicationCompilerPass implements CompilerPassInterface
{
    public function process(ContainerBuilder $containerBuilder): void
    {
        $applicationDefinition = $containerBuilder-&gt;getDefinition(Application::class);

        foreach ($containerBuilder-&gt;getDefinitions() as $name =&gt; $definition) {
            if (is_a($definition-&gt;getClass(), Command::class, true)) {
                $applicationDefinition-&gt;addMethodCall('add', [new Reference($name)]);
            }
        }
    }
}</code></pre>
<p>And make our <code>Kernel</code> aware of it:</p>
<pre><code class="language-php"># app/Kernel.php

// ...

use App\DependencyInjection\CompilerPass\CollectCommandsToApplicationCompilerPass;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Command\Command;

// ...

{
    protected function build(ContainerBuilder $containerBuilder): void
    {
        $containerBuilder-&gt;addCompilerPass(new CommandsToApplicationCompilerPass);
    }

    // ...
}</code></pre>
<p>This will compile to container to something like this:</p>
<pre><code class="language-php">function createSomeCommand()
{
    return new SomeCommand();
}

function createApplication()
{
    $application = new Application;
    $application-&gt;add(createSomeCommand());

    return $application;
}</code></pre>
<p>Now let's try it again:</p>
<pre><code class="language-bash">bin/some-app some</code></pre>
<p>It works! And that's it. I told you it'll be easy - how can we not love Symfony :).</p>
<p><strong>Do you still struggle with some parts?</strong> Don't worry, this post is tested by PHPUnit, so you can find all the code mentioned here - just click on &quot;Tested&quot; in the top of the post to see it.</p>
<p><br><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/05/28/build-your-first-symfony-console-application-with-dependency-injection-under-4-files</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 28 May 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/05/28/build-your-first-symfony-console-application-with-dependency-injection-under-4-files#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ The Boss vs. The Masseuse Way to Add Coding Standards to a Big Project ]]></title>
                <link>https://tomasvotruba.com/blog/2018/05/24/boss-vs-masseuse-way-to-add-coding-standards-to-big-project</link>
                <description><![CDATA[ <p>Do you prefer a <strong>boss who's watching you</strong> how you sit at the desk telling how to sit right
or a <strong>masseuse who's taking care of your hands</strong> tired from programming with her gentle hands?
<br><br>
When it comes to coding standards, the love and fun is the best experience with it. Let's look how such &quot;masseuse&quot; can be added to your big project.</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="quot-the-boss-quot-way-to-add-coding-standard">&quot;The Boss&quot; Way to Add Coding Standard</h2>
<p>It's very rare that projects have coding standards right from the first line. That applies to CI, tests, coverage, and docs. Why? They come with experience and with a need. <strong>The biggest added value of coding standards is to bring more fun to your team, as it works for you</strong>.</p>
<p>Saying that <strong>the most projects need and then add coding standards when they grow up to a large code base</strong>.</p>
<p>The most <a href="https://akrabat.com/checking-your-code-for-psr-2">popularized way</a> to do this is:</p>
<pre><code class="language-bash">composer require squizlabs/php_codesniffer --dev
vendor/bin/phpcs --standard=PSR2 /app /src</code></pre>
<p>I bet you're able to run these command even if you see it for the first time.</p>
<p>But what will happen next?</p>
<img src="/assets/images/posts/2018/cs-masseuce/unknown-error.png">
<p><strong>You'll get ~ <em>X</em> hundreds of errors you don't understand</strong>. It can feel embarrassing like having the boss' eyes on you all the time.</p>
<p>This is often the reason coding standard is not part of many great PHP projects, which makes me very sad.</p>
<h2 id="quot-the-masseuse-quot-way-to-add-coding-standard">&quot;The Masseuse&quot; Way to Add Coding Standard</h2>
<p>How to make this first experience better? Start slowly, one touch at a time, like a masseuse with your hands.</p>
<h3 id="1-install-your-favoring-coding-standard-tool">1. Install Your Favoring Coding Standard Tool</h3>
<p>For me, it's obviously <a href="https://github.com/symplify/easy-coding-standard">ECS</a>:</p>
<pre><code class="language-bash">composer require symplify/easy-coding-standard --dev</code></pre>
<h3 id="2-use-one-sniff-fixer-that-helps-you-the-most">2. Use One Sniff/Fixer that Helps You The Most</h3>
<p>This is the most important step. This checker should be</p>
<ul>
<li>easy to understand</li>
<li>helpful for you as a programmer (not a <code>{</code> or <code>"</code> position)</li>
<li>helpful to your project</li>
<li>and easy to fix code for you (like <code>array()</code> → <code>[]</code>)</li>
</ul>
<h3 id="3-make-it-pass-without-any-code-change">3. Make it Pass Without Any Code Change</h3>
<p>Last week a <a href="/blog/2018/05/21/is-your-code-readable-by-humans-cognitive-complexity-tells-you/">Cognitive Complexity Rule</a> was published there was <a href="https://github.com/symplify/symplify/issues/834">very positive feedback</a> on it.</p>
<p><strong>If your coding standard should have only 1 rule - this is the one.</strong></p>
<pre><code class="language-yaml"># phpstan.neon
includes:
    - vendor/symplify/coding-standard/packages/cognitive-complexity/config/cognitive-complexity-rules.neon

parameters:
    symplify:
        max_cognitive_complexity: 8 # default</code></pre>
<p>But when you run your tool (<code>vendor/bin/phpstan analyse /src</code>), it will probably drop dozens of errors. And we don't want to go to the boss approach.</p>
<p><br></p>
<p>Saying that, <strong>we make the rule so free, that your code passes it</strong>:</p>
<pre><code class="language-yaml"># phpstan.neon
parameters:
    symplify:
        max_cognitive_complexity: 50</code></pre>
<p>Still 10 errors?</p>
<pre><code class="language-yaml"># phpstan.neon
parameters:
    symplify:
        max_cognitive_complexity: 100</code></pre>
<p><strong>0 errors!</strong></p>
<h3 id="great-job-done">Great Job Done!</h3>
<p>You can now add this to your <code>.travis.yml</code> or any other CI tools and make the PR merge and take a 2 weeks break.</p>
<p>Then decrease the criteria for 10 %:</p>
<pre><code class="language-yaml"># phpstan.neon
parameters:
    symplify:
        max_cognitive_complexity: 90</code></pre>
<p>and fix only 3-4 cases that will pop-up. One touch at a time. Then make a PR, merge &amp; take a break again. &quot;<a href="https://www.youtube.com/watch?v=f4oWpvJ0f8Q">Rinse &amp; Repeat</a>&quot;.</p>
<p>When <strong>you feel ready</strong>, you can add 1 more checker, make a rule more strict... you get the idea to enjoy your massage :).</p>
<h2 id="proven-practice">Proven Practice</h2>
<p>This way I was able to add coding standards to quite a big codebase in <a href="https://github.com/lekarna">Lekarna.cz</a> a few years ago with not many troubles, and learn how they work along the way.</p>
<p><br></p>
<p><strong>I wish you the same experience in your huge project.</strong></p>
<p><br><br></p>
<p>Enjoy the Massage!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/05/24/boss-vs-masseuse-way-to-add-coding-standards-to-big-project</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 24 May 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/05/24/boss-vs-masseuse-way-to-add-coding-standards-to-big-project#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Is Your Code Readable By Humans? Cognitive Complexity Tells You ]]></title>
                <link>https://tomasvotruba.com/blog/2018/05/21/is-your-code-readable-by-humans-cognitive-complexity-tells-you</link>
                <description><![CDATA[ <p>Cyclomatic complexity is a static analysis measure of how difficult is code to test.
<strong>Cognitive complexity</strong> tells us, how difficult code is to understand by a reader.
<br>
<br>
Today, we'll see why is the later better and how to check it in your code with a Sniff.</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="what-is-cognitive-complexity">What is Cognitive Complexity?</h2>
<p><em>Tomáš Horváth</em> referenced me to <a href="https://blog.sonarsource.com/cognitive-complexity-because-testability-understandability">Cognitive Complexity, Because Testability != Understandability</a> under the <a href="https://pehapkari.cz/blog/2018/04/04/cyklomaticka-komplexita">Cyclomatic Complexity</a> post. Thank you Tomas.</p>
<p>The most important source about <em>Cognitive Complexity</em> is <a href="https://www.sonarsource.com/docs/CognitiveComplexity.pdf">a 21-page long PDF</a>. Instead of explaining in words (you can read that in the PDF), <strong>here are 2 examples that speak more than a thousand words</strong>:</p>
<p><br></p>
<h3 id="example-a">Example A</h3>
<p>Cyclomatic Complexity: 4</p>
<pre><code class="language-php">function getWords($number) {    // +1
    switch ($number) {
      case 1:                   // +1
        return "one";
      case 2:                   // +1
        return "a couple";
      default:                  // +1
        return "lots";
    }
}</code></pre>
<p><strong>vs. Cognitive Complexity: 1</strong></p>
<pre><code class="language-php">function getWords($number) {
    switch ($number) {          // +1
      case 1:
        return "one";
      case 2:
        return "a couple";
      default:
        return "lots";
    }
}</code></pre>
<h3 id="example-b">Example B</h3>
<p>Cyclomatic Complexity: 4</p>
<pre><code class="language-php">function sumOfPrimes($max) {            // +1
    $total = 0;
    for ($i = 1; $i &lt; $max; ++$i) {     // +1
        for ($j = 2; $j &lt; $i; ++$j) {   // +1
            if ($i % $j === 0) {        // +1
                continue 2;
            }
        }

        $total += $i;
    }

    return $total;
}</code></pre>
<p><strong>vs. Cognitive Complexity: 7</strong></p>
<pre><code class="language-php">function sumOfPrimes($max) {
    $total = 0;
    for ($i = 1; $i &lt; $max; ++$i) {     // +1
        for ($j = 2; $j &lt; $i; ++$j) {   // +2
            if ($i % $j === 0) {        // +3
                continue 2;             // +1
            }
        }

        $total += $i;
    }

    return $total;
}</code></pre>
<p>If I should put it in own words, the <em>cognitive complexity</em> is <strong>how difficult is to understand
a function and all its possible paths</strong>.</p>
<ul>
<li>
<p>Example A: <strong>there is a <code>switch()</code> and based on <code>$number</code> returns a specific value.</strong> Even if there are 50 <code>case:</code>, the story is still the same.</p>
</li>
<li>
<p>Example B: <strong>there are 3 <code>for</code>s, with nesting and one continue to non-self level</strong>.</p>
</li>
</ul>
<h2 id="automation-over-information">Automation Over Information</h2>
<p>This all is nice to know information. The one that you might find interesting, remember it for few days and then forget it and never meet it again. But I'm too lazy to <em>learn to just forget</em>, so I <em>learn to automate</em>. This is place <a href="/blog/2017/07/17/how-to-write-custom-sniff-for-code-sniffer-3/">to write a Sniff</a>.</p>
<p>It took me 5 days to understand academic writings in the PDF, to convert Java and Python examples to PHP and reverse-engineer the algorithm to compute cognitive complexity to match results in the PDF. <strong>The most difficult was to change the cyclomatic complexity approach I used for last 4 years to a human one</strong>.</p>
<p>Today, I'm happy to show you the first version of <code>CognitiveComplexitySniff</code>.</p>
<h2 id="3-steps-to-check-cognitive-complexity-of-your-code">3 Steps to Check Cognitive Complexity of Your Code</h2>
<p><strong>1. Install Symplify\CodingStandard</strong></p>
<pre><code class="language-bash">composer require symplify/coding-standard symplify/easy-coding-standard --dev</code></pre>
<p><strong>2. Create <code>phpstan.neon</code></strong></p>
<pre><code class="language-yaml"># phpstan.neon
includes:
    - vendor/symplify/coding-standard/packages/cognitive-complexity/config/cognitive-complexity-rules.neon

parameters:
    symplify:
        max_cognitive_complexity: 8 # default
        max_class_cognitive_complexity: 50 # default</code></pre>
<p><strong>3. Run it</strong></p>
<pre><code class="language-bash">vendor/bin/phpstan analyse src</code></pre>
<h2 id="refactor-to-lower-cognitive-complexity-in-examples">Refactor to Lower Cognitive Complexity in Examples</h2>
<p><a href="https://github.com/symplify/symplify/pull/823/files" class="btn btn-dark btn-sm">
<em class="fab fa-github fa-fw"></em>
See pull-request
</a></p>
<p>Saying &quot;refactoring this&quot; is very simple, but actual work and teaching others is a very challenging task. To make this a bit easier for you, I've extracted few refactorings I made in Symplify thanks to this Sniff.</p>
<h3 id="1-refactoring-to-shorter-condition">1. Refactoring to Shorter Condition</h3>
<pre><code class="language-diff">index 83ca0da5..125f7c7f 100644
--- a/packages/TokenRunner/src/Wrapper/FixerWrapper/DocBlockWrapper.php
+++ b/packages/TokenRunner/src/Wrapper/FixerWrapper/DocBlockWrapper.php
@@ -160,17 +160,9 @@ final class DocBlockWrapper
         }

         if ($typeNode instanceof IdentifierTypeNode) {
-            if ($typeNode-&gt;name === 'array') {
-                return true;
-            }
-
-            return false;
-        }
-
-        if ($typeNode instanceof ArrayTypeNode) {
-            return true;
+            return $typeNode-&gt;name === 'array';
         }

-        return false;
+        return $typeNode instanceof ArrayTypeNode;
     }
 }</code></pre>
<h3 id="2-refactoring-with-method-extraction">2. Refactoring with Method Extraction</h3>
<pre><code class="language-diff">--- a/packages/CodingStandard/src/Fixer/Commenting/RemoveEmptyDocBlockFixer.php
+++ b/packages/CodingStandard/src/Fixer/Commenting/RemoveEmptyDocBlockFixer.php
@@ -48,16 +48,7 @@ final class RemoveEmptyDocBlockFixer extends AbstractFixer
     protected function applyFix(SplFileInfo $file, Tokens $tokens): void
     {
         for ($index = count($tokens); $index &gt; 0; --$index) {
-            if (! isset($tokens[$index])) {
-                continue;
-            }
-
-            $token = $tokens[$index];
-            if (! $token-&gt;isGivenKind(T_DOC_COMMENT)) {
-                continue;
-            }
-
-            if (! preg_match('#^/\*\*[\s\*]*\*/$#', $token-&gt;getContent())) {
+            if ($this-&gt;shouldSkip($tokens, $index)) {
                 continue;
             }

@@ -77,4 +68,18 @@ final class RemoveEmptyDocBlockFixer extends AbstractFixer
             }
         }
     }
+
+    private function shouldSkip(Tokens $tokens, int $index): bool
+    {
+        if (! isset($tokens[$index])) {
+            return true;
+        }
+
+        $token = $tokens[$index];
+        if (! $token-&gt;isGivenKind(T_DOC_COMMENT)) {
+            return true;
+        }
+
+        return (bool) ! preg_match('#^/\*\*[\s\*]*\*/$#', $token-&gt;getContent());
+    }
 }</code></pre>
<h3 id="3-refactoring-to-responsible-method">3. Refactoring to Responsible Method</h3>
<pre><code class="language-diff">diff --git a/packages/CodingStandard/src/Fixer/Import/ImportNamespacedNameFixer.php b/packages/CodingStandard/src/Fixer/Import/ImportNamespacedNameFixer.php
index 1d532ca58..8aa7981cb 100644
--- a/packages/CodingStandard/src/Fixer/Import/ImportNamespacedNameFixer.php
+++ b/packages/CodingStandard/src/Fixer/Import/ImportNamespacedNameFixer.php
@@ -148,10 +148,6 @@ public function fix(SplFileInfo $file, Tokens $tokens): void
             }

             if ($token-&gt;isGivenKind(T_DOC_COMMENT)) {
-                if (! $this-&gt;configuration[self::INCLUDE_DOC_BLOCKS_OPTION]) {
-                    continue;
-                }
-
                 $this-&gt;processDocCommentToken($index, $tokens);
                 continue;
             }
@@ -274,6 +270,10 @@ private function processStringToken(Token $token, int $index, Tokens $tokens): v

     private function processDocCommentToken(int $index, Tokens $tokens): void
     {
+        if (! $this-&gt;configuration[self::INCLUDE_DOC_BLOCKS_OPTION]) {
+            return;
+        }
+
         $phpDocInfo = $this-&gt;phpDocInfoFactory-&gt;createFrom($tokens[$index]-&gt;getContent());
         $phpDocNode = $phpDocInfo-&gt;getPhpDocNode();</code></pre>
<p><br><br></p>
<p>Happy Code Reading!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/05/21/is-your-code-readable-by-humans-cognitive-complexity-tells-you</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 21 May 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-05-01UTC00:00:000</updated>
                    <atom:updated>Fri, 01 May 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Fri, 01 May 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/05/21/is-your-code-readable-by-humans-cognitive-complexity-tells-you#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Test Private Services in Symfony ]]></title>
                <link>https://tomasvotruba.com/blog/2018/05/17/how-to-test-private-services-in-symfony</link>
                <description><![CDATA[ <p>2 versions of Symfony are affected by this dissonance between services and tests.
<strong>Do you use Symfony 3.4 or 4.0? Do you want to test your services, but struggle to get them in a clean way?</strong>
<br><br>
Today we look at possible solutions.</p> ]]></description>
                <content:encoded><![CDATA[ <p>Since <a href="https://symfony.com/blog/new-in-symfony-3-4-services-are-private-by-default">Symfony 3.4 all services are private by default</a>.
That means you can't get service by <code>$this-&gt;get(App\SomeService::class)</code> or <code>$this-&gt;container-&gt;get(App\SomeService::class)</code> anymore, but <strong>only only via constructor</strong>.</p>
<p>That's ok until you need to test such service:</p>
<pre><code class="language-php">use App\SomeService;
use PHPUnit\Framework\TestCase;

final class SomeServiceTest extends TestCase
{
    public function testSomeMethod()
    {
        $kernel = new AppKernel;
        $kernel-&gt;boot();
        $container = $kernel-&gt;getContainer();

        // this line is important ↓
        $someService = $container-&gt;get(SomeService::class);
        // ...
    }
}</code></pre>
<p>When we run the test:</p>
<pre><code class="language-bash">vendor/bin/phpunit tests</code></pre>
<p>This exception will stop us:</p>
<pre><code class="language-yaml">The "App\SomeService" service or alias has been removed or inlined when the container
was compiled. You should either make it public, or stop using the container directly
and use dependency injection instead.</code></pre>
<p>...<em>make it public</em>...</p>
<p>Ok!</p>
<pre><code class="language-diff"> # app/config/config.yml
 services:
     _defaults:
         autowire: true

     App\:
         resource: ..
+
+    App\SomeService:
+        public: true</code></pre>
<p>And run tests again:</p>
<pre><code class="language-bash">vendor/bin/phpunit tests</code></pre>
<p class="text-success pt-3 pb-3">
    <em class="fas fa-fw fa-lg fa-check"></em> Voilá!
</p>
<h2 id="down-the-smelly-rabbit-hole">Down the Smelly Rabbit Hole</h2>
<p>As you can see, we can load dozens of service from <code>App\</code> by 2 lines. But to test 1, we need to add 2 extra lines to config.</p>
<pre><code class="language-diff"> # app/config/config.yml
 services:
     _defaults:
         autowire: true

     App\:
         resource: ..
+
+    # for tests only
+    App\SomeService:
+        public: true
+
+    App\AnotherService:
+        public: true
+
+    App\YetAnotherService:
+        public: true</code></pre>
<p>This is <em>one to many</em> code smell.</p>
<p>Also, we can <strong>extract it to test config</strong> <code>tests/config/config.yml</code>, so it's easier to hide the smell.</p>
<p>Or just <strong>make everything public</strong>, like <a href="https://github.com/symplify/symplify/commit/d0457773915fa32df08e7342d5cd0093f97850ff">I did in Symplify 6 months ago</a>:</p>
<pre><code class="language-diff"> services:
     _defaults:
         autowire: true
+        # for tests only
+        public: true

      App\:
          resource: ..</code></pre>
<p>But Symfony folks will not be happy to see this, because they need people to use private services. Why? So they learn to use constructor injection in services instead of <code>$this-&gt;get(...)</code>. So how should we do it <em>the Symfony-way</em>?</p>
<p><strong>We're not alone asking this question</strong>. There are over <a href="https://stackoverflow.com/search?q=symfony+tests+private+services+is%3Aquestion">52 results for &quot;symfony tests private services&quot; on StackOverflow</a> at the time being:</p>
<img src="/assets/images/posts/2018/private-services/popular.png" class="img-thumbnail">
<p>But what saint options we have?</p>
<h2 id="1-in-symfony-4-1-with-frameworkbundle">1. In Symfony 4.1 with FrameworkBundle</h2>
<p>This is now fixed in
<a href="https://symfony.com/blog/new-in-symfony-4-1-simpler-service-testing">Symfony 4.1 with Simpler service testing</a>.</p>
<p>Do you use</p>
<ul>
<li><code>Symfony\Bundle\FrameworkBundle\Test\KernelTestCase</code> or</li>
<li><code>Symfony\Bundle\FrameworkBundle\Test\WebTestCase</code></li>
</ul>
<p>for your tests? <strong>Just upgrade to Symfony 4.1 and you're done.</strong></p>
<h2 id="2-in-symfony-4-1-standalone-or-symfony-3-4-4-0">2. In Symfony 4.1 Standalone or Symfony 3.4/4.0</h2>
<p>But if you create open-source, you usually stick with last LTS, Symfony 3.4. How to solve it there?</p>
<p>It's reasonable we want to <strong>keep all configs untouched</strong>, no matter if we're in dev or tests.</p>
<pre><code class="language-yaml"># app/config/config.yml
services:
    _defaults:
        autowire: true

    App\:
        resource: ..</code></pre>
<p>And tests as well:</p>
<pre><code class="language-php">use App\SomeService;
use PHPUnit\Framework\TestCase;

final class SomeServiceTest extends TestCase
{
    public function testSomeMethod()
    {
        $kernel = new AppKernel;
        $kernel-&gt;boot();
        $container = $kernel-&gt;getContainer();

        $someService = $container-&gt;get(SomeService::class);
        // ...
    }
}</code></pre>
<p>If there would only be one place with a switch, that would make that all code smells go away and let us test. That would be awesome, right? How can we achieve that? Any ideas?</p>
<h3 id="compiler-pass-possible-solution">Compiler Pass = Possible Solution?</h3>
<p>Compiler pass allows us to write nice, decoupled and reusable code. After all, the solution for Symfony 4.1 is done by <a href="https://github.com/symfony/symfony/pull/26499/files#diff-ce4ed09b11d8fa531159e96df52124f3">a compiler pass</a>, that creates public 'test.service-name' aliases.</p>
<p>Let's create one for our PHPUnit test cases:</p>
<pre><code class="language-php">&lt;?php

use Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface;
use Symfony\Component\DependencyInjection\ContainerBuilder;

final class PublicForTestsCompilerPass implements CompilerPassInterface
{
    public function process(ContainerBuilder $containerBuilder): void
    {
        if (! $this-&gt;isPHPUnit()) {
            return;
        }

        foreach ($containerBuilder-&gt;getDefinitions() as $definition) {
            $definition-&gt;setPublic(true);
        }

        foreach ($containerBuilder-&gt;getAliases() as $definition) {
            $definition-&gt;setPublic(true);
        }
    }

    private function isPHPUnit(): bool
    {
        // there constants are defined by PHPUnit
        return defined('PHPUNIT_COMPOSER_INSTALL') || defined('__PHPUNIT_PHAR__');
    }
}</code></pre>
<p>And register it in our Kernel:</p>
<pre><code class="language-php">&lt;?php

final class AppKernel extends Kernel
{
    protected function build(ContainerBuilder $containerBuilder): void
    {
        $containerBuilder-&gt;addCompilerPass(new PublicForTestsCompilerPass());
    }
}</code></pre>
<p>This removes all <code>public: true</code> lines from all your configs.</p>
<img src="/assets/images/posts/2018/private-services/gone.png" class="img-thumbnail">
<p class="text-success pt-3 pb-3">
    <em class="fas fa-fw fa-lg fa-check"></em> That's it!
</p>
<h2 id="but-why">But Why?</h2>
<ul>
<li>&quot;So we can remove the <code>public: true</code> from our configs.&quot;</li>
<li>&quot;That's a consequence, not a reason. So why?&quot;</li>
<li>&quot;So we can get services from container in tests.&quot;</li>
<li>&quot;That's a goal. I ask for why this way?&quot;</li>
<li>&quot;Well, it's universal and just works.&quot;</li>
</ul>
<p>It is. But in 6 months of using this method <strong>I got different feedback from the PHP community</strong>:</p>
<ul>
<li>Why there are no public services, but we can get them from container anyway? <em class="fas fa-fw fa-lg fa-times text-danger"></em></li>
<li>Why test and dev services behave differently? <em class="fas fa-fw fa-lg fa-times text-danger"></em></li>
<li>Why I can't get the service from container in the second application as in the first one? <em class="fas fa-fw fa-lg fa-times text-danger"></em> (They <a href="/blog/2018/08/27/why-and-how-to-avoid-the-memory-lock/">forgot to add</a> a compiler pass to new Kernel.)</li>
<li>Why I have to add <code>public: true</code> for Symfony\Console\Application in bin file, but not in tests? <em class="fas fa-fw fa-lg fa-times text-danger"></em></li>
</ul>
<p><strong>People were confused 😕🤔</strong>. The trade of compiler pass feature was putting too much knowledge pressure on the programmers. <strong>The application uses constructor injection everywhere, so there is no real added value by working with term <em>public/private</em> services</strong>.</p>
<h2 id="final-proven-practise">Final Proven Practise</h2>
<p>In the end <strong>I removed the compiler pass and moved back to <code>public: true</code> in all configs</strong> right bellow <code>autowire: true</code>:</p>
<pre><code class="language-diff"> services:
     _defaults:
         autowire: true
+        public: true</code></pre>
<p>Thanks to that, the <strong>whole process became clear</strong>:</p>
<ul>
<li>We're using native Symfony syntax, you don't have to learn compiler passes <em class="fas fa-fw fa-lg fa-check text-success"></em></li>
<li>Configs are clear and people know what to expect <em class="fas fa-fw fa-lg fa-check text-success"></em></li>
<li>The location is always behind <code>autowire: true</code> → all configs have the same setup <em class="fas fa-fw fa-lg fa-check text-success"></em></li>
</ul>
<p><br><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/05/17/how-to-test-private-services-in-symfony</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 17 May 2018 00:00:00 +0000</pubDate>
                                    <updated>2019-04-01UTC00:00:000</updated>
                    <atom:updated>Mon, 01 Apr 2019 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Mon, 01 Apr 2019 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/05/17/how-to-test-private-services-in-symfony#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Load --config With Services in Symfony Console ]]></title>
                <link>https://tomasvotruba.com/blog/2018/05/14/how-to-load-config-with-services-in-symfony-console</link>
                <description><![CDATA[ <p>PHP CLI apps usually accept config, to setup their behavior. For PHPUnit it's <code>phpunit.xml</code>, for PHP CS Fixer it's <code>.php_cs</code>, for ECS it's <code>ecs.php</code>, for PHPStan it's <code>phpstan.neon</code> and so on.
<br><br>
In the first post about PHP CLI Apps I wrote about <a href="/blog/2018/05/07/why-you-should-combine-symfony-console-and-dependency-injection/">poor DI support in PHP CLI projects</a>.
<br><br>
Today we look on the first barrier that leads most people to prefer static over DI - <strong>how to load config with services</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <pre><code class="language-bash">vendor/bin/phpstan --configuration phpstan.neon
vendor/bin/ecs --config ecs.php</code></pre>
<p>Can you spot the difference? Same CLI input, but:</p>
<ul>
<li>
<p>first has only <a href="/blog/2018/05/07/why-you-should-combine-symfony-console-and-dependency-injection/#2-container-inceptions">in-command container build for few classes</a>,</p>
</li>
<li>
<p>second is <a href="/blog/2018/05/07/why-you-should-combine-symfony-console-and-dependency-injection/#3-symfony-console-meets-symfony-dependencyinjection">Application with full DI support</a>, like a Symfony App.</p>
</li>
</ul>
<p>Today you'll learn <strong>how</strong> to get from first to second, knowing <strong>why</strong> and all the pros and cons.</p>
<h2 id="who-comes-first">Who Comes First?</h2>
<img src="/assets/images/posts/2018/config-di-console/chicken-egg.jpg" class="img-thumbnail">
<p>This addresses a problem (or rather mind-exercise) of <a href="/blog/2018/05/07/why-you-should-combine-symfony-console-and-dependency-injection/#injection-inception-problem">injection inception</a> aka <em>chicken vs. egg</em>. Because this might be a little bit confusing, I try to describe it in 3 different forms:</p>
<h3 id="a-in-chicken-vs-egg-form">A. In Chicken vs. Egg Form</h3>
<p>We need <em>an egg</em>, so we can create <em>a chicken</em>. We can get <em>an egg</em> thanks to <em>a chicken</em>.  With <em>this egg</em>, we can create <em>a chicken</em>. Then we need to get a chicken to &quot;cluck&quot;.</p>
<h3 id="b-in-container-vs-config-form">B. In Container vs. Config Form</h3>
<p>We need a config to create a container. We can get a config thanks to <code>Symfony\Component\Console\Application</code>. With this value, we can create a container. Then we need to get a <code>Symfony\Component\Console\Application</code> service and call <code>run()</code> method on it.</p>
<h3 id="c-in-implementation-form">C. In Implementation Form</h3>
<p>Are you lost? That's all right. Let's see it in a list:</p>
<ul>
<li>Get a user-provided config from CLI (e.g. <code>--config ecs.php</code>)</li>
<li>Use <code>Symfony\Component\Console\Application</code> to get this value</li>
<li>Create a DI container with this config</li>
<li>Get <code>Application</code> service from the container</li>
<li>Invoke the <code>Application</code> with provided config</li>
<li>Get a user-provided config from CLI (e.g. <code>--config ecs.php</code>)</li>
<li>...</li>
</ul>
<p>Very nice recursion, isn't it?</p>
<h2 id="why-this-problem-even-exists">Why this Problem Even Exists?</h2>
<p>To get the main config in PHP App is easy. Symfony has <a href="https://github.com/symfony/demo/blob/v1.0.0/app/AppKernel.php#L59">a common path in <code>Kernel</code></a>, Nette <a href="https://github.com/nette/sandbox/blob/b3bd786d71bdecec441121cafc63086e58355130/app/bootstrap.php#L18">in Configurator</a> and other frameworks likewise.</p>
<p>It's usually <strong>absolute path defined in PHP code</strong>, usually <code>app/config/config.php</code> or <code>app/config/config.neon</code>. It doesn't change and every developer knows that. If we put the file to <code>app/config.php</code>, it won't be loaded. PHP Apps are nice and clear in this matter.</p>
<h3 id="php-cli-apps-are-free">PHP CLI Apps are Free</h3>
<p>Users can configure the path to the main config, they can have multiple configs, <code>.dist</code> configs, config located in the root or nested in <code>/config</code> directory, it can be named <code>my-own-super-cool-config.php</code> and so on.</p>
<p>Legacy bound architecture design or static code is a price for the freedom we have to pay here. <strong>So can we pay less?</strong></p>
<h3 id="3-possible-quot-solutions-quot">3 Possible &quot;Solutions&quot;</h3>
<p>Imagine we call EasyCodingStandard with following <code>--config</code>:</p>
<pre><code class="language-bash">vendor/bin/ecs --config some-config.php</code></pre>
<h2 id="1-the-mainstream-no-container">1. The Mainstream: No Container</h2>
<p>Use static approach, no services config, just list of items. Most spread solution so far.</p>
<h3 id="how-if-fits">How if Fits?</h3>
<p><em class="fas fa-fw fa-lg fa-check text-success"></em> Ready in 2 minutes</p>
<p><em class="fas fa-fw fa-lg fa-times text-danger"></em> Well, static</p>
<h2 id="2-di-for-poor-people-container-in-a-command">2. DI for Poor People: Container in a Command</h2>
<p>I'm used to container <a href="/blog/2017/06/01/thank-you-david/">thanks to great work of David Grudl</a> and many posts <a href="https://phpfashion.com/co-je-dependency-injection">he wrote about dependency injection</a>, so this one is very counter-intuitive to me, but I still see it quite often in the wild.</p>
<p><strong>The easiest way to start</strong> using Container in a static application is to <strong>create it at the class we need it:</strong></p>
<pre><code class="language-php">use Symfony\Component\Console\Command\Command;

class SomeCommand extends Command
{
    // ...

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $containerBuilder = new ContainerBuilder;
        $containerBuilder-&gt;addConfig($input-&gt;getOption('config'));
        $container = $containerBuilder-&gt;build();

        $someService = $container-&gt;get(SomeService::class);
        // ...
    }
}</code></pre>
<h3 id="how-if-fits">How if Fits?</h3>
<p><em class="fas fa-fw fa-lg fa-check text-success"></em> Ready in 10 minutes</p>
<p><em class="fas fa-fw fa-lg fa-times text-danger"></em> Only local scope, we need to re-create container everywhere we need it</p>
<p><em class="fas fa-fw fa-lg fa-times text-danger"></em> The Chicken vs. Egg problem still remains very clear</p>
<h2 id="3-kill-the-egg-the-bin-file-tuning">3. Kill the Egg: The bin File Tuning</h2>
<p>When I worked on the first version of <a href="https://github.com/nette/coding-standard">nette/coding-standard</a>
almost a year ago, David came with question: &quot;how to use ECS with 2 different configs - one for PHP 5.6 and one for PHP 7.0&quot;?</p>
<pre><code class="language-bash">vendor/bin/ecs check src --set vendor/nette/cofing-standard/php56.php
vendor/bin/ecs check src --set vendor/nette/cofing-standard/php70.php</code></pre>
<p>I had no idea. So I created <a href="https://github.com/symplify/symplify/issues/192">this issue at Symplify</a> and praised the open-source Gods, because current version of <code>bin/ecs</code> was as simple as:</p>
<pre><code class="language-php"># bin/ecs

require_once __DIR__ . '/../vendor/autoload.php';

$container = (new ContainerFactory)-&gt;create();

// ...

$application = $container-&gt;get(Symfony\Component\Console\Application::class);
$application-&gt;run();</code></pre>
<p><br></p>
<p>So what now?</p>
<h3 id="code-argvinput-code-to-the-rescue"><code>ArgvInput</code> to the Rescue</h3>
<p><a href="https://github.com/symplify/symplify/pull/198" class="btn btn-dark btn-sm">
<em class="fab fa-github fa-fw"></em>
See pull-request #198
</a></p>
<p>Do you know <code>ArgvInput</code> class? It's a Symfony\Console input helper around native PHP <code>$_SERVER['argv']</code>, that holds all the <code>arguments --options 1</code> passed via CLI.</p>
<p>Let's use it:</p>
<pre><code class="language-php">$config = null;
$argvInput = new Symfony\Component\Console\Input\ArgvInput;
if ($argvInput-&gt;hasParameterOption('--config')) {
    $config = $argvInput-&gt;getParameterOption('--config');
}

if ($config) {
    $container = (new ContainerFactory)-&gt;createWithConfig($config);
} else {
    $container = (new ContainerFactory)-&gt;create();
}

$application = $container-&gt;get(Symfony\Component\Console\Application::class);
$application-&gt;run();</code></pre>
<p>Run it:</p>
<pre><code class="language-bash">bin/ecs check src --config custom-config.php</code></pre>
<p>And see how all nicely works on the 1st run:</p>
<img src="/assets/images/posts/2018/config-di-console/ups.png" class="img-thumbnail">
<p>Or not. Oh, it looks like we need to add <code>config</code> option to the <code>CheckCommand</code> definition:</p>
<pre><code class="language-diff"> final class CheckCommand extends Command
 {
     // ...

     protected function configure(): void
     {
         $this-&gt;setName('check');
         // ...
+        $this-&gt;addOption('config', null, InputOption::VALUE_REQUIRED, 'Config file.');
     }
 }</code></pre>
<p>So far so good.</p>
<p><br></p>
<p>Later, a <code>ShowCommand</code> was added:</p>
<pre><code class="language-bash">bin/ecs show --config custom-config.php</code></pre>
<p>And we see our old friend again:</p>
<img src="/assets/images/posts/2018/config-di-console/ups.png" class="img-thumbnail">
<p>What now? Add the <code>config</code> option to the <code>ShowCommand</code> definition?</p>
<pre><code class="language-diff"> final class ShowCommand extends Command
 {
     // ...

     protected function configure(): void
     {
         $this-&gt;setName('show');
         // ...
+        $this-&gt;addOption('config', null, InputOption::VALUE_REQUIRED, 'Config file.');
     }
 }</code></pre>
<p>Wait a bit... Can you smell it?</p>
<p><em class="fas fa-fw fa-lg fa-times text-danger"></em> Duplicated code</p>
<p><em class="fas fa-fw fa-lg fa-times text-danger"></em> Not-lazy</p>
<p><em class="fas fa-fw fa-lg fa-times text-danger"></em> Creates <strong>memory lock</strong> to 1 command → 1 extra operation. If we forget this, it will break.</p>
<p><br></p>
<p>What else can we do to <strong>solve this once and for all</strong> and release our memory to work on more important things?</p>
<h3 id="common-options-to-all-commands">Common Options to all Commands</h3>
<p>Let me think... I've seen something like this before:</p>
<pre><code class="language-bash">vendor/bin/ecs check /src -v
vendor/bin/ecs show -v</code></pre>
<p>Where is this <code>-v</code> option from and how does it work in every command even though we don't define it there?</p>
<p>After a bit of in-PHPStorm-Googling I found <a href="https://github.com/symfony/symfony/blob/784a7accf55dbca0f2363457a066d6bcf03d065f/src/Symfony/Component/Console/Application.php#L943-L956"><code>this</code></a>:</p>
<pre><code class="language-php">namespace Symfony\Component\Console;

class Application
{
    // ...

    protected function getDefaultInputDefinition()
    {
        return new InputDefinition(array(
            new InputArgument('command', InputArgument::REQUIRED, 'The command to execute'),
            new InputOption('--help', '-h', InputOption::VALUE_NONE, 'Display this help message'),
            new InputOption('--quiet', '-q', InputOption::VALUE_NONE, 'Do not output any message'),
            new InputOption('--verbose', '-v|vv|vvv', InputOption::VALUE_NONE, 'Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug'),
            new InputOption('--version', '-V', InputOption::VALUE_NONE, 'Display this application version'),
            new InputOption('--ansi', '', InputOption::VALUE_NONE, 'Force ANSI output'),
            new InputOption('--no-ansi', '', InputOption::VALUE_NONE, 'Disable ANSI output'),
            new InputOption('--no-interaction', '-n', InputOption::VALUE_NONE, 'Do not ask any interactive question'),
        ));
    }
}</code></pre>
<p>So maybe we could extend this class and our <code>--config</code> option:</p>
<pre><code class="language-php">namespace Symplify\EasyCodingStandard\Console;

use Symfony\Component\Console\Application as SymfonyApplication;
use Symfony\Component\Console\Input\InputOption;

final class Application extends SymfonyApplication
{
    protected function getDefaultInputDefinition()
    {
        $inputDefinition = parent::getDefaultInputDefinition();

        // adds "--config" option
        $inputDefinition-&gt;addOption(new InputOption('config', null, InputOption::VALUE_REQUIRED, 'Config file.'));

        return $inputDefinition;
    }
}</code></pre>
<p>(Btw, <a href="https://github.com/symfony/symfony/blob/784a7accf55dbca0f2363457a066d6bcf03d065f/src/Symfony/Component/Console/Command/Command.php#L386-L391"><code>addOption()</code></a> is just a helper method for <code>new InputOption()</code>.)</p>
<p>And use our <code>Application</code> in <code>bin/rector</code>:</p>
<pre><code class="language-diff"> // ...

-$application = $container-&gt;get(Symfony\Component\Console\Application::class);
+$application = $container-&gt;get(Symplify\EasyCodingStandard\Console\Application::class);
 $application-&gt;run();</code></pre>
<p>Don't foget to update <code>services.php</code>:</p>
<pre><code class="language-diff"> &lt;?php

 declare(strict_types=1);

-use Symfony\Component\Console\Application;
+use Symplify\EasyCodingStandard\Console\Application;

 use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

 return static function (ContainerConfigurator $containerConfigurator): void {
     $services = $containerConfigurator-&gt;services();

     $services-&gt;defaults()
         -&gt;autowire();

     $services-&gt;set(Application::class)
         // for bin file
         -&gt;public();
};</code></pre>
<p>And let's try this again:</p>
<pre><code class="language-bash">bin/ecs check src --config custom-config.php</code></pre>
<img src="/assets/images/posts/2018/config-di-console/yes.png" class="img-thumbnail">
<h3 id="how-if-fits">How if Fits?</h3>
<p><em class="fas fa-fw fa-lg fa-times text-danger"></em> Ready in 15 minutes</p>
<p><em class="fas fa-fw fa-lg fa-check text-success"></em> Setup &amp; Forget</p>
<p><em class="fas fa-fw fa-lg fa-check text-success"></em> Much more legacy-proof</p>
<p><em class="fas fa-fw fa-lg fa-check text-success"></em> We can now use Dependency Injection <strong>everywhere we need</strong></p>
<p><em class="fas fa-fw fa-lg fa-check text-success"></em> And make use off Symfony, Nette or any other container features we're used to from Web Apps.</p>
<p><br></p>
<h2 id="where-to-go-next">Where to Go Next?</h2>
<p>Do you have a CLI App and do you find DI approach useful? Do you have <code>--config</code> or <code>-c</code> or <code>--configuration</code> options and do you want to migrate them to this? Or maybe you have <code>--set</code> option, that shortens the config path in some way:</p>
<pre><code class="language-bash">vendor/bin/ecs check src --set clean-code</code></pre>
<p>Yes? Then go check:</p>
<ul>
<li>
<p><a href="https://github.com/symplify/easy-coding-standard/blob/master/bin/container.php"><code>bin/container.php</code></a> - a file that handles container creation</p>
</li>
<li>
<p><a href="https://github.com/symplify/package-builder#4-load-a-config-for-cli-application"><code>Symplify\PackageBuilder\Configuration\ConfigFileFinder</code></a></p>
</li>
<li>
<p><a href="https://github.com/symplify/package-builder#6-load-config-via---level-option-in-your-console-application"><code>Symplify\PackageBuilder\Configuration\SetFileFinder</code></a></p>
</li>
</ul>
<p>...and stay tuned for next post about CLI Apps in PHP.</p>
<p><br><br></p>
<p>Happy CLInjecting!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/05/14/how-to-load-config-with-services-in-symfony-console</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 14 May 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-08-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Aug 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/05/14/how-to-load-config-with-services-in-symfony-console#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Rectify: Turn All Action Injects to Constructor Injection in Your Symfony Application ]]></title>
                <link>https://tomasvotruba.com/blog/2018/05/10/rectify-turn-all-action-injects-to-constructor-injection-in-your-symfony-application</link>
                <description><![CDATA[ <p>Action Injections are much fun, but it can turn your project to legacy very fast. How to <strong>refactor out of the legacy back to constructor injection</strong> and still keep that smile on your face?</p> ]]></description>
                <content:encoded><![CDATA[ <p>I wrote about <a href="/blog/2018/04/23/how-to-slowly-turn-your-symfony-project-to-legacy-with-action-injection/">How to Slowly Turn your Symfony Project to Legacy with Action Injection</a> a few weeks ago. It surprised me that <strong>the approach had mostly positive <a href="/blog/2018/04/23/how-to-slowly-turn-your-symfony-project-to-legacy-with-action-injection/#comments">feedback</a></strong>:</p>
<blockquote class="blockquote">
    Couldn't agree more with pretty much everything said! Action injection makes it really confusing on whether an object is treated stateful or stateless (very grey area with the Session for example).
    <footer class="blockquote-footer text-right">Iltar van der Berg</footer></blockquote>
<blockquote class="blockquote">
    I'm a Symfony trainer and I'm told to teach people how to use Symfony and talk about this injection pattern. Sob.
    <footer class="blockquote-footer text-right">Alex Rock</footer></blockquote>
<blockquote class="blockquote">
    I'm working on a Project that uses action injection pattern and I hate it. I like autowiring but the whole idea about action injection is broken. And this project is in sf28 do we don't use autowiring. Maintainance and development with this pattern is a total nightmare.
    <footer class="blockquote-footer text-right">A</footer></blockquote>
<p><br></p>
<p>It's natural to <strong>try new patterns with an open heart</strong> and validate them in practice, but <strong>what if</strong> you find this way as not ideal and want to go to constructor injection instead?</p>
<p>How would you change all your 50 controllers with action injections...</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

namespace App\Controller;

final class SomeController
{
    public function detail(int $id, Request $request, ProductRepository $productRepository)
    {
        $this-&gt;validateRequest($request);
        $product = $productRepository-&gt;find($id);
        // ...
    }
}</code></pre>
<p><strong>...to the constructor injection:</strong></p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

namespace App\Controller;

final class SomeController
{
    /**
     * @var ProductRepository
     */
    private $productRepository;

    public function __construct(ProductRepository $productRepository)
    {
        $this-&gt;productRepository = $productRepository;
    }

    public function detail(int $id, Request $request)
    {
        $this-&gt;validateRequest($request);
        $product = $this-&gt;productRepository-&gt;find($id);
        // ...
    }
}</code></pre>
<h3 id="how-to-waste-week-in-1-team">How to Waste Week in 1 Team</h3>
<ul>
<li>50 controllers, 4 actions per each → 200 services</li>
<li>some of them are duplicated</li>
<li>identify services, <a href="https://symfony.com/doc/current/controller.html#controller-request-argument"><code>Request</code> objects</a> and <a href="https://symfony.com/doc/current/controller/argument_value_resolver.html">Argument Resolver objects</a></li>
<li>code-reviews and discussions that might take up-to 5-10 days</li>
<li>and rebase on new merged PRs... well, you have 4-10 hours of team-work wasted ahead of you.</li>
</ul>
<p><br></p>
<p><strong>I find the time of my team very precious</strong>, don't you? So I Let Rector do the work.</p>
<h2 id="3-steps-to-instant-refactoring-of-all-controllers">3 Steps to Instant Refactoring of All Controllers</h2>
<h3 id="1-install-rector">1. Install Rector</h3>
<pre><code class="language-bash">composer install rector/rector --dev</code></pre>
<h3 id="2-prepare-config">2. Prepare Config</h3>
<p>Add the <code>action-injection-to-constructor-injection</code> set and configure your Kernel class name.</p>
<pre><code class="language-php">&lt;?php

// rector.php

declare(strict_types=1);

use Rector\Core\Configuration\Option;
use Rector\Set\ValueObject\SetList;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return function (ContainerConfigurator $containerConfigurator): void {
    $parameters = $containerConfigurator-&gt;parameters();

    $parameters-&gt;set(Option::SETS, [
        SetList::ACTION_INJECTION_TO_CONSTRUCTOR_INJECTION
    ]);

    // the default value
    $parameters-&gt;set('kernel_class', 'App\Kernel');
};</code></pre>
<h3 id="3-run-rector-on-your-code">3. Run Rector on Your Code</h3>
<pre><code class="language-bash">vendor/bin/rector process /app --dry-run</code></pre>
<p>You should see diffs like:</p>
<pre><code class="language-diff"> &lt;?php declare(strict_types=1);

 namespace App\Controller;

 final class SomeController
 {
+    /**
+     * @var ProductRepository
+     */
+    private $productRepository;
+
+    public function __construct(ProductRepository $productRepository)
+    {
+        $this-&gt;productRepository = $productRepository;
+    }
+
-    public function detail(int $id, Request $request, ProductRepository $productRepository)
+    public function detail(int $id, Request $request)
     {
         $this-&gt;validateRequest($request);
-        $product = $productRepository-&gt;find($id);
+        $product = $this-&gt;productRepository-&gt;find($id);
         // ...
     }
 }</code></pre>
<h3 id="3-run-it">3. Run It</h3>
<p>Are all looking good? Run it:</p>
<pre><code class="language-bash">vendor/bin/rector process /app</code></pre>
<h2 id="clean-code-done-but-what-about-beautiful">Clean Code... Done, but What About Beautiful?</h2>
<p>You've probably noticed that code itself is not looking too good. Rector's job is not to clean, but to change the code. It's not a hipster designer, but rather a thermonuclear engineer. <strong>That's why there are coding standards. You can apply your own or if not good enough use Rector's prepared set</strong>:</p>
<pre><code class="language-bash">composer require symplify/easy-coding-standard --dev
vendor/bin/ecs --config vendor/rector/rector/ecs-after-rector.php --fix</code></pre>
<p>And your code is now both <strong>refactored and clean</strong>. That's it!</p>
<p><br><br></p>
<p>Happy instant refactoring!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/05/10/rectify-turn-all-action-injects-to-constructor-injection-in-your-symfony-application</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 10 May 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-08-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Aug 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/05/10/rectify-turn-all-action-injects-to-constructor-injection-in-your-symfony-application#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Why You Should Combine Symfony Console and Dependency Injection ]]></title>
                <link>https://tomasvotruba.com/blog/2018/05/07/why-you-should-combine-symfony-console-and-dependency-injection</link>
                <description><![CDATA[ <p>I saw 2 links to Symfony\Console in <a href="http://symfony.com/blog/a-week-of-symfony-592-30-april-6-may-2018">today's Week of Symfony</a> (what a time reference, huh?).
There are plenty of such posts out there, even in Pehapkari community blog: <a href="https://pehapkari.cz/blog/2017/06/02/best-practice-for-symfony-console-in-nette">Best Practice for Symfony Console in Nette</a> or <a href="/blog/2019/08/12/standalone-symfony-console-from-scratch/">Symfony Console from the Scratch</a>.
<br>
But nobody seems to write about <strong>the greatest bottleneck of Console applications - static cancer</strong>. Why is that?</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="1-current-status-in-php-console-applications">1. Current Status in PHP Console Applications</h2>
<p>Your web application has an entry point in <code>www/index.php</code>, where it loads the DI Container, gets <code>Application</code> class and calls <code>run()</code> on it (with explicit or implicit <code>Request</code>):</p>
<pre><code class="language-php">require __DIR__ . '/vendor/autoload.php';

// Kernel or Configurator
$container = $kernel-&gt;getContainer();
$application = $container-&gt;get(Application::class);
$application-&gt;run(Request::createFromGlobals());</code></pre>
<p>Console Applications (further as <em>CLI Apps</em>) have very similar entry point. Not in <code>index.php</code>, but usually in <code>bin/something</code> file.</p>
<p>When we look at entry points of popular PHP Console Applications, like:</p>
<p><br></p>
<p><a href="https://github.com/squizlabs/PHP_CodeSniffer/blob/master/bin/phpcs">PHP_CodeSniffer</a></p>
<pre><code class="language-php">$runner = new PHP_CodeSniffer\Runner();
$runner-&gt;runPHPCS();</code></pre>
<p><br></p>
<p><a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer/blob/master/php-cs-fixer">PHP CS Fixer</a></p>
<pre><code class="language-php">$application = new PhpCsFixer\Console\Application();
$application-&gt;run();</code></pre>
<p><br></p>
<p><a href="https://github.com/phpstan/phpstan/blob/master/bin/phpstan">PHPStan</a></p>
<pre><code class="language-php">$application = new Symfony\Component\Console\Application('PHPStan');
$application-&gt;add(new AnalyseCommand());
$application-&gt;run();</code></pre>
<p><br></p>
<p>If we <strong>mimic such approach in web apps</strong>, how would our <code>www/index.php</code> look like?</p>
<pre><code class="language-php">require __DIR__ . '/vendor/autoload.php';

$application = new Application;
$application-&gt;addController(new HomepageController);
$application-&gt;addController(new PostController);
$application-&gt;addController(new ContactController);
$application-&gt;addController(new ProducController);
// ...
$application-&gt;run();</code></pre>
<p>How do you feel seeing such code? I feel a bit weird and <a href="/blog/2018/04/26/how-i-got-into-static-trap-and-made-fool-of-myself/">I don't get on well with static code</a>.</p>
<p>On the other hand, if we take the web app approach to cli apps:</p>
<pre><code class="language-php">$container = $kernel-&gt;getContainer();

$application = $container-&gt;get(Application::class);
$application-&gt;run(new ArgInput);</code></pre>
<h3 id="why-is-that">Why is That?</h3>
<p>I wish I knew this answer :). In my opinion and experience with building cli apps, there might be few...</p>
<h3 id="em-class-fas-fa-fw-fa-lg-fa-check-text-success-em-advantages"><em class="fas fa-fw fa-lg fa-check text-success"></em> Advantages</h3>
<ul>
<li>
<p>CLI apps almost always start with simple plain PHP code:</p>
<pre><code class="language-php"># bin/turn-tabs-to-spaces.php

$input = $argv[1];

// 1st PSR-2 rule: replace tabs with spaces
return str_replace('\t', ' ', $input);</code></pre>
<p>No container, no dependency injection, sometimes not even dependencies. Just see <a href="https://gist.github.com/fabpot/3f25555dce956accd4dd">the PHP-CS-Fixer v0.00001</a>.</p>
<p>When the proof of concepts works, the application grows.</p>
</li>
<li>
<p>It's easy, quick and simple.</p>
</li>
<li>
<p>Who would use container right from the start of 1 command, right?</p>
</li>
</ul>
<h3 id="em-class-fas-fa-fw-fa-lg-fa-times-text-danger-em-disadvantages"><em class="fas fa-fw fa-lg fa-times text-danger"></em> Disadvantages</h3>
<ul>
<li>If you start a project with <code>new</code> static, it's difficult to migrate.</li>
<li>The need of refactoring is clear much earlier before it really happens.</li>
<li>When the application grows, new classes are added and you need to think more and more what class to pass by the constructor, which are singletons, which value objects/DTOs etc.</li>
</ul>
<h2 id="2-container-inceptions">2. Container Inceptions</h2>
<p>The container is slowly appearing not as the backbone of application as in web apps, but as part of commands.</p>
<p>E.g. <a href="https://github.com/phpstan/phpstan/blob/a991e94fca78b7fb7017a469b19834766787a04c/src/Command/AnalyseCommand.php#L152"><code>AnalyseCommand</code></a> in PHPStan:</p>
<pre><code class="language-php">use Symfony\Component\Console\Command\Command;

class AnalyseCommand extends Command
{
    // ...

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $container = $this-&gt;containerFactory-&gt;createFromConfig($input-&gt;getOption('config'));

        $someService = $container-&gt;get(SomeService::class);
        // ...
    }
}</code></pre>
<p>Or in <a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer/blob/0257ccae7ddcbdd5f7d51de3ae92ffac02d0e1c1/src/FixerFactory.php#L107"><code>FixerFactory</code></a> in PHP CS Fixer:</p>
<pre><code class="language-php"># much simplified

class FixerFactory
{
    public function registerBuiltInFixers()
    {
        static $fixers = [];

        foreach (Finder::findAllFixerClasses() as $fixerClass) {
            $fixers[] = new $fixerClass;
        }
    }
}</code></pre>
<h3 id="em-class-fas-fa-fw-fa-lg-fa-times-text-danger-em-disadvantages"><em class="fas fa-fw fa-lg fa-times text-danger"></em> Disadvantages</h3>
<ul>
<li>Well, ambiguous approach to creating service-like-classes.</li>
<li>There is an inconsistent approach to services. How do you know where to put it? Is it a service or is it a class to be created manually?</li>
<li>Should you inject dependency manually or let container (or any higher service) handle that?</li>
</ul>
<h3 id="em-class-fas-fa-fw-fa-lg-fa-check-text-success-em-advantages"><em class="fas fa-fw fa-lg fa-check text-success"></em> Advantages</h3>
<ul>
<li>It's better than no container at all.</li>
<li>It gives at least some basis for future refactoring.</li>
<li>Very useful for collecting of minimal basic classes: like rules in PHPStan, Fixers in PHP CS Fixer or Sniffs in PHP Code Sniffer.</li>
</ul>
<p><br></p>
<p><strong>Imagine a code like this in your web application</strong>:</p>
<pre><code class="language-php">class ProductController
{
    /**
     * @var Connection
     */
    private $connection;

    public function __construct(Connection $connection)
    {
        $this-&gt;connection = $connectoin;
    }

    public function detail($id);
    {
        $productRepository = new ProductRepository($this-&gt;connection);
        $product = $productRepository-&gt;get($id);

        // ...
    }
}</code></pre>
<p>How do you feel about it?</p>
<h3 id="injection-inception-problem">Injection Inception Problem</h3>
<p>CLI apps authors often struggle with the question: <em>When should be the container created</em>?</p>
<ul>
<li>In a bin file?</li>
<li>In a <code>Command</code>?</li>
<li>And how to get any service container outside the <code>Command</code> scope?</li>
<li>How to share services between 2 <code>Command</code>s?</li>
<li>How to avoid creating container in every single <code>Command</code>?</li>
</ul>
<p>And how to create container <strong>when user provides config with services via <code>--config</code> option</strong>?
The complexity of this question usually leads to choice 2 or 1.</p>
<p>I won't get into more details now, since I'll write about possible solutions in following posts.</p>
<img src="/assets/images/posts/2018/cli-app-di/inject-inception.jpg" class="img-thumbnail">
<p>This application cycle has these steps:</p>
<ul>
<li>call bin file</li>
<li>create <code>Application</code> with <code>new</code></li>
<li>add commands with <code>$application-&gt;add(new SomeCommand)</code></li>
<li>run <code>Application</code></li>
<li>in called command, there are 2 approaches
<ul>
<li>
<ol>
<li>create a container
<ul>
<li>load it with few services</li>
<li>use these services in the scope of this command</li>
</ul></li>
</ol>
</li>
<li>
<ol start="2">
<li>create other classes with <code>new</code>
<ul>
<li>sometimes add them to the container, so they can be used later</li>
<li>sometimes add use them in scope and re-create them again when needed</li>
</ul></li>
</ol>
</li>
</ul></li>
</ul>
<p>Compare it to a web application:</p>
<ul>
<li>call <code>www/index.php</code> file</li>
<li>create dependency injection container</li>
<li>get <code>Application</code> from it</li>
<li>run it with the current request</li>
<li>invoke controller and all other needed services in the scope of this controller</li>
</ul>
<h2 id="3-symfony-console-meets-symfony-dependencyinjection">3. Symfony\Console meets Symfony\DependencyInjection</h2>
<p>Why not inspire by web apps, where Controllers are lazy and dependency injection is the first-class citizen?
Moreover, Symfony 3.4 allows <a href="https://symfony.com/blog/new-in-symfony-3-4-lazy-commands">Lazy Commands</a>, that make application cycle more and more similar to web apps. Be careful - <strong>there are few WTFs during migration to Lazy Commands</strong>, <a href="https://blog.shopsys.com/5-5-steps-to-migrate-from-symfony-2-8-lts-to-symfony-3-4-lts-in-real-prs-50c98eb0e9f6">as Shopsys describes</a>.</p>
<pre><code class="language-php"># bin/rector

// ...

$container = $kernel-&gt;getContainer();

$application = $container-&gt;get(Application::class);
$application-&gt;run();</code></pre>
<h3 id="em-class-fas-fa-fw-fa-lg-fa-times-text-danger-em-disadvantages"><em class="fas fa-fw fa-lg fa-times text-danger"></em> Disadvantages</h3>
<ul>
<li>You need to rethink the <a href="/blog/2018/04/26/how-i-got-into-static-trap-and-made-fool-of-myself/">static <code>new</code> service approach</a>, if you're used to it.</li>
</ul>
<h3 id="em-class-fas-fa-fw-fa-lg-fa-check-text-success-em-advantages"><em class="fas fa-fw fa-lg fa-check text-success"></em> Advantages</h3>
<ul>
<li>Web apps = CLI apps, nothing extra to learn for new contributors, even though they contribute a CLI app for their first time.</li>
<li>You can use all <a href="/blog/2017/05/07/how-to-refactor-to-new-dependency-injection-features-in-symfony-3-3/">Symfony 3.3+ super cool features</a>.</li>
<li>It's much easier to scale architecture than with non-container apps.</li>
<li>You can drop a lot of boilerplate code that sticks code together and simulates container, like singletons, <code>static::$vars</code> inside classes etc.</li>
<li>You can avoid bugs caused by unexpected behavior - like object, that looks like services but is created in 2 different places and holds different variables.</li>
</ul>
<h2 id="how-to-migrate-from-1-to-3">How To Migrate from 1 to 3?</h2>
<p>I wish there was Rector for that like there is <a href="/blog/2018/04/02/rectify-turn-repositories-to-services-in-symfony/">for Doctrine Repositories as Services</a>, but it is a too complex task at the moment. Maybe one day.</p>
<p>In the meantime you can use few guides:</p>
<ul>
<li><a href="https://github.com/symplify/coding-standard#use-services-and-constructor-injection-over-static-method"><code>ForbiddenStaticFunctionSniff</code></a></li>
<li><a href="https://github.com/symplify/coding-standard#use-service-and-constructor-injection-rather-than-instantiation-with-new"><code>NoClassInstantiationSniff</code></a></li>
<li><a href="https://stackoverflow.com/questions/19321760/symfony2-how-to-access-the-service-in-a-custom-console-command/46007150#46007150">Stackoverflow: How to access the service in a custom console command?
</a></li>
<li><a href="https://blog.shopsys.com/5-5-steps-to-migrate-from-symfony-2-8-lts-to-symfony-3-4-lts-in-real-prs-50c98eb0e9f6">5,5 Steps to Migrate from Symfony 2.8 LTS to Symfony 3.4 LTS in Real PRs</a></li>
</ul>
<p><br></p>
<p>That's what works for me in CLI apps I've been working on. Look for yourself to get real code inspiration:</p>
<ul>
<li><a href="https://github.com/rectorphp/rector">Rector</a>,</li>
<li><a href="https://github.com/apigen/apigen">ApiGen</a>,</li>
<li>and <a href="https://github.com/symplify/easy-coding-standard">EasyCodingStandard</a>.</li>
</ul>
<p><br></p>
<p><strong>Which approach do you find the best in your own practice for the long-term code?</strong></p>
<p><br><br></p>
<p>Happy injecting!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/05/07/why-you-should-combine-symfony-console-and-dependency-injection</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 07 May 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/05/07/why-you-should-combine-symfony-console-and-dependency-injection#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How Do You Treat Your Own First AI? ]]></title>
                <link>https://tomasvotruba.com/blog/2018/05/03/how-do-you-treat-your-own-first-ai</link>
                <description><![CDATA[ <p>Artificial intelligence is at boom the last couple of years. I wrote about AI and its relation to <a href="/blog/2017/12/04/life30-what-will-you-do-when-ai-takes-over-the-world/">jobs development</a> in following years.</p>
<p>Now we'll try to look a bit closer. Not in time, but in space. Take a look around you, what do you see?
Do you see <em>your own first</em> AI already? And how do you treat it?</p> ]]></description>
                <content:encoded><![CDATA[ <p>Artificial intelligence is in its very basic form just a network of neurons connected in a specific way.
It might be a multi-layer network, it might be a deep-learning network, it might be a network designed to error rate lowering or high-speed learning. But still, it is just a set of neurons with specific weights that try to balance to achieve the certain goal.</p>
<p><strong>In short: if you want to recognize pizza from non-pizza, you can teach it and it can do it.</strong></p>
<p>I'm watching this purely machine-software discussion, by <a href="/blog/2017/12/04/life30-what-will-you-do-when-ai-takes-over-the-world/">reading books</a> or <a href="https://www.mlprague.com">visiting conferences</a> and see a connection to psychology, mentoring, education and human evolution itself in general.</p>
<p>(A psychotherapist friend of mine saw this inter-field connection as an <a href="https://en.wikipedia.org/wiki/Eugenics">eugenics</a>, but that's probably of lack of understanding of what programming and artificial intelligence is).</p>
<h2 id="human-brain-ai">Human Brain ~= AI?</h2>
<p>Before too much term reduction that leads to vague and irrelevant comments like &quot;humans are not machines&quot;, I don't think a human brain is just a form of artificial intelligence. It's much more than that, with subconsciousness, emotions, neurotransmitters, like serotonin, adrenalin, cortisol etc. When used properly, it's a killing machine that no general artificial intelligence can ever beat.</p>
<p><strong>When used properly.</strong></p>
<p>And that's what this post is about. <strong>How we use this grey thing we've got in our skulls, how do we take care of it, what direction and why we build it</strong>.</p>
<h2 id="child-the-first-program">Child, the First Program</h2>
<p>If you have a child (or anyone else you teach on daily basis for a long time) and you're a programmer, you probably already thought about this, in some way.</p>
<p>The way we build a neural network in children is very powerful. And very easy, because children have no knowledge, apart from the one we give them. It's the most effective CTRL + C (you) and CTRL + V (he or she) teaching we'll ever experience. Have you ever tried to teach your partner something completely new without any basic pre-steps?</p>
<p>They say that first 5-6 years are crucial for children:</p>
<pre><code>In the first five years of life, your child’s brain develops more and faster than at any other time in his life. Your child’s early experiences – the things he sees, hears, touches, smells and tastes – stimulate his brain, creating millions of connections. This is when the foundations for learning, health, and behavior throughout life are laid down.
&lt;footer class="blockquote-footer"&gt;&lt;a href="http://raisingchildren.net.au/articles/child_development.html"&gt;Child development: the first five years&lt;/a&gt;&lt;/footer&gt;</code></pre>
<p></blockquote></p>
<h2 id="bios-axioms-a-k-a-core-beliefs">BIOS Axioms a.k.a. Core Beliefs</h2>
<p>Jesus power, psychosomatic self-healing or the hand of the Universe all-mighty. Whatever you believe is true in your own brain design. The same way we configure a computer program to work with maximum 2 GB memory although there is more than 8 GB RAM in total, it believes there are only 2 GB of memory in the whole universe.</p>
<p>We function the same way. If you believe that you have to work until you're 65 years old and then you'll get a reward in form of retirement, you'll build your life around it. If you believe that all you need for life is a place to sleep, good friends and helping others, you'll be &quot;working&quot; for the whole life on this image. There is no good, nor wrong, nor a better way to do things - it's the way axioms are applied to the whole neural system.</p>
<h2 id="what-3-axioms-would-you-put-in-your-em-bios-em">What 3 Axioms Would You Put in Your <em>BIOS</em>?</h2>
<p>My selection would be:</p>
<h3 id="1-no-expectations">1. No Expectations</h3>
<p>Living in the present moment with minimal influence of linear regression of past experiences. Because only this way we can learn something new, or <a href="https://zenhabits.net/unschoolery">rather unlearn</a> patterns that work no more. This will be a huge challenge for disruptive changes in AI itself.</p>
<p>This is super difficult because neural networks naturally tend to build on experience. How can you recognize an apple? Because your parents showed you an apple 300 times and said &quot;apple&quot;. How can we remove such expectations and still be able to live in society?</p>
<h3 id="2-re-validate-core-beliefs-from-time-to-time">2. Re-validate Core-Beliefs from Time to Time</h3>
<p>In my first 6 years, I probably learned dichotomic perception of worlds. This is good and this is bad, nothing like &quot;it depends&quot;, &quot;well sometimes&quot; or &quot;you and somebody else might be different persons&quot;.</p>
<p>With these base-stones I've decided that alcohol is bad, social networks are for stupid people and that I know best what everybody needs to do. I tried to re-evaluate this from time to time, but it wasn't until 25 years and my first child, till I really started. Why? Because I realized I'll just copy-paste to him all my beliefs, whether I want it or not. Did I want him to be like me? Yes, of course. But did I want to believe in dichotomic worlds of ego? Not at all.</p>
<p>Since that moment I started to think what kind of son I'd like to have and started to move from personal benefits, more and more to the community, the power of united group over individual hedonist and communication with people with different values than I have.</p>
<h3 id="3-emotions-are-just-navigation">3. Emotions are just Navigation</h3>
<p>I tend to suppress anger, fear, shame or love (because of fear of rejection). And other people didn't understand me, and my son didn't understand me when I was angry when he crossed a street where a car could kill him. I had to change that.</p>
<p>Without clear emotion expression, it's very difficult for others to understand us. Some people express kindness when afraid, I express happiness when I'm nervous.</p>
<p>So being ok with all kinds of emotions would be a 3rd axiom I'd pick.</p>
<h2 id="re-evaluate">Re-Evaluate...</h2>
<h3 id="daily">...Daily</h3>
<p>You know the saying that it takes <a href="https://www.huffingtonpost.com/james-clear/forming-new-habits_b_5104807.html">21 days to build a habit</a>? That's because neural network is like a muscle. If you train it enough one direction, it will become natural for it.</p>
<p>What beliefs you reinforce every day? What are those you'd like to change a bit if that was possible?</p>
<h3 id="personally">...Personally</h3>
<p>This is very typical for all the self-help posts and books you've read, but there is still nothing going on. This is also called <a href="https://en.wikipedia.org/wiki/Anecdotal_evidence">Anecdotal evidence</a>.</p>
<p>What works for me, works for me because of my history, my life events, and my complex settings. If somebody will start open-source berserk mode on Github, joining PHP communities and having a baby at the same time, it might not go so well.</p>
<p><strong>So always think about yourself, whether this or that information is useful for you personally.</strong></p>
<p>In both cases beware of <em>nihilism</em>, that leads evolution nowhere. In circles. And beyond.</p>
<h2 id="everything-is-optional">Everything is Optional</h2>
<p>Another idea I have is <strong>that everything is optional</strong>. If I believe that I should be a programmer, I'll do everything to make that happen. But when I start to think about myself as a writer and a person who loves to connect people no matter what, I can slowly drop programming from my daily activities.</p>
<p>So when you decide that you can quit your job, find a new partner, move from your parents, write a post about that stuff you love doing after work for free or go out and just be one day alone, I believe you can do it.</p>
<h2 id="baby-steps">Baby Steps</h2>
<p>I wrote that neural network is a muscle. I found out when I tried to learn too many things at once, you know <a href="/blog/2017/11/13/7-tips-you-should-know-before-going-to-university/">in university</a>, I very quickly forgot all this. I read this book about healing traumas and it has very nice approach between lines in every chapter:</p>
<blockquote>
    "The slower you go, the further you get."
</blockquote>
<p>Do you want to run a marathon? Maybe it's not a good idea to run it right away without training. Personally, I've tried to train 1 month before it and went running for 4times before I run a half marathon. But I was dead and I never want to do that again.</p>
<p>If we'd train our neural networks this way, there would be tons of closed doors soon.</p>
<p>On the other hand, most of the changes that I took slowly, like programming, turned out to be pretty well.</p>
<img src="/assets/images/posts/2018/ai/kaizen.jpg" class="img-thumbnail">
<p>This is called <a href="https://medium.com/the-mission/get-1-better-every-day-the-kaizen-approach-to-self-improvement-b79c9e045678">Kaizen</a> and <a href="https://www.petrludwig.com">Petr Ludwig</a> is doing a great job of popularizing this term.</p>
<h2 id="neural-network-natural-replication">Neural Network Natural Replication</h2>
<p>One last thing that I've noticed is that neural networks have natural tendency to replicate themselves. But not only the outer way, like telling your friend he should be programmer instead of working at McDonald's.</p>
<p>But also the inner way, in ourselves. How? When we believe in freedom at work, freedom out of national borders, freedom with drugs, with Zen spirituality... we might want freedom in relationships. Or we believe in God, strict Christianity church, strict rules, we have sex with a random stranger and we'll get pregnant. We have to keep the baby because we believe all this cohesion (true story of my friend).</p>
<p><strong>One example for all?</strong> This post is just set of my thoughts that want to be replicated or rather reflected in your neural network. In human words: I want to inspire you, to talk about this, to think about this, to give me your view of all this.</p>
<p>This all leads me to my axiom point 2., to re-evaluate what value I spread in the world and my little son.</p>
<p><br></p>
<p>So these are few thoughts from my neural network about other neural networks. Nothing more.</p>
<p>I'm happy I finally opened this topic, after 14 months of just thinking of it. <strong>I wonder, how do you see your brain?</strong></p>
<p><br><br></p>
<p>Happy self-programming!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/05/03/how-do-you-treat-your-own-first-ai</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 03 May 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/05/03/how-do-you-treat-your-own-first-ai#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Programming = Climbing a Huge Mountain ]]></title>
                <link>https://tomasvotruba.com/blog/2018/04/30/programming-climbing-a-huge-mountain</link>
                <description><![CDATA[ <p>Let's take a break after 2 long code-posts from last week and enjoy bit of philosophy. I apply <em>the mountain climber</em> in programming for last 2 years and it really helps me to overcome difficult spots.
<br><br>
Today we'll climb together.</p> ]]></description>
                <content:encoded><![CDATA[ <p>Just a year ago I was deep-train traveling southern Europe and I worked on ApiGen (here <a href="/blog/2017/09/04/how-apigen-survived-its-own-death">is a short story about that work</a>/). I worked on a migration of the most coupled dependency, which was unmaintained for 3 years, to new one. You can imagine it like migration your application from Nette to Symfony or from Doctrine to Eloquent (or vice versa).</p>
<h2 id="rushing-up-is-rushing-to-fuck-up">Rushing Up is Rushing to Fuck-Up</h2>
<p>First I approached this problem in very... how do they say it... agile way. Let's start committing and see what happens. I was sure I'll be over after a week. Well, I wasn't and I was angry at myself. The faster I tried to finish it the slower I went.</p>
<p>And this rush got me to a situation I had to revert the whole PR and start over again, after a week of work.</p>
<h2 id="know-your-path">Know Your Path</h2>
<p>Then I stopped for a while and thought: Okay, I'm here under the mountain, there is the peak and want to get there. I don't see the peak or the way, I just know I want to climb this mountain.</p>
<img src="/assets/images/posts/2018/climb/climb-2.jpg" class="img-thumbnail">
<p>I had one package and I wanted to switch to the other. What are the minimal steps?</p>
<h2 id="make-safe-spots">Make Safe Spots</h2>
<p>When you climb a mountain for the first time, you have rope, a buddy and clinch along the whole way.</p>
<img src="/assets/images/posts/2018/climb/climb-1.jpg" class="img-thumbnail">
<p><strong>These are all the safe spots and it's ok to use them.</strong> Well, unless you'd like to die climbing.</p>
<p>In programming I apply the same principles: I have tests, static analysis, coding standard fixers and CI. Without them, I'd be lost.</p>
<p>And are there no safe spots? <strong>I take a time before climbing and prepare these spots.</strong> I'll increase the code coverage for code part I'd like to work with - and that already gives me some hints, what the path looks like.</p>
<p>The same way you prepare for the climbing - you ask other climbers how it went, what are the hacks, where are the places to rest and where you should be careful.</p>
<h2 id="be-safe-like-a-pro">Be Safe like a Pro</h2>
<img src="/assets/images/posts/2018/climb/climb-3.jpg" class="img-thumbnail">
<p>As you can see, it's no shame to use the spots, <del>even</del> mainly professional climbers do that.</p>
<p><strong>Because the safer you feel, the better your brain operates and the faster you climb</strong> - either a mountain or a code you write.</p>
<h2 id="use-safe-spots">Use Safe Spots</h2>
<p>If you already have such safe spots, be sure to use them. I've seen many applications that had over 30 tests but didn't actually use them - no continuous integration, no <a href="https://blog.martinhujer.cz/have-you-tried-composer-scripts">simple scripts in composer</a> that could run them locally with <code>composer run-tests</code>.</p>
<img src="/assets/images/posts/2018/climb/climb-4.jpg" class="img-thumbnail">
<p>It doesn't matter that other programmer made it, that they don't cover 100 % of the code or that they use the other test framework I don't prefer. <strong>I'm grateful there is something that will help me to climb faster and that another climber made it for me, even though he didn't have to.</strong></p>
<h2 id="staying-in-the-present-moment-one-move-at-a-time">Staying in the Present Moment - One Move at a Time</h2>
<p>Zen, Kaizen, Ikigai, Present moment, <a href="/blog/2017/09/25/3-non-it-books-that-help-you-to-become-better-programmer/#deep-work-by-cal-newport">Deep Work</a>, Flow. Whatever you call it, it matters.</p>
<p>When I program, I don't know what will happen in next 15 minutes. Maybe it will be over, or maybe I'll find a bug that I'll investigate for 2 hours in a row and then <a href="https://github.com/TomasVotruba/tomasvotruba.com/commit/a890d5100e2226d4958504a50efa282fd1b2c4a1">use this workaround</a>.</p>
<img src="/assets/images/posts/2018/climb/climb-5.jpg" class="img-thumbnail">
<p>I don't see the end, only the next step. Same is for climbing, I don't see the top of the mountain. I barely see 5 meters ahead of me. But even if I see the top of the mountain it doesn't matter. I can only move my hands or legs just a few feet ahead of me.</p>
<blockquote class="blockquote">
    The present moment contains past and future.
    <br>
    The secret of transformation is in the way we handle this very moment.
    <footer class="blockquote-footer">Thích Nhất Hạnh</footer></blockquote>
<p>One <a href="https://www.amazon.com/Peace-Every-Step-Mindfulness-Everyday/dp/0553351397">Peace Step</a> at a Time  (great book, just reading it). One commit at a time. One merged pull-request at a time. Not 2, just 1.</p>
<h2 id="take-a-break">Take a Break</h2>
<p>When you're tired, frustrated, angry or sad, will you rush to climb more and more steps? No, you'd take a break. Just hang on the rope for a while (not by the neck, it's not healthy!)... well, for <a href="https://lifehacker.com/52-minute-work-17-minute-break-is-the-ideal-productivi-1616541102">17 minutes</a> as I learned in one of the amazing <a href="https://www.danpink.com/pinkcast">Pinkcasts</a>.</p>
<p>It might be a coffee, it might be a transfer to another train, it might be toilet visit.</p>
<img src="/assets/images/posts/2018/climb/climb-6.jpg" class="img-thumbnail">
<p>You probably won't believe it, but most breakthroughs come to me in the toilet room (intellectual, not physical damaging any part of the toilet).</p>
<p>Why? Because when the brain enters <em>the serendipity-mode</em>, it starts to think subconsciously and connect thoughts more effectively than with active thinking. For example, a few paragraphs up I made a workaround because key in the array didn't match the <code>PostFile</code> <code>id</code> in one spot. It worked in 3 other places in the application, but 1 just missed it. Then in my <em>toilet time</em>, it came to me that this can be solved by using a collection. One iterable immutable object everywhere.</p>
<p>Well, now it's like standing on the top of the hill and seeing the elevator that was on the left side all along. But when I was under the mountain, I didn't see it. I needed to take a break to see.</p>
<h2 id="the-mountain-climber-way">The Mountain Climber Way</h2>
<p>So this is my climbing approach to code (I'm not a climber, to be clear).</p>
<img src="/assets/images/posts/2018/climb/climb-7.jpg" class="img-thumbnail">
<p>The more you climb, the better you know the terrain and the more you can improvise. <a href="https://www.nationalgeographic.com/adventure/features/athletes/alex-honnold/most-dangerous-free-solo-climb-yosemite-national-park-el-capitan">Like this guy, who climbed a 3000-feet tall mountain in 4 hours</a>. <strong>Without a rope.</strong></p>
<p><br></p>
<p><strong>And how do you approach your coding?</strong></p>
<p><br><br></p>
<p>Happy climbing!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/04/30/programming-climbing-a-huge-mountain</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 30 Apr 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/04/30/programming-climbing-a-huge-mountain#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How I Got into Static Trap and Made Fool of Myself ]]></title>
                <link>https://tomasvotruba.com/blog/2018/04/26/how-i-got-into-static-trap-and-made-fool-of-myself</link>
                <description><![CDATA[ <p>PHP story with code examples, copy-cat killers, just a little bit of static, consistency, sniffs and way to prevent all that ever happening ever again.</p> ]]></description>
                <content:encoded><![CDATA[ <p>Today the format will be reversed - first I'll show you practical code and its journey to legacy, then theory takeaways that would save it.</p>
<p><a href="https://github.com/symplify/coding-standard">Symplify\CodingStandard</a> contains complex Sniff and Fixers like <a href="/blog/2017/12/17/new-in-symplify-3-doc-block-cleaner-fixer/">the doc block cleaner</a>. Job of <code>RemoveUselessDocBlockFixer</code> is clear - <strong>remove any doc block that has no extra value over the php code itself</strong>:</p>
<pre><code class="language-diff"> /**
- * @param int $value value instance
- * @param $anotherValue
- * @param SomeType $someService A SomeType instance
- * @return array
  */
 public function setCount(int $value, $anotherValue, SomeType $someService): array
 {
 }</code></pre>
<p>The goal is clear, but <strong>how does it work beneath the surface</strong>? There are multiple steps that Fixer needs to perform one by one:</p>
<ul>
<li>find a method</li>
<li>find its docblock</li>
<li>find parameters in method code, detect their names and types</li>
<li>compare them to docblock</li>
<li>judge value of description (e.g. &quot;a Type instance&quot; has no value)</li>
<li>remove those that were found useless</li>
</ul>
<p>Is that all? Nope. <strong>There also code that handles php docs</strong>:</p>
<ul>
<li>doc block parser that can parse any doc comment</li>
<li>that can handle invalid and non-standard formats</li>
<li>and a doc block printer, that can keep the original spacing</li>
</ul>
<p>Just a reminder, this all started with a simple idea:</p>
<pre><code class="language-diff">-/**
- * @param int $value
- */
 public function compute(int $value)
 {
 }</code></pre>
<p>Today I'll write about <strong>how code always grows and that we should anticipate it and code the best way we know right from the beginning</strong>. And what happened to me when I thought I could handle it by <em>using static methods only where it makes sense</em> (well, everything makes sense, until it's legacy drowning you down).</p>
<h2 id="story-of-static-growth">Story Of Static Growth</h2>
<p>Let's look how the fixer grew to the point it turned into legacy, how that shot myself and what I could (and will) do better to prevent it.</p>
<p>(To skip irrelevant details, I'll use pseudocode instead of <a href="https://github.com/symplify/symplify/blob/5603ed130bfd29bfdad050b7726b9c8e65a558fd/packages/CodingStandard/src/Fixer/Commenting/RemoveUselessDocBlockFixer.php">original full code</a>.)</p>
<pre><code class="language-php">class RemoveUselessDocBlockFixer
{
    public function fix($tokens)
    {
        foreach ($tokens as $token) {
            if (! $token-&gt;isMethod()) {
                continue;
            }

            // it's a method!
            $docBlock = $this-&gt;getDocBlockByMethod($token);
            if ($docBlock === null) {
                continue;
            }

            // it has a doc block!
            $this-&gt;removeUselessContentFromDocBlock($docBlock);
        }
    }
}</code></pre>
<p>That's a basic workflow. In Easy Coding Standard 3 and below, checkers have no constructor injection, only <code>new</code> and <code>::static</code> methods were allowed. I took this inspiration from <a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer/search?utf8=%E2%9C%93&amp;q=new+TokensAnalyzer&amp;type=">PHP CS Fixer where <code>new</code> is a first class citizen</a>. There is no DI container, just static instantiations. Maybe that should warn me, but I said to myself &quot;it's a popular package, it has new fixers from time to time and it's tagged once a while, it must be good and they know what they're doing&quot;.</p>
<p>So back to the code:</p>
<pre><code class="language-php">public static function getDocBlockByMethod($token)
{
    $docBlockPosition = DocBlockFinder::find($token);
    if ($docBlockPosition === null) {
        return null;
    }

    return DocBlockFactory::createFromPosition($docBlockPosition);
}</code></pre>
<pre><code class="language-php">public static function removeUselessContentFromDocBlock($docBlock)
{
    DocBlockCleaner::processParamAnnotations($docBlock);
    DocBlockCleaner::processReturnAnnotations($docBlock);
}</code></pre>
<h3 id="static-with-3rd-party-code">Static with 3rd Party Code?</h3>
<p>You see where it goes. The biggest potential black hole is always 3rd party code (unless it's your code). I could write the docblock parser myself or make use of <a href="https://github.com/phpDocumentor/ReflectionDocBlock">phpDocumentor/ReflectionDocBlock</a>. It was the best on the market in that time. Neither ready for PHP 5.5+ features like variadics nor formatter preserving printer. Except that it worked pretty well.</p>
<pre><code class="language-php">class DocBlockFactory
{
    public static function createFromPosition($docBlockPosition)
    {
        $tagFactory = new StandardTagFactory($fqsenResolver, [
            'param' =&gt; TolerantParam::class, // own overloaded class
            'return' =&gt; TolerantReturn::class, // own overloaded class
            'var' =&gt; Var_::class, // own overloaded class
        ]);

        $descriptionFactory = new DescriptionFactory($tagFactory);
        $tagFactory-&gt;addService($descriptionFactory);
        $tagFactory-&gt;addService(new TypeResolver($fqsenResolver));

        $phpDocumentorDocBlockFactory = new DocBlockFactory($descriptionFactory, $tagFactory);

        return $phpDocumentorDocBlockFactory-&gt;create($docBlockPositoin);
    }
}</code></pre>
<p>So every time a single doc block is created, more than 10 classes (counting these on background) are created too. It might be a small deal for performance, but even bigger for legacy code smell that might hit me back later. But whatever, YOLO!</p>
<p>And here all the static fun ends. Well, not yet, because it worked. I talked a lot with the maintainer of <code>phpDocumentor/ReflectionDocBlock</code> about moving it forward, but as I was the only one trying, it didn't lead much further than issue chats and PRs that were opened for too long. It was only logical that without <a href="/clusters/#monorepo-from-zero-to-hero/">monorepo</a> all the time was swallowed only by maintenance of 4 interdependent packages.</p>
<h3 id="a-new-shiny-package">A New Shiny Package?</h3>
<p>Then <a href="https://github.com/JanTvrdik">Jan Tvrdík</a> came with a support package for PHPStan for handling php docs - <a href="https://github.com/phpstan/phpdoc-parser">phpstan/phpdoc-parser</a>. It is built on similar principles as <code>nikic/php-parser</code>, much younger and robust.</p>
<p>I thought: &quot;I'd like to try that one package in my code&quot;, but how?</p>
<p>It's easy, just replace all the old static classes with new ones:</p>
<pre><code class="language-php">class DocBlockFactory
{
    public static function createFromPosition($docBlockPosition)
    {
        $content = $this-&gt;getContentOnPosition($docBlockPosition);

        $lexer = new Lexer;
        $tokenIterator = new TokenIterator($lexer-&gt;tokenize($content));

        $phpStanPhpDocParser = new PhpStanPhpDocParser(new SomeDependency(new AnotherDependency));

        return $phpStanPhpDocParser-&gt;parse($tokenIterator);
    }
}</code></pre>
<h3 id="adding-depedency-to-static-hell-tree">Adding Depedency to Static Hell Tree</h3>
<p>Do you need to add whitespace config? Just add it in every layer... or make it also static.</p>
<pre><code class="language-diff"> class DocBlockFactory
 {
     public static function createFromPosition($docBlockPosition)
     {
         $content = $this-&gt;getContentOnPosition($docBlockPosition);

         $lexer = new Lexer;
         $tokenIterator = new TokenIterator($lexer-&gt;tokenize($content));

         $phpStanPhpDocParser = new PhpStanPhpDocParser(new SomeDependency(new NewAnotherDependency));

-        return $phpStanPhpDocParser-&gt;parse($tokenIterator);
+        $docBlock = $phpStanPhpDocParser-&gt;parse($tokenIterator);
+        $docBlock-&gt;addWhitespaceConfig($this-&gt;whitespaceConfig);
+
+        return $docBlock;
    }
+
+    public function setWhitespaceConfig(WhitespaceConfig $whitespaceConfig)
+    {
+        $this-&gt;whitespaceConfig = $whitespaceConfig;
+    }
}</code></pre>
<p>But what if you forget to add it</p>
<pre><code class="language-diff">+    public function ensureWhitespaceConfigIsSet()
+    {
+        if ($this-&gt;whitespaceConfig) {
+            return;
+        }

+        throw new WhitespaceConfigNotSetException(sprintf('Informative message in "%s" method', __METHOD__));
+    }</code></pre>
<p>Congratulations, you've just made a static container all over your code, similar to Laravel Facades.
Uff, I just get headache by writing this code.</p>
<p>But why stopping there? Let's add a configuration that will tell the <code>DocBlockFactory</code> if the starting tag should be <code>/*</code> or <code>/**</code>.</p>
<p>Well, shoot me now!</p>
<h2 id="how-to-get-from-static-hell">How to Get From Static Hell?</h2>
<h3 id="1-dependency-injection-del-first-del-only">1. Dependency Injection <del>First</del> Only</h3>
<p>Dependency injection First. Not first, but <strong>only</strong> dependency injection.</p>
<p>I told myself - &quot;here the static method makes sense, it's just one little method&quot;. The problem is, that static methods work well only with other static methods. You simply can't inject a service to a class with static methods and use it statically.. well, to be honest, Laravel did it in facades and Reflections, but you should not. Unless you want to use such approach in the whole codebase. That would be the only valid reason to do it so.</p>
<p><strong>So be consistent in architecture pattern you pick.</strong></p>
<p>It took me <a href="https://github.com/symplify/symplify/pull/680">3</a> <a href="https://github.com/symplify/symplify/pull/693">pull</a> <a href="https://github.com/symplify/symplify/pull/723">requests</a> to get out of this mess. Not to try the new package, just to prepare the code to be able to do so. Instead, I could have a clear DI design, use one PR at a time to trying this package and other 2 PRs could have been new features.</p>
<h3 id="2-beware-your-inner-copy-cat-coder">2. Beware Your Inner Copy-Cat Coder</h3>
<blockquote>
<p>A copycat crime is a criminal act that is modeled or inspired by a previous crime that has been reported in the media or described in fiction.</p>
</blockquote>
<p>This all started with social learning - &quot;children see, children do&quot;. I saw static approach in Fixers in PHP CS Fixer and I was making a Fixer. So why not use it? I felt in my guts it's not the best way to go, but I was not sure why and I didn't see anybody else using DI in CLI applications. Now I know why.</p>
<p>If you ever have a feeling that there is a better way to do things but you'll see that some Tomas Votruba is doing it differently, take your time - <strong>trust yourself, your intuition guides you for a reason</strong>. Question him and propose your idea, even though it might be crazy at the start. Maybe you'll save yourself and him a few PRs and many frustrated days from climbing up the legacy hole.</p>
<h3 id="3-sniff-it-setup-and-forget">3. Sniff It - Setup and Forget</h3>
<p>To prevent this 10 hours of trauma happening ever again, I made <code>NoClassWithStaticMethodWithoutStaticNameRule</code> that will look after our code.</p>
<p><em class="fas fa-fw fa-times text-danger fa-lg"></em></p>
<pre><code class="language-php">class SomeClass
{
    public static function someFunction()
    {
    }
}</code></pre>
<p><em class="fas fa-fw fa-check text-success fa-lg"></em></p>
<pre><code class="language-php">class StaticSomeClass
{
    public static function someFunction()
    {
    }
}</code></pre>
<p>I've added this sniff to set before refactoring, scanned the code and <a href="https://github.com/symplify/symplify/pull/722/files#diff-a8b950982764fcffe4b7b3acd261cf91R84">added all found files to ignored</a>. That way I knew what all classes need refactoring.</p>
<h3 id="4-remove-code-static-code-from-methods-one-step-at-a-time">4. Remove <code>Static</code> from Methods - One Step at a Time</h3>
<p>I always do this in one single PR, starting with the simplest factory from ignored files above.</p>
<p>Remove the <code>static</code> in one factory:</p>
<pre><code class="language-diff"> class UseImportsTransformer
 {
-    public static function addNamesToTokens(...)
+    public function addNamesToTokens(...)
 }</code></pre>
<p>Pass it via constructor:</p>
<pre><code class="language-diff"> class RemoveUselessDocBlockFixer
 {
+    /**
+     * @var UseImportsTransformer
+     */
+    private $userImportsTransformer;
+
+    public function __construct(UseImportsTransformer $userImportsTransformer)
+    {
+        $this-&gt;userImportsTransformer = $userImportsTransformer;
+    }
 }</code></pre>
<p>And use it in code:</p>
<pre><code class="language-diff">-UseImportsTransformer::addNamesToTokens($this-&gt;newUseStatementNames, $tokens);
+$this-&gt;useImportsTransformer-&gt;addNamesToTokens($this-&gt;newUseStatementNames, $tokens);</code></pre>
<h3 id="5-keep-your-environment-clean">5. Keep Your Environment Clean</h3>
<p>I also admit that another code smell lead to this. In Symplify and Rector there is used <a href="/blog/2017/05/07/how-to-refactor-to-new-dependency-injection-features-in-symfony-3-3/">Symfony 3.3 services architecture</a> with autowiring and autodiscovery. State of art in PHP DI at the moment.</p>
<p>But Fixers and Checkers were exceptions. They were registered as services, <strong>but not autowired</strong>. So I was used to not-to add dependency to them manually, but via setters, <code>new</code> or <code>::static</code>. It eventually and logically leads to this situation.</p>
<p>I learned something new and <a href="/blog/2018/03/26/new-in-easy-coding-standard-4-clean-symfony-standard-with-yaml-and-services/">migrated to full-service approach in ECS 4</a>.</p>
<h2 id="3-takeaways-you-should-not-take-statically">3 Takeaways You Should not Take Statically</h2>
<ul>
<li>Static is not only <code>::method()</code>, but also <code>new &lt;class&gt;</code> and <code>::create()</code>.</li>
<li>Use dependency injection or static methods, not a mixture. <strong>Be consistent</strong> everywhere in your code, or it will eventually backfire.</li>
<li>There is no best way to do things, <strong>you just have to experience limits of various approaches and use the one that performs the best</strong>. And re-evaluate.</li>
</ul>
<p><br><br></p>
<p>They also say that:</p>
<blockquote class="blockquote">
    Wisdom is an ability to learn from others' mistakes.
</blockquote>
<p>So I hope you learned something new today!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/04/26/how-i-got-into-static-trap-and-made-fool-of-myself</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 26 Apr 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/04/26/how-i-got-into-static-trap-and-made-fool-of-myself#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Slowly Turn your Symfony Project to Legacy with Action Injection ]]></title>
                <link>https://tomasvotruba.com/blog/2018/04/23/how-to-slowly-turn-your-symfony-project-to-legacy-with-action-injection</link>
                <description><![CDATA[ <p>The other day I saw the question on Reddit about <a href="https://www.reddit.com/r/PHP/comments/8dw8x5/symfonys_controller_action_dependency_injection">Symfony's controller action dependency injection</a>. More people around me are hyped about <a href="https://symfony.com/doc/current/service_container/3.3-di-changes.html#controllers-are-registered-as-services">this new feature in Symfony 3.3</a> that allows to autowire services via action argument typehints. It's new, it's cool and no one has a bad experience with it. The ideal candidate for any code you write today.
<br><br>
Since <a href="https://forum.nette.org/en/19365-nette-framework-2-1-0-finally-released">Nette</a> and <a href="https://mattstauffer.com/blog/laravel-5.0-method-injection">Laravel introduced</a> a similar feature in 2014, there are empirical data that we learn from.
<br><br>
<strong>Today I'll share the experience I have from consulting few Nette applications with dangerous overuse of this pattern and how this one thing turned the code to complete mess.</strong></p> ]]></description>
                <content:encoded><![CDATA[ <p><em>Disclaimer: this post is not about Symfony, nor critics of its feature. It's rather about teaching, thinking about knowledge embodied in the code, an aware approach of critical thinking to information from authorities.</em></p>
<p>What is wrong with this code?</p>
<pre><code class="language-php">class SomeService extends SomeAbstractParentService
{
    public function someMethod(SomeArgument $someArgument, SomeOtherService $someOtherService)
    {
        return $someOtherService-&gt;process($someArgument);
    }
}</code></pre>
<p>It's not unreal that this code will appear in your project in next 2 years, if you start using action injection. But we'll get to that later, let's start from the beginning.</p>
<h2 id="welcome-action-injection">Welcome Action Injection</h2>
<p>Since Symfony 3.3 there is <a href="https://github.com/symfony/symfony/pull/21771">a new feature</a> that allows injecting services to controller actions. It's important to this post, that Symfony <a href="https://symfony.com/doc/current/service_container/3.3-di-changes.html#controllers-are-registered-as-services">documentation includes a warning</a>: &quot;This is only possible in a controller, and your controller service must be tagged with <code>controller.service_arguments</code> to make it happen.&quot;</p>
<h3 id="wait-wait-what-is-this-feature-again">Wait, Wait... What is this Feature Again?</h3>
<p>Oh, sorry. In case you don't know what I'm talking about, here is a little example. If you do, skip right to <a href="#injection-everywhere">the pitfall of such approach</a> below.</p>
<p>If not, let's look at this example. This is the most simple and clear way to register controller as services:</p>
<pre><code class="language-php">&lt;?php

# app/Controller/SomeController.php

namespace App\Controller;

use App\Model\SomeService;

final class SomeController
{
    /**
     * @var SomeService
     */
    private $someService;

    public function __construct(SomeService $someService)
    {
        $this-&gt;someService = $someService;
    }

    public function someAction()
    {
        $someData = $this-&gt;someService-&gt;getSomeData();
        // ...
    }
}</code></pre>
<p>with basic PSR-4 autodiscovery registration:</p>
<pre><code class="language-yaml"># app/config/services.yml
services:
    App\:
        resource: '../'

    # include all controllers and model services</code></pre>
<p>The <em>argument autowire</em> (also called <em>method injection</em> or <em>action injection</em>) will save us some writing.</p>
<p>As the name suggests, dependencies won't be passed by a constructor, as it's common in every service, but via method - the action method!</p>
<pre><code class="language-diff"> # app/Controller/SomeController.php

 namespace App\Controller

 use App\Model\SomeService;

 final class SomeController
{
-    /**
-     * @var SomeService
-     */
-    private $someService;
-
-    public function __construct(SomeService $someService)
-    {
-        $this-&gt;someService = $someService;
-    }

-    public function someAction()
+    public function someAction(SomeService $someService)
     {
-        $someData = $this-&gt;someService-&gt;getSomeData();
+        $someData = $someService-&gt;getSomeData();
         // ...
     }
 }</code></pre>
<p>On the other hand, service registration is now 3x more complex:</p>
<pre><code class="language-diff"> # app/config/services.yml
 services:
-    App\:
+    App\Controller\:
-        resource: '../'
+        resource: '../Controller'
+        tags: ['controller.service_arguments']
+
+    App\Model\:
+        resource: '../Model'</code></pre>
<h3 id="what-are-propagated-advantages">What are Propagated Advantages?</h3>
<ul>
<li>less writing</li>
<li>manual wiring of only used services - with no benchmark this has similar value as statements like &quot;Symfony is 3x faster than Laravel, it's true&quot;</li>
<li>smaller controllers</li>
</ul>
<h3 id="what-are-already-known-disadvantages">What are Already Known Disadvantages?</h3>
<p>Paul M. Jones wrote that <a href="http://paul-m-jones.com/archives/6589">“Action Injection” As A Code Smell</a>. Why?</p>
<blockquote class="blockquote">
"The fact that your controller has so many dependencies, used only in some cases and not in others, <strong>should be an indicator that the class is doing too much</strong>. Indeed, it’s doing so much that you cannot call its action methods directly; you have to use the dependency injection container not only to build the controller object but also to invoke its action methods."
</blockquote>
<p>And I agree. It's the same code smell as adding 10th action method to the <code>ProductController</code> that now has 300 lines. Maybe you should split it into 2 classes and add <a href="https://github.com/object-calisthenics/phpcs-calisthenics-rules#7-keep-your-classes-small">sniff</a> to make sure this won't happen in production code ever again (because no-one else will do it better than continuous integration).</p>
<p>But that's just words and ideas, no legacy (yet).</p>
<p>What might really happen with <em>autowired arguments</em> approach?</p>
<h2 id="1-injection-everywhere">1. Injection Everywhere</h2>
<img src="/assets/images/posts/2018/action-injection/everywhere.jpg" class="img-thumbnail">
<h2 id="the-nette-framework-tried-it-for-you-story">The Nette-Framework-Tried-It-For-You story</h2>
<p>Nette &quot;inject&quot; feature released in 2014 in Nette 2.1 started very similarly. It has 2 ways to inject dependencies:</p>
<h3 id="a-code-inject-code-annotatoin">A. <code>@inject</code> Annotatoin</h3>
<pre><code class="language-php">namespace App\Controller;

use App\Model\SomeService;

final class SomeController
{
    /**
     * @var SomeService
     * @inject
     */
    public $someService;
}</code></pre>
<h3 id="b-code-inject-code-method">B. <code>inject*()</code> Method</h3>
<pre><code class="language-php">namespace App\Controller;

use App\Model\SomeService;

final class SomeController
{
    /**
     * @var SomeService
     */
    private $someService;

    public function injectSomeService(SomeService $someService)
    {
        $this-&gt;someService = $someService;
    }
}</code></pre>
<p>It also have to be activated in config manually with specific <code>tags: ['inject']</code> tag, as in Symfony:</p>
<pre><code class="language-yaml"># app/config/services.neon
services:
    App\Controller\SomeController:
        tags: ['inject']

    - App\Model\SomeService</code></pre>
<p>Can you see the difference to Symfony? Well, almost none. But so far so good.</p>
<p>Note to Nette programmers: <a href="/blog/2016/12/24/how-to-avoid-inject-thanks-to-decorator-feature-in-nette/"><code>@inject</code> is often a code smell and you should do it cleaner</a></p>
<h2 id="inspire-by-good-bad-example">Inspire by (Good/Bad) Example</h2>
<p>If you prepare some &quot;dirty-hack-that-none-should-use&quot; or even better &quot;don't-ever-use-this-unless-you-know-why&quot; and make it public, you can be sure people will ignore it and use it in a very creative way. Unless there is <code>new ForbiddenUseException</code> thrown.</p>
<p>This effect appeared in Nette many months before 2.1 even became stable and <a href="https://forum.nette.org/cs/13084-presentery-property-lazy-autowire-na-steroidech#p93574">method injection was born</a> (many months before Nette 2.1 even became stable):</p>
<pre><code class="language-php">final class SomeController
{
    public function someAction(SomeService $someService)
    {
        $someData = $someService-&gt;getSomeData();
        // ...
    }
}</code></pre>
<p>So far so good, right?</p>
<h2 id="use-in-controllers-nowhere-else">Use in Controllers, Nowhere Else!</h2>
<p>Do you have children? If so, you know that &quot;be careful with that fire&quot; repeated 10 times in 60 seconds will mostly lead to the exact opposite. Human brain works on <a href="https://www.youtube.com/watch?v=o9K6GDBnByk">&quot;Neurons that Fire Together Wire Together&quot;</a> principle - so the final version can sound like &quot;fire&quot;.</p>
<p>Programmers use the feature you provided. They don't know what you wrote in that single post 2 years ago, nor explore documentation for any reference they found. Sorry jako.</p>
<h3 id="property-method-injection-in-all-services">Property/Method Injection in all Services</h3>
<p>Back to our story - it didn't take long to <a href="https://forum.nette.org/cs/17817-jak-dostat-do-basecontrol-sluzbu-aniz-by-se-ji-museli-potomci-zabyvat#p125658">new idea appeared on Nette forum</a> (Czech only): &quot;I have 6 methods in <code>SomeService</code>, why should I inject all dependencies every time one public method is called? I want to use inject there as well, it's shorter and faster&quot; This is the same argument to use <em>action injection</em> in controllers, remember?</p>
<blockquote class="blockquote text-center">
    "Where is no exception, there is a way."
</blockquote>
<p>It was super easy to turn it on:</p>
<pre><code class="language-diff"> # app/config/services.neon
     services:
     App\Controller\SomeController:
         tags: ['inject']

     App\Model\SomeService:
+        tags: ['inject']</code></pre>
<p>I confess <a href="https://forum.nette.org/cs/17817-jak-dostat-do-basecontrol-sluzbu-aniz-by-se-ji-museli-potomci-zabyvat#p139678">I liked this idea too</a>. But it's too much writing... how could we add to every service?</p>
<p>A <code>Extension</code> (~= <code>CompilerPass</code>) solved it:</p>
<pre><code class="language-php">foreach ($this-&gt;getContainerBuilder() as $definition) {
    $definition-&gt;addTag('inject');
}</code></pre>
<p>Now we can remove these annoying long constructors and use property/method injection everywhere. Be careful, <a href="https://ocramius.github.io/blog/eliminating-visual-debt">this visual debt</a> is different from <a href="https://blog.sonarsource.com/cognitive-complexity-because-testability-understandability">cognitive overload</a>.</p>
<p>Now our code looks like this:</p>
<pre><code class="language-php">class SomeService
{
    /**
     * @inject
     */
    public $someOtherService;
}</code></pre>
<p>or in Symfony</p>
<pre><code class="language-php">namespace App\Model;

final class SomeService
{
    public function someMethod(SomeArgument $someArgument, SomeOtherService $someOtherService)
    {
        return $someOtherService-&gt;process($someArgument);
    }
}</code></pre>
<p><strong>3 lines and documentation is ignored. Great job!</strong></p>
<p>To achieve similar functionality in Symfony, you'd probably have to override <a href="https://github.com/symfony/symfony/pull/21771/files#diff-58d1479352b43b312746ea6ceb4ada96">this <code>CompilerPass</code></a>. I won't show you nor try on purpose, so I don't spread too much black magic here.</p>
<h3 id="most-people-are-to-lazy-and-unskilled-write-own-compilepasses">Most People are to Lazy and Unskilled Write own CompilePasses</h3>
<p>Let's say you're right and I live in micro-open-source cosmos, where people are too lazy not to do it. Also, it's possible, that framework checks the service against interface (<code>IPresenter</code>) or a class (<code>Controller</code>), that it really is a controller.</p>
<p>But it's still possible. How? Take 3 breaths to think about it, you'll find a way.</p>
<p><br><br></p>
<p>Yes, our favorite <a href="https://ocramius.github.io/blog/when-to-declare-classes-final">composition pattern</a>.</p>
<pre><code class="language-php">namespace App\Model;

final class SomeService extends SomeAbstractService
{
    public function someMethod(SomeArgument $someArgument, SomeOtherService $someOtherService)
    {
        return $someOtherService-&gt;process($someArgument);
    }
}</code></pre>
<p>Do you know where this goes?</p>
<pre><code class="language-php">use Symfony\..\Controller;

abstract SomeAbstractService extends Controller
{
}</code></pre>
<p>Kaboom! Method injection works in <code>SomeService</code> and we bypassed the frameworks internals :).</p>
<h3 id="true-story">True Story</h3>
<p>I must add, I'm not writing this post because I'm bored and need a topic to babble about. <strong>This is true story, such code exists and it was so much WTF to me, that I don't want my deepest enemy to have to work on project like that</strong>. And I see that Symfony framework is slowly heading a way that opened these doors.</p>
<p>It was (maybe still is) famous Czech project (can't tell you which one, but you know who you are ;)).</p>
<blockquote class="blockquote text-center">
    Everything which is not forbidden is allowed.
</blockquote>
<p>Now you know how to take advantage of framework architecture backdoor and save you lot of writing. At least in the present moment. And also how not to fall into this. It's up to you, what you like and what code you love to write.</p>
<h2 id="is-there-a-way-to-save-your-code-from-this-instant-retirement">Is there a Way To Save Your Code From this Instant Retirement?</h2>
<p>There are 2 ways ho to avoid this completely and still use your framework:</p>
<p>-
Paul M. Jones has written <a href="http://paul-m-jones.com/archives/category/programming/adr">many posts Action-Domain-Responder</a> and even created a <a href="http://pmjones.io/adr">micro-site devoted to ADR topic</a>.</p>
<ul>
<li>another approach is <a href="https://jenssegers.com/85/goodbye-controllers-hello-request-handlers">RequestHandler</a></li>
<li>my favorite approach that <a href="https://symfony.com/doc/current/controller/service.html#invokable-controllers">Symfony</a> and <a href="https://dyrynda.com.au/blog/single-action-controllers-in-laravel">Laravel</a> support by default for a long time are <strong>invokable controllers</strong>, also called <em>single action controllers</em></li>
</ul>
<h2 id="what-is-your-experience-with-action-injects">What is Your Experience with Action Injects?</h2>
<p>I really recommend checking the <a href="https://www.reddit.com/r/PHP/comments/8dw8x5/symfonys_controller_action_dependency_injection">Reddit thread</a>, there are few experiences worth reading that will save your time and energy of personal research:</p>
<blockquote class="blockquote">
I've abandoned this [action inject] approach because it makes it harder to differentiate request parameters from services. It also makes this method definition in most cases spread to multiple lines. And it makes it harder to inject non-autowirable services
    <footer class="blockquote-footer text-right"><a href="https://www.reddit.com/r/PHP/comments/8dw8x5/symfonys_controller_action_dependency_injection/dxsauf2/">gadelat</a>
    </footer></blockquote>
<p>What inject approach do you prefer? What happy or WTF inject stories do <em>you</em> have? Let me know in the comments.</p>
<p><br><br></p>
<p>Happy Injecting!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/04/23/how-to-slowly-turn-your-symfony-project-to-legacy-with-action-injection</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 23 Apr 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/04/23/how-to-slowly-turn-your-symfony-project-to-legacy-with-action-injection#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ 4 Tips To Get Emotions to Your Blogging About Programming ]]></title>
                <link>https://tomasvotruba.com/blog/2018/04/19/4-tips-to-get-emotions-to-your-blogging-about-programming</link>
                <description><![CDATA[ <p>Last week I wrote about <a href="/blog/2018/04/12/the-best-5-of-256-bloghacks-book/">top 5 bloghacks</a> I found in this book.
<br>
Today I'll share with you <strong>5 tips that proven useful during my programming/self-education career</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="1-make-your-post-ideas-public">1. Make Your Post Ideas Public</h2>
<p>This is another place where open-source beats closed-source:</p>
<img src="/assets/images/posts/2018/blogtips/github-issues.png" alt="Github issues with posts idea as issues" class="img-thumbnail">
<p><br></p>
<p>All my post ideas public and community can up-vote it, down-vote it, comment there or <strong>add your own idea</strong>:</p>
<img src="/assets/images/posts/2018/blogtips/post-idea.png" alt="Github issues outsourced" class="img-thumbnail">
<h3 id="how-to-use-it">How to Use It?</h3>
<ul>
<li>Do you hear the same question over and over again? Put it there.</li>
<li>Do you think it's a great idea to write about &quot;Repositories in Symfony&quot;? Put it there.</li>
<li>When I want to write, I'll just look there, let my heart pick the one that's closest to its setting at the moment and start writing.</li>
</ul>
<p>And it's not only for writing itself but also for preparation. <strong>You can put also concepts there, ask people for details or up-vote it every time you see a question about it</strong>. The post content grows without you knowing it.</p>
<h3 id="keep-it-fit-and-slim">Keep it Fit and Slim</h3>
<p>I got inspired by <a href="https://github.com/Ocramius/ocramius.github.com/issues">Ocramius' blog issues</a>, where is over 20 ideas now. I tried the same approach - add every idea I have. I end up having 30+ great ideas and <strong>with <a href="https://www.hanselman.com/blog/AnalysisParalysisOverthinkingAndKnowingTooMuchToJustCODE.aspx">choice paralysis</a> every time I wanted to blog</strong>.</p>
<p>Then I remembered the healing effect of minimalism on <a href="https://mikemcquaid.com/2018/03/19/open-source-maintainers-owe-you-nothing">open-source mental health</a> and <strong>set myself a limit of 10 ideas maximum</strong>. I still drop ideas here and there and from time to time check the count. <strong>If it's &gt; 10, I pick top 10 and delete the rest - ruthlessly.</strong></p>
<h2 id="2-write-about-pain-points-you-meet">2. Write About Pain Points You Meet</h2>
<p><strong>Every one of us has a passion for something</strong>. It might be quiet due to <a href="/blog/2018/03/22/how-teaching-suicides-itself-by-killing-the-passion/">school silence treatment</a>, it might be unclear to see and maybe you think about yourself, that you have nothing to extra to add to this world that hasn't been added yet. You're probably wrong.</p>
<p><strong>If you're a programmer, you have a passion for some pattern, or framework, of the way you create your code. It might be clean code, it might be Laravel, it might be a passion for this new package or complex algorithm.</strong></p>
<p>And when you meet opposite in your life, you just feel it.</p>
<p>For me, it's clearly <em>static, services locators vs. constructor and dependency injection first</em>.</p>
<p>In every <a href="https://github.com/symplify/symplify">Symplify</a> package and <a href="https://github.com/rectorphp/rector">Rector</a> I'm trying to put constructor injection first. It's often super hard and takes a lot of <a href="https://github.com/symplify/symplify/pull/693">refactoring</a> and thinking, but I go for it because I see that DI absence is the main pillar of legacy code.</p>
<h3 id="it-s-about-you">It's About You</h3>
<p>But this is not about me. <strong>It's about you.</strong> <strong>Find your topic that makes your heart racing - either from being happy or from being angry.</strong> Readers will know and will react to it. You'll reach their passion by sharing yours. And it's also a very deep source of your inner knowledge. You can write this new feature in Symfony, but that's written, done and finished. But if you write about your passion, there will always be a topic to write about, to explore.</p>
<h2 id="3-write-compliments-about-others">3. Write Compliments about Others</h2>
<ul>
<li><em>How to Setup ...?</em></li>
<li><em>5 New Features in ...?</em></li>
<li><em>3 Reasons to Install ... on Your Android?</em></li>
<li><em>4 Ways to Save Time by using ...?</em></li>
</ul>
<p>Almost every programming post is like this. Everyone is writing about themselves, their products or how to use this or that software. A software.</p>
<p>But thanks to all the coding, programming, and algorithms we almost forgot about the most important thing in the world - yes the good old offline world: <strong>relations ships</strong>.</p>
<blockquote class="blockquote text-center mt-5 mb-5">
    "You can have everything in life you want,<br>
    if you will just help other people get what they want."
    <footer class="blockquote-footer">Zig Ziglar</footer></blockquote>
<p>This quote gets truer every year I get older.</p>
<p>Such an expression of random gratitude will shine in the world of social networks. For inspiration:</p>
<ul>
<li>
<p><a href="/blog/2017/06/01/thank-you-david/">Thank You David</a></p>
</li>
<li>
<p><a href="/blog/2016/03/03/kolik-lidi-je-potreba-k-vytvoreni-jedne-komunity">Kolik lidí je potřeba k vytvoření jedné komunity?
</a> (in Czech)</p>
</li>
</ul>
<p>Or just start slowly:</p>
<ul>
<li>
<p>Be nice about concurrency package - <a href="/blog/2017/05/29/symplify-packages-deprecations-brought-by-symfony-33/">Symplify packages deprecations brought by Symfony 3.3</a></p>
</li>
<li>
<p>Say &quot;thank you&quot; <a href="/blog/2018/04/12/the-best-5-of-256-bloghacks-book/#4-put-a-search-on-website">to a friend who lend you a book</a> you review. And <a href="/blog/2017/09/25/3-non-it-books-that-help-you-to-become-better-programmer/#steal-like-and-artist-by-austing-kleon">again to another friend</a>.</p>
</li>
</ul>
<p>Your love expressed to others will eventually get back to you, don't worry :).</p>
<h2 id="4-but-more-importantly-be-yourself">4. But More Importantly, Be Yourself</h2>
<p>I've read a lot of book and tips about writing but when you step back, it's often how the <em>write would do it to enjoy it</em>. So my last tip for your is to be yourself, write about your topics, use your style. That's the thing you're naturally the best in the worlds.</p>
<p><br><br></p>
<p>Have an awesome summer day!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/04/19/4-tips-to-get-emotions-to-your-blogging-about-programming</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/04/19/4-tips-to-get-emotions-to-your-blogging-about-programming#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ 5 Steps to Your First Fixer or Sniff Test ]]></title>
                <link>https://tomasvotruba.com/blog/2018/04/16/5-steps-to-your-first-fixer-or-sniff-test</link>
                <description><![CDATA[ <p>When <a href="/blog/2017/07/17/how-to-write-custom-sniff-for-code-sniffer-3/">I wrote my first Sniff</a> 4 years ago I wanted to test it. I expected testing class, that would register sniff, provide ugly code and compare it to fixed one. So I started to explore PHP_CodeSniffer looking for such feature. Found one class, second class, warnings, errors, uff and after 10th error, I closed it.
<br><br>
When <a href="/blog/2017/07/24/how-to-write-custom-fixer-for-php-cs-fixer-24/">I wrote my first Fixer</a>, the story was a bit shorter but very similar. No wonder people don't test when the entry barrier is so huge.
<br><br>
<strong>Since I use both of them and I want to motivate people to write their own sniffs and fixers, I turned this barrier to just 5 short steps</strong> for both of them.</p> ]]></description>
                <content:encoded><![CDATA[ <p>Imagine you have a <code>LowerBoolConstantsFixer</code> that fixes all uppercase bool constants to lowercase ones:</p>
<pre><code class="language-diff">-$value = TRUE;
+$value = true;</code></pre>
<p>And nothing more. How do we take this test case to PHPUnit? That is what <a href="https://github.com/symplify/easy-coding-standardTester">ECS Tester</a> package will help us with.</p>
<h2 id="1-install-the-package">1. Install the package</h2>
<pre><code class="language-bash">composer require symplify/easy-coding-standard-tester --dev</code></pre>
<h2 id="2-create-a-config-with-checker-s-you-want-to-test">2. Create a config with checker(s) you want to test</h2>
<pre><code class="language-yaml"># /tests/Fixer/LowerBoolConstantsFixer/config.yml
services:
    Your\CodingStandard\LowerBoolConstantsFixer: ~</code></pre>
<p>(<em>Checker</em> is a group name for sniff and fixer, nothing more.)</p>
<h2 id="3-create-a-test-case-and-provide-the-config">3. Create a Test Case and Provide the Config</h2>
<p>Create a test case that extends <code>Symplify\EasyCodingStandardTester\Testing\AbstractCheckerTestCase</code> class.</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

namespace Your\CodingStandard\Tests\LowerBoolConstantsFixer;

use Symplify\EasyCodingStandardTester\Testing\AbstractCheckerTestCase;

final class LowerBoolConstantsFixerTest extends AbstractCheckerTestCase
{
    // ...
}</code></pre>
<p>And provide the config above in <code>provideConfig()</code> method.</p>
<ul>
<li>Try to keep this standard in every test to reduce the maintenance of the test, e.g. <code>__DIR__ . '/config.yml'</code>.</li>
<li>You can also make configured test of the same checker, <code>__DIR__ . '/configured-config.yml'</code>.</li>
</ul>
<pre><code class="language-diff"> &lt;?php declare(strict_types=1);

 namespace Your\CodingStandard\Tests\LowerBoolConstantsFixer;

 use Symplify\EasyCodingStandardTester\Testing\AbstractCheckerTestCase;

 final class LowerBoolConstantsFixerTest extends AbstractCheckerTestCase
 {
     // ...

+    protected function provideConfig(): string
+    {
+        return __DIR__ . '/config.yml';
+    }
 }</code></pre>
<h2 id="4-test-the-checker-behavior">4. Test The Checker Behavior</h2>
<p>You can make use of 3 testing methods:</p>
<ul>
<li><code>doTestCorrectFile($correctFile)</code> - the file should not be affected by this checker</li>
<li><code>doTestWrongToFixedFile($wrongFile, $fixedFile)</code> - classic before/after testing</li>
<li><code>doTestWrongFile($wrongFile)</code> - <strong>only for sniff</strong> - it doesn't fix, just reports</li>
</ul>
<p><br></p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

namespace Your\CodingStandard\Tests\LowerBoolConstantsFixer;

use Symplify\EasyCodingStandardTester\Testing\AbstractCheckerTestCase;

final class LowerBoolConstantsFixerTest extends AbstractCheckerTestCase
{
    public function test(): void
    {
        $this-&gt;doTestCorrectFile(__DIR__ . '/correct/correct.php.inc');

        $this-&gt;doTestWrongToFixedFile(
            __DIR__ . '/wrong/wrong.php.inc',
            __DIR__ . '/fixed/fixed.php.inc'
        );
    }

    protected function provideConfig(): string
    {
        return __DIR__ . '/config.yml';
    }
}</code></pre>
<h2 id="5-the-best-for-last-create-the-code-snippets">5. The Best For Last - Create the Code Snippets</h2>
<p><strong>This part you enjoy the most because your job is to break the checker</strong>... well, at least verify it behaves as you want it to behave.</p>
<p>What should it skip? Well, since <code>NULL</code> / <code>null</code> is not a bool value...</p>
<pre><code class="language-php">// correct/correct.php.inc
$value = NULL;
$value = null;</code></pre>
<p><br></p>
<p>I guess you already know the before/after part:</p>
<pre><code class="language-php">// wrong/wrong.php.inc
$value = TRUE;
$value = FALSE;</code></pre>
<p><br></p>
<pre><code class="language-php">// fixed/fixed.php.inc
$value = true;
$value = false;</code></pre>
<p>That's it!</p>
<p>Now you know all you need to be able to test any fixer or sniff. But if you want to know more, check <a href="https://github.com/symplify/easy-coding-standardTester">the ECS Tester README</a>.</p>
<p><br><br></p>
<p>Enjoy simple testing!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/04/16/5-steps-to-your-first-fixer-or-sniff-test</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 16 Apr 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/04/16/5-steps-to-your-first-fixer-or-sniff-test#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ The Best 5 of 256 Bloghacks Book ]]></title>
                <link>https://tomasvotruba.com/blog/2018/04/12/the-best-5-of-256-bloghacks-book</link>
                <description><![CDATA[ <p>Have you heard of <a href="http://www.yegor256.com/256-bloghacks.html"><em>256 Bloghacks</em> book</a> by Yegor? Do you think about reading it, but just don't have the time and money?
<br><br>
This post is <em>the best of</em> selection just for you and if you feel you like it, you can buy it and read as a whole.</p> ]]></description>
                <content:encoded><![CDATA[ <p>I came across this book <a href="https://www.vojtechruzicka.com/book-review-256-bloghacks">in the review by Vojta Růžička</a> on <a href="http://devblogy.tk">devblogy.cz</a> (the best place to follow Czech it bloggers by <a href="https://twitter.com/kaja47">kaja47</a> whom I'm very thankful for it). You might know <a href="http://www.yegor256.com">Yegor</a> from Java world or from
<strong><a href="http://www.yegor256.com/award.html">Software Quality Award</a> he organizes for open-source projects</strong> every year. <a href="https://arkadiuszkondas.com">A friend of mine</a> won the award with <em>the</em> machine learning package in PHP - <a href="https://github.com/php-ai/php-ml#awards">php-ai/php-ml</a> - last year.</p>
<p>Vojta was so kind to lend me the book over the lunch. This post is an answer to my first question I asked: <strong>what are the top 5 tips I should take from this book if no other?</strong></p>
<p>256 items is a lot. No matter if it's a tip, a story, a class or a food item in your home. The most of them are common, some are better and only <strong>a few are golden</strong>. I look for the gold in books, so here is what I found.</p>
<h2 id="1-blog-once-a-week-for-2-years">1. Blog Once a Week for 2 Years</h2>
<p>When I posted <a href="/blog/2015/11/02/ovladni-doctrine-migrace-v-nette/">my first post in late 2015</a> and it had 24 comments and I was very happy my knowledge is worth talking about. When I posted the next one and had no responses. I was frustrated and felt hopeless and as a just not good enough writer. So I stopped blogging for a few months.</p>
<p>I see now that it was a mistake, so the first tip is <strong>to blog once a week</strong>. Life is trying to tell me over and over again, that <a href="https://medium.com/@anthony_moore/consistency-beats-talent-luck-good-intentions-and-even-quality-66ba255aa4f7">Consistency Beats Talent, Luck, Good Intentions, and Even Quality</a>.</p>
<p>But not more often. I tried to blog 2x a week, right from the start and got burnout lesson (what a surprise). After a year of weekly blogging, I felt I want to blog more often and add a Thursday post. Very carefully, just once a month. Now after a couple of months I feel confident enough to write about it.</p>
<div class="card mb-5">
    <div class="card-body">
        <strong>Tip summary</strong>: start blogging slowly, once a month, once a week, be persistent and wait 1-2 years before getting the popularity.
    </div>
</div>
<h2 id="2-be-active-on-reddit">2. Be Active on Reddit</h2>
<p><a href="https://www.reddit.com/r/PHP">Reddit</a> is like StackOverflow for personal opinions or like Devel.cz, but international and for everyone. It's a place, where people share ideas, comment it, up-vote it or down-vote it.</p>
<p>Vojta shared with me his first experience with Reddit: he posted 2-3 his posts and he got autoban. That <strong>kind of ban, when you don't know you're banned</strong> - everything works, there're up-votes on your posts, but they're all in grey. Also, Yegor wrote about the similar experience. My experience was a little better: I could post only once 10 minutes. Then I learned I could post more often when I got more profile points (up-votes of my ideas and posts).</p>
<h3 id="get-what-you-give">Get what you Give</h3>
<p>That's the way of Reddit to tell you: <strong>You've got to give to get.</strong> I tried this tip, I'm voting and engage in discussions. I must admit, it was not out of altruistic unconditional love to the world. It was to get my posts be seen. But thanks to this, <strong>I started to be open to others' opinions, learned about few weaknesses in my communication and often learned something new.</strong></p>
<p>And this could be at any other community, whether you like Twitter, Facebook, Slack, Github or Stackoverflow.</p>
<div class="card mb-5">
    <div class="card-body">
        <strong>Tip summary</strong>: pick an online community and start to learn how it works. It might take time, weeks or months, but you'll get there. Become a member. What you give, will get back to you.
    </div>
</div>
<h2 id="3-use-static-website-generator">3. Use Static Website Generator</h2>
<p>This blog runs on <a href="http://statie.org">Statie</a> and <a href="https://github.com/tomasvotruba/tomasvotruba.com">is fully open-sourced on Github</a> (found a <em>tyop</em> here? just edit this file and send a PR - there is a link right at the top right of this post).</p>
<p>I love open-source and did this right from the start, but it feels so important to me that I mention this tip again. Also, I had a meeting with Vojta and he told me <a href="https://www.vojtechruzicka.com/gatsby-migration">how he migrated from Wordpress to GatsbyJS</a> (ReactJS-based static generator) and how he loves it.</p>
<p>Static websites are fast, simple, easy for your fan/critics-base to work with and most importantly - open. No secrets, copy anything you like.</p>
<div class="card mb-5">
    <div class="card-body">
        <strong>Tip summary</strong>: use any <a href="https://www.staticgen.com/">static generator</a> you feel is the right choice for you, put it on Github and put a link to every page, so people can edit it. Who didn't have a typo fix as a first proud contribution to the open-source?
    </div>
</div>
<h2 id="4-put-a-search-on-website">4. Put a Search on Website</h2>
<p>This was one of the biggest fails on my blog. Imagine you've read about &quot;symfony controller service something&quot;, you liked it, but you don't remember the exact title of the post. My blog has all posts on the main page, with no paging, so you can just use <em>Ctrl + F</em> to find... <strong>well that just sucks, right?</strong></p>
<p>Thanks to Yegor and Vojta I finally <a href="https://github.com/TomasVotruba/tomasvotruba.com/pull/286">added Google Search</a> on the homepage, so you can type &quot;symfony controller service&quot;, hit <em>Enter</em> and <a href="https://www.google.cz/search?sitesearch=tomasvotruba.com&amp;q=%22symfony+controller+service">get results you need</a>.</p>
<p>I'm sorry to all that felt frustrated when looking for any valuable content post by post, manually.</p>
<p>In case you'd like to try Algolia and <a href="https://community.algolia.com/docsearch">simple DocSearch</a> that Roman <a href="https://github.com/crazko/statie-web/commit/6c218b5d06666a098341960129617441c7cf8acb">added to Statie</a> and works very well for Statie-based website on Markdown... I tried it for you and was rejected because &quot;blog is not a documentation&quot;.</p>
<div class="card mb-5">
    <div class="card-body">
        <strong>Tip summary</strong>: working solution is better than a perfect one. Add simple stupid Google Search right from the start. I do it, Yegor does it, Google does it. Don't you know how? Just copy <a href="https://github.com/TomasVotruba/tomasvotruba.com/pull/286">these few lines</a>.
    </div>
</div>
<h2 id="5-turn-your-best-stackoverflow-answers-to-posts">5. Turn your Best StackOverflow Answers to Posts</h2>
<p>Did you provide a great answer on StackOverflow? Is that answer to duplicated and repeated questions? Do you think it might be useful to more people than StackOverflow users reading your post?</p>
<p><strong>Turn it into a blog post</strong>. I was not sure about this myself, so I tried it:</p>
<ul>
<li>
<p>Question: <a href="https://stackoverflow.com/questions/38346281/symfony-3-outsourcing-controller-code-into-service-layer/38349271#38349271">Symfony 3 - Outsourcing Controller Code into Service Layer
</a></p>
</li>
<li>
<p>Post: <a href="/blog/2017/10/16/how-to-use-repository-with-doctrine-as-service-in-symfony/">How to use Repository with Doctrine as Service in Symfony</a></p>
</li>
<li>
<p>Question: <a href="https://stackoverflow.com/questions/13901256/how-do-i-read-from-parameters-yml-in-a-controller-in-symfony2/48371606#48371606">How do I read from parameters.yml in a controller in symfony2?
</a></p>
</li>
<li>
<p>Post: <a href="/blog/2018/01/22/how-to-get-parameter-in-symfony-controller-the-clean-way/">How to Get Parameter in Symfony Controller the Clean Way</a></p>
</li>
</ul>
<p>And it works great! Now all I do is to <strong>provide a specific answer on the StackOverflow and link the post where I explain all possible pitfalls</strong>. So the question is answered and there is a follow-up, when they need to know more.</p>
<div class="card mb-5">
    <div class="card-body">
        <strong>Tip summary</strong>: Aggregate answers from StackOverflow and polish them on your blog as much as possible. Your readers will thank you and you'll make use of the energy you've already put to StackOverflow single answer. Win-win.
    </div>
</div>
<h3 id="are-5-tips-not-enough-for-you">Are 5 Tips not Enough for You?</h3>
<p>Well, if you're from Prague, reach out <a href="https://www.vojtechruzicka.com">Vojta</a> and ask him about the book. He's very open-minded person and eats lunch every day.</p>
<p><br></p>
<p>Carpe postum!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/04/12/the-best-5-of-256-bloghacks-book</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 12 Apr 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/04/12/the-best-5-of-256-bloghacks-book#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Try PSR-12 on Your Code Today ]]></title>
                <link>https://tomasvotruba.com/blog/2018/04/09/try-psr-12-on-your-code-today</link>
                <description><![CDATA[ <p>The standard is still behind the door, but feedback, before it gets accepted, is very important. After accepting it will be written down and it will be difficult to change anything.
<br><br>
Try PSR-12 today and see, how it works for your code.</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="tl-dr">tl;dr;</h2>
<pre><code class="language-bash">composer require symplify/easy-coding-standard --dev
vendor/bin/ecs check /src --set psr12</code></pre>
<p>And to fix the code:</p>
<pre><code class="language-bash">vendor/bin/ecs check /src --set psr12 --fix</code></pre>
<p>Now in more detailed way.</p>
<h2 id="psr-12-meets-ecs">PSR-12 meets ECS</h2>
<p>Someone on <a href="https://www.reddit.com/r/PHP/comments/84vafc/phpfig_psr_status_update">Reddit referred a PSR Google Group</a>, where they <strong>asked for real-life PSR-12 ruleset implementation in a coding standard tool</strong>. Korvin Szanto already prepared 1st implementation for PHP CS Fixer, at the moment <a href="https://github.com/KorvinSzanto/PHP-CS-Fixer/commit/c0b642c186d8f666a64937c2d37442dc77f6f393">only as a commit in</a> the fork. I put the ruleset to <code>psr12.yml</code> level in ECS and it looks like this in time of being:</p>
<pre><code class="language-yaml">imports:
    - { resource: 'php_cs_fixer/psr2.yml' }

services:
    PhpCsFixer\Fixer\CastNotation\LowercaseCastFixer: ~
    PhpCsFixer\Fixer\CastNotation\ShortScalarCastFixer: ~
    PhpCsFixer\Fixer\PhpTag\BlankLineAfterOpeningTagFixer: ~
    PhpCsFixer\Fixer\Import\NoLeadingImportSlashFixer: ~
    PhpCsFixer\Fixer\Import\OrderedImportsFixer:
        importsOrder:
            - 'class'
            - 'const'
            - 'function'
    PhpCsFixer\Fixer\LanguageConstruct\DeclareEqualNormalizeFixer:
        space: 'none'
    PhpCsFixer\Fixer\Operator\NewWithBracesFixer: ~
    PhpCsFixer\Fixer\Basic\BracesFixer:
        'allow_single_line_closure': false
        'position_after_functions_and_oop_constructs': 'next'
        'position_after_control_structures': 'same'
        'position_after_anonymous_constructs': 'same'

    PhpCsFixer\Fixer\ClassNotation\NoBlankLinesAfterClassOpeningFixer: ~
    PhpCsFixer\Fixer\ClassNotation\OrderedClassElementsFixer:
        order:
            - 'use_trait'
    PhpCsFixer\Fixer\ClassNotation\VisibilityRequiredFixer:
        elements:
            - 'const'
            - 'method'
            - 'property'
    PhpCsFixer\Fixer\Operator\BinaryOperatorSpacesFixer: ~
    PhpCsFixer\Fixer\Operator\TernaryOperatorSpacesFixer: ~
    PhpCsFixer\Fixer\Operator\UnaryOperatorSpacesFixer: ~
    PhpCsFixer\Fixer\FunctionNotation\ReturnTypeDeclarationFixer: ~
    PhpCsFixer\Fixer\Whitespace\NoTrailingWhitespaceFixer: ~

    PhpCsFixer\Fixer\Operator\ConcatSpaceFixer:
        spacing: 'one'

    PhpCsFixer\Fixer\Semicolon\NoSinglelineWhitespaceBeforeSemicolonsFixer: ~
    PhpCsFixer\Fixer\ArrayNotation\NoWhitespaceBeforeCommaInArrayFixer:
    PhpCsFixer\Fixer\ArrayNotation\WhitespaceAfterCommaInArrayFixer:

parameters:
    exclude_checkers:
        - 'PhpCsFixer\Fixer\Import\SingleImportPerStatementFixer'
        - 'PhpCsFixer\Fixer\Whitespace\NoExtraBlankLinesFixer'</code></pre>
<h2 id="do-you-agree-or-disagree-with-psr12">Do You Agree or Disagree with PSR12?</h2>
<p>There are still many <a href="https://github.com/KorvinSzanto/PHP-CS-Fixer/milestones">missed cases to be integrated into the standard</a>, but there is never to soon to get feedback from the community.</p>
<div class="text-center">
    <img src="/assets/images/posts/2018/psr-12/php-cs-fixer-thing.png" alt="PR in PHP CS Fixer?" class="img-thumbnail"></div>
<p>It will be <em>a thing</em>: PSR-12 set is definitely coming to PHP CS Fixer and <a href="https://github.com/squizlabs/PHP_CodeSniffer/issues/750">PHP_CodeSniffer has also an active issue</a> as well. Both of these tools are more stable, more popular and thus more rigid than ECS. So it will take time before there will be a pull-request and then stable release with PSR-12 set.</p>
<p><strong>That's an advantage of smaller packages like ECS, they can evolve faster and live in the present.</strong> Only that way ECS 4 already has PSR-12 set on board and ready to use.</p>
<h3 id="what-do-i-like">What do I Like?</h3>
<p>I like that PSR-12 puts to standard rules that I consider standard for years and most of them are already integrated with ECS <a href="https://github.com/symplify/symplify/tree/master/packages/EasyCodingStandard/config/common"><code>common</code> sets</a>:</p>
<ul>
<li>it applies PHP 7.1 features, like constant visibility</li>
<li>concat <code>.</code> spacing</li>
<li>mostly spacing</li>
<li>and letter casing</li>
</ul>
<h3 id="what-don-t-i-like">What don't I Like?</h3>
<p>Symplify code is already checked by PSR-12 (<a href="https://github.com/symplify/symplify/pull/773">see pull-request</a>):</p>
<div class="text-center">
    <img src="/assets/images/posts/2018/psr-12/symplify-implementation.png" alt="Integration to project with ECS" class="img-thumbnail"></div>
<p>It was easy to setup and works with 0 changes in the code. But as you can see, there 2 rules I don't fully agree with.</p>
<h4 id="1-code-phpcsfixer-fixer-phptag-blanklineafteropeningtagfixer-code">1. <code>PhpCsFixer\Fixer\PhpTag\BlankLineAfterOpeningTagFixer</code></h4>
<p>This rule creates this code:</p>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);</code></pre>
<p>Namespace changes, file doc changes, <code>use</code>, <code>class</code>, <code>interface</code>... that all changes in every file, so it should be on a standalone line, <strong>that will force you to notice it and orientate</strong>. But not <code>declare(strict_types=1);</code>, that is the same in every file.</p>
<p>I think our attention deserves to ignore anything that is the same in every file so inline its line:</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);</code></pre>
<p><br></p>
<h4 id="2-code-phpcsfixer-fixer-operator-unaryoperatorspacesfixex-code">2. <code>PhpCsFixer\Fixer\Operator\UnaryOperatorSpacesFixex</code></h4>
<p>It takes care of spacing around <code>!</code></p>
<pre><code class="language-php">if (!$isNotTrue) {
}

if ($isNotTrue) {
}</code></pre>
<p>Here we can apply the same approach we did in 1. An important code should be visually clear, an unimportant code should not bother us. Personally, <strong>I prefer seeing the negation clearly</strong>, so I know it's a negation:</p>
<pre><code class="language-php">if (! $isNotTrue) {
}</code></pre>
<h2 id="try-it-yourself-today">Try It Yourself Today</h2>
<p>Communicate, spread the ideas and find your way. This is only PSR - PS <strong>Recommendation</strong>. It's better to keep things standard for others, <a href="/blog/2018/03/12/neon-vs-yaml-and-how-to-migrate-between-them/#why-are-standards-so-important">so they can drink water if they're thirsty and not start a research on bottle colors instead</a>. But not a rigid rule that cannot be improved.</p>
<p>So just <a href="#tl-dr">try it</a>. Maybe your code is already PSR-12 ready.</p>
<p>And let me know in the comments, if you love it or rather hate it :)</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/04/09/try-psr-12-on-your-code-today</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 09 Apr 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/04/09/try-psr-12-on-your-code-today#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ 4 Ways to Speedup Your Symfony Development with PackageBuilder ]]></title>
                <link>https://tomasvotruba.com/blog/2018/04/05/4-ways-to-speedup-your-symfony-development-with-packagebuilder</link>
                <description><![CDATA[ <p>Symplify 4 was released and with it also one package, that contains all the Symfony tweaks that Symplify packages use.
<br><br>
Throwable render? Test services without public violation? Load parameters with glob? We got you covered!</p> ]]></description>
                <content:encoded><![CDATA[ <p>Here are 4 news that were added in Symplify 4 and that you can use in your application right away.</p>
<p>Just install it...</p>
<pre><code class="language-bash">composer require symplify/package-builder</code></pre>
<p>...and enjoy <a href="https://github.com/symplify/package-builder">more than one</a> of these 4 new features:</p>
<h2 id="1-console-like-code-vvv-code-aware-renders-for-exceptions-and-errors">1. Console-Like <code>-vvv</code>-Aware Renders for Exceptions and Errors</h2>
<p><a href="https://github.com/symplify/symplify/pull/732" class="btn btn-dark btn-sm mt-2 mb-3 pull-left">
<em class="fab fa-github"></em>
&nbsp;
Check the PR #732
</a></p>
<p><a href="https://github.com/symplify/symplify/pull/720" class="btn btn-dark btn-sm mt-2 mb-3 ml-2">
<em class="fab fa-github"></em>
&nbsp;
Check the PR #720
</a></p>
<p>If you use Symfony Console you are probably familiar with these errors and with <code>-vvv</code> to get full exception trace:</p>
<img src="/assets/images/posts/2018/symplify-4-pb/error-without-and-with-vvv.gif" class="img-thumbnail">
<p>Also works with <code>Error</code> like <code>ParseError</code>. That is super handy, useful and universal.</p>
<p><strong>But what if you need to use it standalone error reporting. e.g before console build?</strong></p>
<pre><code class="language-php">$containerFactory = new ContainerFactory();
$container = $containerFactory-&gt;createFromConfig('config-not-found.yml');

$application = $container-&gt;get(Application::class);
$application-&gt;run();</code></pre>
<p>Well, you could use <code>SymfonyStyle</code>:</p>
<pre><code class="language-php">use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Output\ConsoleOutput;

try {
    $containerFactory = new ContainerFactory();
    $containerFactory-&gt;createFromConfig('config-with-parse-error.yml');

    $application = $container-&gt;get(Application::class);
    $application-&gt;run();
} catch (Throwable $throwable) {
    (new SymfonyStyle(new ArgvInput(), new ConsoleOutput()))-&gt;error($throwable);
}</code></pre>
<p>And that will get you rather chaotic report:</p>
<pre><code class="language-bash"> [ERROR] Symfony\Component\Yaml\Exception\ParseException: Unable to parse at line 9 (near "@# global templates
         variables"). in /var/www/tomasvotruba.com/vendor/symfony/yaml/Parser.php:415
         Stack trace:
         #0 /var/www/tomasvotruba.com/vendor/symfony/yaml/Parser.php(454): Symfony\Component\Yaml\Parser-&gt;doParse(' @#
         global temp...', 768)
         #1 /var/www/tomasvotruba.com/vendor/symfony/yaml/Parser.php(315): Symfony\Component\Yaml\Parser-&gt;parseBlock(8,
         '@# global templ...', 768)
         #2 /var/www/tomasvotruba.com/vendor/symfony/yaml/Parser.php(95): Symfony\Component\Yaml\Parser-&gt;doParse(Array,
         768)
         #3 /var/www/tomasvotruba.com/vendor/symfony/yaml/Parser.php(62):
         Symfony\Component\Yaml\Parser-&gt;parse('imports:\n    - ...', 768)
         #4 /var/www/tomasvotruba.com/vendor/symfony/dependency-injection/Loader/YamlFileLoader.php(621):
         Symfony\Component\Yaml\Parser-&gt;parseFile('/var/www/tomasv...', 768)
         #5
         /var/www/tomasvotruba.com/vendor/symplify/package-builder/src/Yaml/AbstractParameterMergingYamlFileLoader.php(52
         ): Symfony\Component\DependencyInjection\Loader\YamlFileLoader-&gt;loadFile('/var/www/tomasv...')
         #6 /var/www/tomasvotruba.com/vendor/symfony/config/Loader/DelegatingLoader.php(40):
         Symplify\PackageBuilder\Yaml\AbstractParameterMergingYamlFileLoader-&gt;load('/var/www/tomasv...', NULL)
         #7 /var/www/tomasvotruba.com/vendor/symplify/statie/src/DependencyInjection/StatieKernel.php(43):
         Symfony\Component\Config\Loader\DelegatingLoader-&gt;load('/var/www/tomasv...')
         #8 /var/www/tomasvotruba.com/vendor/symfony/http-kernel/Kernel.php(614):
        ...</code></pre>
<h3 id="how-to-get-nice-error-reports-even-out-of-console-application-scope">How to Get Nice Error Reports Even out of Console Application Scope?</h3>
<p>Do you need this to work on your CLI app? Thanks to <a href="https://github.com/ondram">Ondra Machulda</a>'s motivation <a href="https://github.com/symplify/symplify/pull/716">issues</a> I came with decoupled Symfony\Console Application logic.</p>
<p>It's named <code>Symplify\PackageBuilder\Console\ThrowableRenderer</code> and use it like this:</p>
<pre><code class="language-php">use Symplify\PackageBuilder\Console\ThrowableRenderer;

try {
    $containerFactory = new ContainerFactory();
    $containerFactory-&gt;createFromConfig('config-not-found.yml');

    $application = $container-&gt;get(Application::class);
    $application-&gt;run();
} catch (Throwable $throwable) {
    (new ThrowableRenderer())-&gt;render($throwable);
}</code></pre>
<p><strong>And you'll get always nice errors for any <code>Throwable</code> :). Work anywhere right away and also respects <code>-vvv</code> option.</strong></p>
<p><br></p>
<h2 id="2-drop-manual-code-public-true-code-for-every-service-you-test">2. Drop Manual <code>public: true</code> for Every Service You Test</h2>
<p><a href="https://github.com/symplify/symplify/pull/680" class="btn btn-dark btn-sm mt-2 mb-3">
<em class="fab fa-github"></em>
&nbsp;
Check the PR #680
</a></p>
<p>If you need to test a service, this is the most common way to test it using DI:</p>
<pre><code class="language-php">final class ChangelogLinkerTest extends AbstractContainerAwareTestCase
{
    protected function setUp(): void
    {
        $this-&gt;changelogLinker = $this-&gt;container-&gt;get(ChangelogLinker::class);
    }

    // ...
}</code></pre>
<p>But if you call it like this, you're informed that it must be public.</p>
<p>To make that happen, developers will take one of 2 paths. Both with high maintainability:</p>
<h3 id="1-public-for-every-tested-class">1. Public for Every Tested Class</h3>
<pre><code class="language-yaml">services:
    SomeNamespace\:
        resource: '..'

    SomeNamespace\SomeClass:
        public: true</code></pre>
<h3 id="2-custom-tests-only-configs">2. Custom Tests-only Configs</h3>
<pre><code class="language-yaml"># services-tests.yml
services:
    SomeNamespace\SomeClass:
        public: true</code></pre>
<p>Both these configs rely on your manual updates. That!s not a way to go - programming should be easy, fun and without any triggers in our heads.</p>
<h3 id="how-to-overcome-this">How to Overcome This?</h3>
<p>Just add <code>Symplify\PackageBuilder\DependencyInjection\CompilerPass\PublicForTestsCompilerPass</code>:</p>
<pre><code class="language-php">final class AppKernel extends Kernel
{
    // ...

    protected function build(ContainerBuilder $containerBuilder): void
    {
        $containerBuilder-&gt;addCompilerPass(new PublicForTestsCompilerPass());
    }
}</code></pre>
<p>It detects PHPUnit run and adds public to each service, so you don't have to add it for every new service your set.</p>
<p>Setup &amp; forget.</p>
<p><br></p>
<h2 id="3-autowire-singly-implemented-interfaces">3. Autowire Singly-Implemented Interfaces</h2>
<p><a href="https://github.com/symplify/symplify/pull/645" class="btn btn-dark btn-sm mt-2 mb-3">
<em class="fab fa-github"></em>
&nbsp;
Check the PR #645
</a></p>
<p>Autowiring works great in combination with PSR-4 autoloading since <a href="https://github.com/symfony/symfony/pull/25282">Symfony 3.4</a>. But what about <strong>3-rd party services that have interfaces</strong>?</p>
<pre><code class="language-yaml"># app/config/services.yml
services:
    _defaults:
        autowire: true

    Symfony\Component\Console\Input\ArgvInput: ~
    Symfony\Component\Console\Output\ConsoleOutput: ~</code></pre>
<p>If you use <code>Symfony\Component\Console\Input\InputInterace</code>, you'll get error of missing implementation.</p>
<p>To solve it you need to use an alias for every class that implements an interface:</p>
<pre><code class="language-yaml"># app/config/services.yml
services:
    _defaults:
        autowire: true

    Symfony\Component\Console\Input\ArgvInput: ~
    Symfony\Component\Console\Input\InputInterace:
        alias: Symfony\Component\Console\Input\ArgvInput

    Symfony\Component\Console\Output\ConsoleOutput: ~
    Symfony\Component\Console\Output\OutputInterace:
        alias: Symfony\Component\Console\Output\ConsoleOutput</code></pre>
<p>This way, you're actually being punished for using clean code and separation of interfaces in your code, because using <code>Symfony\Component\Console\Input\ArgvInput</code> would be easier.
But is it really necessary to break SOLID principles just to comply with Symfony behaviors? I don't think that framework should enforce bad design to your application.</p>
<h3 id="how-to-fix-this">How to fix this?</h3>
<p>I got inspired by <a href="https://github.com/symfony/symfony/pull/25282">Register singly-implemented interfaces when doing PSR-4 discovery</a> pull-request in Symfony and by Nette default behavior.</p>
<pre><code class="language-php">namespace App;

use Symfony\Component\HttpKernel\Kernel;
use Symplify\PackageBuilder\DependencyInjection\CompilerPass\AutowireSinglyImplementedCompilerPass;

final class AppKernel extends Kernel
{
    // ...
    protected function build(ContainerBuilder $containerBuilder): void
    {
        $containerBuilder-&gt;addCompilerPass(new AutowireSinglyImplementedCompilerPass());
    }
}</code></pre>
<p>And then clean your configs the same way PSR-4 autodiscovery works:</p>
<pre><code class="language-diff"> # app/config/services.yml
 services:
     _defaults:
         autowire: true

     Symfony\Component\Console\Input\ArgvInput: ~
-    Symfony\Component\Console\Input\InputInterace:
-        alias: Symfony\Component\Console\Input\ArgvInput

     Symfony\Component\Console\Output\ConsoleOutput: ~
-    Symfony\Component\Console\Output\OutputInterace:
-        alias: Symfony\Component\Console\Output\ConsoleOutput</code></pre>
<p><br></p>
<h2 id="4-how-to-decouple-parameters-to-multiple-files-in-safe-way">4. How to Decouple Parameters to multiple files in Safe Way?</h2>
<p><a href="https://github.com/symplify/symplify/pull/745" class="btn btn-dark btn-sm mt-2 mb-3">
<em class="fab fa-github"></em>
&nbsp;
Check the PR #745
</a></p>
<p>Do you prefer to decouple long parameter list to multiple files and them with <a href="https://symfony.com/blog/new-in-symfony-3-3-import-config-files-with-glob-patterns">Glob</a>?</p>
<pre><code class="language-yaml"># app/config/config.yml
imports:
    - { resource: 'framework/*.yml' }</code></pre>
<p>In <code>/framework</code> directory there 2 files:</p>
<pre><code class="language-yaml"># app/config/framework/symfony.yml
parameters:
    framework:
        symfony:
            controller: '&lt;?php "some Symfony code"'</code></pre>
<p>and</p>
<pre><code class="language-yaml"># app/config/framework/laravel.yml
parameters:
    framework:
        laravel:
            controller: '&lt;?php "some Laravel code"'</code></pre>
<p>How many items will <code>framework</code> parameter have? 2? 1? 0?</p>
<p><strong>One is correct</strong>. And which one? <code>laravel</code> or <code>symfony</code>? Well, according the <code>YamlFileLoader</code>, that <a href="https://github.com/symfony/symfony/blob/f77c1d0d0996cc4723bff0411c8b75fe6a575bc8/src/Symfony/Component/DependencyInjection/Loader/YamlFileLoader.php#L135"><em>last wins</em> approach</a> is used. So probably <code>symfony</code>... but it doesn't matter, because you need them all.</p>
<h3 id="how-to-prefer-merging-of-parameters">How to Prefer Merging of Parameters?</h3>
<p>The official statement is to <a href="https://github.com/symfony/symfony/issues/26713">create <code>Extension</code>, <code>Configuration</code>, <code>Bundle</code> and merge class</a>, which and then add a custom implementation of <a href="https://symfony.com/blog/new-in-symfony-3-4-local-service-binding">parameter binding</a> and other Symfony parameters related features like composing of parameters, env variables and etc. I asked for this option to be allowed with no BC break in <a href="https://github.com/symfony/symfony/issues/26713">the issue</a>, but it seems it's not needed enough.</p>
<p>Symplify actually followed the suggested approach and <strong>it was a lot of duplicated code from Symfony\DependencyInjection that barely worked</strong>.</p>
<p>To save many duplicated classes and take advantage of all Symfony parameter features you could overload <code>YamlFileLoader</code>, where parameters are merged together:</p>
<pre><code class="language-yaml"># app/config/framework/symfony.yml
parameters:
    framework:
        symfony:
            controller: '&lt;?php "some Symfony code"'
        laravel:
            controller: '&lt;?php "some Laravel code"'</code></pre>
<p>Do you need this? Just use <code>Symplify\PackageBuilder\Yaml\AbstractParameterMergingYamlFileLoader</code> in your <code>Kernel</code> class:</p>
<pre><code class="language-php">use Symfony\Component\Config\Loader\DelegatingLoader;
use Symfony\Component\Config\Loader\LoaderResolver;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Loader\GlobFileLoader;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\HttpKernel\Kernel;

final class AppKernel extends Kernel
{
    // ...

    /**
     * @param ContainerInterface|ContainerBuilder $container
     */
    protected function getContainerLoader(ContainerInterface $container): DelegatingLoader
    {
        $kernelFileLocator = new FileLocator($this);

        $loaderResolver = new LoaderResolver([
            new GlobFileLoader($container, $kernelFileLocator),
            new class($container, $kernelFileLocator) extends AbstractParameterMergingYamlFileLoader {
            },
        ]);

        return new DelegatingLoader($loaderResolver);
    }
}</code></pre>
<p>The class is <code>abstract</code>, so you can modify it <strong>in any way you need</strong>.</p>
<p><br></p>
<p>Happy package building!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/04/05/4-ways-to-speedup-your-symfony-development-with-packagebuilder</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/04/05/4-ways-to-speedup-your-symfony-development-with-packagebuilder#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Rectify: Turn All Doctrine Repositories From Inheritance To Composition in Seconds ]]></title>
                <link>https://tomasvotruba.com/blog/2018/04/02/rectify-turn-repositories-to-services-in-symfony</link>
                <description><![CDATA[ <p>Today I start new series called <em>Rectify</em>. It will be about <strong>instant refactoring</strong> to better code not manually, but with Rector.
<br><br>
That way there is no excuse left to change your legacy application to clean code you'll love to extend.
<br><br>
We'll start with very popular post - <a href="/blog/2017/10/16/how-to-use-repository-with-doctrine-as-service-in-symfony/">Repository with Doctrine as Service in Symfony</a>.</p> ]]></description>
                <content:encoded><![CDATA[ <p>I wrote about <a href="/blog/2017/10/16/how-to-use-repository-with-doctrine-as-service-in-symfony/">How to use Repository with Doctrine as Service Symfony</a> a while ago. There are many posts about this topic, but not as simple to apply as this one. At least for one repository.</p>
<h2 id="the-one-to-many-problem-of-the-best-practise">The One-to-Many Problem of The Best Practise</h2>
<p>It's always very simple to write 1 service, with <code>final</code>, constructor injection, design patterns and modern PHP 7.1 type hints and <code>strict_types</code>. That's why it's easy to write such posts as the one above :)</p>
<p><strong>But what if you have 50 repositories? Would I write a post about how I refactored 50 repositories to services?</strong> Probably not, because it would take so much time and energy and you'd fell asleep while reading the first 1/10.</p>
<h2 id="turn-m-complexity-to-1-with-rector">Turn M-complexity to 1 with Rector</h2>
<p>What if you could <strong>change just 1 case and it would be promoted to the rest of your application</strong>? From 1:M to 1:1. That's exactly what Rector help you with.</p>
<p>Let's see how it works. I'll use <a href="/blog/2017/10/16/how-to-use-repository-with-doctrine-as-service-in-symfony/#how-to-make-this-better-with-symfony-3-3">the example from the original post</a>, where I write about turning <a href="https://github.com/jupeter/clean-code-php#prefer-composition-over-inheritance">inheritance to composition</a> - one of SOLID principles.</p>
<p><br></p>
<p><strong>Instead of inheritance...</strong></p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

namespace App\Repository;

use App\Entity\Post;
use Doctrine\ORM\EntityRepository;

final class PostRepository extends EntityRepository
{
}</code></pre>
<p><strong>...we use composition:</strong></p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

namespace App\Repository;

use App\Entity\Post;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\EntityRepository;

final class PostRepository
{
    /**
     * @var EntityRepository
     */
    private $repository;

    public function __construct(EntityManager $entityManager)
    {
        $this-&gt;repository = $entityManager-&gt;getRepository(Post::class);
    }
}</code></pre>
<h2 id="4-steps-to-instant-refactoring-of-all-repositories">4 Steps to Instant Refactoring of All Repositories</h2>
<h3 id="1-install-rector">1. Install Rector</h3>
<pre><code class="language-bash">composer install rector/rector --dev</code></pre>
<h3 id="2-setup-code-rector-php-code">2. Setup <code>rector.php</code></h3>
<p>There you name all the changes you'd like to perform on you code:</p>
<pre><code class="language-php">&lt;?php

use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
use Rector\Architecture\Rector\MethodCall\ReplaceParentRepositoryCallsByRepositoryPropertyRector;
use Rector\Architecture\Rector\Class_\MoveRepositoryFromParentToConstructorRector;

return function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();

    // order matters, this needs to be first to correctly detect parent repository

    // this will replace parent calls by "$this-&gt;repository" property
    $services-&gt;set(ReplaceParentRepositoryCallsByRepositoryPropertyRector::class);

    // this will move the repository from parent to constructor
    $services-&gt;set(MoveRepositoryFromParentToConstructorRector::class);
};</code></pre>
<h3 id="3-add-repository-entity-provider">3. Add Repository → Entity Provider</h3>
<p>But how does Rector know what entity should it add to which repository? For that reasons, there is <code>Rector\Bridge\Contract\DoctrineEntityAndRepositoryMapperInterface</code> you need to implement.</p>
<p>It could be as simple as:</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

namespace App\Rector;

use Rector\Bridge\Contract\DoctrineEntityAndRepositoryMapperInterface;

final class DoctrineEntityAndRepositoryMapper implements DoctrineEntityAndRepositoryMapperInterface
{
    /**
     * @var string[]
     */
    private $map = [
        'App\Repository\PostRepository' =&gt; 'App\Entity\Post',
        'App\Repository\ProductRepository' =&gt; 'App\Entity\Product',
    ];
    public function mapRepositoryToEntity(string $name): ?string
    {
        return $this-&gt;map[$name] ?? null;
    }

    public function mapEntityToRepository(string $name): ?string
    {
        $inversedMap = array_flip($this-&gt;map);

        return $inversedMap[$name] ?? null;
    }
}</code></pre>
<p>And register it:</p>
<pre><code class="language-diff"> &lt;?php

 use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
 use Rector\Rector\Architecture\RepositoryAsService\ReplaceParentRepositoryCallsByRepositoryPropertyRector;
 use Rector\Rector\Architecture\RepositoryAsService\MoveRepositoryFromParentToConstructorRector;

 return function (ContainerConfigurator $containerConfigurator): void {
     $services = $containerConfigurator-&gt;services();

     // order matters, this needs to be first to correctly detect parent repository

     // this will replace parent calls by "$this-&gt;repository" property
     $services-&gt;set(ReplaceParentRepositoryCallsByRepositoryPropertyRector::class);

     // this will move the repository from parent to constructor
     $services-&gt;set(MoveRepositoryFromParentToConstructorRector::class);

+    $services-&gt;set(\App\Rector\DoctrineEntityAndRepositoryMapper::class);
 };</code></pre>
<h3 id="4-run-on-your-code">4. Run on Your Code</h3>
<p>Now the fun part:</p>
<pre><code class="language-bash">vendor/bin/rector process /app --dry-run # "--config rector.php" as default</code></pre>
<p>You should see diffs like:</p>
<pre><code class="language-diff"> use App\Entity\Post;
 use Doctrine\ORM\EntityRepository;

-final class PostRepository extends EntityRepository
+final class PostRepository
 {
     /**
+     * @var \Doctrine\ORM\EntityRepository
+     */
+    private $repository;
+    public function __construct(\Doctrine\ORM\EntityManager $entityManager)
+    {
+        $this-&gt;repository = $entityManager-&gt;getRepository(\App\Entity\Post::class);
+    }
+    /**
      * Our custom method
      *
      * @return Post[]
@@ -14,7 +22,7 @@
      */
     public function findPostsByAuthor(int $authorId): array
     {
-        return $this-&gt;findBy([
+        return $this-&gt;repository-&gt;findBy([
             'author' =&gt; $authorId
         ]);
     }</code></pre>
<p>Are all looking good? Run it:</p>
<pre><code class="language-bash">vendor/bin/rector process /app</code></pre>
<h3 id="safety-first">Safety First</h3>
<p>When the Rector finishes, be sure to check your code. While it can manage 80 % of cases for you, it's not perfect. I love to use <code>git diff</code> and <em>PgDown</em> - the best use case for this key I know.</p>
<p>Ready? Add, commit, send an invoice for big refactoring and enjoy your coffee :)</p>
<h2 id="clean-code-done-but-what-about-beautiful">Clean Code... Done, but What About Beautiful?</h2>
<p>You've probably noticed that code itself is not looking too good. Rector's jobs is not to clean, but to change the code. It's not a hipster designer, but rather a thermonuclear engineer. <strong>That's why there are coding standards. You can apply your own or if not good enough use Rector's prepared set</strong>:</p>
<pre><code class="language-bash">composer require symplify/easy-coding-standard --dev
vendor/bin/ecs --config vendor/rector/rector/ecs-after-rector.php --fix</code></pre>
<p>And your code is now both <strong>refactored and clean</strong>. That's it!</p>
<p><br><br></p>
<p>Happy instant refactoring!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/04/02/rectify-turn-repositories-to-services-in-symfony</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/04/02/rectify-turn-repositories-to-services-in-symfony#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ New in Coding Standard 4: Long Line Breaks Automated and 3 Legacy Prevention Fixers ]]></title>
                <link>https://tomasvotruba.com/blog/2018/03/29/new-in-coding-standard-4-long-line-breaks-automated-and-3-legacy-prevention-fixers</link>
                <description><![CDATA[ <p>Legacy code prevention, lines automated and clear naming of classes in huge projects.
That all is coming to Coding Standard 4 (still in alpha).
<br><br>
Are you curious what work will now these 4 news fixers handle for you? Look inside.</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="1-let-coding-standard-handle-line-length-for-you">1. Let Coding Standard handle Line Length for You</h2>
<p><a href="https://github.com/symplify/symplify/pull/749" class="btn btn-dark btn-sm mt-2 mb-3">
<em class="fab fa-github"></em>
&nbsp;
Check the PR #749
</a></p>
<p><em>I'm so happy to announce this fixer, because it saved my so many times and also motivates me to use decoupling to smaller, SRP classes.</em></p>
<p>If you use <code>LineLengthSniff</code>, you know it's painful to fix every error report it makes.</p>
<pre><code class="language-php">&lt;?php

// ecs.php

declare(strict_types=1);

use PHP_CodeSniffer\Standards\Generic\Sniffs\Files\LineLengthSniff;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return static function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();

    $services-&gt;set(LineLengthSniff::class)
        -&gt;property('absoluteLineLimit', 120);
};</code></pre>
<p>The most typical use case is constructor dependencies. You code start small:</p>
<pre><code class="language-php">public function __construct(OneLittleDependency $oneLittleDependency)
{
}</code></pre>
<p>Then it grows...</p>
<pre><code class="language-php">public function __construct(OneLittleDependency $oneLittleDependency, AnotherLittleDependency $anotherLittleDependency)
{
}</code></pre>
<p>...and grows...</p>
<pre><code class="language-php">public function __construct(OneLittleDependency $oneLittleDependency, AnotherLittleDependency $anotherLittleDependency, $someParameter)
{
}</code></pre>
<p>...sniff screams, so you inline it...</p>
<pre><code class="language-php">public function __construct(
    OneLittleDependency $oneLittleDependency,
    AnotherLittleDependency $anotherLittleDependency,
    $someParameter
) {
}</code></pre>
<p>...then you refactor and merge 2 services to 1...</p>
<pre><code class="language-php">public function __construct(
    OneLittleDependency $oneLittleDependency,
    $someParameter
) {
}</code></pre>
<p>...and that is inconsistent and has no reason to be inlined, so you inline it...</p>
<pre><code class="language-php">public function __construct(OneLittleDependency $oneLittleDependency, $someParameter) {
}</code></pre>
<p>...and that is one of many reasons people don't like to decouple classes and keep them small.</p>
<p><br></p>
<p>There are other cases, where parameters, arguments or array items can change up and down:</p>
<pre><code class="language-diff">-$someObject = new SomeClass(
-    $shortArg
-);
+$someObject = new SomeClass($shortArg);</code></pre>
<pre><code class="language-diff">-$someArray = ['superlooongArgumentsover120chars', 'superlooongArgumentsover120chars', 'superlooongArgumentsover120chars'];
+$someArray = [
+    'superlooongArgumentsover120chars',
+    'superlooongArgumentsover120chars',
+    'superlooongArgumentsover120chars'
+];</code></pre>
<p>What if I told you that you'll have to never deal with this manually. Ever!</p>
<p>Welcome <code>LineLengthFixer</code>.</p>
<h3 id="how-to-register-it">How to Register It?</h3>
<pre><code class="language-php">&lt;?php

// ecs.php

declare(strict_types=1);

use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
use Symplify\CodingStandard\Fixer\LineLength\LineLengthFixer;

return static function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();
    $services-&gt;set(LineLengthFixer::class);
};</code></pre>
<p>As you guessed, this fixer works with 120 chars as maximum line-size... by default ↓</p>
<p><br></p>
<h2 id="2-choose-line-length-to-match-your-display">2. Choose Line Length to Match Your Display</h2>
<p><a href="https://github.com/symplify/symplify/pull/747" class="btn btn-dark btn-sm mt-2 mb-3">
<em class="fab fa-github"></em>
&nbsp;
Check the PR #751
</a></p>
<ul>
<li>Do you prefer shorter or longer lines?</li>
<li>Do you want use breaks only and not inline short code?</li>
</ul>
<pre><code class="language-php">&lt;?php

// ecs.php

declare(strict_types=1);

use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
use Symplify\CodingStandard\Fixer\LineLength\LineLengthFixer;

return static function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();

    $services-&gt;set(LineLengthFixer::class)
        -&gt;call('configure', [[
            'max_line_length' =&gt; 100, # default: 120
            'break_long_lines' =&gt; true, # default: true
            'inline_short_lines' =&gt; false, # default: true
        ]]);
};</code></pre>
<p><br></p>
<h2 id="3-make-your-static-classes-visible">3. Make your Static Classes visible</h2>
<p>It started as one simple static method. A helper method. They say: it's ok to use static methods, when you know when to use them. And that's <strong>how cancer started to spread slowly and lethally through Symplify code</strong>.</p>
<p>One day you wake up and from 1 static method is 60 static factories all over your code - Dependency Injection for very poor. And that not the worst. When all code works and is easy to maintain, 1 static method can't hurt it, right?</p>
<p><strong>Well until you need to replace one of nested dependencies that requires few more classes. And then you realized your work is to basically manually maintain dump of dependency injection container</strong> and that you're not coding anymore.</p>
<p>It took weeks to get from this position back to clear dependency injection and I don't want to do it ever again. That's why this PHPStan rule was born.</p>
<h3 id="how-to-register-it">How to Register It?</h3>
<pre><code class="language-yaml">rules:
    - Symplify\CodingStandard\Rules\NoClassWithStaticMethodWithoutStaticNameRule</code></pre>
<p><br></p>
<h2 id="4-prevent-amp-references-with-code-forbiddenstaticfunctionsniff-code">4. Prevent &amp; references with <code>ForbiddenStaticFunctionSniff</code></h2>
<p><a href="https://github.com/symplify/symplify/pull/692" class="btn btn-dark btn-sm mt-2 mb-3">
<em class="fab fa-github"></em>
&nbsp;
Check the PR #692
</a></p>
<p>We all already know that <code>&amp;$references</code> are bad practise, since they increase cyclomatic complexity and hide dependency logic.</p>
<pre><code class="language-php">function someFunction(&amp;$var)
{
    $var + 1;
}</code></pre>
<p>And that we should prefer explicit syntax:</p>
<pre><code class="language-php">function someFunction($var)
{
    return $var + 1;
}</code></pre>
<p>I though I would never meet them again, but they somehow pop-up in PRs. So we made a PHPStan rule for it:</p>
<h3 id="how-to-register-it">How to Register It?</h3>
<pre><code class="language-yaml"># phpstan.neon
rules:
    - Symplify\CodingStandard\Rules\NoReferenceRule</code></pre>
<p><br></p>
<h2 id="5-clear-child-class-naming-once-and-for-all-with-code-classnamesuffixbyparentfixer-code">5. Clear Child Class Naming Once and For All with <code>ClassNameSuffixByParentFixer</code></h2>
<p><a href="https://github.com/symplify/symplify/pull/633" class="btn btn-dark btn-sm mt-2 mb-3">
<em class="fab fa-github"></em>
&nbsp;
Check the PR #633
</a></p>
<p>Often in the code of private companies there are classes like:</p>
<ul>
<li><code>ProductSorter</code></li>
<li><code>ProductSorter</code></li>
<li><code>ProductSorter</code></li>
</ul>
<p>If you use PhpStorm and <em>open file</em> shortcut, you know where I aim.</p>
<p>Now, imagine you want to update the Command that sorts Products by price to Redis database. Inside, it looks like this:</p>
<pre><code class="language-php">final class ProductSorter extends Command
{
    // ...
}</code></pre>
<h3 id="which-one-do-you-open">Which one do you open?</h3>
<p>I could also ask, which one is the interface and which is its implementation, but <a href="https://github.com/symplify/coding-standard#class-should-have-suffix-by-parent-classinterface">there is already checker for that</a>.</p>
<p>Probably each of them manually until you find the right one, which really sucks. That why not only methods names, <strong>but also class names should be as descriptive and as deterministic as possible</strong>. Like this:</p>
<pre><code class="language-diff">-final class ProductSorter extends Command
+final class ProductSorterCommand extends Command
 {
     // ...
 }</code></pre>
<p>And then you have clear class names, that you're able to distinguish without their content:</p>
<ul>
<li><code>ProductSorterCommand</code></li>
<li><code>ProductSorterRepository</code></li>
<li><code>ProductSorterController</code></li>
</ul>
<p>And that's exactly what <code>ClassNameRespectsParentSuffixRule</code> helps you to do.</p>
<h3 id="how-to-register-it">How to Register It?</h3>
<pre><code class="language-yaml"># phpstan.neon
rules:
    - Symplify\CodingStandard\Rules\ClassNameRespectsParentSuffixRule

parameters:
    symplify:
        # it handles many default cases, but allows you to add your own
        forbidden_parent_classes: []</code></pre>
<p><br><br></p>
<p>Happy sniffing and fixing!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/03/29/new-in-coding-standard-4-long-line-breaks-automated-and-3-legacy-prevention-fixers</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 29 Mar 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-08-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Aug 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/03/29/new-in-coding-standard-4-long-line-breaks-automated-and-3-legacy-prevention-fixers#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ New in Easy Coding Standard 4: Clean Symfony Standard with Yaml and Services ]]></title>
                <link>https://tomasvotruba.com/blog/2018/03/26/new-in-easy-coding-standard-4-clean-symfony-standard-with-yaml-and-services</link>
                <description><![CDATA[ <p>I wrote about <a href="/blog/2018/03/01/new-in-symplify-3-4-improvements-in-easy-coding-standard/">news in Easy Coding Standard 3</a> a while ago. EasyCodingStandard 4 is released yet (still in alpha), but soon you'll be able to use all the news I'll show you today.
<br><br>
And what are they? Neon to YAML, semi-static to Services, customizable caching, even simpler skipper, short bin and more.</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="1-configure-caching-directory">1. Configure Caching Directory</h2>
<p><a href="https://github.com/symplify/symplify/pull/656" class="btn btn-dark btn-sm mt-2 mb-3">
<em class="fab fa-github"></em>
&nbsp;
Check the PR #661
</a></p>
<p>Docker users will be happy for this feature, since it makes ECS much more usable. To enjoy speed of caching of changed files on second run, just tune your config.</p>
<pre><code class="language-php">&lt;?php

// ecs.php

declare(strict_types=1);

use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return static function (ContainerConfigurator $containerConfigurator): void {
    $parameters = $containerConfigurator-&gt;parameters();
    $parameters-&gt;set('cache_directory', '.ecs_cache');
};</code></pre>
<p>Thank you <a href="https://github.com/marmichalski">Marcin Michalski</a> for adding this feature.</p>
<p><br></p>
<h2 id="2-skip-anything-anywhere">2. Skip Anything, Anywhere</h2>
<p><a href="https://github.com/symplify/symplify/pull/661" class="btn btn-dark btn-sm mt-2 mb-3">
<em class="fab fa-github"></em>
&nbsp;
Check the PR #661
</a></p>
<p>One of the features I really like is skipping particular spots. PHP CS Fixer and PHP_CodeSniffer can ignore whole directory, 1 sniff everywhere or force to put annotation to your code and that's not the way to go. <strong>Your code should have no idea about tools you use to analyze it</strong>.</p>
<p>What you really need? Exclude 1 file but only for 1 checker. Or 1 checker for group of files and sometimes only 1 code from sniff on 1 file. That all is possible now.</p>
<p><strong>Because details matters and it's pointless to think about code or class</strong>, you can now remove <code>skip_codes</code> key from your config and use <code>skip</code> section only.</p>
<p><br></p>
<h2 id="3-short-code-vendor-bin-ecs-code-is-the-king">3. Short <code>vendor/bin/ecs</code> is the King</h2>
<p><a href="https://github.com/symplify/symplify/pull/647" class="btn btn-dark btn-sm mt-2 mb-3">
<em class="fab fa-github"></em>
&nbsp;
Check the PR #647
</a></p>
<p>One last detail. Did you use this bin file to run ECS?</p>
<pre><code class="language-bash">vendor/bin/easy-coding-standard
# or
vendor/bin/easy-coding-standard.php</code></pre>
<p>I know it's pain, mainly during live demo presentations with all that tyops :).</p>
<p>Now this is the only way to use ECS:</p>
<pre><code class="language-bash">vendor/bin/ecs</code></pre>
<p>Typo proof or at least less error prone. Just change it in you <a href="https://blog.martinhujer.cz/have-you-tried-composer-scripts"><code>composer.json</code>'s <code>script</code> section</a> or CI setups and you're ready to go!</p>
<p><br></p>
<h2 id="4-di-migration-finished-from-neon-to-yaml">4. DI Migration Finished: From Neon to YAML</h2>
<p><a href="https://github.com/symplify/symplify/pull/651" class="btn btn-dark btn-sm mt-2 mb-3">
<em class="fab fa-github"></em>
&nbsp;
Check the PR #651
</a></p>
<p>Symplify used <code>Nette\DI</code> a long time ago and with it its markup language - Neon. Then it moved to <code>Symfony\DependencyInjection</code> in <a href="https://github.com/symplify/symplify/blob/master/CHANGELOG.md#v200---2017-06-16">Symplify 2.0</a>, because it was just impossible to reject <a href="/blog/2017/05/07/how-to-refactor-to-new-dependency-injection-features-in-symfony-3-3/">all these awesome Symfony 3.3 features</a> by Nicolas Grekas. But this was just partial migration - Neon files still worked.</p>
<p>That lead to situation, where 5 <em>custom-cool-classes</em> simulated loading transforming Neon to YAML format, merging it and then passing to Symfony Container, hoping all went well. And it worked. Well, most of the times.</p>
<p>Based on feedback from <a href="https://github.com/symplify/symplify/issues/565">community around Symplify</a>, rejection of ECS in <a href="https://github.com/doctrine/coding-standard">Doctrine\CodingStandard</a> where Neon was one of reasons and weird feeling from promoting &quot;local-only standard&quot;, I decided to move to Symfony completely.</p>
<p><a href="https://xkcd.com/927/"></p>
<img src="https://imgs.xkcd.com/comics/standards.png">
<p></a></p>
<p>I had one problem - missed services autocomplete in Yaml files. But you know what they say:</p>
<blockquote class="blockquote text-center mt-lg-5 mb-lg-5">
    There are no solutions. There are only trade-offs
</blockquote>
<p>I hear you community, so lets trade! <strong>From ECS 4, you can use Yaml everywhere with syntax you know, behavior from Symfony ecosystem you know and with no need to learn new standard.</strong></p>
<h3 id="how-to-migrate">How to Migrate?</h3>
<p>Well just rename <code>easy-coding-standard.neon</code> or <code>ecs.yml</code> and
then read about it in <a href="/blog/2018/03/12/neon-vs-yaml-and-how-to-migrate-between-them/">Neon vs. Yaml and How to Migrate Between Them</a>.</p>
<p><br></p>
<h2 id="5-from-semi-static-checkers-to-services-as-first-class-citizen">5. From Semi-Static Checkers to Services as First-Class Citizen</h2>
<p><strong>Note: Symplify 8 now uses PHP configuration.</strong></p>
<p><a href="https://github.com/symplify/symplify/pull/660" class="btn btn-dark btn-sm mt-2 mb-3">
<em class="fab fa-github"></em>
&nbsp;
Check the PR #660
</a></p>
<p>Thanks to Yaml, we could use finally use full power of Symfony\DependencyInjection component, constructor injection, autowiring... again, all that you probably already know from Symfony.</p>
<p>Why? <strong>ECS is basically a Symfony application with DI Container</strong>. It loads all checkers from config you provide, turns them into services and then uses those services to check the code.</p>
<p>YAML was the only missing part to do this. And ECS has it now, so does the explicit services!
And you can do and use any feature you Symfony know. Magic no more #metoo.</p>
<p><br><br></p>
<p>Happy upgrading!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/03/26/new-in-easy-coding-standard-4-clean-symfony-standard-with-yaml-and-services</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 26 Mar 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-08-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Aug 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/03/26/new-in-easy-coding-standard-4-clean-symfony-standard-with-yaml-and-services#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How Teaching Suicides Itself by Killing the Passion ]]></title>
                <link>https://tomasvotruba.com/blog/2018/03/22/how-teaching-suicides-itself-by-killing-the-passion</link>
                <description><![CDATA[ <p>Today I wanted to write about Rector showcase how to use it to <a href="/blog/2017/10/16/how-to-use-repository-with-doctrine-as-service-in-symfony/">automate migration to Repository as Service in Symfony</a>.
<br><br>
Instead I read <a href="https://medium.com/@romaninsh/teaching-php-to-students-with-atk-500d50b49391">Teaching PHP to students</a> by Romans Malinovskis that got me thinking how outside education can easily kill any piece passion in children.
<br><br>
What if instead of outside-in - education first, we could do it inside-out - <strong>passion first</strong>?</p> ]]></description>
                <content:encoded><![CDATA[ <p>This started as reply to the post and I got literally on fire while writing it. Fire I want to share with you. It's not any <a href="/blog/2018/03/19/how-to-criticize-like-a-senior-programmer/">critique</a> to the post, it's the way I see the world.</p>
<p><br></p>
<p>Hey, thanks for this post. It’s great there is somebody who tries to make it as simple as possible to get into PHP.</p>
<p>I teach or rather mentor PHP for last 5 years on various online forums, PHP meetups, Github and personal lectures. From my own experience, nothing I show is good enough to get inside one’s head, unless it’s his own passion or desire.
For me, the PHP was not about tools, blogs under 5 minutes or the fastest framework. </p>
<h2 id="what-pisses-you-of">What Pisses YOU of?</h2>
<p>I had problem, I was pissed, frustrated and angry at something and wanted a change. And everyone has such ONE THING (or maybe more). I wanted to play, to have fun in online game. There were countries, tanks, farms, factories… just game of numbers, but real fun for 14-year old. And wanted to be better, so I count the deffense of my enemies in Excel. Just put their numbers, guessed algorithm from practise and that was it. Iterative IKIGAI.</p>
<p>I think THIS is the spot that teachers, or rather mentors, parents, friends need to find to unlock one’s potential.</p>
<p>Since this SPOT I got to where I’m now, doing the same learning over and over again, just bit further, but not much different.</p>
<p>If in that spot someone would show me PHP and that it’s about websites, blogs or forms, I’d probably go different path, because that was no my problem. It was THEIRS.</p>
<h2 id="i-takes-1-person-to-del-burst-del-boost-lifetime-passion">I takes 1 Person to <del>Burst</del> Boost Lifetime Passion</h2>
<p>Luckily, friend of mine only showed me a hosting, where I could put my excel file and then share it with. That was so awesome. And with 15 lines of code, we could share link with numbers of our enemies pre-filled! That was the best thing ever so far in my life and it lead me here to share it again with others...</p>
<p>...<strong>find the inner light in people and just give it a little attention. That's all they need</strong>.</p>
<p>Thanks for your post, it's great to remember my “the Big Bang” :)</p>
<p>And big love and thanks to my peers Lukáš Růžička and Martin Čermák, who gave me exactly what I needed.</p>
<p><br><br></p>
<p>What was your THING that got you here to the present you are now in?</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/03/22/how-teaching-suicides-itself-by-killing-the-passion</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/03/22/how-teaching-suicides-itself-by-killing-the-passion#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Criticize like a Senior Programmer ]]></title>
                <link>https://tomasvotruba.com/blog/2018/03/19/how-to-criticize-like-a-senior-programmer</link>
                <description><![CDATA[ <p>As I spend most of my socials online time on Github and PHP-related discussion, I've noticed <strong>many people do so many wrong things</strong> while giving critics.
<br>
I want to <strong>correct this</strong> once and for all, so I've prepared a guide for you.</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="1-find-an-error">1. Find an Error</h2>
<p>This is very easy step that many people can handle. Just pick something wrong in a project, or content and point it out. Rush to create that issue! Also, comment only thing, where is no request for critics or feedback. The worst think you can do is actually help the person who want some feedback.</p>
<h2 id="2-strong-intro">2. Strong Intro</h2>
<p>No &quot;hello&quot; or &quot;hi&quot;, never use a surname and NEVER use a name. Just write right away what is wrong, that's the only thing that matters. Some example:</p>
<ul>
<li><em>&quot;this post is complicated...&quot;</em></li>
<li><em>&quot;well that was boring&quot;</em></li>
<li><em>&quot;this is not how to use that&quot;</em></li>
<li><em>&quot;you can't use foreach here&quot;</em></li>
</ul>
<div class="card">
    <div class="card-body">
        <p>
            <strong>Minitip: Judge Others</strong>
        </p>

        <br><p>
            As a senior programmer you have right to say what is right and wrong. You should be clear and right to the point. Only that way the other person knows what is this about and can do something about that.
        </p>

        <p><em>"this is definitely wrong"</em></p>
    </div>
</div>
<div class="card mt-3">
    <div class="card-body">
        <p>
            <strong>Minitip: Point out the Other person is Below You</strong>
        </p>

        <br><p>
            If that would be another way, he or she would not need a correction, right?
        </p>
        <ul><li>missing education: <em>"read the docs first"</em></li>
            <li>more stupid: <em>"lol, you really think this is the way to use it?"</em></li>
        </ul></div>
</div>
<h2 id="3-never-back-up-you-re-not-weak">3. Never Back up - You're not Weak</h2>
<img src="/assets/images/posts/2018/critic/shout.jpg" class="img-thumbnail">
<p>When you get a response like this, it is usually very rude like for no reason:</p>
<ul>
<li><em>&quot;What do you mean by that?&quot;</em></li>
</ul>
<p>You only are trying to help the second person to stop being to stupid. The author is only pretending he doesn't know. But luckily you are smarter than him to recognize it!</p>
<h2 id="4-repeat-the-same-to-make-them-hear-you">4. Repeat the Same to Make Them Hear You</h2>
<p>If the other doesn't want to listen, he or she probably didn't read our comments clearly. Who can blame them, it's today's world full of social media distractions (and alcohol and drugs!). There is no better solution than point that out.</p>
<ul>
<li><em>&quot;I wrote that already.&quot;</em></li>
</ul>
<p>In case you have mood for long essays:</p>
<ul>
<li><em>&quot;I wrote that already, see comment up&quot;</em></li>
</ul>
<p>If you have bless mood, you can write it explicitly for those with attention disorder:</p>
<ul>
<li><em>&quot;I wrote that already: this is wrong way to use this&quot;</em></li>
</ul>
<h2 id="5-point-out-places-to-learn-from">5. Point out Places to Learn From</h2>
<p>As our mission is to educate others about their mistakes, thus we should always provide a source of knowledge.</p>
<ul>
<li><em>&quot;Read the docs first&quot;</em></li>
<li><em>&quot;it's in the manual, doh&quot;</em></li>
<li><em>&quot;read php manual&quot;</em></li>
</ul>
<p>Today, we have Google, so there is no need to use actual link. Everybody can google now.
And if they don't, they're stupid and they should learn that first.</p>
<div class="card mt-3">
    <div class="card-body">
        <p>
            <strong>Minitip: Use Shortcuts To Save Time</strong>
        </p>

        <br><p>
           All people in the field know all the shortuts you do - they're programmers after all - so why not use them so save time in conversation and your elbows.
        </p>
        <ul><li><em>"why don't you use IDE"?</em></li>
            <li><em>"use Docker AWS setup with DTOs lol"</em></li>
        </ul><p>Again, do not add any links, Google can handle it for you.</p>
    </div>
</div>
<h2 id="6-believe-in-yourself">6. Believe in Yourself</h2>
<p>You know the best (as your mama and papa told you) - never forget that. And if other try to change your mind, they probably don't know a thing.Stick to your believes and don't let anyone to question it.</p>
<ul>
<li><em>&quot;no, you don't understand this&quot;</em></li>
</ul>
<p>You're the most objective person there could be, so use it. That's what intelligent means!</p>
<h2 id="7-always-tell-never-ask">7. Always Tell, Never Ask</h2>
<p>Because many people are missing parenting, you're here for them to help them with raising to proper senior programmer. Always, tell the other person what to do or how the world works. It's objective true. How can you be subjective if you're human. Asking is sign of not-knowing and weakness.</p>
<h2 id="8-keep-it-short-never-provide-a-reason">8. Keep it Short, Never Provide a Reason</h2>
<p>To make conversion faster, always talks about your final ideas. There is not time to provide motivation reason, how you conclude it and all that life story of yours. It's obvious already and he should know it. Or just google it.</p>
<p>And so on... you get the gist.</p>
<p><br><br></p>
<h3 id="disclaimer-start-with-misconceptions-first">Disclaimer: Start with Misconceptions First</h3>
<p><strong>As you probably guessed, this post is written in sarcasm language.</strong></p>
<p>I got inspired by <a href="https://www.youtube.com/watch?v=RQaW2bFieo8">Derek Muller</a>, known as author of <a href="https://www.youtube.com/channel/UCHnyfMqiRRG1u-2MsSQLbXA">Verritasium</a>, with &quot;start with misconceptions first&quot;. This list describes just few of misconceptions on feedback topic I found on Github during my open-source career. If you know any more, just tell me in the comments (<em>&quot;you forgot some&quot;</em>).</p>
<p>If you know Czech, you can check my talk <a href="/talks/#jako-vinnetou-a-old-shatterhand-refaktoruj-nenavist-v-pratelstvi/">Jako Vinnetou a Old Shatterhand – refaktoruj nenávist v přátelství</a> from PHPLive 2016, where I address similar topic between 2 PHP frameworks.</p>
<p>So...</p>
<h3 id="how-to-give-feedback-that-helps-you-both">How to Give Feedback that Helps You Both</h3>
<p>After misconceptions we can move to really what matters - <strong>emphatic feedback</strong>. Once I read a post about people with of 30+ years long and happy marriages:</p>
<blockquote class="blockquote text-center mb-5 mt-5">
    We have a strong feeling, that when we point out mistakes we see at other people, they will change that.
</blockquote>
<p>It nails it! So what I'm trying to do apart inversion of all the 8 points above to make my online/offline feedback communication better?</p>
<h2 id="1-is-feedback-desired">1. Is Feedback Desired?</h2>
<p>Do you enjoy parenting and patronizing? Neither do I. So when I give feedback, I try to find out first if the other person is even open to some.</p>
<p>There is small trick to do that:</p>
<ul>
<li><em>&quot;Well, I have some feedback for you, but I'm not sure if you'd like to hear it.&quot;</em></li>
<li>&quot;Yes, of course.&quot;</li>
<li><em>&quot;Ok, I saw your presentation and I think the letters are so small, that no one will see it.&quot;</em></li>
</ul>
<p>vs.</p>
<ul>
<li><em>&quot;Hey John, I saw your presentation and I think the letters are so small, that no one will see it.&quot;</em></li>
</ul>
<h2 id="2-what-is-my-motivation">2. What is My Motivation?</h2>
<blockquote class="blockquote text-center mb-5 mt-5">
    Giving advices is just talking to your younger self.
</blockquote>
<p>I know this is not easy to hear, but giving feedback is partially just projection of the one who gives the feedback. Even now, when I'm writing this post, I frustrated with something else. I'm frustrated by educational systems and misconceptions it teaches people.</p>
<p>If you know your real motivation, you can work it much better and be able to give the other person not the information that you're frustrated with but information that he or she really wants.</p>
<h2 id="3-make-a-rapport-instead-of-an-enemy">3. Make a Rapport instead of an Enemy</h2>
<p>No, this is not a dinosaur nor air fighter.</p>
<blockquote class="blockquote text-center mb-5 mt-5">
    If you want to persuade someone, start in a friendly way.
</blockquote>
<p>You can find this quote in all books on persuasion. I didn't know about this for a long time, so I started with rationalization arguments:</p>
<ul>
<li><em>&quot;Hey, you have to use IDE, because it will help you with productivity a lot.&quot;</em></li>
<li><em>&quot;You should use Symfony, because it's more matured than any other frameworks!&quot;</em></li>
</ul>
<p>This only forces the other for defense, even if you don't want him to:</p>
<ul>
<li>&quot;Sublime Text is just fine. It can compare to PHPStorm and is even faster!&quot;</li>
<li>&quot;I use Nette for many years and Symfony seems too complicated and is very slow.&quot;</li>
</ul>
<p>Sorry brain! Instead, you can make a <strong>rapport</strong> - a short term friendship if you like.</p>
<ul>
<li>
<p><strong>Be curious</strong>: <em>&quot;What do you mean by &quot;this is too complicated&quot;? What part exactly is too complicated?&quot;</em></p>
</li>
<li>
<p><strong>Relate to the his or her point of view</strong>: <em>&quot;I agree you might have problems reading this, since it's your first time and I use this for over 3 years and know it by heart.&quot;</em></p>
</li>
</ul>
<h2 id="4-replace-quot-you-quot-and-the-future-quot-with-quot-i-quot-and-the-present">4. Replace &quot;You&quot; and the Future&quot; with &quot;I&quot; and the Present</h2>
<blockquote class="blockquote text-center mb-5 mt-5">
    "I'm objective", a human said.
</blockquote>
<p>When one person claims something, it's usually his own personal experience wrapped into cognitive heuristics.</p>
<ul>
<li><em>&quot;You'll definitely find IDE useful.&quot;</em></li>
</ul>
<p>vs.</p>
<ul>
<li><em>&quot;I personally find IDE useful, because it it helps me with class autocomplete. That saves me lot of time, since I use other dependencies than my code.&quot;</em></li>
</ul>
<p>As people tend to mirror each other's communication, being personal might unlock personal approach of the other person as well.</p>
<h2 id="6-provide-a-reason">6. Provide a Reason</h2>
<p>I'll just reuse the example above (because it shows it already and will keep you more attentive to the detail):</p>
<ul>
<li><em>&quot;I personally find IDE useful&quot;</em></li>
</ul>
<p>vs.</p>
<ul>
<li><em>&quot;I personally find IDE useful, because it it helps me with class autocomplete. That saves me lot of time, since I use other dependencies than my code.&quot;</em></li>
</ul>
<p><br><br></p>
<p>Your feedback and tips are most welcomed as I want to get better in this, so add your comment. Even with sarcastic examples from this post ;).</p>
<p><br><br></p>
<p>Happy feedbacking!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/03/19/how-to-criticize-like-a-senior-programmer</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 19 Mar 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/03/19/how-to-criticize-like-a-senior-programmer#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Monorepo on the Rise in PHP ]]></title>
                <link>https://tomasvotruba.com/blog/2018/03/15/monorepo-on-the-rise-in-php</link>
                <description><![CDATA[ <p>Do you know what a monorepo is? How to start with it? What you need and do even other programming languages use it? And what about Facebook and Google think about it?</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="javascript-java-c-android-ios-facebook-google-monorepo-is-standard">Javascript, Java, C++, Android, iOS, Facebook, Google? Monorepo is Standard</h2>
<p>When you pop out of PHP bubble, you can see in <a href="https://github.com/korfuri/awesome-monorepo">awesome-monorepo</a> a collection of monorepo tools, that are used out in a wild by another languages. Google has <a href="https://bazel.build">Bazel</a>, Facebook has <a href="https://buckbuild.com">Buck</a>, Twitter and Foursqaure have <a href="https://www.pantsbuild.org">Pants</a>.</p>
<p><strong>Still a PHP-related tool is missing</strong>. Why? It might be the case, that no global company that goes open-source uses PHP as their main language.</p>
<h2 id="symfony-monorepo-spreads-the-word">Symfony Monorepo Spreads the Word</h2>
<p>PHP is aware of monorepo term mainly thanks to <a href="https://github.com/symfony/symfony">Symfony</a>, that uses it to maintain <strong>all its components, that are split to standalone</strong> read-only repositories, e.g. <a href="https://github.com/symfony/console">Symfony\Console</a>, <a href="https://github.com/symfony/event-dispatcher">Symfony\EventDispatcher</a>.</p>
<h3 id="tool-to-split-with">Tool to Split With</h3>
<p>Since Symfony needed a fast tool to split over 30 repositories across 3 and more branches, Fabien Potencier came with <a href="https://twitter.com/fabpot/status/739860138564149248?lang=en">splits</a> tool.</p>
<p>He also had a <a href="https://www.youtube.com/watch?v=4w3-f6Xhvu8">very interesting talk about it</a> (<a href="https://speakerdeck.com/fabpot/a-monorepo-vs-manyrepos">slides</a>), where he explains in details, how Symfony monorepo works, what is splitting and what are the needs for a build tool managing monorepo.</p>
<p><strong>But it's still to complex to start with and it doesn't cover the most common case - building monorepo from already existing repositories</strong>.</p>
<h2 id="shopsys-monorepo-to-spread-a-bit-more-word">Shopsys Monorepo to Spread a bit more Word</h2>
<p>I work on <a href="https://www.shopsys.com">Shopsys Framework</a>, an open-source e-commerce platform on Symfony and the monorepo topic finally came to the sprint to be realized. If you've read until now, <strong>you know there is not much shared know-how or support for new-commers to adopt a monorepo pattern in PHP</strong>.</p>
<p>That's how <a href="https://github.com/shopsys/monorepo-tools"><code>shopsys/monorepo-tools</code></a>, that covers both build and split was given birth by <a href="https://github.com/PetrHeinz">Petr Heinz</a>.</p>
<p>It's slowly getting better with monorepo in PHP. But still many people don't know what is difference between <em>a monorepo</em> and <em>a monolith</em>.</p>
<h2 id="where-you-can-learn-more">Where you can Learn More?</h2>
<p>Follow the post cluster → <a href="/clusters/#monorepo-from-zero-to-hero/">Monorepo From Zero to Hero</a></p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/03/15/monorepo-on-the-rise-in-php</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 15 Mar 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/03/15/monorepo-on-the-rise-in-php#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ NEON vs. YAML and How to Migrate Between Them ]]></title>
                <link>https://tomasvotruba.com/blog/2018/03/12/neon-vs-yaml-and-how-to-migrate-between-them</link>
                <description><![CDATA[ <p>Do you know <code>*.neon</code> format? It's config file format created in Czech Republic by <a href="https://davidgrudl.com">David Grudl</a> (author of <a href="https://github.com/nette/nette">Nette</a>) and if you're foreigner, you might know it from or <a href="https://github.com/symplify/easy-coding-standard">EasyCodingStandard</a> and <a href="https://github.com/phpstan/phpstan">PHPStan</a>. Even suggested as <a href="https://github.com/composer/composer/issues/3228"><code>composer.neon</code></a>.
<br><br>
And <code>*.yaml</code> is similar format used almost everywhere else.
<br><br>
<strong>You spot the suffix is different, but what about syntax differences? And which one is better?</strong></p> ]]></description>
                <content:encoded><![CDATA[ <p>None of them is perfect, they both have strong parts and weak parts. But the more I travel to abroad conferences, meetups or repositories, the more I hear <strong>nobody understand differences between them or their advantages to each other</strong>. Since I meet mainly with Symfony and Nette code, I had to investigate them a bit deeper.</p>
<blockquote class="blockquote text-center mt-lg-5 mb-lg-5">
    <a href="https://www.youtube.com/watch?v=3_EtIWmja-4">There are no solutions. There are only trade-offs.</a>
    <footer class="blockquote-footer">
        Thomas Sowell, author of A Conflict of Visions: Ideological Origins of Political Struggles
    </footer></blockquote>
<p>Here is a summary of what I found and how to migrate to each other. I'll write about differences and places, where syntax fail me the most.</p>
<h2 id="how-is-syntax-differ">How is Syntax Differ?</h2>
<p>70 % of syntax is similar:</p>
<pre><code class="language-yaml">services:
    Symplify\CodingStandard\Fixer\Import\ImportNamespacedNameFixer: ~</code></pre>
<p>But what about?</p>
<pre><code class="language-yaml">items:
  -
    - { key: value }</code></pre>
<p>Of course you can Google documentation and try to understand it. But documentation is  incomplete or for older version than you use. <strong>The best way to learn it for me is</strong> with online parsers:</p>
<ul>
<li><a href="https://ne-on.org">ne-on.org</a></li>
<li><a href="http://yaml-online-parser.appspot.com">yaml-online-parser.appspot.com</a></li>
</ul>
<p><br></p>
<h3 id="1-tabs-vs-spaces">1. Tabs vs. Spaces</h3>
<p><strong>Neon</strong></p>
<p>As neon was born as free format, it allows to use both spaces and tabs.</p>
<p><strong>Yaml</strong></p>
<p>Only spaces are allowed. Since most of projects have coding standards, I prefer using one format in whole code.</p>
<p><br></p>
<h3 id="2-magic-list-combination-vs-single-type">2. Magic List Combination vs. Single Type</h3>
<pre><code class="language-yaml">services:
    - SomeService
    SomeService: ~</code></pre>
<p><strong>Neon</strong></p>
<p>Could you guess the output? 1 item? Syntax error?</p>
<pre><code class="language-php">array (1)
    services =&gt; array (2)
        0 =&gt; "SomeService" (11)
        SomeService =&gt; "~"</code></pre>
<p>Neon allows to combine indexed arrays and lists.
And do you work with or create with such lists in PHP?</p>
<p><strong>Yaml</strong></p>
<p>Parsing would fail there, because Yaml allows only one approach:</p>
<pre><code class="language-yaml">services:
    - SomeService
    - SomeService

# with 2 items in array</code></pre>
<p>or</p>
<pre><code class="language-yaml">services:
    SomeService: ~
    SomeService: ~

# with 1 item</code></pre>
<p>This difference is one of the biggest WTFs, because I had to think about format and possible merge error every time I used lists... or indexed arrays... or is it arrays? Uff.</p>
<p><br></p>
<h3 id="3-content-on-multi-lines">3. Content on Multi-lines</h3>
<p>I write posts in Statie, where you can use Yaml to configure per-post variables like perex:</p>
<p><strong>Neon</strong></p>
<pre><code class="language-yaml">perex: '''
    This is long multiline perex,
that takes too much space.
'''</code></pre>
<p>Note it can be aligned to left side.</p>
<p><strong>Yaml</strong></p>
<pre><code class="language-yaml">perex: |
    This is long multiline perex,
    that takes too much space.</code></pre>
<p>But here it must be indented on every line.</p>
<p><br></p>
<h3 id="4-very-complex-syntax">4. Very Complex Syntax</h3>
<p><strong>Neon</strong></p>
<p>In Neon you can use <em>entities</em> and do this:</p>
<pre><code class="language-yaml">someValue: Column(type=int, nulls=true)</code></pre>
<p>Could you guess what it is? Parameters, arguments, service decoration?</p>
<pre><code class="language-php">array (1)
    someValue =&gt; Nette\Neon\Entity
        value =&gt; "Column" (6)
        attributes =&gt; array (2)
            type =&gt; "int" (3)
            nulls =&gt; true</code></pre>
<p>Personally <strong>I prefer explicit, clear naming</strong> combined with easier scalability:</p>
<pre><code class="language-yaml">someValue:
    value: "Column"
    attributes:
        type: "int"
        nulls: true</code></pre>
<p><strong>Yaml</strong></p>
<p>You can do similar shenaniganz with Yaml as well thanks to <code>Symfony\ExpressionLanguage</code></p>
<pre><code class="language-yaml">services:
    App\Mailer:
        arguments: ["@=service('App\\\\Mail\\\\MailerConfiguration').getMailerMethod()"]</code></pre>
<p>If you want to see real-life example, I <a href="/blog/2018/03/08/why-is-collector-pattern-so-awesome/#2-use-expression-language">tried it once</a>. But went quickly back because I could not remember what exactly that means and how it work.</p>
<h2 id="how-is-the-ecosystem-support">How is the Ecosystem Support?</h2>
<p>This is the most important question when it comes to open-source code. You can create your own natural language, that is smart, easy to learn, context aware and super fast. But what if <a href="https://en.wikipedia.org/wiki/List_of_languages_by_total_number_of_speakers">1.39 billion people speaks English already</a>?</p>
<h3 id="phpstorm-support">PHPStorm Support</h3>
<p><strong>Neon</strong></p>
<p>You can install <a href="https://plugins.jetbrains.com/plugin/7060-neon-support">Neon Plugin</a>, that handles param and class autocomplete very nicely. It's enabled for every <code>*.neon</code> file by default.</p>
<p><strong>Yaml</strong></p>
<p>Yaml support is included in <a href="https://plugins.jetbrains.com/plugin/7219-symfony-plugin">Symfony Plugin</a>. It needs to by enabled per project. It works great, there is just one last thing I miss. It already completes services for Symfony 3.2- format:</p>
<pre><code class="language-yaml">services:
    some_name:
        class: AutocompletedClass</code></pre>
<p>But since Symfony 3.3 there is <a href="https://symfony.com/blog/new-in-symfony-3-3-simpler-service-configuration#short-syntax-for-service-configuration">short syntax for services</a>:</p>
<pre><code class="language-yaml">services:
    ManuallyTypedService: ~</code></pre>
<p>And it is missing autocomplete in time being. <strong>Do you want autocomplete for this case too?</strong> <a href="https://github.com/Haehnchen/idea-php-symfony2-plugin/issues/1153">Upvote this issue</a> or send PR in Java to the plugin.</p>
<p>Also <a href="https://github.com/phpstan/phpstan/pull/222">Github lacks of Neon support</a>.</p>
<h2 id="who-is-the-winner">Who is the Winner?</h2>
<p>Which one to pick? It depends on what is <strong>important to you</strong>. If you use Nette and work in Czech company and Neon is weapon of choice for you - it's ok.</p>
<p>But what if you're <strong>making open source for the whole world</strong>?</p>
<p><a href="https://xkcd.com/927/"></p>
<img src="https://imgs.xkcd.com/comics/standards.png">
<p></a></p>
<h3 id="why-are-standards-so-important">Why are Standards so Important?</h3>
<p>I was on a train trip in Hungary and I was thirsty. I went to classic food shop and pick first bottle <strong>with still water</strong> I saw. I wanted still water cause gas hurts me and wanted to drink a lot. And I'm drunk when it comes to water in summer.</p>
<img src="/assets/images/posts/2018/neon-yaml/bottle-mixed.jpg" class="img-thumbnail">
<p>At least I though I picked the right one until I opened it. In every single country I've been to so far, the <strong>blue is always still water</strong>. But not in Hungary!</p>
<p>As <a href="http://chrisinbrnocr.blogspot.cz/2015/08/european-heat-wave.html">Chris says</a>: &quot;In Hungary the color code is reversed where blue means sparkling and red means flat.&quot; And there is even question <a href="https://www.tripadvisor.com.au/ShowTopic-g274887-i263-k7231074-Water_bottle_cap_colour_codes-Budapest_Central_Hungary.html">on Tripadvisor</a> on this topic.</p>
<p><br></p>
<p>For all the reasons above (thirsty-human-friendly-bottle-colors included), after looking at problem from various points of view and discussing with my Github and PHP friends, I came to conclusion that Yaml is better for me.</p>
<h2 id="how-to-migrate-from-neon-to-yaml">How to Migrate from Neon to YAML?</h2>
<p>But EasyCodingStandard was running on Neon that was loaded by my few classes to Symfony Kernel, so how to migrate to Yaml?</p>
<p><strong>Imports</strong></p>
<pre><code class="language-diff">-includes:
+imports:
-    - packages/EasyCodingStandard/config/psr2.neon
+    - { resource: 'packages/EasyCodingStandard/config/psr2.yml' }

-    - common/array.neon
-    - common/control-structures.neon
-    - common/docblock.neon
+    - { resource: 'common/*.yml' }</code></pre>
<p><strong>Lists</strong></p>
<pre><code class="language-diff"> services:
     # class should be Abstact or Final
-    - SlamCsFixer\FinalInternalClassFixer
+    SlamCsFixer\FinalInternalClassFixer: ~
     ArrayFixer: ~</code></pre>
<p><strong>Quoting parameters</strong></p>
<pre><code class="language-diff"> parameters:
     skip:
         SlevomatCodingStandard\Sniffs\TypeHints\TypeHintDeclarationSniff:
-            - *packages/CodingStandard/src/Sniffs/*/*Sniff.php
+            - '*packages/CodingStandard/src/Sniffs/*/*Sniff.php'</code></pre>
<p><strong>Multi-lines</strong></p>
<pre><code class="language-diff">-perex: '''
+perex: |
     Do you know `*.neon` format? It's config file
-format created in Czech Republic...
+    format created in Czech Republic...
-'''</code></pre>
<p>And from <code>*.yml</code> to <code>*.neon</code>? Just revert <code>-</code> and <code>+</code> :).</p>
<p>To see what code exactly had to change:</p>
<ul>
<li>see <a href="https://github.com/symplify/symplify/pull/651">pull-request on Symplify\EasyCodingStandard</a></li>
<li>or <a href="https://github.com/rectorphp/rector/pull/335">Rector with <code>Extension</code> =&gt; <code>services</code> migration</a></li>
</ul>
<p><br></p>
<p>Which format do you prefer and why? Do you have some other WTF examples or migration tips? Let me know in the comments!</p>
<p><br><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/03/12/neon-vs-yaml-and-how-to-migrate-between-them</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 12 Mar 2018 00:00:00 +0000</pubDate>
                                    <updated>2018-12-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Dec 2018 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Dec 2018 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/03/12/neon-vs-yaml-and-how-to-migrate-between-them#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Rector: Part 3 - Why Instant Upgrades ]]></title>
                <link>https://tomasvotruba.com/blog/2018/03/05/rector-part-3-why-instant-upgrades</link>
                <description><![CDATA[ <p>Why are instant upgrades better than old school <em>manual upgrades</em>? Why is the path to find exact before/after like hell-road?
Why you should use Rector and when?</p> ]]></description>
                <content:encoded><![CDATA[ <p><em>Read also:</em></p>
<ul>
<li><a href="/blog/2018/02/19/rector-part-1-what-and-how/">Part 1 - What and How</a></li>
<li><a href="/blog/2018/02/26/rector-part-2-maturity-of-php-ecocystem-and-founding-fathers/">Part 2 - Maturity of PHP Ecosystem and Founding Fathers</a></li>
</ul>
<p><br></p>
<h2 id="why-was-rector-needed">Why was Rector needed</h2>
<p>You need 2 things to upgrade PHP application to newer version of the framework you use:</p>
<h3 id="1-the-knowledge">1. The Knowledge</h3>
<p>Most of you follow changes in Symfony or Nette. You know that <a href="https://github.com/symfony/symfony/blob/master/UPGRADE-4.0.md#process"><code>ProcessBuilder</code> was removed</a> and that you'll have to migrate to <code>Process</code> class only. You know that <a href="https://forum.nette.org/cs/26250-pojdte-otestovat-nette-2-4-rc"><code>Nette\Object</code> was removed</a> and that you'll have to rewrite all <code>@method</code> annotation to real methods.</p>
<p>You read blogs, follow news on forum, read all <code>CHANGELOG.md</code> and <code>UPGRADE.md</code> files and sometimes commits, to find out what all has changed. <strong>You have the knowledge</strong>.</p>
<p>Or don't you? <strong>Imagine you could drop delegate all this to a computer.</strong></p>
<h3 id="2-the-resources">2. The Resources</h3>
<p>You work in a company where up-to-date it very important value. Your employer finances upgrades and also your education in it (pays you to get the knowledge). Once a 6 months you have dedicated paid time to update all packages to most recent versions. <strong>You have the resources</strong></p>
<p>Do you find yourself in such situation? If so, <strong>you belong to 5 % blessed and active people around me.</strong></p>
<h2 id="how-expensive-are-upgrades-now">How Expensive are Upgrades Now?</h2>
<p>From my experience with consulting over 50 PHP projects in last 4 years, it can take 80-400 hours per one minor version upgrade (e.g. Symfony 2.7 → 2.8), including all deprecations.</p>
<h3 id="1-teams-are-not-supported-in-upgrades">1. Teams are not Supported in Upgrades</h3>
<p>Teams don't have space to find out what changed between Symfony 2.7 and Symfony 2.8. They don't care, because their employer cares mostly about creating new website as fast and as cheap as possible. And that's logical.</p>
<p>That's why most of <a href="/mentoring-and-lectures">lectures</a> I make is about giving teams <em>the knowledge</em> that they can use with their very limited resources to make the best out of it.</p>
<p>Such approach also naturally leads to huge legacy code, team performance drop from 100 % to 20 %, which consequently leads to hiring 5x more people to keep productivity the same, more money, and pressure to faster development, which lead to huge legacy code...</p>
<h3 id="2-are-deprecations-easy-to-find">2. Are Deprecations Easy to Find?</h3>
<p>Let's say you have time to explore the Internet, follow <a href="https://twitter.com/symfony_en">Symfony News on Twitter</a>, read <a href="https://symfony.com/blog/category/living-on-the-edge">every news post on Symfony Blog</a> or know where on the Nette forum are located <a href="https://forum.nette.org/en/f78-release-announcements-news">Release Notes</a>.</p>
<p>Sometimes if you're lucky there is <code>UPGRADE-x.md</code> in project's Github repository, like <a href="https://github.com/symfony/symfony/blob/master/UPGRADE-4.0.md"><code>UPGRADE-4.0.md</code></a> in Symfony 4 repository. But what if you need upgrade to version 3.x? Could you find it? Well no, but yes in <a href="https://github.com/symfony/symfony/tree/3.4">3.x branch</a>.</p>
<p>And sometimes these changes are in files called <code>CHANGELOG-x.md</code>. But more often <strong>they're newer to be seen and you have to go <code>git blame</code> in Github specific line and hope for an answer</strong>. And just pray that there is PR with more detailed changes with tests as well and not direct set of commits to the <code>master</code> branch without context.</p>
<img src="/assets/images/posts/2018/rector-3/frustration.jpg" class="img-thumbnail">
<h3 id="3-when-we-find-them-are-they-valid">3. When We Find Them, are They Valid?</h3>
<p>Sometimes there can be bare useless description, like <a href="https://github.com/symfony/symfony/blob/master/UPGRADE-4.0.md#process">in <code>UPGRADE-4.0</code></a>:</p>
<p><em>The <code>Symfony\Component\Process\ProcessBuilder</code> class has been removed, use the <code>Symfony\Component\Process\Process</code> class directly instead.</em></p>
<p>Do you mean like this?</p>
<pre><code class="language-diff">-use Symfony\Component\Process\ProcessBuilder;
+use Symfony\Component\Process\Process;

-$builder = new ProcessBuilder();
+$builder = new Process();
 $builder-&gt;setArguments(['build', '-force', '-var "blah=blah"', 'path/to/json.json'])
    -&gt;getProcess();</code></pre>
<p>Unfortunately no and our investigative programming begins. Git blame..., Google? Symfony Docs?</p>
<p>Sometimes <strong>they are embodied in the best place - the code</strong>. Kudos to all developers who do it like that! When running this method, you'll be informed:</p>
<pre><code class="language-php">public function add()
{
    trigger_error('Method add() is deprecated, use addHtml() instead.', E_USER_DEPRECATED);
}</code></pre>
<h3 id="4-found-them-and-valid-but-are-they-standardized">4. Found them and Valid! But are They Standardized?</h3>
<p>Sometimes the maintainer goes as far to deprecate code slowly (!= remove):</p>
<pre><code class="language-php">trigger_error('Method add() is deprecated, use addHtml() instead.', E_USER_DEPRECATED);</code></pre>
<p>Which is good enough for start. Symfony even has <a href="https://symfony.com/doc/current/components/phpunit_bridge.html">PHPUnit Bridge</a> that tries to detect those deprecations. Would you know what exactly do you need to change?</p>
<img src="/assets/images/posts/2018/rector-3/report.png" class="img-thumbnail">
<p>But what class? What line?</p>
<p>But that's not the only &quot;standard&quot;.</p>
<p><a href="https://xkcd.com/927/
"></p>
<img src="https://imgs.xkcd.com/comics/standards.png" class="img-thumbnail">
<p></a></p>
<p>There is one more way I wrote about in <a href="/blog/2017/09/11/how-to-write-open-source-in-php-3-deprecating-code/#today-s-topic-changed-method-name">How to write Open-Source in PHP 3: Deprecating Code</a>.</p>
<p>The <code>@deprecated</code> annotation:</p>
<pre><code class="language-php">/**
 * @deprecated Method add() is deprecated, use addHtml() instead
 */
public function add()
{
    // ...
}</code></pre>
<p>Which is rather note in the code than helpful to user, like concept post about that great idea your never published. <strong>What happens when <code>-&gt;add()</code> method is called? Nothing.</strong> And in next mayor version you get <em>calling non-existing method</em> error.</p>
<p>Similar tool to PHPUnit Bridge is <a href="https://github.com/sensiolabs-de/deprecation-detector"><code>deprecation-detector</code></a>, that tries to catch code with <code>@deprecated</code> annotation. Again, not much standardized.</p>
<p>And that's Symfony, my friends, which <strong>does the best job for <a href="https://symfony.com/doc/current/contributing/code/bc.html">Backward Compatibility Promise</a> in PHP</strong>. <strong>What about those other 50 packages your application uses?</strong></p>
<h3 id="outsource-all-this">Outsource all this?</h3>
<p>Would you like to do this job instead of developing your application? Most people wouldn't, so they hire me as a consultant to help them with it. <strong>But would you hire somebody, who would download all dependencies your application need in correct version for you or would you rather start using composer?</strong></p>
<h2 id="embodied-cognition-instead-of-investigative-programming">Embodied Cognition instead of Investigative Programming</h2>
<p>I consulted over 50 projects in great depth of legacy. We always tried to figure out, where to start.</p>
<ul>
<li>&quot;This is how it's done in your project, and this is the way in Symfony.&quot;</li>
</ul>
<p>or</p>
<ul>
<li>&quot;This is how it's done in Symfony 2.8 and this is the way in Symfony 3.0.&quot;</li>
</ul>
<h3 id="legacy-projects-well-paid-projects-the-way-go">Legacy Projects === Well Paid Projects !== The Way Go</h3>
<p>Over and over again, just version numbers and the desired framework change. After few years I started to feel like <em>a dumb copy-paster</em>. I follow every new feature on Symfony, test it, verify its usefulness, then distill 100 hours of my work to 3 hour lecture. I'm lazy and this started to itch my mind. Is this the really education I want to encourage in the world? Well, majority of lecturers do exactly same work, well paid work. But is that reason to do it too?</p>
<h3 id="delegate-procreate">Delegate → Procreate</h3>
<p>I borrow a term from psychology - <strong>embodied cognition</strong>. It's something you don't have to remember, cause it's in you. It's like riding a bike. I don't know what words to use and where to find out how to ride a bike - I just know it, cause it's in  my internal reflexes.</p>
<p>Could something similar happen to upgrading applications? A single place that knows what to do and doesn't have to explain every programmer over and over again?</p>
<p><br></p>
<p>These all kinds of problems Rector solves for you.</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/03/05/rector-part-3-why-instant-upgrades</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 05 Mar 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/03/05/rector-part-3-why-instant-upgrades#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ New in Symplify 3: 4 Improvements in EasyCodingStandard ]]></title>
                <link>https://tomasvotruba.com/blog/2018/03/01/new-in-symplify-3-4-improvements-in-easy-coding-standard</link>
                <description><![CDATA[ <p>What is new in Easy Coding Standard 3?
Nice diffs for fixable sniffs, smart excluding, support for sniff warnings and one more...</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="1-exclude-files-or-dirs">1. Exclude Files or Dirs</h2>
<p>Do you have <code>src/Migrations</code> that you need to skip from your <code>vendor/bin/ecs check src</code> command?</p>
<pre><code class="language-php">&lt;?php

// ecs.php

declare(strict_types=1);

use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
use Symplify\EasyCodingStandard\Configuration\Option;

return static function (ContainerConfigurator $containerConfigurator): void {
    $parameters = $containerConfigurator-&gt;parameters();

    $parameters-&gt;set(Option::EXCLUDE_PATHS, [
        __DIR__ . '/src/Migrations/*Migration.php',
    ]);
};
</code></pre>
<p>With favorite <a href="http://php.net/manual/en/function.fnmatch.php"><code>fnmatch()</code> function</a> on board.</p>
<h2 id="2-warnings-are-reported-for-specific-sniffs">2. Warnings are Reported for Specific Sniffs</h2>
<p><a href="https://github.com/symplify/symplify/pull/481" class="btn btn-dark btn-sm mb-3 mt-2">
<em class="fab fa-github"></em>
&nbsp;
Check the PR #481
</a></p>
<p>Sniff warnings are skipped by default, because it doesn't make sense to differentiate errors vs warnings. Yet some official Sniffs only produce warnings and that made them useless. Like <code>PHP_CodeSniffer\Standards\Squiz\Sniffs\PHP\CommentedOutCodeSniff</code>.</p>
<p>That changed. New property <a href="https://github.com/symplify/symplify/blob/3d058becb57efefe2307c88ee94acbfbd15ebd1c/packages/EasyCodingStandard/packages/SniffRunner/src/File/File.php#L52"><code>$reportWarningsSniffs</code> in <code>Symplify\EasyCodingStandard\SniffRunner\File\File</code></a> now lists all sniffs, that report warnings in ECS as well.</p>
<p><strong>Do you miss useful Sniff that reports only warnings?</strong> Send PR to add it.</p>
<h2 id="3-nice-and-clear-diff-over-boring-table-report">3. Nice and Clear Diff over Boring Table Report</h2>
<p><a href="https://github.com/symplify/symplify/pull/474" class="btn btn-dark btn-sm mb-3 mt-2">
<em class="fab fa-github"></em>
&nbsp;
Check the PR #474
</a></p>
<p>Inspired by <a href="https://github.com/friendsofphp/php-cs-fixer">PHP CS Fixer</a> we've decided to <strong>use files diffs everywhere wherever it saves user daunting reading</strong>.</p>
<p>When a <strong>fixable sniff found an error</strong>, ECS reported it like this:</p>
<pre><code class="language-bash"> ------ --------------------------------------------------------------------------------------------
  Line   src/Posts/Year2017/Ast/SomeClass.php
 ------ --------------------------------------------------------------------------------------------
  10     Property $someProperty should use doc block instead of one liner
         (SomeSniff)</code></pre>
<p>But why bother with such detailed text information, if the ECS will fix it to better form anyway?</p>
<p>From now on, <strong>it is reported the PHP CS Fixer-way like all the fixers</strong>:</p>
<pre><code class="language-diff">@@ -1,14 +1,13 @@
 final class SomeClass
 {
+    /**
+     * @var SomeType
+     */
-    /** @var SomeType */
     private $someProperty;
 }

    ----------- end diff -----------

Applied checkers:

 - SomeSniff</code></pre>
<p>Which one do you prefer?</p>
<h2 id="4-skip-sniff-codes-instead-of-whole-sniffs">4. Skip Sniff Codes instead of Whole Sniffs</h2>
<p><a href="https://github.com/symplify/symplify/pull/388" class="btn btn-dark btn-sm mb-3 mt-2">
<em class="fab fa-github"></em>
&nbsp;
Check the PR #388
</a></p>
<p>If you wanted to skip specific part of sniff, you had to <strong>exclude whole sniff</strong> via &quot;skip&quot; option.
But what if you liked all the other codes? <strong>Now you can:</strong></p>
<pre><code class="language-php">&lt;?php

// ecs.php

declare(strict_types=1);

use PHP_CodeSniffer\Standards\Generic\Sniffs\PHP\LowerCaseTypeSniff;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
use Symplify\EasyCodingStandard\Configuration\Option;

return static function (ContainerConfigurator $containerConfigurator): void {
    $parameters = $containerConfigurator-&gt;parameters();

    $parameters-&gt;set(Option::SKIP, [
        // old in Symplify 2
        LowerCaseTypeSniff::class =&gt; null,

        // new in Symplify 3
        LowerCaseTypeSniff::class . '.SpecificCode' =&gt; null,

        // new in Symplify 3 - only some files
        LowerCaseTypeSniff::class . '.SpecificCode' =&gt; [
            __DIR__ . '/src/Command/*'
        ]
    ]);
};</code></pre>
<p>Thanks <a href="https://github.com/ostrolucky">@ostrolucky</a> for taking adding fnmatch() skip of files.</p>
<p>Enjoy the news and thanks to the people who push these tools further by every single PR or issue report!</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/03/01/new-in-symplify-3-4-improvements-in-easy-coding-standard</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 01 Mar 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-08-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Aug 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/03/01/new-in-symplify-3-4-improvements-in-easy-coding-standard#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Rector: Part 2 - Maturity of PHP Ecosystem and Founding Fathers ]]></title>
                <link>https://tomasvotruba.com/blog/2018/02/26/rector-part-2-maturity-of-php-ecocystem-and-founding-fathers</link>
                <description><![CDATA[ <p>What it took for Rector to be born?
<br><br>
Paradigm shift, ecosystem maturity, need for speed to solve common problems community has. <strong>And a great team you share <a href="https://austinkleon.com/show-your-work">your work with</a> that feedbacks and reflects.</strong></p> ]]></description>
                <content:encoded><![CDATA[ <p><em>Read also:</em></p>
<ul>
<li><a href="/blog/2018/02/19/rector-part-1-what-and-how/">Part 1 - What and How</a></li>
<li><a href="/blog/2018/03/05/rector-part-3-why-instant-upgrades/">Part 3 - Why Instant Upgrades</a></li>
</ul>
<p><br></p>
<p>It's not that PHP projects didn't need to be updated until 2017. I surely could delegate hundreds of <em>upgrade-hours</em> for my whole career. So <strong>why Now?</strong></p>
<h2 id="em-codemods-em-as-standard"><em>Codemods</em> as Standard</h2>
<p><em>Codemod</em> is a tool that modifies your code. And you're ok with it.</p>
<p><strong>Many years ago <a href="https://github.com/squizlabs/PHP_CodeSniffer">PHP_CodeSniffer</a> was born</strong> by <a href="https://gregsherwood.blogspot.cz/search/label/PHP_CodeSniffer">Greg Sherwood</a> from Australia. Guess how long ago? <a href="https://gregsherwood.blogspot.cz/2006/12/if-not-test-first-then-test-really-soon.html">In 2006</a>! Tool that checks your coding standard, tabs and spaces, brackets and quotes. First of it's kind to be mainstream in PHP community.</p>
<p><strong>It was followed by <a href="https://github.com/friendsofphp/php-cs-fixer">PHP CS Fixer</a></strong> with <a href="http://fabien.potencier.org/php-cs-fixer-finally-reaches-version-1-0.html">it's first release in 2014</a> by <a href="http://fabien.potencier.org">Fabien Potencier</a>. Did you know the first script <a href="https://gist.github.com/fabpot/3f25555dce956accd4dd">had only 106 lines</a>?</p>
<p>I use daily both of these tools, <a href="/blog/2017/05/03/combine-power-of-php-code-sniffer-and-php-cs-fixer-in-3-lines/">they're both awesome and work best together</a>. Both of them fix the code for you, so you can sleep or have a coffee instead.</p>
<p>It took 12 years and 2 tools with over 4000 stars on Github to get here.</p>
<h2 id="is-php-ready-for-ast">Is PHP Ready for AST?</h2>
<p>A few years ago <a href="https://nikic.github.io">Nikita Popov</a> started an ambitious project <a href="https://github.com/nikic/PHP-Parser">nikic/PHP-Parser</a>. PHP-Parser parses PHP code to AST. If you're new to Abstract Syntax Tree (AST), check <a href="/blog/2017/11/06/wow-to-change-php-code-with-abstract-syntax-tree/">this post that describes 2 big changes in PHP ecosystem</a> thanks to AST.</p>
<h3 id="both-read-amp-write">Both Read &amp; Write?</h3>
<p>PHP_CodeSniffer was read only, which is great for letting you know what is wrong, but not much for getting a coffee instead. So fixing part was added.</p>
<p>Same was for PHP-Parser. It can read a code and allow it analysis.
That's what <a href="https://ondrej.mirtes.cz">Ondřej Mirtes</a> uses in <a href="/blog/2017/01/28/why-I-switched-scrutinizer-for-phpstan-and-you-should-too/">PHPStan</a> - context aware PHP analysis (&quot;this variable is of this type&quot;).</p>
<p>Again useful, but what about that coffee? It won't make itself.</p>
<p><strong>I must say, this is breaking point for Rector</strong>. Without this, Rector would be just annoying tool telling you what is wrong and what you should do (and we had enough control already, right?). Super fortunately, <a href="https://github.com/nikic/PHP-Parser/blob/master/doc/component/Pretty_printing.markdown#formatting-preserving-pretty-printing">write feature was added and released in 2018</a> with php-parser 4.</p>
<p><em>Did you know?</em> That Fabien wanted to use PHP-Parser for PHP CS Fixer in <a href="https://github.com/nikic/PHP-Parser/issues/41">2012</a>, but could not, because the writing part was missing? <em>Patience makes perfect</em> - 6 years later it's there.</p>
<h3 id="coding-standard-tool-that-makes-code-nice-and-shiny">Coding Standard + Tool that makes Code Nice and Shiny</h3>
<p>PHP AST can be saved, but it still needed a bit polishing:</p>
<pre><code class="language-diff"> namespace App;

 use Symfony\Component\HttpFoundation\DeprecatedRequest;

 class Controller
 {
-    public function actionIndex(): DeprecatedRequest
+    public function actionIndex(): \Symfony\Component\HttpFoundation\NewRequest
     {
     }
 }</code></pre>
<p>There was no tool that could do this for you, until <a href="https://github.com/symplify/easy-coding-standard">EasyCodingStandard</a> + <a href="https://github.com/symplify/coding-standard"><code>Symplify\CodingStandard</code></a>.</p>
<p>With that combination, just run <code>vendor/bin/ecs</code> with <a href="https://github.com/symplify/coding-standard#types-should-not-be-referenced-via-a-fullypartially-qualified-name-but-via-a-use-statement">proper setup</a> to fix that:</p>
<pre><code class="language-diff"> namespace App;

+use Symfony\Component\HttpFoundation\NewRequest;
-use Symfony\Component\HttpFoundation\DeprecatedRequest;

 class Controller
 {
-    public function actionIndex(): \Symfony\Component\HttpFoundation\NewRequest
+    public function actionIndex(): NewRequest
     {
     }
 }</code></pre>
<h2 id="founding-fathers-of-rector">Founding Fathers of Rector</h2>
<p>That's how <a href="https://github.com/rectorphp/rector">Rector</a> was born one part after another. At least the ideas.</p>
<p>It's not only about writing code. It's about discussing the idea, finding the right API that not only me but others would understand right away, it's about using other tools. It's about talking with people who already made AST tools, ask for advices and find possible pitfalls. It's about reporting issues and talking with people who maintain  projects you depend on.</p>
<h3 id="fdd-friendship-driven-development">FDD = Friendship-Driven Development</h3>
<p>I don't work for at any company so development of Rector doesn't solve my personal issues. That's how most project is born, like PHPStan to check Slevomat's code. That means I needed other motivation - when my frustration of wasted thousands human-hours was not enough.</p>
<ul>
<li>
<p><strong>Here I'd like to thank <a href="http://petrvacha.com">Petr Vácha</a></strong> for cowork weekend in Brno with in summer 2017, where it all started - in those times named as <em>Refactor</em>. You've been great friend for years and courage in times, when I needed it the most.</p>
</li>
<li>
<p><strong>And <a href="https://davidgrudl.com">David Grudl</a></strong>, who gave me the motivation to dig deep and &quot;just try it&quot; when I felt desperate and useless always with lightness of Zen master.</p>
</li>
<li>
<p><strong>And also <a href="http://nikic.github.com">Nikita Popov</a></strong>, who patiently answered, taught me and fixed all my issues on <code>nikic/php-parser</code>.</p>
</li>
</ul>
<p>Without you, I would not make it here today.</p>
<p><br><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/02/26/rector-part-2-maturity-of-php-ecocystem-and-founding-fathers</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 26 Feb 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/02/26/rector-part-2-maturity-of-php-ecocystem-and-founding-fathers#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Rector: Part 1 - What and How ]]></title>
                <link>https://tomasvotruba.com/blog/2018/02/19/rector-part-1-what-and-how</link>
                <description><![CDATA[ <p>Rector is a PHP tool that handles 2 things: <strong>instant upgrades</strong> and <strong>architecture refactorings</strong>.
<br><br>
What exactly Rector does and how does it work?</p> ]]></description>
                <content:encoded><![CDATA[ <p><em>Read also:</em></p>
<ul>
<li><a href="/blog/2018/02/26/rector-part-2-maturity-of-php-ecocystem-and-founding-fathers/">Part 2 - Maturity of PHP Ecosystem and Founding Fathers</a></li>
<li><a href="/blog/2018/03/05/rector-part-3-why-instant-upgrades/">Part 3 - Why Instant Upgrades</a></li>
</ul>
<p><br></p>
<h2 id="what-is-rector">What is Rector?</h2>
<p>Rector is a PHP CLI tool build on <a href="https://symfony.com/components">Symfony Components</a> that changes your PHP code for better.
It only does what you tell it to do. You can use it to <em>instantly upgrade</em> your application or to do <em>architecture refactorings</em> once for the whole codebase.</p>
<p>Rector won't do your job. It's here to <strong>do the boring stuff for you</strong>. Its help is similar to coding standard tools' help with code reviews - move focus from spaces and commas to architecture of the code.</p>
<h3 id="where-is-it">Where is it?</h3>
<p>You can <a href="https://github.com/rectorphp/rector">find it on Github</a>. It has now <a href="https://github.com/rectorphp/rector/graphs/contributors">6 contributors</a> in total. I want to thank young talented PHP developer <a href="https://github.com/carusogabriel">Gabriel Caruso</a> from Brazil for his great contributions since December 2017 that pushed Rector to a brand new level.</p>
<h2 id="what-are-instant-upgrades">What are Instant Upgrades?</h2>
<p><em>I'll show examples on <a href="https://symfony.com">Symfony</a>, because that's the framework I know and love the best.</em></p>
<p>Let's say you have a project on Symfony 2.7. And you have a huge <code>service.yml</code>. You know that Symfony 2.8/3.0 brought an awesome <a href="https://symfony.com/blog/new-in-symfony-2-8-service-auto-wiring">autowiring</a> feature that evolved to pure awesomenes in Symfony 3.3 and <a href="/blog/2017/05/07/how-to-refactor-to-new-dependency-injection-features-in-symfony-3-3/#4-use-psr-4-based-service-autodiscovery-and-registration">PSR-4 services feature</a>.</p>
<p>Would you like to do this upgrade work manually? No. You can use Rector instead.
Just run it with target <code>level</code> of <code>symfony33</code> and it will change everything it knows about.</p>
<p>Such a command looks like this:</p>
<pre><code class="language-bash">vendor/bin/rector process src --set symfony33</code></pre>
<h2 id="what-are-architecture-refactorings">What are Architecture Refactorings?</h2>
<p>The great task Rector can handle is to architecture refactorings. Your code might use a framework, but that's just 50 % of the code. The other 50 % is up to you, how you decide to use it - I mean static calls, services locators, facades over dependency injections etc.</p>
<p>I've seen many applications built on Symfony that used very interesting patterns:</p>
<pre><code class="language-php">class LoggingEventSubscriber implements EventSubscriberInterface
{
    public function setController($controller)
    {
        $this-&gt;controller = $controller;
    }

    public function process()
    {
        $logger = $this-&gt;controller-&gt;get('logger');
        $logger-&gt;log('it happened!');
    }
}</code></pre>
<p>Let's say you'd like to remove all <code>$this-&gt;get('logger')</code> and replace them with dependency injection of <code>LoggerInterface</code> type. It's not strictly coupled to the Symfony (both <a href="https://forum.nette.org/en/22075-context-on-presenter-is-deprecated">Nette</a> and <a href="https://laravel.com/docs/5.5/facades#facade-class-reference">Laravel</a> allows this in some version) but you want to change this in the whole application.</p>
<p>From this:</p>
<pre><code class="language-php">class LectureController extends BaseController
{
    public function listAction()
    {
        $logger = $this-&gt;get('logger');
        $logger-&gt;log('it happened!');
    }
}</code></pre>
<p>To this:</p>
<pre><code class="language-php">class LectureController extends BaseController
{
    /**
     * @var LoggerInterface
     */
    private $logger;

    public function __construct(LoggerInterface $logger)
    {
        $this-&gt;logger = $logger;
    }

    public function listAction()
    {
        $this-&gt;logger-&gt;log('it happened!');
    }
}</code></pre>
<p>Rector can handle it for you.</p>
<p>Do you use Laravel and want to move from facades to constructor injection? Rector can help you.</p>
<h2 id="how-does-it-work">How does it Work?</h2>
<p>Rector parses the code to <a href="/blog/2017/11/06/wow-to-change-php-code-with-abstract-syntax-tree/">AST</a> thanks to PHP superman <a href="https://nikic.github.io">nikic</a>'s <a href="https://github.com/nikic/PHP-Parser">php-parser</a>.</p>
<p>Then it finds specific places in the code, e.g. all variables that contain <code>Symfony\Component\HttpFoundation\Request</code> type and call <code>isMethodSafe()</code> method.</p>
<p>Then it changes it into <code>isMethodCacheable()</code> (see <a href="https://github.com/symfony/symfony/blob/master/UPGRADE-4.0.md#httpfoundation">UPGRADE-4.0.md</a>).</p>
<p>Such a configuration looks like this (as shown in <a href="https://github.com/rectorphp/rector#change-a-method-name"><code>README</code></a>):</p>
<pre><code class="language-php">&lt;?php

// rector.php

declare(strict_types=1);

use Rector\Renaming\Rector\MethodCall\RenameMethodRector;use Rector\Set\ValueObject\SetList;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return static function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();
    $services-&gt;set(RenameMethodRector::class)
        -&gt;call('configure', [[
            RenameMethodRector::OLD_TO_NEW_METHODS_BY_CLASS =&gt; [
                'Symfony\Component\HttpFoundation\Request' =&gt; [
                    'isMethodSafe' =&gt; 'isMethodCacheable'
                ]
            ]
        ]]);
};</code></pre>
<h3 id="member-of-big-ast-php-family">Member of Big AST PHP Family</h3>
<p>Rector is not the only tool that uses <code>nikic\php-parser</code> for context-aware operation on your code.</p>
<p>You've probably heard of <a href="/blog/2017/01/28/why-I-switched-scrutinizer-for-phpstan-and-you-should-too/">PHPStan</a>. But unfortunately it's read-only for deterministic cases = when 1 error has exactly 1 possible solution.</p>
<p>Another static analysis tool - <a href="https://github.com/vimeo/psalm">vimeo/psalm</a> by <a href="https://github.com/muglug">Matthew Brown</a>, which fixes such code. Great job Matthew!</p>
<h2 id="easter-egg-has-google-own-quot-rector-quot">Easter Egg: Has Google Own &quot;Rector&quot;?</h2>
<p>This <em>setup and forget</em> approach is so addictive, that Google must have it too, right?</p>
<p>And it does! I found 4-page case study <em><a href="https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/41342.pdf">Large-Scale Automated Refactoring Using ClangMR</a></em>, that was <a href="https://www.youtube.com/watch?v=ZpvvmvITOrk">presented by <em>Hyrum Wright</em> on CppCon2014</a> in 57 minutes. Hyrum doesn't work at Google anymore (as he wrote me), yet I still love his detailed and practical talk.</p>
<p>I'm still amazed by how their approach is 90% similar to Rector, just for C++.</p>
<p><br></p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/02/19/rector-part-1-what-and-how</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 19 Feb 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/02/19/rector-part-1-what-and-how#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Sleep Shorter to Get 62 % Smarter ]]></title>
                <link>https://tomasvotruba.com/blog/2018/02/12/sleep-shorter-to-get-62-percent-smarter</link>
                <description><![CDATA[ <p>Even though I see <a href="/blog/2017/11/13/7-tips-you-should-know-before-going-to-university/">University as very poor place to learn something useful</a>, I studied Psychology in Brno for 3 years.
<br><br>
<em>Psychological Impacts of Polyphasic Sleep</em> is the topic of my <a href="https://is.muni.cz/th/363896/fss_b/Tomas-Votruba-Psychological-Impacts-of-Polyphasic-Sleep.pdf">bachelor thesis</a> I wrote in 2012. In the end it gave me clear answer to question: <strong>can we sleep less than 4,5 hours a night to get smarter?</strong></p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="from-6-to-4-5-hours-of-sleep-in-3-months">From 6 to 4,5 hours of Sleep in 3 Months</h2>
<p>I switched from monophasic sleep schedule (6 hours in a row) to <strong>Everyman 3</strong> (4,5 hours in a row + 3 naps during the day) for <strong>3 months</strong> and tested myself daily in attention span, short term memory and working memory.</p>
<p>To give you the idea <strong>how polyphasic sleep can look like</strong>:</p>
<div class="text-center">
    <img src="/assets/images/posts/2018/polyphasic/polyphasic-charts.jpg" class="img-thumbnail"><em>blue = sleep, yellow = awake</em>
</div>
<p><br></p>
<p>And this is how my real sleep schedule looked like:</p>
<img src="/assets/images/posts/2018/polyphasic/phase-a-b.png" class="img-thumbnail">
<img src="/assets/images/posts/2018/polyphasic/phase-b.png" class="img-thumbnail">
<p><br></p>
<p>On average, I slept <strong>3.78 times a day</strong> with <strong>4.48 hours in total</strong>.</p>
<h2 id="62-better-short-term-memory">62 % Better Short Term Memory</h2>
<p><strong>One of hypothesis was that short term memory improves</strong>. It was measured by table of random-generated list of words I had to remember during 2 minutes and then type back in next 60 seconds:</p>
<img src="/assets/images/posts/2018/polyphasic/short-term.png" class="img-thumbnail">
<p><br></p>
<p>I remembered much more of these words on polyphasic sleep:</p>
<table class="table table-bordered table-responsive"><thead class="thead-inverse"><tr><th>Sleep Schedule</th>
            <th>Words Recalled</th>
            <th>Improvement to Monophasic</th>
        </tr></thead><tr><td>Monophasic</td>
        <td>12.82 words</td>
        <td>–</td>
    </tr><tr><td>Polyphasic (Phase 3)</td>
        <td>20.66 words</td>
        <td>+62 %</td>
    </tr><tr><td>Polyphasic (Phase 4)</td>
        <td>16.96 words</td>
        <td>+32 %</td>
    </tr></table>
<p><br></p>
<p>And in linear regression:</p>
<div class="text-center">
    <img src="/assets/images/posts/2018/polyphasic/short-term-linear-regression.png" class="img-thumbnail"><em>Phase 3: first half of polyphasic period, Phase 4: second half of polyphasic period"</em>
</div>
<p><br></p>
<h2 id="23-better-working-memory">23 % Better Working Memory</h2>
<p>Another test measured time that takes to click whole path from the lowest to the highest letter and number (A, 1, B, 2...):</p>
<img src="/assets/images/posts/2018/polyphasic/line.png" class="img-thumbnail">
<p><br></p>
<table class="table table-bordered table-responsive"><thead class="thead-inverse"><tr><th>Sleep Schedule</th>
            <th>Path Duration</th>
            <th>Change to Monophasic
        </th></tr></thead><tr><td>Monophasic</td>
        <td>32.58 s</td>
        <td>–</td>
    </tr><tr><td>Polyphasic (Phase 3)</td>
        <td>25.07 s</td>
        <td><strong>+ 30 %</strong></td>
    </tr><tr><td>Polyphasic (Phase 4)</td>
        <td>27.73 s</td>
        <td><strong>+ 17 %</strong></td>
    </tr></table>
<p><br></p>
<p>And in linear regression:</p>
<div class="text-center">
    <img src="/assets/images/posts/2018/polyphasic/line-linear-regression.png" class="img-thumbnail"><em>Phase 3: first half of polyphasic period, Phase 4: second half of polyphasic period"</em>
</div>
<p><br></p>
<p>The very similar <strong>improvement 23 %</strong> was in <a href="https://www.jobtestprep.co.uk/group-bourdon-test">Group Bourdon Test</a>. It is <strong>standard for driver licences</strong> and tests attention, pattern recognition and <strong>concentration for long period of time</strong> (related to so precious <a href="/blog/2017/09/25/3-non-it-books-that-help-you-to-become-better-programmer/#deep-work-by-cal-newport">deep work</a>).</p>
<p>Just select all 4-dots images:</p>
<img src="/assets/images/posts/2018/polyphasic/working.png" class="img-thumbnail">
<p><br></p>
<h2 id="win-win">Win-Win</h2>
<p>Not all hypothesis were confirmed. But even though I was ill in phase 4 (see section 5.2), the results were more then clear<strong>. Polyphasic sleep improved my attention, working memory and short term memory from 23 % to 63 %</strong>.</p>
<p>And not only that. And <strong>I also got extra 1,5 hours a day</strong>!</p>
<h2 id="polyphasic-sleep-universal-tool-to-boost-production">Polyphasic Sleep - Universal Tool to Boost Production?</h2>
<p>It depends on what you need in your life. I needed time to produce because I got many time-demanding goals in that time. In time I learned to prioritize, to focus on what is important and to flow in a deep works session.</p>
<p>I still take a nap roughly once a week and feel fresh, when day is hard. And if I ever be father of another baby, I'd be happy to polyphase with him or her, since it's babies natural sleep schedule.</p>
<h2 id="do-you-need-more-time-try-it">Do you Need More Time? Try it</h2>
<p>Would you use extra hour a day? Have you tried it? Nap a day won't hurt and you don't even have to fall asleep. Modern medicine confirms that mindfulness meditation (which polyphasic sleep often is) has great benefits for your mind.</p>
<h3 id="where-is-what-in-thesis">Where is What in Thesis?</h3>
<p>I picked the most interesting parts for you, so you can avoid <a href="https://is.muni.cz/th/363896/fss_b/Tomas-Votruba-Psychological-Impacts-of-Polyphasic-Sleep.pdf">reading whole 63 pages</a> and go right to the part that you're interested in:</p>
<ul>
<li>4.4 <em>Hypothesis</em> - what needs to be validated</li>
<li>4.5 <em>Materials</em> - test battery, how it looked like, what exactly is measured</li>
<li>5 <em>Results</em> - numbers, graphs</li>
<li>6 <em>Discussion</em> - looking at numbers from perspective, why and what actually happened</li>
</ul>
<h3 id="do-you-have-question-to-specific-part-of-the-thesis">Do you have question to specific part of the thesis?</h3>
<p>Just go to <a href="https://docs.google.com/document/d/12gTjk_q403nt9nhqZTo9gsHFB8oZGz_-YpKDJV-ekow/edit?usp=sharing">Google Docs</a> version and ask in comment there.</p>
<p><br><br></p>
<p>Happy napping!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/02/12/sleep-shorter-to-get-62-percent-smarter</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 12 Feb 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/02/12/sleep-shorter-to-get-62-percent-smarter#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Run Symfony Processes Asynchronously ]]></title>
                <link>https://tomasvotruba.com/blog/2018/02/05/how-to-run-symfony-processes-asynchronously</link>
                <description><![CDATA[ <p>It takes quite a long time to split Symplify <a href="https://github.com/Symplify/Monorepo">monorepo</a> packages: exactly <strong>420 s for 8 packages</strong> of Symplify.
<br><br>
Could we go 200 % faster by putting processes from serial to parallel?</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="process-run-one-by-one">Process Run One by One</h2>
<p>This is our code now. Each process waits on each other - one is finished, then next starts.</p>
<pre><code class="language-php">foreach ($splitConfiguration as $directory =&gt; $repository) {
    $process = new Process(['git', 'subsplit', $directory . ':' . $repository]);
    $process-&gt;run();

    // here the process is finished
    if (! $process-&gt;isSuccessful()) {
        throw new PackageToRepositorySplitException($process-&gt;getErrorOutput());
    }

    // report exactly what happened, so it's easier to know result and debug
    $symfonyStyle-&gt;success(sprintf(
        'Split from "%s" to "%s" is done',
        $directory,
        $repository
    ));
}</code></pre>
<h2 id="how-to-go-async-in-php">How to Go Async in PHP?</h2>
<p>We tried <a href="https://github.com/spatie/async">spatie/async</a> which has very nice README at first sight and works probably very well for simple functions. But it turned out to be rather magic <a href="https://github.com/spatie/async/blob/master/src/Runtime/ParentRuntime.php">by passing service as serialized string</a> to <a href="https://github.com/spatie/async/blob/master/src/Runtime/ChildRuntime.php">CLI that desirializes it and runs on own thread</a>. It also caused other process commands fail on success message. It is probably good enought for Laravel, but not for my <a href="https://github.com/jupeter/clean-code-php#solid">SOLID standards</a>.</p>
<h3 id="what-are-the-other-options">What are the Other options?</h3>
<p>We could go <a href="https://github.com/amphp/amp">amp</a> or <a href="https://reactphp.org">reactphp</a>, but wouldn't that be an overkill?</p>
<p>There is also faster way like <a href="https://github.com/splitsh/lite">splitsh/lite</a>, but <strong>we aim on PHP + Git combination so PHP developers could extend the code</strong>.</p>
<p>Luckily, Symfony Process already <strong>allows <a href="https://symfony.com/doc/current/components/process.html#running-processes-asynchronously">standalone process</a></strong> without waiting on each other.</p>
<h2 id="what-we-actually-need">What We Actually Need?</h2>
<p>Picking the right tool is important, since it vendor locks our code to package, but lets step back a little.</p>
<p><strong>What is the exact goal we need?</strong></p>
<ol>
<li>Run all processes at once</li>
<li>Wait until they're finished</li>
<li>Report their success/error status</li>
</ol>
<h2 id="1-to-run-all-processes-at-once">1. To run all Processes at Once</h2>
<pre><code class="language-php">$runningProcesses = [];

foreach ($splitConfiguration as $directory =&gt; $repository) {
    $process = new Process(['git', 'subsplit', $directory . ':' . $repository]);
    // start() doesn't wait until the process is finished, oppose to run()
    $process-&gt;start();

    // store process for later, so we evaluate it's finished
    $runningProcesses[] = $process;
}</code></pre>
<p>This foreach starts all processes in parallel. Without knowing they're finished or not.</p>
<p><strong>Don't forget to check that your CPU is not burned by running many processes at once</strong> by limiting concurrency.
In our case it's only 8, so we survive this.</p>
<h2 id="2-wait-until-they-re-finished">2. Wait Until They're Finished</h2>
<pre><code class="language-php">while (count($activeProcesses)) {
    foreach ($activeProcesses as $i =&gt; $runningProcess) {
        // specific process is finished, so we remove it
        if (! $runningProcess-&gt;isRunning()) {
            unset($activeProcesses[$i]);
        }

        // check every second
        sleep(1);
    }
}

// here we know that all are finished</code></pre>
<h2 id="3-report-their-success-error-status">3. Report their Success/Error Status</h2>
<pre><code class="language-php">$symfonyStyle-&gt;success('Split was successful');</code></pre>
<p>But how useful is this message compared to previous one?</p>
<pre><code class="language-php">$symfonyStyle-&gt;success(sprintf(
    'Split from "%s" to "%s" is done',
    $directory,
    $repository
));</code></pre>
<p>And what if any processes failed?</p>
<h3 id="let-s-improve-this">Let's improve this</h3>
<pre><code class="language-diff"> $runningProcesses = [];
+$allProcessInfos = [];

 foreach ($splitConfiguration as $directory =&gt; $repository) {
     $process = new Process(['git', 'subsplit', $directory . ':' . $repository]);
     $process-&gt;start();

     $runningProcesses[] = $process;
+    // value object with types would be better and faster here, this is just example
+    $allProcessInfos[] = [
+        'process' =&gt; $process,
+        'directory' =&gt; $subdirectory,
+        'repository' =&gt; $repository
+    ];
 }</code></pre>
<p>So final reporting would look like this:</p>
<pre><code class="language-php">foreach ($allProcessInfos as $processInfo) {
    /** @var Process $process */
    $process = $processInfo['process'];
    if (! $process-&gt;isSuccessful()) {
        throw new PackageToRepositorySplitException($process-&gt;getErrorOutput());
    }

    $symfonyStyle-&gt;success(sprintf(
        'Push of "%s" directory to "%s" repository was successful',
        $processInfo['directory'],
        $processInfo['repository']
    ));
}</code></pre>
<h3 id="speed-up-from-420-to-139-s">Speed up From 420 to 139 s</h3>
<p>Symplify has 8 packages to build at the moment. Putting split commands to async had amazing improvement!</p>
<p><a href="https://github.com/symplify/symplify/pull/620" class="btn btn-dark btn-sm">
<em class="fab fa-github fa-fw"></em>
See pull-request #620
</a></p>
<p>That's it!</p>
<p><br><br></p>
<p>pyHpa ansyc rusn!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/02/05/how-to-run-symfony-processes-asynchronously</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 05 Feb 2018 00:00:00 +0000</pubDate>
                                    <updated>2018-12-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Dec 2018 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Dec 2018 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/02/05/how-to-run-symfony-processes-asynchronously#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Deal With Haters in Comments and Github ]]></title>
                <link>https://tomasvotruba.com/blog/2018/01/29/how-to-deal-with-haters-in-comments-and-github</link>
                <description><![CDATA[ <p>That's what I was asked yesterday for about 5th person already. How do I deal with that when I write an article, when I tweet or comment on Github and someone is throwing dirt on me?</p> ]]></description>
                <content:encoded><![CDATA[ <p>I learned this process while being a maintainer of <a href="/blog/2017/09/04/how-apigen-survived-its-own-death/">ApiGen</a> for 1 year and then 6 months again, where I got to dozens of online-hate-wars and found that it leads nowhere.</p>
<img src="/assets/images/posts/2018/haters-in-comments/hearth-mind.jpg" class="img-thumbnail">
<p>Then I tried another way - a <strong><a href="https://zenhabits.net/compassion">compassion</a>.</strong></p>
<p>We could sum it up in 4 steps:</p>
<h2 id="1-process-emotion-take-a-breath">1. Process Emotion - Take a Breath</h2>
<p>Yes, it hurts. When I write a tutorial on how to deal with hater, and someone writes me: <em>IT'S STUPID</em> - it hurts. I put so much work in it and instead of a like I get slapped. <strong>In fact, that could be a feedback. With a little effort even constructive.</strong></p>
<p><strong>What information</strong> he or she wants to communicate to me? In 90% of cases:</p>
<ul>
<li>&quot;I do not understand that.&quot;</li>
<li>&quot;I understood it differently than you meant.&quot;</li>
<li>&quot;I see it differently.&quot;</li>
</ul>
<p><strong>You don't respond right away</strong>. When you feel uncomfortable right after reading the comment, you'd only return the same emotion and the same would probably get back to you. Take an hour break if you need. It's ok.</p>
<h2 id="2-investigate-get-more-intel">2. Investigate - Get more Intel</h2>
<p>We want to know what's on the other's mind. We want to find <strong>something useful for us, to make our work better next time</strong>.</p>
<h3 id="how-to-respond">How to Respond?</h3>
<ul>
<li>&quot;It's a total crap&quot; =&gt; What you disagree?</li>
<li>&quot;That never works&quot; =&gt; How so? What could work then?</li>
<li>&quot;You're doing it wrong&quot; =&gt; Why do you think so? How would that look right?</li>
</ul>
<p><em>This is how damaged 10-years marriage on therapy looks like.</em></p>
<h3 id="follow-context">Follow Context</h3>
<p>It's the same in programming. There is no ultimate answer to a sentence out of context - reaction always depends on it. We behave differently in a group of friends people or while writing first comment on repository maintained by programmer from South America.</p>
<p>But in the most cases <strong>the reaction to such question is more constructive than the first comment</strong>. And that's enough for me - <strong>I'll take more from it than if I'd remain silent and returned back emotion</strong>.</p>
<img src="/assets/images/posts/2017/feedback/feedback.jpg" class="img-thumbnail">
<h2 id="3-is-it-worth-it-iterate">3. Is it Worth it? Iterate</h2>
<p>Baby steps. I do not expect that I get <a href="http://www.rightattitudes.com/2008/02/20/sandwich-feedback-technique">sandwich feedback</a> to my first answer - after all, it took me year to get from <em>that's wrong</em> to useful and well-accepted feedback.</p>
<p>Sometimes it takes time, sometimes I regress and mirror anger back, but I try to remember the first point - <strong>process emotion</strong>. When it doesn't work, I just stop and focus somewhere else.</p>
<p><strong>Often we get from potential argument to his or her sending a new pull-request</strong>.</p>
<h2 id="4-is-it-too-much-let-it-go">4. Is it too much? Let it go</h2>
<p>It is possible, that there is no useful information at all. In that case, <a href="https://www.youtube.com/watch?v=L0MK7qz13bU">let it</a> <a href="https://zenhabits.net/past">go</a>. You can leave in silence...</p>
<p>...<strong>but how useful is silence to you, when you don't understand something</strong>?</p>
<p>What I try to do, <strong>is to express that</strong>. It's the last and least I can do:</p>
<ul>
<li>&quot;Let's agree we disagree.&quot;</li>
<li>&quot;I think we both tried to understand each other but I was not enough&quot;</li>
<li>&quot;I'm sorry, I still don't understand your points and I don't want to put more energy into thi&quot;</li>
</ul>
<p>Next time, this person might realize it's not personal attack similar to his childhood experience in school or with his parents, but it's <strong>only about miss interpretation</strong> of words. And he or she might <strong>call you</strong> to express it better, like I do when I feel keyboard doesn't <em>work</em>. After all, <a href="http://ubiquity.acm.org/article.cfm?id=2043156">only 7 % of communication is verbal</a>.</p>
<h2 id="tip-for-github-maintainers-quot-24-hour-take-a-breath-quot">Tip for Github Maintainers - &quot;24-hour Take a Breath&quot;</h2>
<p>Github has this <a href="https://github.com/blog/2370-introducing-temporary-interaction-limits">super feature</a> right in <em>Settings</em> of every repository, that can give everyone time to process and realize what happened. Outsize the emotional tornado. With calm and peaceful mind.</p>
<img src="/assets/images/posts/2018/haters-in-comments/temporary-interaction-limits.png" class="img-thumbnail">
<p>I wish I knew this before. It would save many words I could not take back.</p>
<p><br><br></p>
<p>Don't worry, be happy!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/01/29/how-to-deal-with-haters-in-comments-and-github</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 29 Jan 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/01/29/how-to-deal-with-haters-in-comments-and-github#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Get Parameter in Symfony Controller the Clean Way ]]></title>
                <link>https://tomasvotruba.com/blog/2018/01/22/how-to-get-parameter-in-symfony-controller-the-clean-way</link>
                <description><![CDATA[ <p>Services are already moving to Constructor Injection in Symfony.
<br>
Now it's time for parameters to follow.</p> ]]></description>
                <content:encoded><![CDATA[ <h3 id="the-easy-way">The Easy Way</h3>
<pre><code class="language-php">final class LectureController extends SymfonyController
{
    public function registerAction()
    {
        $bankAccount = $this-&gt;container-&gt;getParameter('bankAccount');
    }
}</code></pre>
<p>It works, but it breaks <a href="https://github.com/jupeter/clean-code-php#solid">SOLID encapsulation of dependencies</a>. Controller should not be aware of whole DI container and every service in it. <strong>It should take only what it needs</strong> as any other <a href="/blog/2018/01/08/clean-and-decoupled-controllers-commands-and-event-subscribers-once-and-for-all-with-delegator-pattern/#delegator-pattern-to-the-strike-rescue-strike-prevention">delegator</a>.</p>
<p><strong>What if we need a service</strong> to pay a registration fee to our bank account?</p>
<p>Since <a href="https://symfony.com/blog/new-in-symfony-2-8-service-auto-wiring">Symfony 2.8 with autowiring</a> we can go for constructor injection with no obstacles:</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

final class LectureController extends SymfonyController
{
    /**
     * @var PaymentService
     */
    private $paymentService;

    public function __construct(PaymentService $paymentService)
    {
        $this-&gt;paymentService = $paymentService;
    }

    public function registerAction(): void
    {
        $bankAccount = $this-&gt;container-&gt;getParameter('bankAccount');

        $this-&gt;paymentService-&gt;payAmountToAccount(1000, $bankAccount);
    }
}</code></pre>
<p>This can go completely wrong, not because dependency injection is better than service locator, but <strong>because code is now inconsistent</strong>. It's not clear:</p>
<ul>
<li>When should we use constructor injection? For services?</li>
<li>When should we use service locator? For parameters?</li>
</ul>
<p>At that's what we think about when <em>we</em> refactored code and know about it's previous state.</p>
<p>When your colleague will extends this code 3 months later, he might <a href="https://blog.codinghorror.com/the-broken-window-theory">broke your window</a>:</p>
<pre><code class="language-diff">&lt;?php declare(strict_types=1);

final class LectureController extends SymfonyController
{
    /**
     * @var PaymentService
     */
    private $paymentService;

    public function __construct(PaymentService $paymentService)
    {
        $this-&gt;paymentService = $paymentService;
    }

    public function registerAction(): void
    {
        $bankAccount = $this-&gt;container-&gt;getParameter('bankAccount');

        $this-&gt;paymentService-&gt;payAmountToAccount(1000, $bankAccount);
    }
+
+    public function refundAction(): void
+    {
+        $refundService = $this-&gt;container-&gt;get(RefundService::class);
+        $refundService-&gt;refundToLoggedUser(1000);
+    }
}</code></pre>
<h2 id="consistency-over-per-change-pattern">Consistency over Per Change Pattern</h2>
<p>You understand your code = you know reasons why it's written this way and the boundaries. You know when to use dependency injection and when service (or pamater) locator.</p>
<p><strong>But that's you. Only you.</strong> Other people don't have your experience and your memory. <strong>They read the code and learn while reading</strong>.</p>
<p>That's why it's important to use as less rules as possible to prevent <a href="https://chrismm.com/blog/writing-good-code-reduce-the-cognitive-load">cognitive overload</a>. Which leads to poor understanding of the code and coding further in the same file but in own personal way, not related to original code much.</p>
<h3 id="di-is-the-flow-ndash-go-with-it">DI is the Flow &ndash; Go With It</h3>
<p>Symfony 3.3 and 3.4/4.0 brought <a href="/blog/2017/05/07/how-to-refactor-to-new-dependency-injection-features-in-symfony-3-3/">many new DI features</a> and <strong>with it an evolution to developer experience paradigm</strong>. Thanks to <a href="https://github.com/nicolas-grekas">Nicolas Grekas</a>, and subsequently <a href="https://github.com/dunglas">Kévin Dunglas</a> and <a href="https://github.com/hason">Martin Hasoň</a>.</p>
<h2 id="the-clean-way">The Clean Way</h2>
<p>Service is created in the container and passed via constructor where needed.
<strong>Why not parameter, which is also loaded by the container?</strong></p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

final class LectureController extends SymfonyController
{
    /**
     * @var string
     */
    private $bankAccount;

    /**
     * @var PaymentService
     */
    private $paymentService;

    public function __construct(string $bankAccount, PaymentService $paymentService)
    {
        $this-&gt;paymentService = $paymentService;
        $this-&gt;bankAccount = $bankAccount;
    }

    public function registerAction(): void
    {
        $this-&gt;paymentService-&gt;payAmountToAccount(1000, $this-&gt;bankAccount);
    }
}</code></pre>
<h3 id="change-the-config">Change the Config</h3>
<p>We need to:</p>
<ul>
<li>register controller <strong>manually</strong> in every instance</li>
<li>pass the parameter to constructor <strong>manually</strong> in every instance</li>
<li>autowire the rest</li>
</ul>
<p>It's lot of work, but it's worth it!</p>
<pre><code class="language-yaml"># config.yml
parameters:
    bankAccount: '1093849023/2013'

services:
    _defaults:
        autowire: true

    App\Controller\LectureController:
        arguments:
            - '%bankAccount%'</code></pre>
<p>Would you use this approach? 5 lines for 1 parameter in 1 service? Maybe.</p>
<p>What about 2, 3 or 40 controllers/services using it?</p>
<pre><code class="language-yaml">services:
    autowire: true

    App\Controller\LectureController:
        arguments:
            - '%bankAccount%'

    App\Controller\ContactController:
        arguments:
            - '%bankAccount%'

    # and 40 more services with manual setup
    App\Model\PaymentService:
        arguments:
            # with care when used with another position then 1st one
            2: '%bankAccount%'</code></pre>
<p><strong>Doh, so much work :(</strong></p>
<p>I find <a href="#the-easy-way">the easy way</a> now much more likeable:</p>
<pre><code class="language-php">$this-&gt;container-&gt;getParameter('bankAccount');</code></pre>
<p><strong>Wait! No need to go easy and dirty. There <em>is</em> simpler way.</strong></p>
<p>Since Symfony 3.3 we can use <a href="/blog/2017/05/07/how-to-refactor-to-new-dependency-injection-features-in-symfony-3-3/#4-use-psr-4-based-service-autodiscovery-and-registration">PSR-4 service loading</a> and since <a href="https://symfony.com/blog/new-in-symfony-3-4-local-service-binding">Symfony 3.4/4.0 parameter binding</a>.</p>
<p>How changed previous steps?</p>
<ul>
<li><del>register controller manually</del> → use PSR4 <strong>once for all services</strong></li>
<li><del>pass the parameter to constructor</del> → use binding <strong>once for all services</strong></li>
<li>autowire the rest</li>
</ul>
<pre><code class="language-yaml">services:
    _defaults:
        autowire: true
        bind:
            $bankAccount: '%bankAccount%'

    App\Controller\:
        resource: ..</code></pre>
<p><strong>Now you can add 50 more services using <code>$bankAccount</code> as constructor dependency with no extra edit on config</strong>. Win-win!</p>
<p><br><br></p>
<p>Happy Config Fit &amp; Slimming!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/01/22/how-to-get-parameter-in-symfony-controller-the-clean-way</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/01/22/how-to-get-parameter-in-symfony-controller-the-clean-way#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Is Your CHANGELOG Useful or Just Boring Plain Text? And How to Fix That ]]></title>
                <link>https://tomasvotruba.com/blog/2018/01/15/is-your-changelog-useful-or-just-boring-plain-text-and-how-to-fix-that</link>
                <description><![CDATA[ <p>Do you <a href="https://keepachangelog.com">keep a CHANGELOG</a>? You should! I <a href="https://github.com/symplify/symplify/blob/master/CHANGELOG.md">do</a>, because it's the main story about the open-source package.
<br><br>
And if you do, is it boring plain text or <strong>useful rich markdown</strong>?</p> ]]></description>
                <content:encoded><![CDATA[ <p><br></p>
<p>This post is written in Markdown. Would you read it if it looked like this?</p>
<div class="card">
    <div class="card-body">
        I wrote about monorepo before and - as ShopSyS and Google agrees - it's the best choice for longterm projects, like children or planet projects.
        <br><br>
        Moreover now, when Vitek showed me awesome tool called Tomono, that can merge git history from multiple repositories...
    </div>
</div>
<p>Or this one:</p>
<div class="card">
    <div class="card-body">
I <a href="/blog/2017/01/31/how-monolithic-repository-in-open-source-saved-my-laziness/">wrote about monorepo before</a> and - as <a href="https://blog.shopsys.com/how-to-maintain-multiple-git-repositories-with-ease-61a5e17152e0">ShopSys</a> and <a href="https://cacm.acm.org/magazines/2016/7/204032-why-google-stores-billions-of-lines-of-code-in-a-single-repository/fulltext">Google agrees</a>) - <strong>it's the best choice for longterm projects</strong>, like children or planet projects.
    <br><br>
    Moreover now, when <a href="https://github.com/vitek-rostislav">Vitek</a> showed me awesome tool called <a href="https://github.com/unravelin/tomono">Tomono</a><a>, that can <strong>merge git history from multiple repositories</strong>...
    </a></div>
</div>
<p><br></p>
<h2 id="what-is-sad-about">What is Sad about..</h2>
<h3 id="missing-references">...Missing References?</h3>
<p>Imagine you'll read my post first <em>plain text</em> version. While reading it, you might think:</p>
<ul>
<li>What is this monorepo? Isn't that <em>monolith</em> - an antipattern?</li>
<li>I didn't know Google is using monorepo?</li>
<li>Is that true name or made-up one?</li>
</ul>
<p>You could read answer to all those questions if I'd only provide links - but <strong>you can't, because there are no links</strong>. You'd have to go to comments, ask them, wait for answers... So you'll probably end up closing my blog and never come again.</p>
<h3 id="plain-text-code-changelog-md-code">...Plain Text <code>CHANGELOG.md</code>?</h3>
<p>It takes maintainer <strong>a lot of effort</strong> to <a href="https://keepachangelog.com">keep a changelog</a>, keep it updated, with every version and every new pull-request, refer issues, pull-request, @author references...</p>
<blockquote class="blockquote text-center mt-5 mb-5">
    "Too many cooks spoil the broth."
</blockquote>
<p>No surprise that most <code>CHANGELOG.md</code> files look like this:</p>
<pre><code class="language-markdown">## v3.2.0 - 2018-01-18

### Changed

- #560 Added `PhpdocVarWithoutNameFixer` to `docblock.neon` level, thanks to @carusogabriel
- #578 Use `@doesNotPerformAssertions` in tests, thanks to @carusogabriel</code></pre>
<p>Does your <code>CHANGELOG.md</code> look like this too? Is it just dump of <a href="https://github.com/symplify/symplify/issues?q=is%3Apr+is%3Aclosed">pull-requests</a> combined with <a href="https://github.com/symplify/symplify/releases">releases</a>?</p>
<h2 id="why-do-we-look-to-changelog">Why do we Look to Changelog?</h2>
<p>To find an answer:</p>
<ul>
<li>What has changed in new version?</li>
<li>If it was <code>@deprecated</code>, what is the replacement?</li>
<li><strong>Most often when it broke our code</strong> and we're angry: what are the reasons for this change?</li>
<li>How did it work before?</li>
<li>Was there some issue?</li>
<li>Who is that active person behind all pull-requests for this release?</li>
</ul>
<p>I've asked all these questions when I was investigating bug in packages I used.</p>
<p>Often, release descriptions are not so detailed. In that case it is <strong>really helpful to have comparison to previous version</strong>, e.g. <a href="https://github.com/symplify/symplify/compare/v3.1.0...v3.2.0">3.1 to 3.2</a>.</p>
<p>But all of this requires time. A time that maintainer usually puts to new features or resolving bugs.</p>
<p>When I added <a href="https://github.com/symplify/symplify/blob/master/CHANGELOG.md"><code>CHANGELOG.md</code> to Symplify</a> and moved all notes from <a href="https://github.com/symplify/symplify/releases">Github Releases</a> there, I was in the same situation. Do I create new features or rather play and cuddle with my <code>CHANGELOG.md</code>?</p>
<h2 id="can-t-let-go-automate">Can't let go? Automate!</h2>
<p>I wanted both. Why? Because I was used to Github Released that work like I needed:</p>
<pre><code class="language-markdown">## v3.2.0 - 2018-01-18

### Changed

- [#560](https://github.com/symplify/symplify/pull/560) Added `PhpdocVarWithoutNameFixer` to `docblock.yml` level,
   thanks to [@carusogabriel](https://github.com/carusogabriel)
- [#578](https://github.com/symplify/symplify/pull/578) Use `@doesNotPerformAssertions` in tests,
   thanks to [@carusogabriel](https://github.com/carusogabriel)</code></pre>
<p>I've closed myself to coffee house for 3 hours and I've came up with solution!</p>
<p><strong>A <a href="https://github.com/Symplify/ChangelogLinker">Changelog Linker</a> was born</strong>.</p>
<img src="/assets/images/posts/2018/changelog/links.png" class="img-thumbnail">
<h2 id="3-steps-to-add-links-to-your-code-changelog-md-code">3 Steps To Add Links To Your <code>CHANGELOG.md</code></h2>
<h3 id="1-install">1. Install</h3>
<pre><code class="language-bash">composer require symplify/changelog-linker --dev</code></pre>
<h3 id="2-run-it">2. Run it</h3>
<pre><code class="language-bash">vendor/bin/changelog-linker run</code></pre>
<p>It will complete links to:</p>
<ul>
<li>
<p><strong>PRs and issues</strong></p>
<pre><code class="language-markdown">[#1](https://github.com/symplify/symplify/pull/1) - fix everything</code></pre>
</li>
<li>
<p><strong>Version Diffs</strong></p>
<pre><code class="language-markdown"># [v2.0.0](https://github.com/symplify/symplify/compare/v1.5.0...v2.0.0)</code></pre>
</li>
<li>
<p><strong>Users</strong></p>
<pre><code class="language-markdown">Thanks to [@SpacePossum](https://github.com/SpacePossum)</code></pre>
</li>
</ul>
<h3 id="3-commit-and-push">3. Commit and Push</h3>
<pre><code class="language-bash">git add .
git commit -m "CHANGELOG: add links to PRs, issues, version diffs and user names"
git push origin master</code></pre>
<p>That's it!</p>
<p><br></p>
<p>I'm sorry I didn't follow this rule from <a href="http://phppackagechecklist.com/#1,2,3,4,5,6,7,8,9,10,11,12,13,14">PHP Package Checklist</a> and used Github Releases instead. But <strong>now I have no more excuses</strong>.</p>
<p>I hope you to...</p>
<p><a href="htts://keepachangelog.com"></p>
<img src="/assets/images/posts/2018/changelog/keep-a-changelog.jpg" class="img-thumbnail">
<p></a></p>
<p>Huge thanks to @olivierlacan for keepachangelog.com! It helped me a lot.</p>
<p><em>Oh, sorry...</em></p>
<p><strong>Huge thanks to <a href="https://github.com/olivierlacan">@olivierlacan</a></strong> for <a href="https://keepachangelog.com">keepachangelog.com</a>!</p>
<p><br></p>
<p>Happy lazy linking!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/01/15/is-your-changelog-useful-or-just-boring-plain-text-and-how-to-fix-that</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 15 Jan 2018 00:00:00 +0000</pubDate>
                                    <updated>2018-06-01UTC00:00:000</updated>
                    <atom:updated>Fri, 01 Jun 2018 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Fri, 01 Jun 2018 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/01/15/is-your-changelog-useful-or-just-boring-plain-text-and-how-to-fix-that#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Clean and Decoupled Controllers, Commands and Event Subscribers Once and for All with Delegator Pattern ]]></title>
                <link>https://tomasvotruba.com/blog/2018/01/08/clean-and-decoupled-controllers-commands-and-event-subscribers-once-and-for-all-with-delegator-pattern</link>
                <description><![CDATA[ <p>Do you write your application for <strong>better future sustainability</strong> or just to get paid for it today?
If you're the first one, you care about design patterns. I'm happy to see you!
<br>
<br>
Today I will show you <strong>why and how to use <em>delegator pattern</em></strong> in your application so it makes it to the pension.</p> ]]></description>
                <content:encoded><![CDATA[ <p><br></p>
<blockquote class="blockquote text-center">
    "Every code is trash!"
</blockquote>
<p><br></p>
<p>You'll see. But before we dig into code... what are the reasons to write sustainable code and how it looks like?</p>
<h2 id="why-should-you-care-about-future-sustainability">Why Should You Care About Future Sustainability</h2>
<p>There are 3 levels of developers by the time-frame focus they work on. Every group has it's advantages and disadvantages. You'll soon see which one you fit in.</p>
<h3 id="1-developers-who-strong-code-for-now-strong">1. Developers who <strong>Code for NOW</strong></h3>
<p>This project. Single site for 2018 elections. Microsite for new product release in 2019. Include anything that is hype in socials last year.</p>
<p><strong>If the code would be a trash</strong> (literally!), they'd throw everything to 1 bag or maybe right in the city streets or nature. <strong>Someone
else will handle cleaning up the city</strong> #yolo</p>
<img src="/assets/images/posts/2018/delegator/trash-everywhere.jpg" class="img-thumbnail">
<h3 id="2-developers-who-code-for-next-1-2-years">2. Developers who Code for next 1-2 YEARS</h3>
<p>The project has tests, continuous integration, uses stable packages with 1.0 release. It's startup or a project with profit. The team is fine and slowly growing. It's their first or second project and they try to take good care about it, with experiences they have.</p>
<p>They don't make any mess around the city and <strong>put all trash to 1 trash bin</strong>. Take them out regularly once a week. They're nice to the world. Well, at least at first sight.</p>
<img src="/assets/images/posts/2018/delegator/orbit-junk.jpg" class="img-thumbnail">
<h3 id="3-developer-who-code-for-next-5-10-years-future-sustainability">3. Developer who Code for next 5-10 YEARS - Future Sustainability</h3>
<p>...or at least with that mindset in their minds. The code won't probably work with PHP 9.0, but they do their best to make it as easy as possible to do so.</p>
<p>They have great experience with handful of project described in previous group. They already worked on 5 open-source projects <strong>they need to last as long as possible without as little maintenance as possible</strong>.</p>
<p><strong>To the trash again...</strong></p>
<p>It's like recycling plastic bags, glass bottler and papers.</p>
<p>You put effort to it:</p>
<ul>
<li>create space in your home to keep 3 separated trash bins,</li>
<li>explain everyone to use them and split every product to own bin</li>
<li>and when it's full you take these bags out for 5 minutes walk to their destination.</li>
</ul>
<img src="/assets/images/posts/2018/delegator/manage-it-right.jpg" class="img-thumbnail">
<p><strong>Though you never see the trash again, you believe it's good for your future self and for your children</strong>, to keep planet clean and away from trash lands. Economists would call it <em>positive externality</em>.</p>
<p><br></p>
<p>Now you know <strong>why it's good to separate waste</strong> (= code), let's get to real code.</p>
<h2 id="4-years-in-life-of-new-web-application">4 years in life of New Web Application</h2>
<p>Let's have a project that was born in 2015 and see how it slowly grew. It will eventually use all patterns we described in the beginning - except <em>delegator</em>, which is unfortunate for the investors of this project.</p>
<h3 id="2015-start-with-controllers">2015 - Start with Controllers</h3>
<p>Project start with few controllers that contain most of logic. It's fast and easy to add new controller with new logic.</p>
<p>By the end of the year there are 50 controllers like this:</p>
<pre><code class="language-php">class ProductController extends Controller
{
    public function allAction()
    {
        $allProducts = $this-&gt;getEntityManager()-&gt;getRepository(Product::class)
            -&gt;fetchAll();

        return new TemplateResponse('all.twig', [
            'allProducts' =&gt; $allProducts
        ]);
    }
}</code></pre>
<p>Also, it's in the documentation of the framework, so it must be <a href="https://matthiasnoback.nl/2014/10/unnecessary-contrapositions-in-the-new-symfony-best-practices">the best practise</a>.</p>
<p>Little we know, here starts our <a href="https://blog.codinghorror.com/the-broken-window-theory">Broken Window Theory</a>, the most underestimated effect from social science in software world.</p>
<h3 id="2016-add-few-commands">2016 - Add few Commands</h3>
<p>Application grows and the size needs pre-caching handled by running commands in CRON. So you start using <a href="/blog/2019/08/12/standalone-symfony-console-from-scratch/">Symfony\Console</a>. You get inspired by <code>Controller</code>, because <code>Command</code> looks like it and by the end of year, there are many command like this one:</p>
<pre><code class="language-php">class CacheProductsCommand extends Command
{
    /**
     * @var EntityManager
     */
    private $entityManager;

    public function __construct(EntityManager $entityManager)
    {
        $this-&gt;entityManager = $entityManager;
    }

    public function execute()
    {
        $allProducts = $this-&gt;entityManager-&gt;getRepository(Product::class)
            -&gt;fetchAll();

        // cache them all
    }
}</code></pre>
<h3 id="2017-add-just-few-more-eventsubscribers">2017 - Add just few more EventSubscribers</h3>
<p>It's 2017, AI is on hype and you start thinking about product recommendation feature. You use <a href="/blog/2019/08/05/standalone-symfony-event-dispatcher-from-the-scratch/">EventSubscribers</a> that saves many information about user behavior and return best producs just for him.</p>
<pre><code class="language-php">class RecommendedProductsEventSubscriber implements EventSubscriber
{
    /**
     * @var EntityManager
     */
    private $entityManager;

    public function __construct(EntityManager $entityManager)
    {
        $this-&gt;entityManager = $entityManager;
    }

    public static function subscribe()
    {
        return ['onPageVisit' =&gt; 'setRecommendedProducts'];
    }

    public function setRecommendedProducts(BehaviorPatternEvent $behaviorPatternEvent)
    {
        $productRepository = $this-&gt;entityManager-&gt;getRepository(Product::class);

        $product = $productRepository-&gt;findBestByBehavior($behaviorPatternEvent-&gt;getBehavior());
        $behaviorPatternEvent-&gt;setRecommendedProducts($product;
    }
}</code></pre>
<p>So far so good?</p>
<h3 id="2018-year-of-changes">2018 - Year of Changes</h3>
<blockquote class="blockquote text-center mt-5 mb-5">
    "Change is the only constant."
    <footer class="blockquote-footer">John Candee Dean</footer></blockquote>
<p>New owner with technical skills comes the the play. And he wants to finally use <code>VueJs</code>, the company is now big enough to use Docker as standards and <strong>there are more programmers that know <a href="https://laravel.com/docs/eloquent">Eloquent</a> than <a href="/blog/2017/03/27/why-is-doctrine-dying/">Doctrine</a> in his country</strong>:</p>
<p><em>&quot;Alibaba is catching up and we might lose the position #1 leader on market. Just switch it to Eloquent, so we can hire and on board faster.</em>&quot;</p>
<p>Ups! Your code is coupled to the Doctrine and Symfony pretty hard. You're standing in front of important question: <strong>Do you get extra $ 10 000 to refactor the code?</strong></p>
<p>Posing this question, now we finally understand <a href="https://blog.codinghorror.com/the-broken-window-theory">Broken Window Theory</a>...</p>
<img src="/assets/images/posts/2018/delegator/broken-window.jpg" class="img-thumbnail">
<p>...because we have personal experience with going it the wrong way. Little to late.</p>
<h2 id="prevention-over-experience">Prevention over Experience</h2>
<ul>
<li>What could be done better?</li>
<li>Could you prevent this?</li>
<li><strong>Do you separate your trash or do you wait till your country becomes plastic land?</strong></li>
</ul>
<img src="/assets/images/posts/2018/delegator/plastic-land.jpg" class="img-thumbnail">
<p>No. You think for <strong>the future</strong> with prevention!</p>
<blockquote class="blockquote text-center mt-5 mb-5">
    "Plan like you will live forever, and then live like there is no tomorrow."
    <footer class="blockquote-footer"> Mahatma Gandhi</footer></blockquote>
<p>Same can be applied to your code.</p>
<h3 id="delegator-pattern-to-the-del-rescue-del-prevention">Delegator Pattern to the <del>Rescue</del> Prevention</h3>
<p>This is what we did in <a href="https://www.lekarna.cz">Lekarna.cz</a> - The biggest online drugstore in the Czech Republic. It started on Nette 2.4 and Doctrine 2.5, with <a href="/blog/2017/12/25/composer-local-packages-for-dummies/">monorepo approach</a>.</p>
<p>When a class pattern is marked as <em>delegator</em>, it <strong>can't contain any direct connection to database layer</strong> (Doctrine in this case).</p>
<p>Among most popular delegators belongs:</p>
<ul>
<li>Controller</li>
<li>Command</li>
<li>EventSubscriber</li>
<li>Presenter or Component in <a href="https://nette.org">Nette</a></li>
<li>CommandHandler from <a href="https://ocramius.github.io/ShittyCQRSPresentation">CQRS</a> etc.</li>
</ul>
<p>In Lekarna, these classes can only use own service to access products - <code>ProductRepository</code>:</p>
<pre><code class="language-php">class ProductRepository
{
    public function __construct(EntityManager $entityManager)
    {
        $this-&gt;repository = $entityManager-&gt;getRepository(Product::class);
    }

    public function fetchAll()
    {
        return $this-&gt;repository-&gt;fetchAll();
    }
}</code></pre>
<p>You don't want to check this in code reviews (imagine 5 years doing it), just <a href="/blog/2017/07/17/how-to-write-custom-sniff-for-code-sniffer-3/">write a sniff for that</a> and forget it.</p>
<p>This will remove any database layer reference from all our <code>delegators</code>:</p>
<pre><code class="language-php">class CacheProductsCommand extends Command
{
    /**
     * @var ProductRepository
     */
    private $productRepository;

    public function __construct(ProductRepository $productRepository)
    {
        $this-&gt;productRepository = $productRepository;
    }

    public function execute()
    {
        $allProducts = $productRepository-&gt;fetchAll();

        // cache them all
    }
}</code></pre>
<p>Do you need to switch database layer? Easy!</p>
<pre><code class="language-diff"> class ProductRepository
 {
-     public function __construct(EntityManager $entityManager)
-     {
-         $this-&gt;repository = $entityManager-&gt;getRepository(Product::class);
-     }
+     public function __construct(Eloquent $eloquent)
+     {
+         $this-&gt;repository = $eloquent-&gt;getRepository(Product::class);
+     }

      public function fetchAll()
      {
          return $this-&gt;repository-&gt;fetchAll();
      }
 }</code></pre>
<p><strong>1 day of work instead of hundreds of hours.</strong> That's what delegator pattern is all about.</p>
<h2 id="start-with-best-on-the-knowledge-market">Start with Best on the Knowledge Market</h2>
<p>When you start with the best known approach possible, you'll end-up in well grown project that you'll love to contribute more the older it gets.</p>
<p><strong>Just like with children - invest in them right from the start and it will get back to you</strong>!</p>
<p><br></p>
<p>Happy Children and Project Raising!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/01/08/clean-and-decoupled-controllers-commands-and-event-subscribers-once-and-for-all-with-delegator-pattern</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 08 Jan 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/01/08/clean-and-decoupled-controllers-commands-and-event-subscribers-once-and-for-all-with-delegator-pattern#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ New in Symplify 3: 4 Time-saving Coding Standard Checkers ]]></title>
                <link>https://tomasvotruba.com/blog/2018/01/01/new-in-symplify-3-4-time-saving-coding-standard-checkers</link>
                <description><![CDATA[ <p>Coding Standard in Symplify 3 brings <strong>checkers build from practical use in PHPStorm</strong>. It can do lot of work for you, like add getters, remove trailing spaces, but has still some room for automation and improvement.
<br>
I already wrote about <a href="/blog/2017/12/17/new-in-symplify-3-doc-block-cleaner-fixer/">doc block cleaner fixer</a> and here 4 more checkers, <strong>that saves you from monkey-typing and let you focus on algorithms</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <p>Starting with the simple checkers and moving to those, which save you even hours of manual work.</p>
<h2 id="1-absolutely-require-and-include">1. Absolutely Require and Include</h2>
<p><a href="https://github.com/symplify/symplify/pull/385" class="btn btn-dark btn-sm mb-3 mt-2">
<em class="fab fa-github"></em>
&nbsp;
Check the pull-request
</a></p>
<p>You probably recognize this:</p>
<pre><code class="language-php">require 'vendor/autoload.php';</code></pre>
<p><strong>Why is this bad?</strong> It promotes relative paths by default, supports magic path resolving and can cause errors, because we expects existing file by default. You can easily end-up in ambiguous file paths like:</p>
<pre><code class="language-php">var_dump($relativeFile);
"/var/path/fileName.php"
# or
"/var//path/fileName.php"
# or
"/varpath/fileName.php"</code></pre>
<p>Of course there are cases when using absolute paths is not suitable, like templates in Symfony application, but <strong>when we know the absolute path we should prefer it</strong>:</p>
<pre><code class="language-diff">-require 'vendor/autoload.php';
+require __DIR__.'/vendor/autoload.php';</code></pre>
<p>And that's what this Rector rule does for you:</p>
<pre><code class="language-php">&lt;?php

// rector.php

declare(strict_types=1);

use Rector\CodingStyle\Rector\Include_\FollowRequireByDirRector;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return static function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();

    $services-&gt;set(FollowRequireByDirRector::class);
};</code></pre>
<p><br></p>
<h2 id="2-empty-line-after-code-declare-strict-types-1-code">2. Empty Line after <code>declare(strict_types=1)</code></h2>
<p><a href="https://github.com/symplify/symplify/pull/443" class="btn btn-dark btn-sm mb-3 mt-2">
<em class="fab fa-github"></em>
&nbsp;
Check the pull-request
</a></p>
<p>The next one started as issue <a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer/issues/1793">PHP CS Fixer in January 2016 (if not earlier)</a>. The story <a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer/issues/2062">continues in next issue</a>, but final fixer is not in near sight.</p>
<img src="/assets/images/posts/2018/symplify-3-checkers/long-time.png" class="img-thumbnail">
<p>Why all these issues? Official fixer modifies code like this:</p>
<pre><code class="language-diff">-&lt;?php
+&lt;?php declare(strict_types=1);
-
 namespace Abc;</code></pre>
<p>Which is not what we want.</p>
<p><code>BlankLineAfterStrictTypesFixer</code> fixer was needed so <strong>EasyCodingStandard could refactor open-source packages without any manual work</strong>:</p>
<ul>
<li>see <a href="https://github.com/cpliakas/git-wrapper/pull/137/files">cpliakas/git-wrapper PHP 7 pull-request</a></li>
<li>or <a href="https://github.com/phpDocumentor/ReflectionDocBlock/pull/137/files">phpDocumentor/ReflectionDocBlock PHP 7  pull-request</a></li>
</ul>
<p>When the official fixer is finished, I'd be happy to use it and recommend it. But <strong>right now you can use</strong>:</p>
<pre><code class="language-php">&lt;?php

// ecs.php

declare(strict_types=1);

use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
use Symplify\CodingStandard\Fixer\Strict\BlankLineAfterStrictTypesFixer;

return static function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();

    $services-&gt;set(BlankLineAfterStrictTypesFixer::class);
};</code></pre>
<p>Which helps official fixer to keep the space:</p>
<pre><code class="language-diff">-&lt;?php
+&lt;?php declare(strict_types=1);

 namespace Abc;</code></pre>
<h2 id="3-one-way-to-use-namespace-imports">3. One Way To Use Namespace Imports</h2>
<p>What do you think about this?</p>
<img src="/assets/images/posts/2018/symplify-3-checkers/import-fixer.png" class="img-thumbnail">
<p><em>Import class</em> is great PHPStorm feature. It sometimes does only partial imports, sometimes is unable to resolve conflict of 2 <code>SameClass</code> names and it still requires your time and attention to work.</p>
<p>If you don't care about this, your code can look like this:</p>
<pre><code class="language-php">&lt;?php

namespace SomeNamespace;

final class SomeClass extends \SubNamespace\PartialNamespace\AnotherClass
{
    public function getResult(): \ExternalNamespace\Result
    {
        $someOtherClass = new \SomeNamespace\PartialNamespace\SomeOtherClass;
        // ...
    }
}</code></pre>
<p><strong>If you do care</strong> - which is probably why you're reading this post - you'd prefer code like this:</p>
<pre><code class="language-diff"> &lt;?php

 namespace SomeNamespace;

+use ExternalNamespace\Result;
+use SubNamespace\PartialNamespace\AnotherClass
+use SubNamespace\PartialNamespace\SomeOtherClass;

-final class SomeClass extends \SubNamespace\PartialNamespace\AnotherClass
+final class SomeClass extends AnotherClass
 {
-    public function getResult(): \ExternalNamespace\Result
+    public function getResult(): Result
     {
-        $someOtherClass = new \SomeNamespace\PartialNamespace\SomeOtherClass;
+        $someOtherClass = new SomeOtherClass;
         // ...
     }
 }</code></pre>
<p>To enable this behavior, add one parameter to Rector config:</p>
<pre><code class="language-php">&lt;?php

// rector.php

declare(strict_types=1);

use Rector\CodingStyle\Rector\Include_\FollowRequireByDirRector;
use Rector\Core\Configuration\Option;use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return static function (ContainerConfigurator $containerConfigurator): void {
    $parameters = $containerConfigurator-&gt;parameters();
    $parameters-&gt;set(Option::AUTO_IMPORT_NAMES, true);
};</code></pre>
<p><br></p>
<h3 id="do-you-want-more">Do You Want More?</h3>
<p>There are <strong>over 30 standalone checkers</strong> in Symplify\CodingStandard 3.0 with more added every release.</p>
<p>See <a href="https://github.com/symplify/coding-standard#rules-overview">visual examples in <code>README</code></a> and decide for yourself, which you like and which you don't.</p>
<p>Thanks <a href="https://twitter.com/carusogabriel">@carusogabriel</a> for the <code>diff</code> idea in <code>README</code>. It's brilliant!</p>
<p><br><br></p>
<p>Happy fixing and sniffing!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2018/01/01/new-in-symplify-3-4-time-saving-coding-standard-checkers</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
                                    <updated>2020-08-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Aug 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2018/01/01/new-in-symplify-3-4-time-saving-coding-standard-checkers#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Composer Local Packages for Dummies ]]></title>
                <link>https://tomasvotruba.com/blog/2017/12/25/composer-local-packages-for-dummies</link>
                <description><![CDATA[ <p>This is the simplest way to start using <code>/packages</code> directory in your application, that <strong>leads to cleaner code, maintainable architecture</strong> and is <strong>the best to start testing</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <p>I wrote about <a href="/blog/2017/02/07/how-to-decouple-monolith-like-a-boss-with-composer-local-packages/">pros and cons of local packages before</a>.
After year of using this in <a href="https://github.com/symplify/symplify">practice</a> and <a href="/mentoring-and-lectures">mentorings</a> I polished this approach to even <strong>simpler version that is easy to start with</strong>.</p>
<h3 id="do-you-have">Do You Have?</h3>
<ul>
<li><strong>monolithic code in <code>/app</code></strong></li>
<li><strong>no unit tests</strong></li>
<li>code that is using 3rd party services, like payments, invoice API and coding standards</li>
<li>namespaces</li>
<li>old application you maintain for many years</li>
</ul>
<h3 id="do-you-want-to">Do You Want to?</h3>
<ul>
<li><strong>start testing</strong></li>
<li><strong>have decoupled code</strong></li>
<li>board new programmer with <strong>no explaining</strong></li>
<li>understand how to scale architecture by decreasing code complexity</li>
</ul>
<p><br></p>
<p>There is no need to use Github, <a href="/blog/2017/01/31/how-monolithic-repository-in-open-source-saved-my-laziness/">love open-source</a>, understand <a href="https://leanpub.com/principles-of-package-design">package design</a> or understand <a href="/blog/2020/06/08/drop-robot-loader-and-let-composer-deal-with-autoloading/">composer beyond PSR-4</a>.
No <a href="https://johannespichler.com/developing-composer-packages-locally">symlink issues</a>, no forgotten <code>composer update</code>. <strong>Anyone can start using this!</strong></p>
<div class="text-center">
    <img src="/assets/images/posts/2017/composer-local-packages/composer.png"></div>
<h2 id="4-steps-to-first-dummy-local-package">4 Steps to first Dummy Local Package</h2>
<p>Your application now looks similar to this:</p>
<pre><code class="language-bash">/app
/temp
/vendor
composer.json</code></pre>
<h3 id="1-create-code-packages-code-directory">1. Create <code>Packages</code> directory</h3>
<pre><code class="language-diff">/app
/temp
+/packages
/vendor
composer.json</code></pre>
<h3 id="2-create-first-package">2. Create First Package</h3>
<p>Start with something simple like filesystem or string utils.</p>
<pre><code class="language-diff">/app
/temp
/packages
+   /file-system
+       /src
/vendor
composer.json</code></pre>
<h3 id="3-move-first-class-to-new-package-directory">3. Move first Class to new package directory</h3>
<pre><code class="language-diff">/app
/temp
/packages
    /file-system
        /src
+           FileSystem.php
/vendor
composer.json</code></pre>
<p><br></p>
<p>The best practise is to use your <strong>company or application name</strong> as namespace, e.g. <a href="https://www.entrydo.com"><code>EntryDo</code></a>.
Second part of namespace will be <strong>package name</strong> (<code>file-system</code>) in <strong>CamelCaps format</strong>.</p>
<pre><code class="language-php">namespace EntryDo\FileSystem;

final class FileSystem
{
    public function readFile(string $filePath): string
    {
        // is file or directory?
        // is readable?
        // ...
    }
}</code></pre>
<p><strong>You're awesome! Congratulations</strong>, you've just made your first local packages and you're definitely not a dummy anymore.</p>
<h3 id="4-autoload-with-composer">4. Autoload with Composer</h3>
<p>The class is now decoupled. Now we have to <strong>tell composer where to find it</strong>!</p>
<p>This is your <code>composer.json</code>:</p>
<pre><code class="language-json">{
    "require": {
        "favorite/framework": "^4.0"
    },
    "autoload": {
        "classmap": "app"
    }
}</code></pre>
<p>Maybe your already have PSR-4 structure (great job if you do!), but let's say you maintain an old application.</p>
<p><br></p>
<p>Add our new package:</p>
<pre><code class="language-diff">{
    "require": {
        "favorite/framework": "^4.0"
    },
    "autoload": {
        "classmap": "app",
+       "psr-4": {
+           "EntryDo\FileSystem\": "packages/file-system/src
+       }
    }
}</code></pre>
<p><br></p>
<p>And now the answer to most questions on StackOverflow around this topic- <strong>rebuild the composer autoload file</strong> (<code>/vendor/autoload.php</code>) from CLI:</p>
<pre><code class="language-bash">composer dump
# which is shortcut for:
# composer dump-autoload</code></pre>
<p>That's it. You are ready to go!</p>
<h2 id="5-bonus-add-your-first-test">5. Bonus: Add Your First Test</h2>
<p>Add test for a class was never easier. Create Test file for <code>FileSystem</code> class:</p>
<pre><code class="language-diff">/app
/temp
/packages
    /file-system
        /src
            FileSystem.php
+       /tests
+           FileSystemTest.php
/vendor
composer.json</code></pre>
<p><br></p>
<p>Add <code>\Tests</code> to <code>EntryDo\FileSystem</code> namespace:</p>
<pre><code class="language-php">namespace EntryDo\FileSystem\Tests;

use PHPUnit\Framework\TestCase;

final class FileSystemTest extends TestCase
{
    public function testReadFile(): void
    {
        // test readFile() method
    }
}</code></pre>
<p><br></p>
<p>Update <code>phpunit.xml</code> to cover all tests of local packages:</p>
<pre><code class="language-xml">&lt;phpunit bootstrap="vendor/autoload.php" colors="true"&gt;
   &lt;testsuite&gt;
       &lt;directory&gt;packages/*/tests&lt;/directory&gt;
   &lt;/testsuite&gt;
&lt;/phpunit&gt;</code></pre>
<p><br></p>
<p>And run tests:</p>
<pre><code class="language-bash">vendor/bin/phpunit</code></pre>
<p><br></p>
<p>So this is the easiest way how to use composer local packages in 2018. I hope you enjoy it the same way your application does.</p>
<p><br></p>
<p>Happy packaging!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2017/12/25/composer-local-packages-for-dummies</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2017/12/25/composer-local-packages-for-dummies#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Life 3.0: What Will You Do When AI Takes Over the World ]]></title>
                <link>https://tomasvotruba.com/blog/2017/12/04/life30-what-will-you-do-when-ai-takes-over-the-world</link>
                <description><![CDATA[ <p>Do you remember cell phones? Those that could only call and send SMS. I bought a Nokia phone that could <strong>also play mp3s</strong> when I was 14 years old.
Who would have thought <strong>we could play movies and use internet on those phones</strong> just 10 years later.
<br><br>
Artificial Intelligence is now in same level as mobile phones playing mp3s. Or <strong>maybe it already took over the world without knowing us</strong>, as <em>Life 3.0</em> story unveils...</p> ]]></description>
                <content:encoded><![CDATA[ <p><br></p>
<blockquote class="blockquote text-center">
    "The poorest 50 % of Earth's population had earned only about 4 % of the global income, enabling the Omega-controller companies to win their hearts (and votes) by sharing only a modest fraction of their profits with them."
    <footer class="blockquote-footer">Life 3.0, The Omega Team</footer></blockquote>
<p><br></p>
<h2 id="being-human-in-the-age-of-artificial-intelligence">Being Human in the Age of Artificial Intelligence</h2>
<p>Daniel Pink in one of his <a href="http://www.danpink.com/pinkcast">PinkCast</a> (the best value/time  deal vlogs I know, just ~ 2 minutes) shared a link to book <a href="https://www.amazon.com/Life-3-0-Being-Artificial-Intelligence/dp/1101946598">Life 3.0: Being Human in the Age of Artificial Intelligence</a> by Max Tegmark.</p>
<p>Few more people liked it too, so why not give it a try:</p>
<img src="/assets/images/posts/2017/life30/ai-bestseller.png" class="img-thumbnail">
<p>Until then I only thought about artificial intelligence <strong>from Maths and Psychology point of view</strong>, which is great combination but merely enough to understand the topic properly. This book is mix of fiction, utopia, dystopia, number of researches, <strong>with focus on beneficial intelligence</strong>.</p>
<h3 id="complex-put-simple">Complex put Simple</h3>
<p>Max is skilled in putting complex technical concepts in very simple way.</p>
<p>From DeepMind AI playing Atari games:</p>
<img src="/assets/images/posts/2017/life30/deep-mind-atari.png" class="img-thumbnail">
<p>to Alpha GO beating the greatest human master in 2016:</p>
<img src="/assets/images/posts/2017/life30/alpha-go.png" class="img-thumbnail">
<h2 id="ask-elon-musk">Ask Elon Musk</h2>
<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Worth reading Life 3.0 by <a href="https://twitter.com/tegmark?ref_src=twsrc%5Etfw">@Tegmark</a>. AI will be the best or worst thing ever for humanity, so let’s get it right.<a href="https://t.co/lT0uMH3ujZ">https://t.co/lT0uMH3ujZ</a></p>— Elon Musk (@elonmusk) <a href="https://twitter.com/elonmusk/status/902452162625544193?ref_src=twsrc%5Etfw">August 29, 2017</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>I knew Elon Musk is making cars and rockets, but I didn't knew he supported non-profit <a href="https://futureoflife.org">Future of Life Institute</a> with <a href="https://futureoflife.org/2015/10/12/elon-musk-donates-10m-to-keep-ai-beneficial">$10M</a>.</p>
<p><br></p>
<blockquote class="blockquote text-center">
    "What we really need to do is make sure that life continues into the future. […] It’s best to try to prevent a negative circumstance from occurring than to wait for it to occur and then be reactive."
    <footer class="blockquote-footer">Elon Musk on keeping AI safe and beneficial</footer></blockquote>
<h2 id="what-will-you-do-when-ai-comes">What Will You Do when AI comes?</h2>
<p>The book made me think really hard. I tried to answer questions that never occur relevant to me:</p>
<ul>
<li><strong>How I want to focus my career in world, where human tasks get more and more automated?</strong></li>
<li>How I want to <strong>raise my child to be adaptable</strong> in the future?</li>
</ul>
<p>I love this part of book:</p>
<p>&quot;What career advice <em>should</em> we give to our kids? I'm encouraging mine to go into professions that machines are currently bad at, and therefore seem unlikely to get automated in the near future.</p>
<ul>
<li>Does it require interacting with people and using social intelligence?</li>
<li>Does it involve creativity and coming up with clever solutions?</li>
<li>Does it require working in an unpredictable environment?&quot;</li>
</ul>
<h2 id="what-are-my-takeaways">What are my Takeaways?</h2>
<p>The books states that every field have <strong>parts that can be easily automated and parts that will take some time</strong>.</p>
<img src="/assets/images/posts/2017/life30/job-chart.png" class="img-thumbnail">
<p>And not only in non-IT positions. As a programmer you can:</p>
<ul>
<li><strong>create e-commerce</strong> one after another,</li>
<li>focus on <strong>prediction of nearest next product the customer wants to buy before he knows</strong>.</li>
</ul>
<p><br></p>
<p>I found lot of inspiration and possible blind paths for <a href="https://github.com/rectorphp/rector">RectorPHP</a> project. It's <em>narrow intelligence</em>, that upgrades code for you based on your dependencies (I will write about it soon).</p>
<p>If I should apply the same logic as above, <strong>you can be teacher</strong>:</p>
<ul>
<li>who <strong>explains news and trends in software for last 2 years</strong></li>
<li>or the one who teaches people <strong>how to write a tool, that applies those trends to the code and is usable for next 10 years with minimal work</strong></li>
</ul>
<p><br></p>
<p>I realized how I underestimate the AI and remembered my (dead) Nokia:</p>
<img src="/assets/images/posts/2017/life30/nokia-mp3.jpg">
<h3 id="reading-protip">Reading Protip!</h3>
<p>The 2nd half of the book focuses on future of 100+ years. The main focus for me lies in first part: <strong>where are we now, what could happens soon and how can we prepare</strong>.</p>
<p>So if you read first half, you'll get most of this book. Of course, if you like sci-fi stories of harvesting Saturn into circu-planet colony keep on reading.</p>
<p><br></p>
<p>Happy reading!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2017/12/04/life30-what-will-you-do-when-ai-takes-over-the-world</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 04 Dec 2017 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2017/12/04/life30-what-will-you-do-when-ai-takes-over-the-world#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ United PHP 7.1 Adoption 6 Months Later ]]></title>
                <link>https://tomasvotruba.com/blog/2017/11/27/united-php-71-adoption-6-months-later</link>
                <description><![CDATA[ <p>A year since it's release and 6 months since GoPHP71 initiative.
PHP 7.1 is <strong>the fastest adopted</strong> minor version of PHP already beating PHP 7.0.
<br><br>
How is adoption going in open-source and why it should continue from bleeding-edge projects?</p> ]]></description>
                <content:encoded><![CDATA[ <p><br></p>
<blockquote class="blockquote text-center">
    "United we stand, divided we fall."
    <footer class="blockquote-footer">ancient Greek storyteller Aesop</footer></blockquote>
<p><br></p>
<img src="/assets/images/posts/2017/go-php-71-later/unity.jpg">
<h2 id="how-is-gophp71-org-doing">How is GoPHP71.org Doing?</h2>
<p>I've created a page <a href="https://gophp71.org">GoPHP71.org</a> half year ago, inspired by <a href="http://gophp7.org">GoPHP7.org</a> and by <a href="https://www.garfieldtech.com/blog/go-php-5-go">Go PHP 5</a> - read this one if you care about background values of this movement.</p>
<p>In <a href="/blog/2017/06/05/go-php-71/">release post</a> I've explained <strong>why right to PHP 7.1</strong> and not PHP 7.0, how important is <strong>united community</strong> in this and how this can <strong>bring positive energy to open-source</strong> and as well host providers upgrades.</p>
<p><br></p>
<p>From 2 projects in <em>June 2015</em>:</p>
<img src="/assets/images/posts/2017/go-php-71/first-version.png">
<p>Now there are <strong>11 projects</strong>, including <em>big 3</em> - Symfony, Doctrine and Laravel.</p>
<img src="/assets/images/posts/2017/go-php-71-later/current-version.png">
<p>Is your project missing? <a href="https://github.com/TomasVotruba/gophp71.org/edit/master/_data/projects.yaml">Go and it!</a></p>
<h3 id="prove-beats-promise-packagist-stats">Prove beats Promise - Packagist Stats</h3>
<p>To support &quot;PHP 7.1 is the fastest adopted minor version of PHP&quot; statement, <a href="https://seld.be">Jordi</a> recently released <a href="https://seld.be/notes/php-versions-stats-2017-2-edition">PHP Versions Stats - 2017.2 Edition</a> with very nice result from packagist stats:</p>
<img src="/assets/images/posts/2017/go-php-71-later/composer-bump.png" class="img-thumbnail">
<h2 id="great-job-php-community">Great Job, PHP Community!</h2>
<p>It makes me very happy, that <strong>people from PHP community are able to <a href="/blog/2017/10/30/what-can-you-learn-from-menstruation-and-symfony-releases/">synchronize</a></strong> despite their different opinions on things.
<br></p>
<h3 id="special-thanks-to-doctrine-project">Special Thanks to Doctrine Project</h3>
<p>I really loved this <a href="http://www.doctrine-project.org/2017/07/25/php-7.1-requirement-and-composer.html">Doctrine bump PHP 7.1 announcement</a>. I completely agree with &quot;Why dropping PHP support in a minor version is not a BC break&quot; part. If you think PHP version bump is BC break, you should read it.</p>
<p>I admit <a href="/blog/2017/03/27/why-is-doctrine-dying/">I wasn't nice</a> to Doctrine Project this Spring and <strong>I'm sincerely sorry about that</strong>. I'm trying to <a href="/blog/2017/10/16/how-to-use-repository-with-doctrine-as-service-in-symfony/">influence this better way</a>.</p>
<p>Ever since I <strong>see Doctrine community are doing great</strong> - from <a href="https://github.com/doctrine/doctrine2/pull/5932">removing YAML references</a>, to <a href="https://github.com/doctrine/DoctrineBundle/pull/727">cleaner Symfony support</a>.</p>
<h2 id="but-i-want-to-go-php-7-0">But I want to go PHP 7.0</h2>
<p>Still not convinced about reasons? Check <a href="https://github.com/php-ai/php-ml/issues/148">this issue</a> on <code>php-ai/php-ml</code> library.</p>
<p><a href="https://github.com/php-ai/php-ml/issues/148#issuecomment-346790142">@dmonllao poses question or rather idea</a> there: <em>I want to take is slowly <or another reason> and go only to PHP 7.0</em>.</p>
<p>Let me explain how that could influence PHP ecosystem and slow down productivity of many projects:</p>
<ul>
<li>Imagine that in 6 months all of those 11 projects on gophp71.org will <strong>require PHP 7.1 in their LTS versions</strong>.</li>
<li><em>Moodle</em> (could be any other package, it's just example) decides to go with <strong>PHP 7.0</strong>.</li>
<li>If you work with PHP, there is quite big chance you'll be using at least one of those 11 packages.</li>
<li>Let's say you want to use newest features + LTS, so you <strong>bump your local nad server to PHP 7.1</strong>.</li>
</ul>
<p>All good for now, but then:</p>
<ul>
<li>You need to use <em>Moodle</em> in your project. <strong>Its code contains only PHP 7.0 features</strong>.</li>
<li>Your code naturally <strong>extends or implements 3rd party classes</strong>. You can use PHP 7.1 on most of them - e.g. <code>void</code> and nullable typehints of interfaces.</li>
<li>But then your need to extends <em>Moodle</em>'s code and <strong>you have to be careful and use only PHP 7.0 features</strong>. Features like <code>void</code> or <code>nullable</code> would break it.</li>
</ul>
<h3 id="result-double-measures-amp-dichotomic-coding">Result? Double Measures &amp; Dichotomic Coding</h3>
<ul>
<li>You have to have <strong>2 different coding standards</strong> - one for PHP 7.0 and one for PHP 7.1 with various paths to scan.</li>
<li>If you use static analysis like <a href="/blog/2017/01/28/why-I-switched-scrutinizer-for-phpstan-and-you-should-too/">PHPStan</a>, you have to have 2 configs again to validate code properly.</li>
<li>2 testing approaches etc.</li>
</ul>
<p>And that's <strong>only 1 package with different PHP version</strong>. Imagine there would another package that requires PHP 7.2... or if you combine PHP 7.0 and PHP 7.1 interface in single class.</p>
<h2 id="but-i-don-t-want-to-drop-support-for-php-7-0">But I don't want to Drop Support for PHP 7.0</h2>
<img src="/assets/images/posts/2017/go-php-71-later/old-releases.png" class="img-thumbnail">
<p>I've borrowed this amazing picture from <a href="https://seld.be/notes/php-versions-stats-2016-2-edition">Jordi</a>.</p>
<p>You <strong>can keep support for older PHP version</strong> even if you bump minimal requirement to PHP 7.1, just won't add new features to them.</p>
<h3 id="spread-the-word">Spread the Word</h3>
<p>At the moment only 4 projects on are tagged and it will take some timer before this becomes mainstream. Yet, we can see obvious trend moving to PHP 7.1 as minimal requirement. <strong>Thanks to community and people that are bold enough to ask the question</strong> or <a href="https://github.com/laravel/framework/pull/21995">even sending a PR</a>.</p>
<p><br></p>
<p><strong>If you see some next project bumping to PHP 7.0, think about possible consequences of that decision.</strong></p>
<p><br><br></p>
<p>Happy bumping!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2017/11/27/united-php-71-adoption-6-months-later</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 27 Nov 2017 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2017/11/27/united-php-71-adoption-6-months-later#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Write Interesting Jobs Offers for Programmers ]]></title>
                <link>https://tomasvotruba.com/blog/2017/11/20/how-to-write-interesting-job-offers-for-programmers</link>
                <description><![CDATA[ <p>A few years watching the labor market from a position of PHP programmers from the perspective of companies. With both sides have a good relationship. I think what they need and what is bothering you. <strong>I see that they want each other, just communication is little stuck</strong>.
<br><br>
I gave feedback on Jobs.cz, Skrz.cz and few more ads and this is <strong>summary of tips, which I want to share with every company trying to hire programmer</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="ad-is-an-advertising-article-get-a-copywriter">AD is an Advertising Article - Get a Copywriter</h2>
<p>The entire ad is one long seduction. At the end of it you should get the candidate to bed and satisfy him. So he will come next morning to your company.</p>
<h2 id="del-it-s-not-about-you-del-it-s-about-who-you-look-for"><del>It's not About You</del> - It's About Who You Look For</h2>
<p>Plenty of ads are written more like a self-presentation of the company - what they do, what they are best in and what they accomplished.</p>
<p>But <strong>people actually read because they want something for themselves</strong> - information, money or entertainment. <strong>What the job will be, should be right at the beginning. Give it to them in the first sentence!</strong></p>
<h2 id="be-honest">Be honest</h2>
<p>Write about technology that you really have. Not those which you plan or want, but that you <em>really have</em>. Imagine when somebody who is looking forward to PHP 7 will come to your interview and will find out that it's plan for 2018 - <strong>you've just lost a candidate</strong>.</p>
<p><strong>The text must be honest with and the reader must get what he expects. Only then he or she will trust you and come back to you.</strong></p>
<h2 id="friends-with-benefits">Friends with Benefits</h2>
<p><strong>When you work with someone skilled and popular in the community</strong>, mention him or her. People will follow known friend more likely than <em>bare company</em>.</p>
<h2 id="ask-for-feedback-inside-and-outside">Ask for Feedback - Inside and Outside</h2>
<p><strong>1. Ask people you've already hired</strong></p>
<ul>
<li>&quot;What ultimately led you to us instead of the competitor?&quot;</li>
</ul>
<p><strong>2. Ask somebody outside your company</strong></p>
<ul>
<li>Your employees will naturally be less critical, since you give them money. People from the outside will give you <strong>more honest feedback</strong> and rather say what they need to establish a relationship.</li>
</ul>
<p><strong>3. What 2 things are the best and which 2 could you improve?</strong></p>
<ul>
<li>Write few people from your target group and ask them this. This is a chance to learn how you perceived in the outside.</li>
</ul>
<h2 id="open-source-strip">Open Source Strip</h2>
<p>Show how you do it - really. Evidence beats promise.</p>
<p><strong>Are you doing open-source? Show it!</strong> I know that Jobs, Slevomat, PeckaDesign and ShopSys have packages on GitHub. but just few of them share it in the advertisement.</p>
<p>At least, your potential coworkers will get insight into the code of applications you make.</p>
<p>One example for all: I love <a href="http://www.delejcoumis.cz">delejcoumis.cz</a>. <strong>Its <a href="https://github.com/peckadesign/DelejCoUmis.cz">open-sourced on Github</a></strong> and it allows me:</p>
<ul>
<li>to easily determine the company's skill level</li>
<li>find if I <strong>understand the code</strong></li>
<li>find if I can <strong>learn something</strong></li>
<li>and with <a href="https://github.com/peckadesign/DelejCoUmis.cz/blob/master/composer.json"><code>composer.json</code></a> - see what technology they know and use</li>
</ul>
<p><strong>Open-source is a very underrated hiring tool.</strong></p>
<h2 id="sell-your-differences">Sell your Differences</h2>
<p>That's <strong>why people go to you</strong>. Not because you're making <em>PHP, Symfony and Doctrine e-commerce</em>.</p>
<h3 id="what-is-attractive-difference">What is Attractive difference?</h3>
<ul>
<li>
<p>&quot;<strong>Every month we have a half-day training</strong> - voluntary and optional programmers&quot;</p>
</li>
<li>
<p>I've also heard <strong>&quot;each month we have a half-day training&quot;</strong> . But this is a mandatory and picked by manager - ouch. There is no greater pain than to be in training <em>How be Instagram Star</em>, when I want to learn <em>how to scale with AWS</em>.</p>
</li>
<li>
<p>&quot;<strong>We give each year 10 000 CZK for education</strong> and can themselves choose how to invest&quot;</p>
</li>
<li>
<p>&quot;<strong>Every last Friday of the month we give programmers the option to refactor</strong> any part of the code they want&quot;</p>
</li>
<li>
<p>&quot;<strong>10 % of work time is for you personal projects</strong>&quot;</p>
</li>
</ul>
<p>True stories, bro!</p>
<h2 id="size-and-age-doesn-t-matter">Size and Age Doesn't Matter</h2>
<p>Concepts such as <em>junior</em> and <em>senior</em> make no sense to me. <strong>Why?</strong> Imagine 2 people who are looking for work:</p>
<ul>
<li>
<p>A. Senior may be a <strong>developer with 10 years of experience</strong>, knows the framework A, which he self-taught and does not want to try other, because he thinks it's the best.</p>
</li>
<li>
<p>B. Junior may be a <strong>19 year-old guy</strong>, who didn't write any framework. But he knows about Elastic, Doctrine, Nette and begins to read about Symfony.</p>
</li>
</ul>
<p><strong>Who would you pick?</strong></p>
<p>From reader's point of view - if you write <em>We look for Senior</em> in the ad, which one will write you? People tent to underestimate them selves, moreover programmers.</p>
<img src="/assets/images/posts/2017/job-offers/attitude.jpg" class="img-thumbnail" alt="Attitude for skill">
<p><br></p>
<p>That is my experience collection with PHP job adverts. And what about you?</p>
<p><strong>What got you to your current job?</strong> Throw me a link in the comments.</p>
<p>Happy hiring!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2017/11/20/how-to-write-interesting-job-offers-for-programmers</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2017/11/20/how-to-write-interesting-job-offers-for-programmers#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ 7 Tips You Should Know Before Going To University ]]></title>
                <link>https://tomasvotruba.com/blog/2017/11/13/7-tips-you-should-know-before-going-to-university</link>
                <description><![CDATA[ <p>It's been 4 years since I finished university without having any degree out of it. During those 4 years, I was asked about university by people I could count on the fingers of one hand. And the about the degree? <strong>Not one.</strong>
<br><br>
<strong>I recently talked with one high-school guy and I realized that college is still seen as something sacred, important and mostly from no other than teachers and parents</strong>. I told myself that I'll write down my insights and advice that I would give my 8 years younger self. <strong>If you are 18-19 years're considering what to do next, go ahead</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <p><strong>Disclaimer: these is my personal experience with universities in Brno, Czech Republic between 2008 and 2013. It can differ for your country, your city, your year spend on collage, your field etc. Please consider that while reading. Well, if you are already on university. The main goal of this post to start discussion and challenge you and your personal experiences.</strong></p>
<h2 id="1-ask-someone-who-didn-t-go-to-college">1. Ask Someone Who Didn't Go to College</h2>
<p>I often received information from parents or from high-school teachers. <strong>It's like asking a Christian priest about religion</strong>. He will probably know a lot about Christianity, but he won't mention Buddhism or Islam in much depth.</p>
<p>This is called <a href="https://en.wikipedia.org/wiki/Confirmation_bias">Confirmation Bias</a> - <strong>people tend to take the information that supports their own point of view</strong> over those which would confront them. Watch out for him :)</p>
<h2 id="2-find-experienced-people-in-the-field-you-enjoy">2. Find Experienced People in the Field You Enjoy</h2>
<p>I didn't do this because I did not know anybody like that. Today I would go to Facebook and look for a &quot;psychology, php programming&quot; and invited the top 3 results for coffee.</p>
<p><strong>Why?</strong> These people can share real experience, with university, with job - they're like my 5 years older self I could ask for my path instead of having to walk it myself. This could save me 1-2 years of blind shooting.</p>
<h3 id="where-to-find-such-people">Where to find such people?</h3>
<p>There are cheap ways to find such people (in Czech Republic):</p>
<ul>
<li><a href="https://www.naucmese.cz">Naučmese</a> - courses from hundreds different people, who will gladly tell you about their experiences - I met a many interesting people here</li>
<li><strong>Facebook Groups</strong> - anything you like, it's there: media, programmers, marketers, copywriters, business, ppc...</li>
<li><a href="https://eventigo.cz">Eventigo</a> - with similar focus groups as those above, Eventigo sends you weekly newsletter about <strong>free meetups and events</strong> you can visit and meet real people with same passions (or ideas)</li>
</ul>
<h2 id="3-the-university-can-be-incubator">3. The University can be Incubator</h2>
<p>Without too much trouble, you can get <strong>3 years time</strong> to explore the World and yourself. Rent and food is super cheap (like 4x times less than my current one), parent might help you with financing or you can find part-time - as student are very favorite labour force.</p>
<p>Don't wait it out, <strong>take advantage of it</strong>:</p>
<ul>
<li>Experiment with different activities in and outside university</li>
<li>Take each semester <strong>1 course from another field (faculty)</strong> - you don't even have to finish them, just go and see</li>
<li><strong>Taste the diversity</strong> of habits that will bring <strong>peers from other cities or country</strong></li>
<li><strong>Take a risk, failure will never be cheaper</strong> - with a girlfriend, wife, business, contract, full-time work, child or mortgage this all will be very complicated</li>
</ul>
<p>Fortunately, I got this idea already in high-school. Where I risked the most? <strong>I started to say more money for my work than peers</strong>. I risked unemployment and I was terribly scared that I would be rejected. If I had a monthly cost that I'd have pay (like now), I wouldn't dare.</p>
<p>As a result, I learned that <strong>the price is only contract</strong>. It's not about skills, not about work, not about experience, not about, not about contacts, not about age, not about degree. Well it is, but much less than what you really agree upon.</p>
<p>When we agree on 4 € per hour, it will be 4 €. When we arrange 40 € per hour, it will be 40 €.</p>
<h3 id="it-will-be-over-soon">It Will Be Over Soon</h3>
<p>You will experience a lot of changes in freshman (first) year which you will need your time and effort.
But remember - you have 3 years, they will end and so will this nice-and-easy period. <strong>Even if you're having a great time, try to do something extra</strong>.</p>
<h2 id="4-treat-school-as-an-option-not-as-salvation">4. Treat School as an Option, not as Salvation</h2>
<p>A lot of my peers devoted <strong>90 % of their energy to school</strong> and they didn't have any side interests.</p>
<p>It's like a work:</p>
<img src="/assets/images/posts/2017/university/procrastination.png" class="img-thumbnail">
<p>This is followed by...</p>
<h2 id="5-grades-and-a-href-https-en-wikipedia-org-wiki-pareto-principle-pareto-80-20-principle-a">5. Grades and <a href="https://en.wikipedia.org/wiki/Pareto_principle">Pareto 80/20 Principle</a></h2>
<p>This took me 1,5 year to find out. So simple, yet to easy to miss.</p>
<ul>
<li>to <strong>pass an exam</strong>, it takes <strong>20 %</strong> of work</li>
<li>to pass an exam with <strong>A</strong>, it takes <strong>80 %</strong> of work</li>
</ul>
<p>The grade has nothing to do with intelligence, social status and skills. It's just <strong>a number on a test</strong>. That's it.</p>
<p>Same is for IQ. <strong>IQ only indicates your ability to achieve high scores on IQ tests</strong>. Nothing more. Trust me, I've studied on <a href="http://psych.fss.muni.cz">Faculty of Psychology</a>.</p>
<p><strong>The mark is an indicator ability to succeed in this test.</strong> Consider what is <strong>important to you</strong> and if you want to invest those 60 % to:</p>
<ul>
<li><em>raising letters and numbers in a database</em> which will vanish in history when you leave academic land</li>
<li>or in the <em>self-development</em> that you can build upon for the rest of your life</li>
</ul>
<h2 id="6-most-college-teachers-are-not-practitioners">6. Most College Teachers are not Practitioners</h2>
<p>This is my huge regret. Teachers teach at the school. People who stay at the school since their student years. They often have <strong>little experience in the art they teach</strong>. How it looks?</p>
<ul>
<li>The computer science <strong>was not taught by architect</strong>, who designs real processors or programs.</li>
<li>The human psyche <strong>was not taught by therapist</strong> with 10 years' experience, who has helped hundreds of people.</li>
</ul>
<p>But the professor who writes researches, marks exams and its main practice is lecturing and conducting seminars.</p>
<p>Could you imagine a world where this works?</p>
<h2 id="7-know-how-lag">7. Know-How Lag</h2>
<p>The same way people social skills are lagging behind technical evolution, universities are lagging behind knowledge of present day.</p>
<p>I expected to learn hot news from the field. But I <strong>received more education in the history</strong>.</p>
<p>In my times, web technologies were forbidden topic. &quot;It does not matter that PHP runs most of Internet, you will learn the electrical circuitry and programming processors.&quot;</p>
<p>This <em>know-how-lag</em> is even greater than on primary and secondary school. To find news, I had to rely on the Internet or my older friends.</p>
<p><br></p>
<h3 id="where-are-you">Where are you?</h3>
<p>Are you in high school? Do you think about going to university? Or do you already work?</p>
<p>Which point do find most useful? What would your advice be?</p>
<p>Let me know in the comments.</p>
<p><br></p>
<p>Happy learning!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2017/11/13/7-tips-you-should-know-before-going-to-university</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 13 Nov 2017 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2017/11/13/7-tips-you-should-know-before-going-to-university#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to change PHP code with Abstract Syntax Tree ]]></title>
                <link>https://tomasvotruba.com/blog/2017/11/06/how-to-change-php-code-with-abstract-syntax-tree</link>
                <description><![CDATA[ <p>Today we can do amazing things with PHP. Thanks to AST and <a href="https://github.com/nikic/PHP-Parser">nikic/php-parser</a> we can create very <strong>narrow artificial intelligence, which can work for us</strong>.
<br><br>
Let's create first its synapse!</p> ]]></description>
                <content:encoded><![CDATA[ <p>We need to make clear what are we talking about right at the beginning. When we say &quot;PHP AST&quot;, you can talk about 2 things:</p>
<h3 id="1-php-ast">1. php-ast</h3>
<p>This is native extension which exports the AST internally used by PHP 7.0+. It allows <strong>read-only</strong> and is very fast, since it's native C extension. Internal AST was added to PHP 7.0 by skill-full Nikita Popov in <a href="https://wiki.php.net/rfc/abstract_syntax_tree">this RFC</a>. You can find it on GitHub under <a href="https://github.com/nikic/php-ast">nikic/php-ast</a>.</p>
<h3 id="2-php-ast">2. PHP AST</h3>
<p>This is AST of PHP in Object PHP. It will take your PHP code, turn into PHP object with autocomplete in IDE and <strong>allows you to modify code</strong>. You can find it on GitHub under <a href="https://github.com/nikic/PHP-Parser"><code>nikic/PHP-Parser</code></a>.</p>
<p>Nikita explains <a href="https://github.com/nikic/php-ast#differences-to-php-parser">differences between those 2 in more detailed technical way</a>. Personally I love <a href="https://github.com/nikic/PHP-Parser/blob/master/doc/0_Introduction.markdown#what-is-this-for">this human reason</a> the most:</p>
<p><br></p>
<blockquote class="blockquote">
    "Why would I want to have a PHP parser written in PHP? Well, PHP might not be a language especially suited for fast parsing, but processing the AST is much easier in PHP than it would be in other, faster languages like C. Furthermore the people most probably wanting to do programmatic PHP code analysis are incidentally PHP developers, not C developers."
    <footer class="blockquote-footer text-right">Nikita Popov</footer></blockquote>
<p><br></p>
<p>Which one would you pick? If you're <strong>lazy like me and hate reading code and writing code</strong> over and over again, the 2nd one.</p>
<h2 id="what-work-can-code-nikic-php-parser-code-do-for-us">What work can <code>nikic/PHP-Parser</code> do for us?</h2>
<p>Saying that, <strong>we skip the read-feature</strong> of this package - it's used by <a href="https://github.com/phpstan/phpstan">PHPStan</a> or <a href="https://github.com/Roave/BetterReflection">BetterReflection</a> - and <strong>move right to the writing-feature</strong>. Btw, back in 2012, even <a href="https://github.com/nikic/PHP-Parser/issues/41">Fabien wanted to use it in PHP CS Fixer</a>, but it wasn't ready yet.</p>
<h3 id="when-we-say-em-modify-em-and-em-ast-em-together-what-can-you-brainstorm">When we say <em>modify</em> and <em>AST</em> together, what can you brainstorm?</h3>
<ul>
<li>change method name</li>
<li>change class name</li>
<li>rename property</li>
<li>change property to method call</li>
<li>move method from one class to another</li>
<li>split class to multiple ones</li>
<li>refactor <code>$this-&gt;get('name')</code> to constructor injection in Symfony App</li>
<li>upgrade App from Symfony 3.0 to 4.0</li>
<li>refactor Laravel App to Symfony App</li>
<li>...</li>
</ul>
<p>It can do many things for you, depends on how much work you put in it. Today we will try to <strong>change method name</strong>.</p>
<h2 id="4-steps-to-changing-a-name">4 Steps to Changing a name</h2>
<h3 id="1-parse-code-to-nodes">1. Parse code to Nodes</h3>
<pre><code class="language-bash">composer require nikic/php-parser</code></pre>
<p>Create parser and parse the file:</p>
<pre><code class="language-php">use PhpParser\Parser;
use PhpParser\ParserFactory;

$parser = (new ParserFactory)-&gt;create(ParserFactory::PREFER_PHP7); # or PREFER_PHP5, if your code is older
$nodes = $parser-&gt;parse(file_get_contents(__DIR__ . '/SomeClass.php'));</code></pre>
<h3 id="2-find-method-node">2. Find Method Node</h3>
<p>The best way to work with Nodes is to <strong>traverse them with <a href="https://github.com/nikic/PHP-Parser/blob/master/lib/PhpParser/NodeTraverser.php"><code>PhpParser\NodeTraverser</code></a></strong>:</p>
<pre><code class="language-php">$nodeTraverser = new PhpParser\NodeTraverser;
$traversedNodes = $nodeTraverser-&gt;traverse($nodes);</code></pre>
<p>Now we traversed all nodes, but nothing actually happened. Do you think we forgot to invite somebody in?</p>
<p>Yes, <strong>we need <a href="https://github.com/nikic/PHP-Parser/blob/master/lib/PhpParser/NodeVisitor.php"><code>PhpParser\NodeVisitor</code></a></strong> - an interface with 4 methods. We can either implement all 4 of them, or use <a href="https://github.com/nikic/PHP-Parser/blob/master/lib/PhpParser/NodeVisitorAbstract.php"><code>PhpParser\NodeVisitorAbstract</code></a> to save some work:</p>
<pre><code class="language-php">use PhpParser\NodeVisitorAbstract;

final class ChangeMethodNameNodeVisitor extends NodeVisitorAbstract
{
}</code></pre>
<p>We need to find a <code>ClassMethod</code> node. I know that, because I use this package often, <strong>but you can <a href="https://github.com/nikic/PHP-Parser/tree/master/lib/PhpParser/Node">find all nodes here</a></strong>. To do that, we'll use <code>enterNode()</code> method:</p>
<pre><code class="language-php">use PhpParser\Node;
use PhpParser\NodeVisitorAbstract;
use PhpParser\Node\Stmt\ClassMethod;

final class ChangeMethodNameNodeVisitor extends NodeVisitorAbstract
{
    public function enterNode(Node $node)
    {
        if (! $node instanceof ClassMethod) {
            return false;
        }

        // so we got it, what now?
    }
}</code></pre>
<h3 id="3-change-method-name">3. Change Method Name</h3>
<p>No we find it's name and change it!</p>
<pre><code class="language-php">use PhpParser\Node;
use PhpParser\Node\Name;
use PhpParser\Node\Stmt\ClassMethod;
use PhpParser\NodeVisitorAbstract;

final class ChangeMethodNameNodeVisitor extends NodeVisitorAbstract
{
    public function enterNode(Node $node)
    {
        if (! $node instanceof ClassMethod) {
            return false;
        }

        $node-&gt;name = new Name('newName');

        // return node to tell parser to modify it
        return $node;
    }
}</code></pre>
<p>To work with <strong>class names, interface names, method names</strong> etc., we need to <strong>use <code>PhpParser\Node\Name</code></strong>.</p>
<p>Oh, I almost forgot, we need to actually <strong>invite visitor to the <code>NodeTraverser</code></strong> like this:</p>
<pre><code class="language-php">$nodeTraverser = new PhpParser\NodeTraverser;
$traversedNodes-&gt;addVisitor(new ChangeMethodNameNodeVisitor);
$traversedNodes = $nodeTraverser-&gt;traverse($nodes);</code></pre>
<h3 id="4-save-to-file">4. Save to File</h3>
<p>Last step is saving the file (<a href="https://github.com/nikic/PHP-Parser/blob/master/doc/component/Pretty_printing.markdown">see docs</a>). We have 2 options here:</p>
<p><br></p>
<p><strong>A. Dumb Saving</strong></p>
<pre><code class="language-php">$prettyPrinter = new PhpParser\PrettyPrinter\Standard;
$newCode = $prettyPrinter-&gt;prettyPrintFile($traversedNodes);

file_put_contents(__DIR__ . '/SomeClass.php', $newCode);</code></pre>
<p>But this will actually <strong>removes spaces and comments</strong>. How to make it right?</p>
<p><br></p>
<p><strong>B. Format-Preserving Printer</strong></p>
<p>It requires more steps, but you will have output much more under control.</p>
<p>Without our code, it would look like this:</p>
<pre><code class="language-php">use PhpParser\Lexer\Emulative;
use PhpParser\NodeTraverser;
use PhpParser\NodeVisitor;
use PhpParser\NodeVisitor\CloningVisitor;
use PhpParser\Parser\Php7;
use PhpParser\PrettyPrinter\Standard;

$lexer = new Emulative([
    'usedAttributes' =&gt; [
        'comments',
        'startLine', 'endLine',
        'startTokenPos', 'endTokenPos',
    ],
]);

$parser = new Php7($lexer);
$traverser = new NodeTraverser;
$traverser-&gt;addVisitor(new CloningVisitor);

$oldStmts = $parser-&gt;parse($code);
$oldTokens = $lexer-&gt;getTokens();

$newStmts = $traverser-&gt;traverse($oldStmts);

// our code start

$nodeTraverser = new NodeTraverser;
$nodeTraverser-&gt;addVisitor($nodeVisitor);

$newStmts = $traversedNodes = $nodeTraverser-&gt;traverse($newStmts);

// our code end

$newCode = (new Standard)-&gt;printFormatPreserving($newStmts, $oldStmts, $oldTokens);</code></pre>
<p>Congrats, now you've successfully renamed method to <code>newName</code>!</p>
<h2 id="advanced-changes-with-rector">Advanced Changes? With Rector!</h2>
<p>Do you want to see more advanced operations, like those we <a href="#when-we-say-em-modify-em-and-em-ast-em-together-what-can-you-brainstorm">brainstormed in the beginning</a>? Look at package I'm working on which should <strong>automate application upgrades</strong> - <strong><a href="https://github.com/RectorPHP/Rector">RectorPHP</a></strong>.</p>
<p><br></p>
<h3 id="this-post-is-tested">This post is Tested</h3>
<p>This is the first <a href="/blog/2019/09/16/why-software-articles-must-be-ci-tested/">tested post</a> I've added to my blog.
It means <strong>it will be updated as new versions of code used here will appear</strong> → <em>LTS post</em> that will work with newer <code>nikic/php-parser</code> versions.</p>
<p>Do you want to see those tests? Just click <em>Tested</em> badge in the top.</p>
<p><br></p>
<p>Let me know in the comments, what would you like to read about AST and its Traversing and Modification. I might inspire by your ideas.</p>
<p>Happy traversing!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2017/11/06/how-to-change-php-code-with-abstract-syntax-tree</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 06 Nov 2017 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2017/11/06/how-to-change-php-code-with-abstract-syntax-tree#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ What can You Learn from Menstruation and Symfony Releases ]]></title>
                <link>https://tomasvotruba.com/blog/2017/10/30/what-can-you-learn-from-menstruation-and-symfony-releases</link>
                <description><![CDATA[ <p>I <a href="/blog/2017/01/31/how-monolithic-repository-in-open-source-saved-my-laziness/">wrote about monorepo and how it turned me into lazy programmer</a> before.
<br><br>
As monorepo is use <a href="https://blog.shopsys.com/how-to-maintain-multiple-git-repositories-with-ease-61a5e17152e0">more and more</a>, we should look at it again.
Today from a bit atypical point of view: <strong>combined with bit of blood and sunshine</strong>.
<br><br>
Are you ready?</p> ]]></description>
                <content:encoded><![CDATA[ <p><em>Disclaimer: this post has no intention to put menstruation into any bad light. Exactly the opposite - I admire women and love to learn from them.</em></p>
<h2 id="del-technical-del-natural-releases"><del>Technical</del> Natural Releases</h2>
<p>We will look on release management. Non from traditional technical point of view that is already described in <a href="http://semver.org">semantic versioning</a>, <a href="https://symfony.com/doc/current/contributing/code/bc.html">Symfony BC Promise</a> etc., but rather from view of <em>nature</em>.</p>
<p><strong>Why?</strong> When I'm stuck with complicated architectural problem and can't figure it out, I take a break and <strong>go for a walk</strong>. <strong>Just observing world around me</strong>, absorbing inspiration without expectations - <em>serendipity</em>.</p>
<p>To be honest, <strong>many technologies we use originated from the nature</strong>. Processor and hard drives from brain, camera lenses from eyes and design pattern from pattern of nature. What else are falling leaves of tree in autumn? An <strong>event subscriber</strong>.</p>
<h3 id="menstruation-cycle-as-inspiration">Menstruation Cycle as Inspiration</h3>
<img src="/assets/images/posts/2017/menstruation/periods.jpg" class="img-thumbnail">
<p>When we look at our main ability to survive - to reproduce ourselves, we see it's very easy to follow. Menstruation comes in cycles of ~28 days. All 4 parts of period have special meaning for the body of woman and her ability to get pregnant. We <strong>know when it happens, how long it takes and when it ends</strong> (roughly).</p>
<p>Now the interesting part: <em>can you imagine software having release cycles in 28 days?</em></p>
<p>Just keep reading.</p>
<h3 id="four-seasons-cycle">Four Seasons Cycle</h3>
<img src="/assets/images/posts/2017/menstruation/seasons.jpg" class="img-thumbnail">
<p>A bit longer periodical system in nature that works for some time now. Again, each of 4 parts of this cycle has its meaning:</p>
<ul>
<li><em>Spring</em> - growing and getting stronger</li>
<li><em>Summer</em> - reaching the peak and making seeds</li>
<li><em>Autumn</em> - preparing for rest, cleaning up</li>
<li><em>Winter</em> - peaceful time of sleep and retrospective</li>
</ul>
<p>Every part takes 3 months and restarts every 12 month. <strong>You just know when winter comes</strong>.</p>
<p>Now back to the interesting part: <em>could you imagine having release plan synced with the year period?</em></p>
<p><br></p>
<p>Also, did you know women that spend lot of time together <strong>tend to sync their menstruation cycle with each other</strong>? We will get back to the later software-wise.</p>
<h2 id="what-is-basic-stone-for-evolution">What is Basic Stone for Evolution?</h2>
<p>When we look at those patterns of nature, they have one important sign in common. A sign that we can see more and more in software development - <strong>predictability</strong>.</p>
<p>You <strong>know</strong> when the winter comes or when <strong>your spouse needs more attention and care</strong> when her period starts. You can plan, you can prepare and you can learn this by heart. As a result, <strong>you can focus on more dynamic things that are not to predictable</strong> - like your emotions, ideas or <strong>priorities on development of your project</strong>.</p>
<h3 id="symfony-cycle-meets-nature-cycle">Symfony Cycle meets Nature Cycle</h3>
<img src="/assets/images/posts/2017/menstruation/symfony.jpg" class="img-thumbnail">
<p>I first realized this at Fabien's talk about Symfony new release cycle on <a href="https://pariscon2015.symfony.com">SymfonyCon Paris 2015</a>:</p>
<ul>
<li><strong>Major versions every 2 years, minor every 6 months.</strong></li>
</ul>
<p>So simple yet so amazing. I don't think about &quot;when will the new Symfony come?&quot; any more.</p>
<h3 id="what-about-php">What about PHP?</h3>
<img src="/assets/images/posts/2017/menstruation/php.png" class="img-thumbnail">
<p>I recall wondering when PHP 5.5, 5.6 or 7.0 will be out. No more thanks to <strong><a href="https://php.net/supported-versions.php">yearly period beginning of December</a></strong> since PHP 7.0.</p>
<h3 id="menstruation-synchronization">Menstruation Synchronization</h3>
<p>As I wrote earlier, women that spend lot of time together tend to sync their menstruation cycle with each other. Have you noticed that <strong>Symfony matches PHP cycle every 2 years</strong>? Coincidence? I&nbsp;don't think so.</p>
<img src="/assets/images/posts/2017/menstruation/together.png" class="img-thumbnail">
<p>I think they're doing <strong>the right thing</strong> right.</p>
<h2 id="why-we-should-menstruate-together">Why We Should Menstruate Together?</h2>
<p>We're getting back to software releases and monorepo. (If you see term <em>monorepo</em> first time, read <a href="http://danluu.com/monorepo">this legendary post by <em>danluu</em></a>).</p>
<p>Some people say that big disadvantage of monorepo is that <strong>they have to tag their packages all together</strong> (like Symfony) even if nothing changed in any of them.</p>
<p>I see it as <strong>advantage</strong>, because that systematically leads to release cycle and open possibility to synchronization with other projects, like PHP + Symfony.</p>
<h3 id="see-for-yourself">See for Yourself</h3>
<p>Which of these 3 applications would you pick to maintain and upgrade based on their <code>composer.json</code>?</p>
<p><br></p>
<p><strong>A</strong> with <em>per-package</em> versioning:</p>
<pre><code class="language-javascript">{
    "require": {
        "symfony/http-foundation": "3.3",
        "symfony/console": "3.1",
        "symfony/dependency-injection": "2.8",
        "symfony/event-dispatcher": "3.2",
        "doctrine/orm": "2.5",
        "doctrine/dbal": "2.3",
        "doctrine/annotations": "1.7",
        "nette/utils": "2.3",
        "nette/finder": "3.0"
    }
}</code></pre>
<p><br></p>
<p>or <strong>B</strong> with <a href="https://getcomposer.org/doc/04-schema.md#name"><em>per-vendor-sync</em></a></p>
<pre><code class="language-javascript">{
    "require": {
        "symfony/http-foundation": "3.3",
        "symfony/console": "3.3",
        "symfony/dependency-injection": "3.3",
        "symfony/event-dispatcher": "3.3",
        "doctrine/orm": "2.5",
        "doctrine/dbal": "2.5",
        "doctrine/annotations": "2.5",
        "nette/utils": "3.0",
        "nette/finder": "3.0"
    }
}</code></pre>
<p><br></p>
<p>or <strong>C</strong> that looks like sci-fi:</p>
<pre><code class="language-javascript">{
    "require": {
        "symfony/http-foundation": "3.3",
        "symfony/console": "3.3",
        "symfony/dependency-injection": "3.3",
        "symfony/event-dispatcher": "3.3",
        "doctrine/orm": "3.3",
        "doctrine/dbal": "3.3",
        "doctrine/annotations": "3.3",
        "nette/utils": "3.3",
        "nette/finder": "3.3"
    }
}</code></pre>
<p><br></p>
<h3 id="advantages-of-synced-vendor-project-em-b-em">Advantages of Synced Vendor - project <em>B</em></h3>
<p>Single version for every <code>symfony/*</code> package gives me so much freedom:</p>
<ul>
<li>to update it, I just change 1 version and run <code>composer update</code></li>
<li>they work the best together - I don't have to check if <code>symfony/console</code> 3.3 is or isn't compatible with <code>event-dispatcher</code> 4.0</li>
<li>and <strong>I know when</strong> I can upgrade my application - <strong>the first week in december every 2 years</strong></li>
</ul>
<h3 id="disadvantage-of-per-package-versioning-project-em-a-em">Disadvantage of Per Package Versioning - project <em>A</em></h3>
<p>And what if every package has it's own destiny?</p>
<ul>
<li><strong>I'm stressed when</strong> any of my 20 <code>symfony/*</code> dependencies changes</li>
<li>I'm afraid that I will have to Google on Github, what version depend on which</li>
<li><strong>I can't plan any upgrades</strong>, because nobody knows the future</li>
</ul>
<h2 id="call-out-to-package-maintainers">Call Out to Package Maintainers</h2>
<p>All this is not related just to Symfony, Doctrine, Nette or any <a href="https://gophp71.org">other big PHP players</a> like Zend, Laravel, CakePHP or Yii.</p>
<p><strong>Every package, every dependency that has own versioning system means increased work PHP developers</strong>. That's stands if you agree with cycles or not. <strong>Version C</strong> being the easiest to upgrade and version <strong>A</strong> being the most difficult and also the most expensive.</p>
<p><strong>Do you want to add extra work</strong> to developer's back to study your vendor release system?</p>
<h3 id="waiting-for-tagging">Waiting for Tagging</h3>
<p>On the other hand a <em>package user</em>, I bet you recall at least one package you <strong>longed to be tagged, but were frustrated not knowing when</strong>. It's quite common that first 3 versions are tagged in within 1 year, but then followed by 1+ year long pause.</p>
<h2 id="syncing-with-symfony-quot-menstruation-quot-cycle">Syncing with Symfony &quot;menstruation&quot; cycle</h2>
<p>I like this synchronization, predictability, stability and maturation in our PHP ecosystem. That's why I'm trying to <strong>synchronize with Symfony release cycles</strong>. As from huge to small, as from seasons of year to menstruation, as from PHP to Symfony,</p>
<p>I bet you didn't notice, but with <a href="https://github.com/Symplify">Symplify</a> I try to <strong>release major version to minor of Symfony</strong>. Version 2.0 was released on <a href="https://github.com/symplify/symplify/releases/tag/v2.0.0">July 6th 2017</a>, right after <a href="https://symfony.com/roadmap?version=3.3#checker">Symfony 3.3 release</a> in May.</p>
<p>Being predictable with BC breaks, support for older version and consistent with adding new version.</p>
<h3 id="no-force-just-inspiration">No Force, Just Inspiration</h3>
<p>Do you maintain a package? What approach do you have on predictability of releases and why? Please, let me know in comments. I always love to hear new ideas.</p>
<p><br></p>
<p>Happy syncing!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2017/10/30/what-can-you-learn-from-menstruation-and-symfony-releases</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 30 Oct 2017 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2017/10/30/what-can-you-learn-from-menstruation-and-symfony-releases#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ IMbox Zero ]]></title>
                <link>https://tomasvotruba.com/blog/2017/10/23/imbox-zero</link>
                <description><![CDATA[ <p>You have probably heard about Inbox Zero. <a href="https://zenhabits.net/zen-to-done-ztd-the-ultimate-simple-productivity-system">ZTD</a> technique, <strong>to keep your email inbox clean and your brain well rested</strong>.
<br><br>
Let's take it a step further into 2017 - <strong>to instant messaging</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <p>My huge inspiration <a href="https://zenhabits.net">Leo Babauta</a> has <a href="https://zenhabits.net/email-zen-clear-out-your-inbox">popularized</a> Inbox Zero <a href="https://zenhabits.net/email-sanity">concept</a> of <strong>having 0 emails after every visit of your inbox</strong>.</p>
<p>All emails are resolved, postponed (will return in 5 days) or archived:</p>
<img src="/assets/images/posts/2017/imbox-zero/inbox.png" class="img-thumbnail">
<p><strong>The less noise you let to your brain, the better and <a href="/blog/2017/09/25/3-non-it-books-that-help-you-to-become-better-programmer/#deep-work-by-cal-newport">deeper your can focus</a> on single task</strong>.</p>
<p><br></p>
<p>The state you try to avoid is called <em>cognitive overflow</em>:</p>
<img src="/assets/images/posts/2017/imbox-zero/full-inbox.jpg" class="img-thumbnail">
<p>This applies to email.</p>
<h2 id="what-is-zero-im-box-then">What is Zero IM-box then?</h2>
<p>Ever since smartphones went viral, it is common to have <strong>7 SMS on single display. 1 new, 6 already resolved</strong>.
That would be ok, if you're used to full inbox, where your brain is programmed to filter the noise. <strong>But not if you're appling inbox zero method</strong>.</p>
<p>That is my case too and <strong>I was tired of having 2 contradictive approaches</strong> in my brain.</p>
<p><br></p>
<p><strong>So I've tried to archive all messages.</strong></p>
<img src="/assets/images/posts/2017/imbox-zero/sms.png" class="img-thumbnail col-md-4">
<p>And it works like a charm. My ability to response sms rise and blood pressure from switching visual modes decreases :)</p>
<h2 id="give-your-brain-a-comfort-spa">Give Your Brain a Comfort Spa</h2>
<p>Now it's much easier for me to:</p>
<ul>
<li><strong>remember what to resolve</strong></li>
<li><strong>know who to response</strong></li>
<li>approach sms just few times a day <strong>in chunks</strong> - just like in Google Inbox</li>
<li>and resolve messages <strong>more quickly</strong></li>
</ul>
<p>And you don't have to stop at SMS. I talk about smartphones, remember?</p>
<p><br></p>
<p><strong><a href="https://messenger.com">Messenger</a></strong></p>
<img src="/assets/images/posts/2017/imbox-zero/messenger.png" class="img-thumbnail">
<p><br></p>
<p><strong>WhatsApp</strong></p>
<img src="/assets/images/posts/2017/imbox-zero/whatsapp.png" class="img-thumbnail col-md-4">
<p><br></p>
<p><strong>Hangouts</strong></p>
<img src="/assets/images/posts/2017/imbox-zero/hangouts.png" class="img-thumbnail col-md-4">
<p>Same rules applied, same profit got ;)</p>
<p><br></p>
<h2 id="gain-for-brains">Gain for Brains</h2>
<p>Once I've read <a href="https://en.wikipedia.org/wiki/The_Universe_in_a_Nutshell">The Universe in a Nutshell</a> by this guy Stephen Hawking in my before-teenage days. I still remember single quote from it:</p>
<blockquote class="blockquote">
    "Think in structures."
</blockquote>
<img src="/assets/images/posts/2017/imbox-zero/universe.jpg" class="img-thumbnail">
<p>I didn't know what that means, but my dad talked nicely about Steve, so I though he might be a smart guy - so tried to. In our use case, <strong>instead of having 2 algorithms to resolve incoming message, we will have 1</strong>. Thus having more neurons to do job we need them to do thanks to neuroplasticity.</p>
<p>Like finding a good coffee anywhere you are :)</p>
<p><br></p>
<p>Happy thinking!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2017/10/23/imbox-zero</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 23 Oct 2017 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2017/10/23/imbox-zero#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to use Repository with Doctrine as Service in Symfony ]]></title>
                <link>https://tomasvotruba.com/blog/2017/10/16/how-to-use-repository-with-doctrine-as-service-in-symfony</link>
                <description><![CDATA[ <p>Dependency injection with autowiring is super easy <a href="/blog/2017/05/07/how-to-refactor-to-new-dependency-injection-features-in-symfony-3-3/">since Symfony 3.3</a>. Yet on my mentoring I still meet service locators.
<br><br>
Mostly due to traditional registration of Doctrine repositories.
<br><br>
The way out from <em>service locators</em> to <em>repository as service</em> was <a href="https://matthiasnoback.nl/2014/05/inject-a-repository-instead-of-an-entity-manager">described</a> by many <a href="https://medium.com/@adamquaile/composition-over-inheritance-in-doctrine-repositories-f6a53a026f60">before</a> and <strong>now we put it into Symfony 3.3 context</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <p>This post is follow up to <a href="https://stackoverflow.com/questions/38346281/symfony-3-outsourcing-controller-code-into-service-layer/38349271#38349271">StackOverflow answer</a> to clarify key points and show the sweetest version yet.</p>
<p>The person who kicked me to do this post was <a href="http://www.ucinnejsiweb.cz">Václav Keberdle</a> - <em>thank you for that</em>.</p>
<h2 id="clean-reusable-independent-and-solid-goal">Clean, Reusable, Independent and SOLID Goal</h2>
<p><strong>Our goal</strong> is to have clean code using <em>constructor injection</em>, <em>composition over inheritance</em> and <em>dependency inversion principles</em>.</p>
<p>With as simple registration as:</p>
<pre><code class="language-yaml"># app/config/services.yml

services:
    _defaults:
        autowire: true

    App\Repository\:
        resource: ../Repository</code></pre>
<p><strong>IDE plugins an other workarounds put aside</strong>, because this code can be written just with typehints.</p>
<h2 id="how-do-we-register-repositories-now">How do we Register Repositories Now</h2>
<h3 id="1-entity-repository">1. Entity Repository</h3>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

namespace App\Repository;

use App\Entity\Post;
use Doctrine\ORM\EntityRepository;

final class PostRepository extends EntityRepository
{
    /**
     * Our custom method
     *
     * @return Post[]
     */
    public function findPostsByAuthor(int $authorId): array
    {
        return $this-&gt;findBy([
            'author' =&gt; $authorId
        ]);
    }
}</code></pre>
<h3 id="em-class-fas-fa-fw-fa-lg-fa-check-text-success-em-advantages"><em class="fas fa-fw fa-lg fa-check text-success"></em> Advantages</h3>
<p>It's easy and everybody does that.</p>
<p>You can use prepared methods like <a href="https://github.com/doctrine/doctrine2/blob/2.5/lib/Doctrine/ORM/EntityRepository.php#L177"><code>findBy()</code></a>, <a href="https://github.com/doctrine/doctrine2/blob/2.5/lib/Doctrine/ORM/EntityRepository.php#L192"><code>findOneBy()</code></a> right away.</p>
<h3 id="em-class-fas-fa-fw-fa-lg-fa-times-text-danger-em-disadvantages"><em class="fas fa-fw fa-lg fa-times text-danger"></em> Disadvantages</h3>
<p>If we try to register repository as a service, we get this error:</p>
<img src="/assets/images/posts/2017/repository-as-service/autowire-fail.png" class="img-thumbnail mb-4">
<p>Why? Because parent constructor of <code>Doctrine\ORM\EntityRepository</code> is <a href="https://github.com/doctrine/doctrine2/blob/2.5/lib/Doctrine/ORM/EntityRepository.php#L64">missing <code>EntityManager</code> typehint</a></p>
<p>Also <strong>we can't get another dependency</strong>, like <code>PostSorter</code> that would manage sorting post in any way.</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

namespace App\Repository;

use App\Sorter\PostSorter;
use Doctrine\ORM\EntityRepository;

final class PostRepository extends EntityRepository
{
    public function __construct(PostSorter $postSorter)
    {
        $this-&gt;postSorter = $postSorter;
    }
}</code></pre>
<p>Because parent constructor <a href="https://github.com/doctrine/doctrine2/blob/2.5/lib/Doctrine/ORM/EntityRepository.php#L64">requires <code>EntityManager</code> and <code>ClassMetadata</code> instances</a>.</p>
<p>Those prepared methods like <code>findBy()</code> <strong>don't have argument nor return typehints</strong>, so this would pass:</p>
<pre><code class="language-php">$this-&gt;postRepository-&gt;find('someString');</code></pre>
<p>And we don't know what object we get back:</p>
<pre><code class="language-php">$post = $this-&gt;postRepository-&gt;find(1);
$post-&gt;whatMethods()!</code></pre>
<p><br></p>
<h3 id="2-entity">2. Entity</h3>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

namespace App\Entity;

use Doctrine\ORM\Entity;
use Doctrine\ORM\EntityRepository;

/**
 * @Entity(repositoryClass="App\Repository\PostRepository")
 */
final class Post
{
    ...
}</code></pre>
<p>This reminds me of circular dependency. Why should entity know about its repository?</p>
<p>Do you know why we need <code>repositoryClass="PostRepository"</code>?</p>
<p><strong>It's form of service locator</strong>, that basically works like this:</p>
<pre><code class="language-php">$this-&gt;entityManager-&gt;getRepository(Post::class);</code></pre>
<ul>
<li>Find <code>Post</code> entity</li>
<li>Find repository in <code>@Entity</code> annotation</li>
<li><a href="https://github.com/doctrine/doctrine2/blob/2.5/lib/Doctrine/ORM/Repository/DefaultRepositoryFactory.php#L61">Creates repository</a></li>
</ul>
<p>Instead of <strong>registration to Symfony container like any other service, here is uses logic coupled to annotation of specific class</strong>. Just a reminder: <a href="https://www.google.cz/search?q=occams+razor&amp;oq=occams+razor&amp;aqs=chrome..69i57j0l5.2630j0j7&amp;sourceid=chrome&amp;ie=UTF-8">Occam's razor</a>.</p>
<h3 id="em-class-fas-fa-fw-fa-lg-fa-check-text-success-em-advantages"><em class="fas fa-fw fa-lg fa-check text-success"></em> Advantages</h3>
<p>It's in documentation.</p>
<h3 id="em-class-fas-fa-fw-fa-lg-fa-times-text-danger-em-disadvantages"><em class="fas fa-fw fa-lg fa-times text-danger"></em> Disadvantages</h3>
<p>It is very complicated to have more repositories for one entity. What if I want to have <code>PostRedisRepository</code> for Redis-related operations and <code>PostFrontRepository</code> for reading-only?</p>
<p><strong>We're losing all features</strong> of our framework's Dependency Injection container (events, collections, autowiring, automated registration, logging etc.).</p>
<p><br></p>
<h3 id="3-use-in-controller">3. Use in Controller</h3>
<p>You have to use this <a href="https://matthiasnoback.nl/2014/05/inject-a-repository-instead-of-an-entity-manager/#factory-service">complicated service registration in YAML</a>:</p>
<pre><code class="language-yaml">services:
    app.post_repository:
        class: Doctrine\ORM\EntityRepository
        factory: ['@doctrine.orm.default_entity_manager', getRepository]
        arguments:
            - App\Entity\Post</code></pre>
<p>...or just pass <code>EntityManager</code>.</p>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

namespace App\Controller;

use App\Entity\Post;
use App\Repository\PostRepository;
use Doctrine\ORM\EntityManagerInterface;

final class PostController
{
    /**
     * @var PostRepository
     */
    private $postRepository;

    public function __construct(EntityManagerInterface $entityManager)
    {
        $this-&gt;postRepository = $entityManager-&gt;getRepository(Post::class);
    }
}</code></pre>
<h3 id="em-class-fas-fa-fw-fa-lg-fa-check-text-success-em-advantages"><em class="fas fa-fw fa-lg fa-check text-success"></em> Advantages</h3>
<p>Again, status quo.</p>
<h3 id="em-class-fas-fa-fw-fa-lg-fa-times-text-danger-em-disadvantages"><em class="fas fa-fw fa-lg fa-times text-danger"></em> Disadvantages</h3>
<p>IDE doesn't know it's <code>App\Repository\PostRepository</code>, so <strong>we have add extra typehint</strong> (so <a href="https://www.boringcompany.com">boring</a> work). Example above would work because there is typehinted property , but this would fail:</p>
<pre><code class="language-php">$postRepository = $entityManager-&gt;getRepository(Post::class);
$postRepository-&gt;help()?;</code></pre>
<p>Or this:</p>
<pre><code class="language-php">$post = $this-&gt;postRepository-&gt;find(1);
$post-&gt;help()?;</code></pre>
<p>To enable autocomplete, we have to add them manually:</p>
<pre><code class="language-php">/** @var App\Entity\Post $post */
$post = $this-&gt;postRepository-&gt;find(1);
$post-&gt;getName();</code></pre>
<p><strong>This annotation helper should never be in <em>your</em> code, except this case</strong>:</p>
<pre><code class="language-php">/** @var SomeService $someService */
$someService = $container-&gt;get(SomeService::class);</code></pre>
<p><br></p>
<h3 id="4-registration-code-services-yml-code">4. Registration <code>services.yml</code></h3>
<p>None. Repositories are created by Doctrine.</p>
<p><br></p>
<h2 id="em-class-fas-fa-fw-fa-lg-fa-check-text-success-em-advantages-summary"><em class="fas fa-fw fa-lg fa-check text-success"></em> Advantages Summary</h2>
<p>It's easy to copy-paste if already present in our code.</p>
<p>It's spread in most of documentation, both in Doctrine and Symfony and in many posts about Doctrine.</p>
<p>No brain, no gain.</p>
<h2 id="em-class-fas-fa-fw-fa-lg-fa-times-text-danger-em-disadvantages-summary"><em class="fas fa-fw fa-lg fa-times text-danger"></em> Disadvantages Summary</h2>
<p>We <strong>cannot use autowiring</strong>.</p>
<p>We <strong>cannot inject repository to other service just via constructor</strong>.</p>
<p>We have to <strong>typehint manually</strong> everything (IDE Plugins put aside).</p>
<p><strong>We have Doctrine in our Controller</strong> - Controller should only delegate to model, without knowing what Database package is used.</p>
<p>To allow constructor injection, we have to prepare for much <em>config programming</em>.</p>
<p>Thus <strong>it's coupled to the framework you use and less reusable</strong>.</p>
<p>We cannot use multiple repository for single entity. <strong>It naturally leads to huge repositories</strong>.</p>
<p>We cannot use constructor injection in repositories, which <strong>can easily lead you to creating static helper classes</strong>.</p>
<p>Also, you directly depend on Doctrine's API, so if <code>find()</code> changes to <code>get()</code> in one <code>composer update</code>, your app is down.</p>
<h2 id="how-to-make-this-better-with-symfony-3-3">How to Make This Better with Symfony 3.3?</h2>
<p>It require few steps, but <strong>all builds on single one change</strong>. Have you heard about <em>composition over inheritance</em>?</p>
<pre><code class="language-diff"> &lt;?php declare(strict_types=1);

 namespace App\Repository;

 use App\Entity\Post;
+use Doctrine\ORM\EntityManagerInterface;
 use Doctrine\ORM\EntityRepository;

-final class PostRepository extends EntityRepository
+final class PostRepository
 {
+    /**
+     * @var EntityRepository
+     */
+    private $repository;
+
+    public function __construct(EntityManagerInterface $entityManager)
+    {
+        $this-&gt;repository = $entityManager-&gt;getRepository(Post::class);
+    }
 }</code></pre>
<p><strong>Update entity that is now independent</strong> on any repository:</p>
<pre><code class="language-diff"> &lt;?php declare(strict_types=1);

 namespace App\Entity;

 use Doctrine\ORM\Entity;

 /**
- * @Entity(repositoryClass="App\Repository\PostRepository")
+ * @Entity
  */
 final class Post
 {
     ...
 }</code></pre>
<p>Without this, you'd get a segfault error due to circular reference.</p>
<p>That's all! Now you can program the way <em>which is used in the rest of your application</em>:</p>
<ul>
<li><em>class</em>,</li>
<li><em>service</em></li>
<li>and <em>constructor injection</em></li>
</ul>
<p><strong>And how it influenced our 4 steps?</strong></p>
<p><br></p>
<h3 id="1-entity-repository">1. Entity Repository</h3>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

namespace App\Repository;

use App\Entity\Post;
use App\Sorter\PostSorter;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\EntityRepository;

final class PostRepository
{
    /**
     * @var EntityRepository
     */
    private $repository;

    /**
     * @var PostSorter
     */
    private $postSorter;

    public function __construct(EntityManagerInterface $entityManager, PostSorter $postSorter)
    {
        $this-&gt;repository = $entityManager-&gt;getRepository(Post::class);
        $this-&gt;postSorter = $postSorter;
    }

    public function find(int $id): ?Post
    {
        return $this-&gt;repository-&gt;find($id);
    }
}</code></pre>
<h3 id="em-class-fas-fa-fw-fa-lg-fa-check-text-success-em-advantages"><em class="fas fa-fw fa-lg fa-check text-success"></em> Advantages</h3>
<p>Everything is <strong>strictly typehinted</strong>, <strong>no more frustration from missing autocompletion</strong>.</p>
<p><strong>Constructor injection works</strong> like you expect it to.</p>
<p>You can get another dependency if you like.</p>
<p><br></p>
<h3 id="2-entity">2. Entity</h3>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

namespace App\Entity;

use Doctrine\ORM\Entity;

/**
 * @Entity
 */
class Post
{
    ...
}</code></pre>
<p><br></p>
<h3 id="em-class-fas-fa-fw-fa-lg-fa-check-text-success-em-advantages"><em class="fas fa-fw fa-lg fa-check text-success"></em> Advantages</h3>
<p>Clean and standalone object.</p>
<p>No service locators smells.</p>
<p><strong>Allows multiple repositories per entity</strong>:</p>
<pre><code class="language-yaml">services:
    _defaults:
        autowire: true

    App\Repository\ProductRepository: ~
    App\Repository\ProductRedisRepository: ~
    App\Repository\ProductBenchmarkRepository: ~</code></pre>
<p><br></p>
<h3 id="3-use-in-controller">3. Use in Controller</h3>
<pre><code class="language-php">&lt;?php declare(strict_types=1);

namespace App\Controller;

use App\Repository\PostRepository;

final class PostController
{
    /**
     * @var PostRepository
     */
    private $postRepository;

    public function __construct(PostRepository $postRepository)
    {
        $this-&gt;postRepository = $postRepository;
    }
}</code></pre>
<h3 id="em-class-fas-fa-fw-fa-lg-fa-check-text-success-em-advantages"><em class="fas fa-fw fa-lg fa-check text-success"></em> Advantages</h3>
<p><strong>IDE knows the type and autocomplete 100% works.</strong></p>
<p>There is no sign of Doctrine.</p>
<p><strong>Easier to maintain and extend.</strong></p>
<p>Also space to decoupling to <a href="/blog/2017/02/07/how-to-decouple-monolith-like-a-boss-with-composer-local-packages/">local packages</a> is now opened.</p>
<p><br></p>
<h3 id="4-registration-code-services-yml-code">4. Registration <code>services.yml</code></h3>
<p>Final 3rd appearance for it's great success:</p>
<pre><code class="language-yaml"># app/config/services.yml

services:
    _defaults:
        autowire: true

    App\Repository\:
        resource: ../Repository</code></pre>
<p><br></p>
<p>All we needed is to apply <em>composition over inheritance</em> pattern in this specific case.</p>
<p>If you don't use Doctrine or you already do this approach, <strong>try to think where else you <code>extends</code> 3rd party package instead of <code>__construct</code></strong>.</p>
<h2 id="how-to-add-new-repository">How to add new repository?</h2>
<p>The main goal of all this was to make work with repositories typehinted, safe and reliable for you to use and easy to extend.</p>
<p><strong>It also minimized space for error</strong>, because <strong>strict types and constructor injection now validates</strong> much of your code for you.</p>
<p>The answer is now simple: <strong>just create repository in <code>App\Repository</code></strong>.</p>
<p>Try the same example with your current approach and let me know in the comments.</p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2017/10/16/how-to-use-repository-with-doctrine-as-service-in-symfony</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 16 Oct 2017 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2017/10/16/how-to-use-repository-with-doctrine-as-service-in-symfony#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Get the Most Valuable Feedback You Can Get ]]></title>
                <link>https://tomasvotruba.com/blog/2017/10/09/how-to-get-the-most-valuable-feedback-you-can-get</link>
                <description><![CDATA[ <p>Feedback is one of the best way to improve yourself. To make it really work it have to be able to get to you. &quot;That's wrong&quot; usually doesn't work as the person giving the feedback intended.
<br><br>
If the feedback is <strong>honest, understandable, from trustful person who knows your history and values</strong> it can make your mind shine for the brighter future with gratitude.
<br><br>
How to get such feedback?</p> ]]></description>
                <content:encoded><![CDATA[ <p><strong>We meet with feedback everyday</strong>. In work on how to improve your project, with your spouse on how to be emphatic or with your mentoring skills with your students.</p>
<p>Feedback is great! You can improve your weak points and make them stronger.</p>
<p><strong>The longer you know the person, the better feedback can get</strong> (and give). You know his or her weak points, traumas, know the language they understand and - the most important thing when it comes to learning - <strong>have a trust bond</strong>.</p>
<h2 id="how-do-you-know">How Do You Know?</h2>
<p>To take the best out of the feedback, we have to compare it - <em>before</em> and <em>after</em>.</p>
<p>Thing is, we can barely process present moment and reflecting the past isn't much better. Do you know who you were a month back? A year back?</p>
<p>And do you <em>know it</em> or do you <em>imagine it</em>?</p>
<p>How do you <em>know</em> you made a progress?</p>
<p>But more important, how can you <strong>really appreciate yourself</strong> for making it through.</p>
<h2 id="the-one-person">The One Person</h2>
<p>Putting these question together, I get the best feedback when:</p>
<ul>
<li>I get it from the person, <strong>who knows me the longest</strong></li>
<li>I actually <strong>feel his or her feelings</strong> while giving the feedback</li>
</ul>
<p>Sounds like <em>futuristic empath</em> skills?</p>
<img src="/assets/images/posts/2017/futureme/empath.jpg" class="img-thumbnail">
<h2 id="who-is-it">Who is it?</h2>
<p>Your spouse? Your sister or brother or your partners?</p>
<p>Almost there...</p>
<p><br></p>
<p>Actually everyone can do it themselves. <strong>You can do it right now.</strong></p>
<p><strong>YOU!</strong></p>
<h2 id="talk-with-your-future-self">Talk With Your Future Self</h2>
<p>This is what I do for past 10 years and I'm very happy to share this little hack with you.</p>
<p><strong>I write every 6 months (at least) with letter arrival a 1 year in the future</strong>. If I write today, the letter would arrive October 8th, 2018.</p>
<img src="/assets/images/posts/2017/futureme/past.png" class="img-thumbnail">
<h2 id="what-i-write-about">What I write about?</h2>
<p>Usually I describe the present moment:</p>
<ul>
<li>How is work doing?</li>
<li>How are my relations?</li>
<li>My girlfriend and family?</li>
<li>Where I live?</li>
<li>What I'm afraid off?</li>
<li>What I'm dealing with?</li>
<li><strong>What I want to be different in 1 year from now?</strong></li>
</ul>
<p>It can look like this:</p>
<img src="/assets/images/posts/2017/futureme/example.png" class="img-thumbnail">
<h2 id="what-i-learned-from-this">What I Learned from this?</h2>
<ul>
<li>
<p><strong>That nothing is permanent.</strong> Nor success, nor joy, nor pain, nor ideas about the world I'm living in.</p>
</li>
<li>
<p>That when I feel something is impossible or difficult or the best way to do it, it <em>is</em> in the present I'm just in. Nothing more.</p>
</li>
<li>
<p><strong>That I change a lot from year to year</strong> (for good ;)), even though I don't move at all before writing these.</p>
</li>
</ul>
<h2 id="try-it-yourself">Try It Yourself</h2>
<p>I don't use any local postal service nor home made box for this.</p>
<p>There is <a href="https://www.futureme.org">futureme.org</a> for this:</p>
<img src="/assets/images/posts/2017/futureme/logo.png" class="img-thumbnail">
<p>You can start with one and if you'll like it, you can get more. That's what I did :)</p>
<h2 id="inspire-at-public-letters">Inspire at Public Letters</h2>
<p>The other interesting thing you can do is read public letter by other people. There are some very moving honest confessions, like alcoholism or domestic violence, from both sides.</p>
<img src="/assets/images/posts/2017/futureme/public.png" class="img-thumbnail">
<p>Happy writing!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2017/10/09/how-to-get-the-most-valuable-feedback-you-can-get</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 09 Oct 2017 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2017/10/09/how-to-get-the-most-valuable-feedback-you-can-get#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ 3 non-IT Books That Help you to Become Better Programmer ]]></title>
                <link>https://tomasvotruba.com/blog/2017/09/25/3-non-it-books-that-help-you-to-become-better-programmer</link>
                <description><![CDATA[ <p>I love reading books. It helps me to create much deeper and persistent neural connections than any other form of self-education.
<br><br>
These books accidentally help me to <strong>write more readable code, create understandable and smart architecture</strong> or <strong>manage open-source in more polite and leading way</strong>.
<br><br>
Are you tired of reading technical books? Take a rest with these 3.</p> ]]></description>
                <content:encoded><![CDATA[ <p>(Ordered from the shortest to the longest, in both reading time and personal change.)</p>
<p><br></p>
<blockquote class="blockquote">
    "<a href="http://notes.torrez.org/2011/04/an-empathetic-plan.html">Complain about the way other people make software by making software.</a>"
</blockquote>
<p><br></p>
<h2 id="steal-like-and-artist-by-austing-kleon">Steal Like and Artist by Austing Kleon</h2>
<p>Evolution of art is based on stealing. So is software. <strong>Pattern are replicated through languages and frameworks</strong>. Just imagine how many frameworks are using MVC pattern.</p>
<div class="text-center">
    <img src="/assets/images/posts/2017/non-it-books/steal.jpg"></div>
<p>Instead of describing ideas in this master piece, <strong>just <a href="https://www.youtube.com/watch?v=oww7oB9rjgw">see this 11min TedX video</a></strong>. Then you can decide if you like this idea just enough to open first page.</p>
<p>I'd like to thank <a href="http://honzacerny.com">Honza Černý</a> who lend me this book about a year ago and helped me to <strong>build bridge between programming and art</strong>.</p>
<p>Btw, if you read this short book, there also <em>second</em> part: <a href="https://austinkleon.com/show-your-work">Show Your Work</a>.</p>
<h2 id="deep-work-by-cal-newport">Deep Work by Cal Newport</h2>
<h3 id="isn-t-it-only-hype">Isn't it only Hype?</h3>
<p>I heard about this book from <a href="https://tomaskazatel.cz">many</a> <a href="https://www.vzhurudolu.cz/blog/75-hluboka-prace">friends</a> (Czech only) just in the end of 2016. So many at once, that <strong>I was afraid of buy-but-not-read-hype</strong>. That's when <strong>everyone is talking about the book, buying it, but nobody actually read it</strong>.</p>
<p>Like <a href="https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882"><em>Clean Code</em></a>. It's really great book - well it was the best you could buy in 2008. But now it's obsolete, too verbose, not to the point and difficult to understand by anyone else than Java programmers.</p>
<p>What can you do better?  <strong>You could reach for 80 % shorter and PHP-related <a href="https://leanpub.com/principles-of-package-design">Principles of Package Design</a></strong> or go to fresh <a href="https://github.com/jupeter/clean-code-php"><em>clean-code</em> repository on Github</a> single page <strong>PHP yes/no examples-based</strong> which has over <strong>3625 stars</strong> as of time writing this post. I help to maintain it, but main credits goes to <a href="https://github.com/jupeter">@jupeter</a>.</p>
<div class="text-center">
    <img src="/assets/images/posts/2017/non-it-books/deep.jpg"></div>
<p>Imagine peace with combination of 5hour train trips, <a href="/blog/2017/01/20/4-emotional-reasons-why-I-quit-my-twitter/">disabling twitter</a> and other <a href="/blog/2017/01/05/why-I-deleted-my-linkedin-account/">social networks</a> on your mobile and computer and <a href="https://zenhabits.net/unline">cutting of Facebook</a> activity, it is powerful skill-set that will <strong>give you head start before any concurrency you have</strong>.</p>
<p>Again, instead of few bullet points that <strong>got my</strong> opinionated attention, check <a href="https://www.youtube.com/watch?v=3E7hkPZ-HTk">this 13min youtube video</a>.</p>
<h3 id="protip-skip-the-first-third">Protip - Skip the first third</h3>
<p>The book will then drag you into the stories about 1st class plane trips that produce books over weekend.</p>
<p>Thanks to <a href="https://tomaskazatel.cz">Tomáš Kazatel</a> for lending me and <em>selling</em> me this book with this tip.</p>
<h2 id="no-more-mr-nice-guy-by-dr-robert-a-glover">No More Mr. Nice Guy by Dr. Robert A. Glover</h2>
<p>This book is more transformative then 2 before. It's related to family system, partners, about <strong>money you feel you deserve in your job</strong> or about your.</p>
<p>I see many nice-guys among programmers, un-happy with their work, payment, skill level or they spouse and children, thank to <a href="https://pehapkari.cz">organizing PHP meetups</a> in Czech Republic. I could relate to them with <a href="https://www.youtube.com/watch?v=GFu5ONiHnMA">my own experience</a> (Czech only).</p>
<div class="text-center">
    <img src="/assets/images/posts/2017/non-it-books/nice.jpg"></div>
<p>This book helped my to take over responsibility for things I'm un-happy with and take the first step to unknown future hidden in fog. Pain worth it!</p>
<p>Here, I'm not aware of any useful youtube video, so <strong>I recommend to start with first chapter and then continue or stop</strong> based on your preferences.</p>
<p>Thanks to all my women and Jakub Lipus for recommendation.</p>
<hr />
<p>And the last take away? <strong>If you want to read some book, let somebody recommend it to you</strong>. Your friend probably know you better then you know the book by the cover :)</p>
<p>Happy reading!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2017/09/25/3-non-it-books-that-help-you-to-become-better-programmer</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 25 Sep 2017 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2017/09/25/3-non-it-books-that-help-you-to-become-better-programmer#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ 4 Simple Checkers for Coding Standard Haters but Clean Code Lovers ]]></title>
                <link>https://tomasvotruba.com/blog/2017/09/18/4-simple-checkers-for-coding-standard-haters-but-clean-code-lovers</link>
                <description><![CDATA[ <p>Do you find coding standards too <strong>annoying in telling you where to put that bracket</strong>?
Is that the reason you haven't tried them yet?
<br><br>
Great! This post is for you. There are <a href="/blog/2017/07/31/how-php-coding-standard-tools-actually-work/#write-1-checke-save-hundreds-hours-of-work">other ways to use coding standard</a> and <strong>clean code</strong> is one of them.</p> ]]></description>
                <content:encoded><![CDATA[ <p>There are some checkers in coding standard world, that don't check spaces, tabs, commas nor brackets. They <strong>actually do code-review for you</strong>.</p>
<p>I use a set of 4 checkers to <strong>check open-source packages to help them keeping their code clean</strong>.</p>
<p>In Sylius they <a href="https://github.com/Sylius/Sylius/pull/8557">removed 500 lines of unused code</a> just few days ago.</p>
<p>Among others it <strong>removed dead constructor dependencies</strong>.</p>
<img src="/assets/images/posts/2017/clean-checkers/dependency-drop.png" class="img-thumbnail">
<p>It will not only make your code cleaner, but also can <strong>speed up you container build</strong> as a side effect.</p>
<h2 id="4-simple-checkers">4 Simple Checkers</h2>
<pre><code class="language-php">&lt;?php

// ecs.php

declare(strict_types=1);

use PhpCsFixer\Fixer\ArrayNotation\ArraySyntaxFixer;
use PhpCsFixer\Fixer\Import\NoUnusedImportsFixer;
use PhpCsFixer\Fixer\Import\OrderedImportsFixer;
use SlevomatCodingStandard\Sniffs\Classes\UnusedPrivateElementsSniff;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return static function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();

    // use short array []
    $services-&gt;set(ArraySyntaxFixer::class)
        -&gt;call('configure', [['syntax' =&gt; 'short']]);

    // drop dead code
    $services-&gt;set(UnusedPrivateElementsSniff::class);

    // drop dead use namespaces
    $services-&gt;set(NoUnusedImportsFixer::class);

    // and sort them A → Z
    $services-&gt;set(OrderedImportsFixer::class);
};</code></pre>
<h2 id="4-steps-to-make-your-code-cleaner">4 Steps to Make Your Code Cleaner</h2>
<ol>
<li>
<p>Install it</p>
<pre><code class="language-bash">composer require symplify/easy-coding-standard --dev</code></pre>
</li>
<li>
<p>Add checkers to <code>ecs.php</code> file</p>
</li>
<li>
<p>Check your code</p>
<pre><code class="language-bash">vendor/bin/ecs check src</code></pre>
</li>
<li>
<p>Fix the code</p>
<pre><code class="language-bash">vendor/bin/ecs check src --fix</code></pre>
</li>
</ol>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2017/09/18/4-simple-checkers-for-coding-standard-haters-but-clean-code-lovers</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 18 Sep 2017 00:00:00 +0000</pubDate>
                                    <updated>2020-08-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Aug 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2017/09/18/4-simple-checkers-for-coding-standard-haters-but-clean-code-lovers#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to write Open-Source in PHP 3: Deprecating Code ]]></title>
                <link>https://tomasvotruba.com/blog/2017/09/11/how-to-write-open-source-in-php-3-deprecating-code</link>
                <description><![CDATA[ <p>Humans, world and PHP Frameworks constantly evolve - their code functionality changes. Class or method is renamed, method has 1 new argument or new class is decoupled.
<br><br>
In Symfony world you probably know about <a href="https://symfony.com/doc/current/contributing/code/bc.html">Backward Compatibility Promise</a>.
It <strong>prevents from unexpected and frustrating BC breaks</strong> and helps users to upgrade gradually thanks to deprecation messages.
<br><br>
In this post I will show you <strong>how to work with deprecation messages</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <p>This technique is quite rare to see (apart PHP frameworks). It's very simple to add to your open-source code workflow though - let me convince you.</p>
<h2 id="why-write-deprecation-messages">Why Write Deprecation Messages?</h2>
<h3 id="if-you-don-t">If you DON'T</h3>
<ul>
<li>people will have to find deprecations themselves in the commits - <strong>from programmer to detective</strong></li>
<li>you'll <strong>find issues</strong> like &quot;autowire() method missing - what should I do?&quot; at your package on Github</li>
<li>you'll have to remember, when you upgrade some project using your package few months later</li>
</ul>
<h3 id="if-you-do">If you DO</h3>
<ul>
<li>people will like you</li>
<li>you'll be able to do more BC breaks in your code, because people will know they're taken care off</li>
<li><strong>upgrade of your package will be much easier</strong></li>
<li><strong>machine-readable messages will allow automate upgrades</strong></li>
</ul>
<p>To explain last point a bit more: if you write your message in a way, that some parser would be able to understand it, <strong>it would be able to refactor other code accordingly</strong>.</p>
<ol>
<li>
<p>Read</p>
<pre><code class="language-bash">SomeClass::oldMethod =&gt; SomeClass::newMethod</code></pre>
</li>
<li>
<p>Run</p>
<pre><code class="language-bash">bin/refactor app src</code></pre>
</li>
<li>
<p>Enjoy new code!</p>
</li>
</ol>
<p>That was <a href="https://github.com/tomasvotruba/Rector">the future</a>, now back to the present.</p>
<h2 id="today-s-topic-changed-method-name">Today's topic: Changed Method Name</h2>
<p>Let's take real example from real code - a class from <a href="https://doc.nette.org/en/2.4/html-elements#toc-elements-content"><code>Nette\Utils</code> 2.4</a>.</p>
<p>What we need to know?</p>
<ul>
<li><strong>a method name has changed</strong></li>
<li>from &quot;add&quot; to &quot;addHtml&quot;</li>
<li>on <code>Nette\Utils\Html</code> object</li>
</ul>
<p><strong>Before</strong> this change you used:</p>
<pre><code class="language-php">$html = Html::el('div');
$html-&gt;add('&lt;strong&gt;I am brand new!&lt;/strong&gt;');</code></pre>
<p>And <strong>after</strong> this change you will use:</p>
<pre><code class="language-php">$html = Html::el('div');
$html-&gt;addHtml('&lt;strong&gt;I am brand new!&lt;/strong&gt;');</code></pre>
<p>This is the snippet from the <code>Nette\Util\Html</code> class we are interested in:</p>
<pre><code class="language-php">namespace Nette\Utils;

class Html
{
    public function add(...)
    {
        // ...
    }
}</code></pre>
<p>So how to inform all ends users about this?</p>
<p>You can choose from <strong>2 ways to write deprecations messages</strong>, based on your preference.</p>
<h3 id="1-a-code-deprecate-code-annotation">1. A <code>@deprecate</code> annotation</h3>
<pre><code class="language-php">namespace Nette\Utils;

class Html
{
    /**
     * @deprecated
     */
    public function add(...)
    {
        $this-&gt;addHtml(...);
    }

    public function addHtml(...)
    {
        // ...
    }
}</code></pre>
<p>This is the least you can do. But you could do better, right?</p>
<pre><code class="language-php">/**
 * @deprecated Method add() is deprecated.
 */
public function add(...)</code></pre>
<p>Should I delete all those methods calls in my code?</p>
<pre><code class="language-php">/**
 * @deprecated Method add() is deprecated, use addHtml() instead.
 */
public function add(...)</code></pre>
<p><strong>A-ha, that's better!</strong></p>
<p><br></p>
<p>I Have 1 Question for you: <strong>What happens when programmer runs <code>$html-&gt;add(...)</code> method now?</strong></p>
<p>...</p>
<p>Well, exactly... <strong>nothing</strong>. <strong>Annotations have no influence on code run</strong>, so it will work and programmer won't notice anything.</p>
<p><br></p>
<p>Luckily, there is option that <strong>will actually inform about the deprecation</strong>.</p>
<h3 id="2-a-code-trigger-error-code">2. A <code>trigger_error()</code></h3>
<p>A <a href="https://php.net/manual/en/function.trigger-error.php"><code>trigger_error()</code></a> is native PHP function, that can inform user about changes in the code.</p>
<p>With the 2nd argument is level of these messages - there is special constant <code>E_USER_DEPRECATED</code> destined for this case.</p>
<pre><code class="language-php">namespace Nette\Utils;

class Html
{
    public function add(...)
    {
        # we already know how to write useful mesagges
        trigger_error('Method add() is deprecated, use addHtml() instead.', E_USER_DEPRECATED);

        $this-&gt;addHtml(...);
    })

    public function addHtml(...)
    {
        // ...
    }
}</code></pre>
<p>You can <a href="https://github.com/nette/utils/blob/f1584033b5af945b470533b466b81a789d532034/src/Utils/Html.php#L362">see it used in similar way</a> in the original code.</p>
<p><strong>What happens when programmer runs <code>$html-&gt;add(...)</code> method with this type of deprecation?</strong></p>
<p>2 things:</p>
<ul>
<li>The code will run</li>
<li><strong>The programmer will be informed</strong></li>
</ul>
<p>In case he or she is not ready for upgrade, it can be disabled in application <code>bootstrap</code> file:</p>
<pre><code class="language-php">error_reporting(~E_USER_DEPRECATED);</code></pre>
<p><a href="https://phpfashion.com/jak-spravne-updatovat-nette">Source</a> (Czech only)</p>
<p>I said...</p>
<p><em>It's very simple to add to your open-source code workflow...</em></p>
<p>...and this is it!</p>
<p>That was <a href="https://symfony.com/doc/current/contributing/code/bc.html">Symfony's Backward Compatibility Promise</a> in a nutshell.</p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2017/09/11/how-to-write-open-source-in-php-3-deprecating-code</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 11 Sep 2017 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2017/09/11/how-to-write-open-source-in-php-3-deprecating-code#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How ApiGen Survived its Own Death ]]></title>
                <link>https://tomasvotruba.com/blog/2017/09/04/how-apigen-survived-its-own-death</link>
                <description><![CDATA[ <p><a href="https://github.com/apigen/apigen">ApiGen</a> was broken for a long time. It depended on Reflection package, that was not developed since 2013 and was unable to parse <em>newer</em> code. When I say newer, I mean <em>hot</em> PHP features like <code>::class</code> in 5.5. I don't even talk about 5.6 or 7.</p>
<p>I got frustrated. I spent a year on a project that is still not working out of the box. So I took spring off to change it. <strong>My goal was to replace reflection or let the project die in peace</strong>.</p>
<p>This is story about the whole journey of ups and downs.</p> ]]></description>
                <content:encoded><![CDATA[ <p>Prepare for deep darkness, (almost) burning out and... team work that helped me to make it to the end.</p>
<img src="/assets/images/posts/2017/apigen-revival/apigen.png" class="img-thumbnail">
<h2 id="step-1-bump-to-php-7-1">Step 1: Bump to PHP 7.1</h2>
<p>I love PHP 7.1 and I use it everywhere since its release in 2016. This year <a href="/blog/2017/06/05/go-php-71/">more and more big projects are migrating</a>, yet this is still low % of all packages.</p>
<p>So my condition was to <a href="https://github.com/ApiGen/ApiGen/issues/779#issuecomment-285960383">bump minimal requirement to PHP 7.1</a>. Current maintainers agreed, so I had green on. Thank you <a href="https://github.com/jankal">Alexander Jank</a> for your support in my first PRs to ApiGen this year.</p>
<h2 id="step-2-pick-the-right-reflection-successor">Step 2: Pick the right Reflection Successor</h2>
<p>ApiGen uses reflection to analyze classes, their methods, interfaces, traits, parent class of the class, their methods etc.</p>
<p><strong>Pure PHP reflection can be barely used for advanced tasks like the last one</strong>, so I'd have to rewrite whole package myself. That's not a way to go if you want to have a calm life and normal sleep.</p>
<p>The question was, <strong>where to find the right one?</strong></p>
<p>I knew a few, but not any that would be able to parse PHP 7.1 by itself. I was aware of <a href="https://github.com/nikic/PHP-Parser">nikic/php-parser</a>, that was maintained and future-compatible (Nikic even added PHP 7.2 features recently). But it was only parsing tool, not smart reflection wrapper.</p>
<h3 id="reaching-out-for-help">Reaching out for Help</h3>
<p>In that time, I came across <a href="https://github.com/nikic/PHP-Parser/wiki/Projects-using-the-PHP-Parser">Projects using the PHP Parser</a> on Wiki of PHP-Parse, I consulted with <a href="https://github.com/jantvrdik">Jan Tvrdik</a> and <a href="https://twitter.com/OndrejMirtes">Ondrej Mirtes</a>.</p>
<p>This all <a href="https://github.com/ApiGen/ApiGen/issues/817">led me to a package</a> called <a href="https://github.com/roave/better-reflection">Roave/BetterReflection</a> by <a href="https://www.jamestitcumb.com">James Titcumb</a> and <a href="https://ocramius.github.io">Marco Pivetta</a>.</p>
<p>I'm bit suspicious to projects that were lastly tagged a half year ago, but I felt I could gave it a go.</p>
<h2 id="step-3-replace-reflection">Step 3: Replace Reflection</h2>
<p>All right, package picked! The <del>fun</del> hell was about to begin.</p>
<p>Imagine your whole application uses everywhere a package, that got stuck 4 PHP versions ago. You feel it more and more. Everyday you need to patch it because there are other packages that are up-to-date. You know, like PHP itself.</p>
<p>When I maintained the ApiGen in 2014, I felt I should <a href="https://ocramius.github.io/blog/when-to-declare-classes-final">interface everything</a> - thank you for that <em>past me</em>. All reflection classes were interfaced, and there was somewhat of a bridge between TokenReflection (the old package) and ApiGen value objects for Reflections.</p>
<p>Still, I could not drop all old reflections without having prepared all new ones.</p>
<p>But the algorithm alone was simple (well after stepping back from ~3 k lines of code):</p>
<ul>
<li>
<ol>
<li>a 3rd party package's <code>&lt;class&gt;Reflection</code> goes in</li>
</ol>
</li>
<li>
<ol start="2">
<li>ApiGen transforms it</li>
</ol>
</li>
<li>
<ol start="3">
<li>an ApiGen Reflection comes out</li>
</ol>
</li>
</ul>
<h3 id="collector-transformer-router-to-the-rescue">Collector + Transformer + Router to the rescue</h3>
<p>I don't know how that happened, but I managed to combine 3 patterns to make this work.</p>
<p>By &quot;making this work&quot; I mean:</p>
<ul>
<li><strong>keep old</strong> reflection package as stable fallback</li>
<li><strong>use new reflection package</strong> only on single reflection class, e.g. <code>ClassConstantReflection</code></li>
</ul>
<p>The main service that takes cares of this is <a href="https://github.com/ApiGen/ApiGen/blob/a6f56691d87f74a64b31a15b7866d5a839aecb60/packages/Reflection/src/TransformerCollector.php#">TransformerCollector</a>.</p>
<p>All particular Transformers are <strong>collected</strong> into it.</p>
<p>When reflection is passed, ApiGen will decide what to do with it - that is <a href="https://github.com/ApiGen/ApiGen/blob/a6f56691d87f74a64b31a15b7866d5a839aecb60/packages/Reflection/src/TransformerCollector.php#L68-L71">the Router part</a>.</p>
<p>Having this setup ApiGen could:</p>
<ul>
<li>
<ol>
<li>have old TokenReflection</li>
</ol>
</li>
<li>
<ol start="2">
<li>match specific classes and reparse them with BetterReflection</li>
</ol>
</li>
<li>
<ol start="3">
<li>output ApiGen Reflection value objects</li>
</ol>
</li>
</ul>
<p>In time, I've added more and more BetterReflection transformers, like <a href="https://github.com/ApiGen/ApiGen/blob/a6f56691d87f74a64b31a15b7866d5a839aecb60/packages/Reflection/src/Transformer/BetterReflection/Class_/ClassReflectionTransformer.php#L46">ClassReflectionTransformer</a> that handles ClassReflection.</p>
<p><em><a href="https://github.com/ApiGen/ApiGen/issues/817">10 PRs later...</a></em></p>
<p>There was light in the of the tunnel.</p>
<p><strong>Rule of a thumb: when you need to replace something, build a bridge/router and do it gradually. You'll be both safe and in progress.</strong></p>
<p><strong>Never rewrite running project from scratch</strong>, unless you really have to.</p>
<h2 id="step-4-is-ship-going-down">Step 4: Is Ship Going Down?</h2>
<p>I had dilemma about global constants that BetterReflection doesn't support, yet TokenReflection does. I didn't know what to do with that and I was stuck.</p>
<p>Then, Jan Tvrdik and I have a chat at one grill party about this. Jan helped me to realize, <strong>that single issue should not stand in a way of saving the project</strong>. I could drop it and if anyone needs it, he or she might implement it. That was a huge step forward for me and the project.</p>
<h3 id="drop-everything-you-don-t-need-just-to-breathe">Drop Everything You don't Need - Just to Breathe</h3>
<p>I also came to the state, when there was too much coupling of <strong>features I didn't feel like they were useful anymore</strong>.</p>
<p>Using Markdown in docblock descriptions to highlight them was one of them. I never saw that in any code except ApiGen and I still don't think using Markdown in PHP code is a good idea.</p>
<p>I proposed issue <a href="https://github.com/ApiGen/ApiGen/issues/782#issuecomment-285988252">of turning Markdown down</a> and adding event instead, so anyone could implement if really needed and <a href="https://github.com/ApiGen/ApiGen/pull/795">it solved around 10 issues</a>. Just like that.</p>
<p><strong>Rule of a thumb? When you're stuck in open-source project, drop things that are the least relevant to the project.</strong> It might give you space to breathe and to move forward to next release.</p>
<h2 id="step-5-reflection-replaced">Step 5. Reflection Replaced</h2>
<p><em>10 more PRs later</em></p>
<p>Reflection works - PHP 7.1 code is perfectly parsed with no issues!</p>
<img src="/assets/images/posts/2017/apigen-revival/done.png" class="img-thumbnail">
<p>It didn't have cool features like tree references, but I was able to parse PHP 5.5, PHP 5.6, PHP 7.0 and PHP 7.1 with no problem at all. We could finally close over 30 opened issues that spread for last 4 years.</p>
<p>This gave me a dopamine shot, yet worsts was about to come.</p>
<h2 id="step-6-burnout">Step 6. Burnout</h2>
<p>It was June 2017. The main issue was solved and there was plenty space to improve ApiGen. <strong>But not motivation</strong>. I didn't use it personally and I felt I was there mainly to replace reflection, because I was the one was responsible for its design.</p>
<p>After I finished that, I was looking for co-maintainer and somebody who's using the project to took over me.</p>
<p>Personally, I felt <del>bit</del> burned out. What now? Give up the project? Go to cinema? Go to a coach? ✓</p>
<p>What helped me was a <a href="https://github.com/dbrock/semver-howto#release-candidates-100-foo">release-candidate</a>. An illusion of milestone, that closes huge part of dev work.</p>
<p>I released <a href="https://github.com/ApiGen/ApiGen/releases/tag/v5.0.0-RC1">ApiGen 5.0-RC1</a> on June 3rd 2017. It <strong>actually brought more attention then I expected</strong>. Release Candidates are apparently sign that project is back to life.</p>
<h2 id="step-7-saved">Step 7. Saved!</h2>
<p>Situation changed with <a href="https://github.com/ApiGen/ApiGen/releases/tag/v5.0.0-RC3">5.0-RC3</a>.</p>
<img src="/assets/images/posts/2017/apigen-revival/rc3.png" class="img-thumbnail">
<p>As you can see, <a href="https://github.com/vlastavesely">Vlasta Vesely</a> did almost 90 % of work on the release. I went to Brno to meet Vlasta, we had great chat and wine - thank you for both.</p>
<p><strong>I asked Vlasta to join ApiGen maintainer team and he agreed</strong>. The future is bright now.</p>
<p>And that is the whole journey up to present moment.</p>
<h3 id="what-would-be-the-main-takeway">What would be the main takeway?</h3>
<p>It's all about team work, priorities, communication of miss-understandings and dealing with your own shit you find on the way home.</p>
<p>Now to the shorter practical part...</p>
<h2 id="what-changed-and-what-was-removed">What changed and what was removed?</h2>
<p>If I should mention 4 most important changes you should know about, it would be:</p>
<ul>
<li>Version 4.0 worked fine with PHP 5.4 code - newer usually crashed it. ApiGen <strong>can deal with PHP 5.5, 5.6, 7.0 and 7.1 code</strong> now.</li>
<li>Min PHP version bumped <strong>from PHP 5.4 to PHP 7.1</strong>. ApiGen is still able to parse older code.</li>
<li><strong>TokenReflection refactored to BetterReflection</strong> - thanks to James and Marco for fast responses on our issues and pull-requests.</li>
<li>Switched to <a href="https://github.com/ApiGen/ApiGen/pull/880">Symfony 3.3 Dependency Injection</a> with <a href="/blog/2017/05/07/how-to-refactor-to-new-dependency-injection-features-in-symfony-3-3/">time-saving features</a> - thanks <a href="https://martinhujer.cz">Martin Hujer</a> for the idea.</li>
</ul>
<p>Look at particular releases to get complete list of changes. Changelogs are nice and clean:</p>
<ul>
<li><a href="https://github.com/ApiGen/ApiGen/releases/tag/v5.0.0-RC1">ApiGen 5.0-RC1</a></li>
<li><a href="https://github.com/ApiGen/ApiGen/releases/tag/v5.0.0-RC2">ApiGen 5.0-RC2</a></li>
<li><a href="https://github.com/ApiGen/ApiGen/releases/tag/v5.0.0-RC3">ApiGen 5.0-RC3</a></li>
<li><a href="https://github.com/ApiGen/ApiGen/releases/tag/v5.0.0-RC4">ApiGen 5.0-RC4</a></li>
<li><a href="https://github.com/ApiGen/ApiGen/releases/tag/v5.0.0-RC5">ApiGen 5.0-RC5</a></li>
</ul>
<h2 id="run-apigen-yourself">Run ApiGen Yourself</h2>
<p>ApiGen uses BetterReflection that is still not tagged, so you need to install it like:</p>
<pre><code class="language-json">{
    "require-dev": {
        "apigen/apigen": "5.0.0-RC5",
        "roave/better-reflection": "dev-master#7ce58dd"
    }
}</code></pre>
<p>and run with composer:</p>
<pre><code class="language-bash">composer update</code></pre>
<p>And you are read to go.</p>
<p>Happy generating!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2017/09/04/how-apigen-survived-its-own-death</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 04 Sep 2017 00:00:00 +0000</pubDate>
                                    <updated>2018-12-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Dec 2018 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Dec 2018 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2017/09/04/how-apigen-survived-its-own-death#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Apply Nette Coding Standard in Your Project ]]></title>
                <link>https://tomasvotruba.com/blog/2017/08/14/how-to-apply-nette-coding-standard-in-your-project</link>
                <description><![CDATA[ <p><strong>Pull-requests are more fun</strong> thanks to automated coding standard. You don't have explain where to put space or bracket. You <strong>can talk about architecture or meaning of the code</strong> instead. Moreover in open-source. <strong>I wanted to make this possible in Nette</strong>, but Coding Standards could be found only in <a href="https://nette.org/en/coding-standard">documentation</a>.
<br><br>
This year I started to work on a Nette Coding Standard (<em>NCS</em>) that you can put to CLI. And you'll <strong>be able set it up in in your project</strong> yourself today.</p> ]]></description>
                <content:encoded><![CDATA[ <p><a href="https://github.com/nette/coding-standard">Nette\CodingStandard</a> 2.0 was released 2 months. This version <strong>is ready to use, includes all important checkers and is used on all <code>Nette\*</code> packages in Travis</strong>.</p>
<p><strong>NCS checks every pull-request you make to Nette</strong>:</p>
<div>
    <a href="https://travis-ci.org/nette/application/jobs/261987910#L349">
        <img src="/assets/images/posts/2017/nette-coding-standard/travis-check.png" class="img-thumbnail"></a>
</div>
<p>All that need is to <a href="https://github.com/nette/application/blob/2f545e64fc4bfc941d7e48a95e3faca7c468ac35/.travis.yml#L31-L41">define stage in <code>travis.yml</code></a>:</p>
<div>
    <img src="/assets/images/posts/2017/nette-coding-standard/travis-setup.png" class="img-thumbnail"></div>
<p>That's it! Just 2 commands and it checks any project you have.</p>
<p>But first...</p>
<h2 id="php-7-1">PHP 7.1+</h2>
<p>This packages requires PHP 7.1 to run as the rest of the Nette (mostly current <code>master</code> or <code>3.0</code>).</p>
<p>If you still don't know why should you <strong>join <a href="https://gophp71.org">Symfony, Nette, Doctrine, Zend or Sylius</a></strong>, you can read <a href="/blog/2017/06/05/go-php-71/#why-go-right-to-php-7-1">this post</a> or wait a bit longer. It's up to you.</p>
<h2 id="setup-your-project">Setup Your Project</h2>
<p>Install the package to your dev dependencies:</p>
<pre><code class="language-bash">composer require nette/coding-standard --dev</code></pre>
<p>Good! Now just pick the prepared set.</p>
<p>At the moment there are <strong>3 configs with set of checkers</strong>:</p>
<ul>
<li><a href="https://github.com/nette/coding-standard/blob/master/coding-standard-php71.yml"><code>coding-standard-php71.yml</code></a></li>
<li><a href="https://github.com/nette/coding-standard/blob/master/coding-standard-php70.yml"><code>coding-standard-php70.yml</code></a></li>
<li><a href="https://github.com/nette/coding-standard/blob/master/coding-standard-php56.yml"><code>coding-standard-php56.yml</code></a></li>
</ul>
<p>Just pick the one that suits you:</p>
<pre><code class="language-bash">vendor/bin/ecs check src tests --config vendor/nette/coding-standard/coding-standard-php71.yml</code></pre>
<p>Then, fix the code:</p>
<pre><code class="language-bash">vendor/bin/ecs check src tests --config vendor/nette/coding-standard/coding-standard-php71.yml --fix</code></pre>
<p>Config with higher PHP version includes all lower versions, so with <code>coding-standard-php71.yml</code> you cover the other 2 configs as well.</p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2017/08/14/how-to-apply-nette-coding-standard-in-your-project</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 14 Aug 2017 00:00:00 +0000</pubDate>
                                    <updated>2018-12-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Dec 2018 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Dec 2018 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2017/08/14/how-to-apply-nette-coding-standard-in-your-project#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How PHP Coding Standard Tools Actually Work ]]></title>
                <link>https://tomasvotruba.com/blog/2017/07/31/how-php-coding-standard-tools-actually-work</link>
                <description><![CDATA[ <p>Do you use <a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer">PHP CS Fixer</a> or <a href="https://github.com/squizlabs/PHP_CodeSniffer">PHP_CodeSniffer</a>? Do you know the way they work is ~80 % the same? Do you wonder how they work under the hood?
<br><br>
Today I will share <strong>3 main pillars of their architecture</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <p>Why should these 3 pillars be even important for you? When I understood tools behind them and their basic principals, <strong>I was able to more effective Sniffs and Fixers</strong> (<em>Checkers</em> further on) <strong>that were clear to their communities</strong>.</p>
<h2 id="write-1-checker-save-hundreds-hours-of-work">Write 1 Checker, Save Hundreds Hours of Work</h2>
<p>Coding Standards are my greatest passion for last couple of years. I love their efficiency: <strong>with one rule (class) you can improve thousands of lines in your code</strong> in matters of milliseconds. And not only yours if you share it in a package.</p>
<p>With a Checker you can change <code>array()</code> to <code>[]</code>. And more then that. Coding Standard are not exclusively about spaces, tabs and brackets nowadays.</p>
<p>You can use them to <a href="https://daniel-siepmann.de/Posts/2017/2017-03-20-phpcs-code-migration.html">refactor to newer version of your framework</a>,
<a href="https://github.com/wimg/PHPCompatibility">upgrade your codebase to newer PHP</a> or <a href="https://github.com/kukulich/php-type-hints-convertor">add PHP 7.1 typehints to your methods</a>.</p>
<p>That's laziness on a completely different level :)</p>
<h2 id="so-much-for-the-hype">So Much for The Hype</h2>
<div class="text-center">
    <img src="https://content.artofmanliness.com/uploads/2015/08/Small-Things-Over-Time-2.jpg"></div>
<p>A lot is possible to do with these tools and I'll write about that in the future, but today we'll start with a much <a href="/blog/2017/02/22/fast-and-easy-way-to-learn-complex-topics/">smaller step</a>: a Checker that will inform us about coding standard violation. No changes, no refactoring.</p>
<p>To know how to build a Checker you need to understand 3 terms: <em>token</em>, <em>dispatcher</em> and <em>subscriber</em>.</p>
<p>I'll explain them one by one.</p>
<h2 id="1-token">1. Token</h2>
<p>We see PHP as:</p>
<pre><code class="language-php">&lt;?php echo "hi";</code></pre>
<p>Coding Standard tools see it in <a href="https://php.net/manual/en/tokens.php">tokens</a>:</p>
<pre><code class="language-php">$phpCodeInTokens = token_get_all('&lt;?php echo "hi";');
var_dump($phpCodeInTokens);</code></pre>
<pre><code class="language-php">array(5) {
  [0]=&gt;
      array(3) {
        [0]=&gt;
        int(379) # token id
        [1]=&gt;
        string(6) "&lt;?php " # token content
        [2]=&gt;
        int(1)
      }
  [1]=&gt;
      array(3) {
        [0]=&gt;
        int(328) # token id
        [1]=&gt;
        string(4) "echo" # token content
        [2]=&gt;
        int(1)
      }
  [2]=&gt;
      array(3) {
        [0]=&gt;
        int(382) # token id
        [1]=&gt;
        string(1) " " # token content
        [2]=&gt;
        int(1)
      }
  [3]=&gt;
      array(3) {
        [0]=&gt;
        int(323) # token id
        [1]=&gt;
        string(4) ""hi"" # token # content
        [2]=&gt;
        int(1)
  }
  [4]=&gt;
      string(1) ";"
}</code></pre>
<p>Don't worry, this is not a content we need to work with. <strong>It will be converted to arrays or objects like these</strong>:</p>
<pre><code class="language-php">$token = [
    'type' =&gt; 328, # token id stated by PHP, you can use also more readable constant: T_ECHO (with value 328)
    'content' =&gt; 'echo'
];</code></pre>
<p>Now you know what &quot;token&quot; is.</p>
<h2 id="2-dispatcher">2. Dispatcher</h2>
<p>Do you know <a href="/blog/2019/08/05/standalone-symfony-event-dispatcher-from-the-scratch/">Event Dispatcher</a>?</p>
<p>If not, it's a pattern (like <em>repository</em> or <em>factory</em>) that says: <strong>when this action happens, call all methods that listen to it</strong>, e.g. when order is finished (event), send confirmation SMS to user and send him thank-you box full of candies (subscribed methods).</p>
<pre><code class="language-php">$dispatcher-&gt;dispatch('order_finished');</code></pre>
<p>For Coding Standard tools <strong>it works the same</strong> but with different naming:</p>
<ul>
<li>Event &lt;=&gt; <em>Token</em></li>
<li>Subscriber &lt;=&gt; <em>Checker</em></li>
</ul>
<p>Almost there.</p>
<h2 id="3-subscriber">3. Subscriber</h2>
<p>You already know that <em>subscriber</em> is a <em>Checker</em>. Checker is a class that waits for a specific token.</p>
<p>In pseudo code:</p>
<pre><code class="language-php">class Checker
{
    public function subscribeToToken()
    {
        return T_ECHO; // number for "echo" by PHP
    }

    public function someMethodThatWillBeCalled(array $token)
    {
        if ($token['content'] !== 'echo') {
            // mallformed echo, probably "ECHO", "eCHO" etc.
        }
    }
}</code></pre>
<p>Internally Coding Standard tools <strong>dispatch all tokens found in specific file</strong>:</p>
<pre><code class="language-php">$tokens = $this-&gt;getAllTokens(file_get_contents($file));
foreach ($tokens as $token) {
    $codingStandardTool-&gt;dispatch($token['type']);
}</code></pre>
<p>When the dispatcher gets a token with type <code>T_ECHO</code> (= <code>328</code>) it will call  <code>Checker::someMethodThatWillBeCalled()</code> method.</p>
<p>I think now you are ready for the real code.</p>
<h3 id="do-you-want-real-code">Do You Want Real Code?</h3>
<p>I already wrote <a href="/blog/2017/07/17/how-to-write-custom-sniff-for-code-sniffer-3/">how to write a Sniff for PHP_CodeSniffer</a> or <a href="/blog/2017/07/24/how-to-write-custom-fixer-for-php-cs-fixer-24/">how to write a Fixer for PHP CS Fixer</a> on this topic where I write code to solve  real life use cases.</p>
<p>Enjoy saved time by writing a code that works for you.</p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2017/07/31/how-php-coding-standard-tools-actually-work</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 31 Jul 2017 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2017/07/31/how-php-coding-standard-tools-actually-work#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Write Custom Fixer for PHP CS Fixer 2.12 ]]></title>
                <link>https://tomasvotruba.com/blog/2017/07/24/how-to-write-custom-fixer-for-php-cs-fixer-24</link>
                <description><![CDATA[ <p>You already know <a href="/blog/2017/07/17/how-to-write-custom-sniff-for-code-sniffer-3/">how coding standard tools work with tokens and how to write a Sniff</a>.
<br><br>
Today we'll explore a bit younger tool - <a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer">PHP CS Fixer</a> and we get <strong>from only finding the smelly spot to fixing it</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <p><strong>Are you new to PHP Coding Standard Tools</strong>? You can read intro <a href="/blog/2017/07/31/how-php-coding-standard-tools-actually-work/">How PHP Coding Standard Tools Actually Work</a> to grasp the idea behind them. Or <a href="https://www.youtube.com/watch?v=t99KH0TR-J4&amp;feature=youtu.be&amp;t=16">just go on</a> if you're ready to start...</p>
<p><br></p>
<p>When a coding standard tool finds over 1000 violations in our code is nice to know, but it doesn't save us any time and energy we need for <a href="http://calnewport.com/books/deep-work/">a deep work</a>.</p>
<h3 id="find-amp-fix-it">Find &amp; Fix It</h3>
<p>That main difference of PHP CS Fixer to PHP_CodeSniffer is that <strong>every Fixer has to fix issues it finds</strong>. That's why there is no <code>LineLengthFixer</code>, because fixing line length is difficult to automate.</p>
<p>Personally I like PHP CS Fixer a bit more, <strong>because of more friendlier API, active community and openness to 3rd party packages</strong>:</p>
<div class="text-center">
    <img src="/assets/images/posts/2017/php-cs-fixer-intro/php-cs-fixer-require.png" class="img-thumbnail"><br><a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer/blob/1c10240da97479274fd40a136c3857ff94f7f93f/composer.json#L16-L33">
        <code>composer.json</code> from PHP CS Fixer
    </a>
</div>
<p><br></p>
<div class="text-center">
    <img src="/assets/images/posts/2017/php-cs-fixer-intro/code-sniffer-require.png" class="img-thumbnail"><br><a href="https://github.com/squizlabs/PHP_CodeSniffer/blob/1e440f47e304e640217645e843cdacaacc5339b6/composer.json#L27-L32"><code>composer.json</code> from PHP_CodeSniffer</a>
</div>
<p><br></p>
<p>Apart that, they are similar: they share <a href="/blog/2017/07/17/how-to-write-custom-sniff-for-code-sniffer-3/#1-token">tokens</a>,
<a href="/blog//blog/2017/07/17/how-to-write-custom-sniff-for-code-sniffer-3/#2-dispatcher">dispatcher</a>
and <a href="/blog/2017/07/17/how-to-write-custom-sniff-for-code-sniffer-3/#2-dispatcher">subscribers</a>.</p>
<p>Yet still, working with tokens is counter intuitive to way we work with the code (class, method, property...), but I'll write about that later.</p>
<p>Now we jump to writing the Fixer class.</p>
<h2 id="7-steps-to-make-an-code-exceptionnamefixer-code">7 Steps to Make an <code>ExceptionNameFixer</code></h2>
<p>&quot;An exception class should have &quot;Exception&quot; suffix.&quot;</p>
<p>In last post, we made
<a href="/blog/2017/07/17/how-to-write-custom-sniff-for-code-sniffer-3/#let-s-make-code-exceptionnamesniff-code-together">ExceptionNameSniff</a>, that will:</p>
<ul>
<li>find an &quot;extends&quot; token</li>
<li>check if parent class is an Exception</li>
<li>find a current class name</li>
<li>check if ends &quot;Exception&quot;</li>
</ul>
<p>Today we'll add one more step:</p>
<ul>
<li><strong>fix the name to end with &quot;Exception&quot;</strong></li>
</ul>
<h3 id="1-implement-an-interface">1. Implement an Interface</h3>
<p>Create a fixer class and implement a <code>PhpCsFixer\Fixer\DefinedFixerInterface</code> interface.</p>
<p>It covers 7 required methods, but most of them are easy one-liners:</p>
<pre><code class="language-php">use PhpCsFixer\Fixer\DefinedFixerInterface;
use PhpCsFixer\FixerDefinition\FixerDefinitionInterface;
use PhpCsFixer\Tokenizer\Tokens;
use SplFileInfo;

final class ExceptionNameFixer implements DefinedFixerInterface
{
    # first 5 methods are rutine and descriptive

    public function getName(): string
    {
    }

    public function getDefinition(): FixerDefinitionInterface
    {
    }

    public function isRisky(): bool
    {
    }

    public function supports(SplFileInfo $file): bool
    {
    }

    public function getPriority(): int
    {
    }

    # in last 2 methods, the magic happens :)

    public function isCandidate(Tokens $tokens): bool
    {
    }

    public function fix(SplFileInfo $file, Tokens $tokens): void
    {
    }
}</code></pre>
<h3 id="2-easypicks-first">2. Easypicks First</h3>
<p>I start with implementing first 5 methods, to make the easy work first:</p>
<pre><code class="language-php">&lt;?php

use PhpCsFixer\FixerDefinition\CodeSample;
use PhpCsFixer\FixerDefinition\FixerDefinition;
use PhpCsFixer\FixerDefinition\FixerDefinitionInterface;
use PhpCsFixer\Tokenizer\Tokens;
use SplFileInfo;

final class ExceptionNameFixer implements DefinedFixerInterface
{
    public function getName(): string
    {
        return self::class;
    }

    // this methods return the error message
    // and it might include a sample code, that would fix it
    public function getDefinition(): FixerDefinitionInterface
    {
        return new FixerDefinition(
            'Exception classes should have suffix "Exception".',
            [
                new CodeSample(
                    '&lt;?php
    class SomeClass extends Exception
    {
    }'
                ),
            ]
        );
    }

    // if the fixer changes code behavior in any way, return "true"
    // changing a class name is such case
    public function isRisky(): bool
    {
        return true;
    }

    // in 99.9% this is true, since only *.php are passed
    // you can detect specific names, e.g. "*Repository.php"
    public function supports(SplFileInfo $file): bool
    {
        return true;
    }

    // it's used to order all fixers before running them
    // `0` by default, higher value is first
    public function getPriority(): int
    {
        return 0;
    }
}</code></pre>
<h3 id="3-subscribe-the-fixer">3. Subscribe the Fixer</h3>
<p>Now we get to more interesting parts. Method <code>isCandidate(Tokens $tokens): bool</code> is like a <strong>subscriber</strong>. It gets all tokens of the file. We can check <strong>more than one token and create more strict conditions</strong> thanks to that:</p>
<pre><code class="language-php">public function isCandidate(Tokens $tokens): bool
{
    return $tokens-&gt;isAllTokenKindsFound([T_CLASS, T_EXTENDS, T_STRING]);
}</code></pre>
<p><code>extends</code> token without class and its name is useless and not a code we want to match.</p>
<h3 id="4-add-quot-fix-it-quot-part">4. Add &quot;Fix it&quot; part</h3>
<pre><code class="language-php">public function fix(SplFileInfo $file, Tokens $tokens): void
{
}</code></pre>
<p>This methods get same tokens as <code>isCandidate()</code> and the file info.</p>
<p><strong>How to build a fixer?</strong></p>
<ul>
<li>First we need to detect, if this is the use case we try to match - <strong>an exception class</strong>. Because <code>T_EXTENDS</code> doesn't tell a lot.</li>
<li>Then we need to check if it meets our rules</li>
<li>and fix if so.</li>
</ul>
<p>Let's take it one a by one:</p>
<h3 id="5-detect-the-exception-class">5. Detect the Exception Class</h3>
<p><em>A class that extends another class that has suffix &quot;Exception&quot;.</em></p>
<p>There is a bit different paradigm compared to PHP_CodeSniffer. We don't get position of the <code>extends</code> token, but <strong>all the tokens</strong>. Instead of investigating one token and it's relation to other, <strong>we need to iterate through all tokens and match them with conditions</strong>:</p>
<pre><code class="language-php">public function fix(SplFileInfo $file, Tokens $tokens): void
{
    foreach ($tokens as $index =&gt; $token) {
        // is there extends token?
        if (! $token-&gt;isGivenKind(T_EXTENDS)) {
            continue;
        }

        // is this exception class?
        if (! $this-&gt;isException($tokens, $index)) {
            continue;
        }

    }
}</code></pre>
<p><strong>How to detect an exception class?</strong></p>
<p><code>Tokens</code> (like <code>File</code> in PHP_CodeSniffer) has helper methods to make our life easier.</p>
<p><strong>First of them is <code>getNextMeaningfulToken()</code>, which skips spaces and comments and seeks for first useful one</strong>. In our case, after <code>extends</code> we look for a parent class name.</p>
<pre><code class="language-php">private function isException(Tokens $tokens, int $index): bool
{
    $parentClassNamePosition = $tokens-&gt;getNextMeaningfulToken($index);
    // $tokens support array access - to get a token with some index, call $tokens[25]
    $parentClassNameToken = $tokens[$parentClassNamePosition];
    $parentClassName = $parentClassNameToken-&gt;getContent();

    return $this-&gt;stringEndsWith($parentClassName, 'Exception');
}

private function stringEndsWith(string $name, string $needle): bool
{
    return substr($name, -strlen($needle)) === $needle;
}</code></pre>
<p>Back to iteration! When this passes, we know <strong>we have a class that extends an exception</strong>.</p>
<p>Do you know what we need to do now? You're right, <strong>we have to check its name</strong>. We can use another helper method: <code>getPrevMeaningfulToken()</code>.</p>
<pre><code class="language-php">public function fix(SplFileInfo $file, Tokens $tokens): void
{
    foreach ($tokens as $index =&gt; $token) {
        // is there extends token?
        if (! $token-&gt;isGivenKind(T_EXTENDS)) {
            continue;
        }

        // is this exception class?
        if (! $this-&gt;isException($tokens, $index)) {
            continue;
        }

        // does this class ends with "Exception"?
        $classNamePosition = (int) $tokens-&gt;getPrevMeaningfulToken($index);
        // get the token
        $classNameToken = $tokens[$classNamePosition];
        // check its content
        if ($this-&gt;stringEndsWith($classNameToken-&gt;getContent(), 'Exception')) {
            continue;
        }

    }
}</code></pre>
<h3 id="6-fixing-the-error">6. Fixing the Error</h3>
<p>Fixing is right to the point. To change a name, replace old name (<code>T_STRING</code> <code>Token</code>) with new <code>Token</code> object with different value:</p>
<pre><code class="language-php">// Token(token type, value)
$tokens[$classNamePosition] = new Token([T_STRING, $classNameToken-&gt;getContent() . 'Exception']);</code></pre>
<p>Is that it? Yea, that's it :)</p>
<h3 id="7-put-together-the-final-fixer">7. Put Together The Final Fixer</h3>
<pre><code class="language-php">&lt;?php

namespace App\CodingStandard\Fixer;

use PhpCsFixer\Fixer\DefinedFixerInterface;
use PhpCsFixer\FixerDefinition\CodeSample;
use PhpCsFixer\FixerDefinition\FixerDefinition;
use PhpCsFixer\FixerDefinition\FixerDefinitionInterface;
use PhpCsFixer\Tokenizer\Token;
use PhpCsFixer\Tokenizer\Tokens;
use SplFileInfo;

final class ExceptionNameFixer implements DefinedFixerInterface
{
    public function getName(): string
    {
        return self::class;
    }

    public function getDefinition(): FixerDefinitionInterface
    {
        return new FixerDefinition(
            'Exception classes should have suffix "Exception".',
            [
                new CodeSample(
                    '&lt;?php
    class SomeClass extends Exception
    {
    }'
                ),
            ]
        );
    }

    public function isCandidate(Tokens $tokens): bool
    {
        return $tokens-&gt;isAllTokenKindsFound([T_CLASS, T_EXTENDS, T_STRING]);
    }

    public function isRisky(): bool
    {
        return false;
    }

    public function supports(SplFileInfo $file): bool
    {
        return true;
    }

    public function getPriority(): int
    {
        return 0;
    }

    public function fix(SplFileInfo $file, Tokens $tokens): void
    {
        foreach ($tokens as $index =&gt; $token) {
            if (! $token-&gt;isGivenKind(T_EXTENDS)) {
                continue;
            }

            if (! $this-&gt;isException($tokens, $index)) {
                continue;
            }

            $classNamePosition = (int) $tokens-&gt;getPrevMeaningfulToken($index);
            $classNameToken = $tokens[$classNamePosition];
            if ($this-&gt;stringEndsWith($classNameToken-&gt;getContent(), 'Exception')) {
                continue;
            }

            $tokens[$classNamePosition] = new Token([T_STRING, $$classNameToken-&gt;getContent() . 'Exception']);
        }
    }

    private function isException(Tokens $tokens, int $index): bool
    {
        $parentClassNamePosition = $tokens-&gt;getNextMeaningfulToken($index);
        $parentClassNameToken = $tokens[$parentClassNamePosition];
        $parentClassName = $this-&gt;getParentClassName($tokens, $index);

        return $this-&gt;stringEndsWith($parentClassName, 'Exception');
    }

    private function stringEndsWith(string $name, string $needle): bool
    {
        return (substr($name, -strlen($needle)) === $needle);
    }
}</code></pre>
<h2 id="how-to-run-it">How to run it?</h2>
<h3 id="the-php-cs-fixer-way">The PHP CS Fixer way</h3>
<p>Create <code>.php_cs</code> config and register fixer with <code>registerCustomFixers()</code> method, like here in <a href="https://github.com/shopsys/coding-standards/blob/5f7c5e61f3a5ddd279887ac51a2bcb5f6bc81d78/build/phpcs-fixer.php_cs#L54"><code>shopsys/coding-standard</code></a>.</p>
<pre><code class="language-php">return PhpCsFixer\Config::create()
    -&gt;registerCustomFixers([
        new App\CodingStandard\Fixer\ExceptionNameFixer,
    ]);</code></pre>
<p>And run:</p>
<pre><code class="language-bash">vendor/bin/php-cs-fixer fix src --config=.php_cs --dry-run</code></pre>
<h3 id="the-a-href-https-github-com-symplify-easy-coding-standard-ecs-a-way">The <a href="https://github.com/symplify/easy-coding-standard">ECS</a> way</h3>
<p>Put the class to <code>ecs.php</code>:</p>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

use App\CodingStandard\Fixer\ExceptionNameFixer;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return static function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();

    $services-&gt;set(ExceptionNameFixer::class);
};</code></pre>
<p>And run:</p>
<pre><code class="language-bash">vendor/bin/ecs check src</code></pre>
<p>That was your first fixer.</p>
<p>Happy fixing!</p>
<p>And if you want <strong>more detailed tutorial</strong>, there is one in <a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer/blob/master/doc/COOKBOOK-FIXERS.md">official cookbook</a>.</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2017/07/24/how-to-write-custom-fixer-for-php-cs-fixer-24</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 24 Jul 2017 00:00:00 +0000</pubDate>
                                    <updated>2020-08-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Aug 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2017/07/24/how-to-write-custom-fixer-for-php-cs-fixer-24#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Write Custom Sniff for Code Sniffer 3.3 ]]></title>
                <link>https://tomasvotruba.com/blog/2017/07/17/how-to-write-custom-sniff-for-code-sniffer-3</link>
                <description><![CDATA[ <p>When I give talks about coding standards, I ask people 2 questions: do you use coding standards? Do you write your own sniffs? On average, above 50 % uses it, but only 1-2 people wrote their own sniff.
<br><br>
PSR-2 is great for start, but main power is in those own sniffs. Every project has their own need, every person has different preferences.
<br><br>
I Google then and found outdated or complicated sources, so I've decided to write down a reference post for those, who want to start with sniffs.
Let's look what will show all you need (and nothing more) to <strong>know to write your first sniff</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <p><strong>Are you new to PHP Coding Standard Tools</strong>? You can read intro <a href="/blog/2017/07/31/how-php-coding-standard-tools-actually-work/">How PHP Coding Standard Tools Actually Work</a> to grasp the idea behind them. Or <a href="https://www.youtube.com/watch?v=t99KH0TR-J4&amp;feature=youtu.be&amp;t=16">just go on</a> if you're ready to start...
<br></p>
<p>Today we'll pick an example a from my friend <a href="https://www.martinhujer.cz">Martin Hujer</a>. Once told me about sniff that checks <strong>that all exception classes have &quot;Exception&quot; suffix</strong>.</p>
<p>I said: How is it useful in practise? We all know that is common knowledge to write them this way. He replied: Well, we found some even in our code base.</p>
<p>The point is not in the count of fixed cases, but in <em>CI based responsibility</em>. From now on, <strong>people'll NEVER have to think about it</strong> and they can <strong>focus on more valuable processes</strong> that CI cannot do, like writing AliPay integration.</p>
<h2 id="6-steps-to-code-exceptionnamesniff-code">6 Steps To <code>ExceptionNameSniff</code></h2>
<h3 id="1-start-with-sentence-that-declares-what-sniff-does">1. Start With Sentence That Declares What Sniff Does</h3>
<p>&quot;An exception class should have &quot;Exception&quot; suffix.&quot;</p>
<h3 id="2-create-a-sniff-class-and-implement-a-code-php-codesniffer-sniffs-sniff-code-interface">2. Create a Sniff Class and Implement a <code>PHP_CodeSniffer\Sniffs\Sniff</code> interface</h3>
<p>It covers 2 required methods:</p>
<pre><code class="language-php">use PHP_CodeSniffer\Sniffs\Sniff;

final class ExceptionNameSniff implements Sniff
{
    /**
     * @return int[]
     */
    public function register(): array
    {
    }

    public function process(File $file, $position): void
    {
    }
}</code></pre>
<p>A <code>register()</code> method returns list of tokens to subscribe to. Which token should we put there?</p>
<p><em>Note: You can find all tokens in <a href="https://php.net/manual/en/tokens.php">PHP manual</a>.</em></p>
<p>From &quot;An exception class should have &quot;Exception&quot; suffix.&quot; I thought the <code>T_CLASS</code> would be ideal:</p>
<pre><code class="language-php">public function register(): array
{
    return [T_CLASS];
}</code></pre>
<p>It would match this part of php code:</p>
<pre><code class="language-php">**class** SomeException extends Exception { # this is one line in your code</code></pre>
<p><code>T_CLASS</code> would match also these false positives:</p>
<pre><code class="language-php">new **class**() extends Exception { # anonymous class
**class** SomeClass { # class without parent</code></pre>
<p>It might be a little tricky to find out the easiest way to check the rule. Here you'd have to detect these cases and skip them as well.</p>
<p>What is exception in natural language description (not PHP)? <em>A class that extends another class that has suffix &quot;Exception&quot;.</em></p>
<p>So this would save us bit of coding and thinking:</p>
<pre><code class="language-php">public function register(): array
{
    return [T_EXTENDS];
}</code></pre>
<h3 id="3-create-code-process-code-method">3. Create <code>process()</code> Method</h3>
<p>This method has 2 arguments.</p>
<pre><code class="language-php">public function process(File $file, $position)
{
}</code></pre>
<ul>
<li>
<ol>
<li>The <code>File $file</code> object holds all tokens of the file and helper methods.</li>
</ol>
</li>
<li>
<ol start="2">
<li>The <code>$position</code> is int for current located <code>T_EXTENDS</code> token.</li>
</ol>
</li>
</ul>
<p>There are 2 parts while writing a sniff:</p>
<ul>
<li>First we need to detect, if this is the use case we try to match - an exception class. Because <code>T_EXTENDS</code> doesn't tell a lot.</li>
<li>Then we need to check if it meets our rules and add error if not.</li>
</ul>
<p>Let's take it one a by one:</p>
<h3 id="4-detect-the-exception-class">4. Detect the Exception Class</h3>
<p><em>A class that extends another class that has suffix &quot;Exception&quot;.</em></p>
<p>A <code>File</code> has useful <code>findNext()</code> method:</p>
<pre><code class="language-php">$file-&gt;findNext(array ['tokens to find'], int 'where to start looking');</code></pre>
<p>It returns position of token found or null, if none.</p>
<p>We need to <strong>find a string after</strong> <code>T_EXTENDS</code>.</p>
<pre><code class="language-php">$parentClassNamePosition = $file-&gt;findNext([T_STRING], $position);
// File has all the tokens, so we get the one with name
$parentClassNameToken = $file-&gt;getTokens()[$parentClassNamePosition];

// and check it's Exception
if (substr($parentClassNameToken['content'], -strlen('Exception')) !== 'Exception')) {
    // the parent class it not and exception
    return;
}</code></pre>
<p>When the code gets pass this check, we know we have exception there.</p>
<h3 id="5-make-sure-it-ends-with-quot-exception-quot">5. Make Sure it Ends with &quot;Exception&quot;</h3>
<p>Would you what to do know? The process will be the same - to check if class name ends with &quot;Exception&quot; -, but instead of <code>findNext()</code> method we'll use <code>findPrevious()</code>:</p>
<pre><code class="language-php">// Get position of nearest previous string token
$classNamePosition = $file-&gt;findPrevious([T_STRING], $position);
// Get the token for it
$classNameToken = $file-&gt;getTokens()[$classNamePosition];
// Detect the content of token ends with "Exception"
if (substr($classNamePosition['content'], -strlen('Exception')) === 'Exception')) {
    // the current class ends with "Exception"
    return;
}</code></pre>
<p>When this section passes, we know we have exception without &quot;Exception&quot; suffix there.</p>
<p><strong>Reporting the error</strong></p>
<p>The last method we will use is <code>addFixableError()</code>.</p>
<p>In pseudo code:</p>
<pre><code class="language-php">$file-&gt;addFixableError(
    'Infomative message about error',
    'Where is the token with invalid content',
    'ID of this Sniff to display in error report - class or some string'
);</code></pre>
<p>In out case:</p>
<pre><code class="language-php">$file-&gt;addFixableError(
    'An exception class should have "Exception" suffix.',
    $position - 2,
    self::class
);</code></pre>
<p>Tada!</p>
<h3 id="6-put-together-the-final-sniff">6. Put Together The Final Sniff</h3>
<p>And extract <code>stringEndsWith()</code> method to make code more readable.</p>
<pre><code class="language-php">use PHP_CodeSniffer\Sniffs\Sniff;

final class ExceptionNameSniff implements Sniff
{
    /**
     * @return int[]
     */
    public function register(): array
    {
        return [T_EXTENDS];
    }

    public function process(File $file, $position): void
    {
        $parentClassNamePosition = $file-&gt;findNext([T_STRING], $position);
        $parentClassNameToken = $file-&gt;getTokens()[$parentClassNamePosition];

        // Does it ends with "Exception"?
        if (! $this-&gt;stringEndsWith($parentClassNameToken['content'], 'Exception')) {
            // The parent class it not and exception, neiter it this
            return;
        }

        $classNamePosition = $file-&gt;findPrevious([T_STRING], $position);
        $classNameToken = $file-&gt;getTokens()[$classNamePosition];
        if ($this-&gt;stringEndsWith($classNamePosition['content'], 'Exception')) {
            // The current class ends with "Exception", it's ok
            return;
        }

        $file-&gt;addFixableError('An exception class should have "Exception" suffix.', $position - 2, self::class)
    }

    private function stringEndsWith(string $name, string $needle): bool
    {
        return (substr($name, -strlen($needle)) === $needle);
    }
}</code></pre>
<p>You can find <a href="https://github.com/symplify/symplify/blob/eeeaab688f6b349e55ab0b3179749dc9e5e49035/packages/CodingStandard/src/Sniffs/Naming/ExceptionNameSniff.php">final Sniff on Github</a> and use it right away of course.</p>
<h2 id="how-to-run-it">How to run it?</h2>
<p>With <a href="https://github.com/symplify/easy-coding-standard">ECS</a> put the class to <code>ecs.php</code>:</p>
<pre><code class="language-php">&lt;?php

// ecs.php

declare(strict_types=1);

use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
use Symplify\CodingStandard\Sniffs\Naming\ExceptionNameSniff;

return static function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();
    $services-&gt;set(ExceptionNameSniff::class);
};</code></pre>
<p>And run:</p>
<pre><code class="language-bash">vendor/bin/ecs check src</code></pre>
<p>Congrats to your first sniffs! How do you like it?</p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2017/07/17/how-to-write-custom-sniff-for-code-sniffer-3</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 17 Jul 2017 00:00:00 +0000</pubDate>
                                    <updated>2020-08-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Aug 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2017/07/17/how-to-write-custom-sniff-for-code-sniffer-3#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to Deprecate PHP Package Without Leaving Anyone Behind ]]></title>
                <link>https://tomasvotruba.com/blog/2017/07/03/how-to-deprecate-php-package-without-leaving-anyone-behind</link>
                <description><![CDATA[ <p>You create PHP open-source packages because you personally use them in your projects. <strong>And you take care of them.</strong>
In time you change a job or switch a programming language and you don't have time to take care of them properly. Number of issues and PRs grows and <strong>package is getting obsolete</strong>.
<br><br>
You can do 2 things in this situation: nothing like most people do or <strong>take responsibility, deprecate package and inform your users about better alternative</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="why-care-about-deprecation-as-a-maintainer">Why Care About Deprecation as a Maintainer</h2>
<p>I created over 10 packages for <a href="https://nette.org">Nette</a> in the past under <em>Zenify</em> namespace. I used them in my projects extensively and they were growing in downloads. Then I switched to <a href="https://symfony.com">Symfony</a> and I worked mostly with Symfony projects.</p>
<p>If I tell you this in person, you'd know that future of <em>Zenify</em> is not based on daily usage of it's author and you'd consider switching to concurrent packages.</p>
<p><strong>The thing is: 95 % of users of your package don't know about your personal development and life path. They use <code>composer require vendor/package-name</code> and that's it.</strong> Of course, few people follow issues and PRs around your package and they might notice 6-months gap in activity.</p>
<h3 id="open-source-holidays">Open-Source Holidays</h3>
<p>But in open-source these <em>pauses</em> are normal: you need to finish your work project, focus on boost of another package, you have some personal or family events (wedding, newborn child, break-up, moving to another country etc.), so you take a break.</p>
<p><strong>6-months pause gap and 6-months end-of-development pause look the same. But they are way different.</strong></p>
<p>This is the second case.</p>
<p>As <a href="https://www.amazon.com/No-More-Mr-Nice-Guy/dp/0762415339">No more Mr. Nice Guy</a> would say:</p>
<h2 id="don-t-do-anything-in-secret">Don't do Anything in Secret</h2>
<h3 id="a-if-you-don-t-inform-people-they-might">A. If you DON'T inform people, they might:</h3>
<ul>
<li>build new open-source or application that depends <strong>on non-supported package</strong></li>
<li>integrate your package deeply in their architecture</li>
<li><strong>promote bad practice</strong> that you don't support anymore but don't have time to put them in the package</li>
<li><strong>wait in darkness</strong> thinking &quot;Author is on a vacation&quot;</li>
</ul>
<h3 id="b-if-you-do-inform-people-they-will">B. If you DO inform people, they will:</h3>
<ul>
<li><strong>be informed</strong> - either notified by composer or on your blog (I will your show how later)</li>
<li><strong>know</strong> what part of their application won't be upgraded anymore</li>
<li><strong>be able to plan</strong> next upgrade much better</li>
</ul>
<p><br></p>
<img src="/assets/images/posts/2017/deprecate/trust.jpg" class="img-thumbnail">
<h2 id="packages-like-relationships-stand-on-trust">Packages like Relationships Stand on Trust</h2>
<p>You have a meeting with a friend on Saturday on his birthday party. During the week you got close with a girl you like and you'd like to spend a weekend with her, because it's great opportunity to get to know her better. But what about your friend?</p>
<p>You can either:</p>
<ul>
<li>A. Wait it out and don't tell him anything. He probably wouldn't even notice.</li>
<li>B. Call him, explain the situation and let him know, you'll come next week as alternative.</li>
</ul>
<p><em>What would you choose if you were your friend?</em></p>
<p>Actually, <strong>B builds foundations of great and strong relationship</strong>, because people know they can trust you if anything difficult ever happens between you.</p>
<h2 id="deprecate-package-delete-package">Deprecate Package !== Delete Package</h2>
<p>I thought when I deprecate package, application who use it as a dependency stops working. This could be <strong>caused by deleting a package</strong>, but not by deprecating it. Imagine <strong>dropping from level 50 to 20</strong>.</p>
<p><strong>Deprecating a package</strong> is like <strong>having level 50 and staying there</strong> forever. It will never be worse, but it won't be better either. Deprecation won't break anything and won't improve anything.</p>
<p><a href="https://seld.be/notes/php-versions-stats-2016-2-edition"></p>
<img src="https://seld.be/images/update-reqs.png" class="img-thumbnail">
<p></a></p>
<p>It works the same for releases. When you release version 2.0 that <a href="/blog/2017/06/05/go-php-71/">requires PHP 7.1</a>, it doesn't mean your package won't work on PHP 5.6. Version 1.0 still does.</p>
<h2 id="3-steps-to-perform-safe-deprecation">3 Steps To Perform Safe Deprecation</h2>
<h3 id="1-explain-why">1. Explain Why</h3>
<p>&quot;This package is deprecated&quot; isn't satisfying, is it?</p>
<p>It's common psychological effect that people accept change with <a href="https://startwithwhy.com"><strong>an explanation behind it</strong></a> more than without it.</p>
<h3 id="2-suggest-replacement">2. Suggest Replacement</h3>
<p>Software develops all the time. New and better packages are born everyday.
It so much helpful if you suggest a way to go. It doesn't have to share 100 % features of your package. <strong>A package that you'd use if your package won't exist is fine</strong>.</p>
<p>You can combine both <a href="/blog/2016/03/10/autowired-controllers-as-services-for-lazy-people/">like this</a>:</p>
<blockquote>
<p>Since Symfony 3.3 you can use PSR4-based service discovery and registration. It does pretty much the
same thing - registers autowired controllers (and more) - and it has native support in Symfony.</p>
<p>I recommend using it instead!</p>
</blockquote>
<h3 id="3-inform-people-on-all-possible-places-they-can-meet-your-package">3. Inform People on All Possible Places They can Meet Your Package</h3>
<p>How many places are there to get in contact with your package? Programmer A added package to his composer, programmer B read about it on Github, programmer C saw a blog post that your wrote about it.</p>
<p>To make sure there are no deprecation leaks, put a sign on all sources:</p>
<p><br></p>
<p><strong>Packagist</strong></p>
<ul>
<li>
<p>Go to your package on Packagist, in my case <a href="https://packagist.org/packages/symplify/symfony-event-dispatcher">symplify/symfony-event-dispatcher</a></p>
</li>
<li>
<p>Hit &quot;Abandon&quot; button</p>
<img src="/assets/images/posts/2017/deprecate/packagist-abandon.png" class="img-thumbnail">
</li>
<li>
<p>Pick a replacement</p>
<img src="/assets/images/posts/2017/deprecate/packagist-replacement.png" class="img-thumbnail">
</li>
<li>
<p>And confirm</p>
<img src="/assets/images/posts/2017/deprecate/packagist-abandoned.png" class="img-thumbnail">
</li>
</ul>
<p>Now you hope that everybody is going to packagist to check if any of packages they're using are abandoned and seek their replacement... No it's not so painful.</p>
<p>Composer will tell you for every <code>composer require/update</code> that includes this package from now on:</p>
<img src="/assets/images/posts/2017/deprecate/composer-info.png" class="img-thumbnail">
<p><br></p>
<p><strong>Github Repository</strong></p>
<p>The best way to make people know the package is deprecated on Github <strong>is not by a note in <code>README</code></strong>. Nobody reads readme if he doesn't use the package first time. Note in a description is also small to spot.</p>
<p>Much more effective <strong>by changing an organization</strong>.</p>
<p>(And if you still need an access to the package, let me know. I'll add it for you.)</p>
<ul>
<li>
<p>Go to your package on Github, in my case <a href="https://github.com/Symplify/SymfonyEventDispatcher">Symplify/SymfonyEventDispatcher</a></p>
</li>
<li>
<p>Go to <em>Settings</em></p>
</li>
<li>
<p>Scroll down to <em>Danger Zone</em> and Pick <em>Transfer</em></p>
<img src="/assets/images/posts/2017/deprecate/github-danger-zone.png" class="img-thumbnail">
</li>
<li>
<p>Fill in the package name and <a href="https://github.com/DeprecatedPackages">&quot;DeprecatedPackages&quot; organization</a></p>
<img src="/assets/images/posts/2017/deprecate/github-transfer.png" class="img-thumbnail">
</li>
<li>
<p>And you're done!</p>
</li>
</ul>
<p>This is the most obvious way to let people know on Github.</p>
<p>If this process is too difficult for you, you can <a href="https://github.com/DeprecatedPackages/ControllerAutowire#controller-autowire---deprecated-in-core-of-symfony-33">add a &quot;deprecated&quot; note to README title</a> as well.</p>
<p><strong>The League of Deprecated Packages</strong></p>
<p><a href="https://github.com/DeprecatedPackages"></p>
<img src="https://avatars0.githubusercontent.com/u/22506867?v=3&s=200" class="img-thumbnail">
<p></a></p>
<p><em>Thanks to <a href="https://f3l1x.io">Milan Šulc</a> for making this beautiful logo that tells all the story.</em></p>
<p>I've come with this organization a year ago, when me and my friends needed to deprecate more package together. As some of you already figured out, it's a place to put all deprecated packages into.</p>
<p><br></p>
<p><strong>Blog Post(s) about Package</strong></p>
<p>One the most underestimated places is a blog post. I consider it the most important place for people who don't know the package yet, but might start using it. I'd feel bad if people would start using package <strong>after I deprecated them</strong>, instead of reaching out for the replacement right away.</p>
<p>I've <a href="https://github.com/TomasVotruba/tomasvotruba.com/pull/88">created a simple warning system</a> on my blog:</p>
<ul>
<li>
<p>Open post about the package.</p>
</li>
<li>
<p>Add warning above the perex with reasoning and suggested replacement:</p>
<img src="/assets/images/posts/2017/deprecate/blog-deprecate-note.png" class="img-thumbnail">
</li>
<li>
<p>Profit! Thousands of programmer pain-hours saved.</p>
</li>
</ul>
<h2 id="what-s-in-it-for-you-as-maintainer">What's in it For You as Maintainer?</h2>
<p>This all you do is for package users - what a great and altruistic person you are!
<strong>But it has one great upside for you as well.</strong> When I've <a href="/blog/2017/05/29/symplify-packages-deprecations-brought-by-symfony-33/">deprecated 5 of Symplify packages</a> I was sad to lose a legacy, my baby, my work... <strong>But it's worth it!</strong></p>
<p>In following weeks I found:</p>
<ul>
<li>I have <strong>more energy</strong> to work on the rest of packages,</li>
<li>I have <strong>much less responsibility</strong> so I can breathe more lightly,</li>
<li>and I can put more work into less projects</li>
</ul>
<p>Thanks to that, I've <a href="/blog/2017/05/03/combine-power-of-php-code-sniffer-and-php-cs-fixer-in-3-lines/">added new features to EasyCodingStandard</a>, released <a href="/blog/2017/06/26/php-object-calisthenics-rules-made-simple-version-3-0-is-out-now/">Object Calisthenics Coding Standard 3.0</a> and <a href="https://github.com/ApiGen/ApiGen/releases/tag/v5.0.0-RC2">released ApiGen 5.0-RC2</a>. The last one is secret in progress, so don't tell anybody.</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2017/07/03/how-to-deprecate-php-package-without-leaving-anyone-behind</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 03 Jul 2017 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2017/07/03/how-to-deprecate-php-package-without-leaving-anyone-behind#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Go PHP 7.1! ]]></title>
                <link>https://tomasvotruba.com/blog/2017/06/05/go-php-71</link>
                <description><![CDATA[ <p>PHP frameworks start to require PHP 7.1, leading with Nette 3 and Symfony 4.
<br><br>
Why skip PHP 7.0 and go directly to PHP 7.1? When is the best time to join?
What projects are already &quot;on the move&quot;?</p> ]]></description>
                <content:encoded><![CDATA[ <p><br></p>
<blockquote class="blockquote text-center">
    "Never believe that a few caring people can't change the world.<br>
    For, indeed, that's all who ever have."
    <footer class="blockquote-footer">Margaret Mead</footer></blockquote>
<p><br></p>
<h2 id="why-go-right-to-php-7-1">Why Go Right to PHP 7.1</h2>
<ul>
<li>
<p>When you migrate your project from 5.x to PHP 7.x, <strong>there is no reason not to jump right to 7.1</strong>. You get more features (like <code>void</code> and nullable types), longer security support and with that, <strong>you will have a longer break from another upgrade</strong>. Are you lazy enough to have a year longer break? I am.</p>
</li>
<li>
<p><strong>Frameworks are migrating</strong>. And let's be honest - huge frameworks are flag ships of evolution. Join them and you won't be left behind.</p>
</li>
<li>
<p>It would be easier to develop open-source, if we were able to agree on one recent PHP version to support.</p>
</li>
</ul>
<p>And I think you are already able to come with few more reasons of your own.</p>
<h2 id="how-to-move-hosts">How to Move Hosts?</h2>
<p>As in every new version of PHP, <strong>most of us still <del>depends on</del> waits for hosts to catch up</strong>. The situation was the same with PHP 5. New software version was already there, but hosts took their time. If there would be some way to move this.</p>
<p><strong>And then, a <a href="https://www.garfieldtech.com/blog/go-php-5-go">GoPHP5</a> movement was born, to rapidly speed this up.</strong></p>
<p>Quoting Larry:</p>
<p>&quot;The solution a few people suggested was team work. If all PHP projects stopped supporting PHP 4 and made the jump to PHP 5 at the same time, none of them is penalized in the market for being &quot;first&quot; and web hosts will have a clear business case to upgrade their systems to PHP 5. We can then all start offering faster, cleaner, more powerful, more secure web software.</p>
<p><strong>But how does one get all PHP projects together to agree on something like that? Actually, it's fairly simple. You ask them.</strong>&quot;</p>
<p>Well said.</p>
<h3 id="go-php-7-1-as-one">Go PHP 7.1 as One</h3>
<p>I was reading a post about <a href="https://symfony.com/blog/why-will-symfony-2-0-finally-use-php-5-3">Symfony 2 min version bump 5.3</a>.
It was a huge step in PHP development. Even if PHP 5.3 seem like an prehistoric version, many projects still uses that.</p>
<p>We are in same situation with PHP 7.1 now. <strong>If PHP community can cooperate as one, we are able to create brighter future for ourselves</strong>.</p>
<h2 id="when-and-who-gophp71-org">When and Who? goPHP71.org</h2>
<p>To better coordinate min version bump, I've created <a href="https://goPHP71.org">goPHP71.org</a> in last 2 evenings.</p>
<p>There you can see <strong>who and when is bumping min version</strong>.</p>
<img src="/assets/images/posts/2017/go-php-71/first-version.png" class="img-thumbnail">
<h2 id="how-can-you-help">How Can You Help?</h2>
<ul>
<li>Do you want to express your support for PHP 7.1?</li>
<li>Do you want to help others to coordinate their package development?</li>
</ul>
<p><strong>If you answered YES at least once, add your framework or package</strong>.</p>
<p>Website is <a href="https://github.com/tomasvotruba/goPHP71.org">hosted on Github Pages</a>, so you just <a href="https://github.com/TomasVotruba/gophp71.org/edit/master/index.html">edit <code>index.html</code></a> and send PR.</p>
<h3 id="spread-the-word">Spread the Word</h3>
<p>If you believe in this, share this page so we let hosts know, what we really need. <strong>It's our need to express and responsibility to take.</strong>
We can do it! Thank you.</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2017/06/05/go-php-71</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Mon, 05 Jun 2017 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2017/06/05/go-php-71#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Thank you David Grudl ]]></title>
                <link>https://tomasvotruba.com/blog/2017/06/01/thank-you-david</link>
                <description><![CDATA[ <p>While using open-source, we rarely realize that there is one or few people behind it. <strong>People who work in their free time and put an effort in it</strong>.
We feel like using a product - it should work and when it doesn't, it's broken. And when our application is constantly broken, we will be angry for them.
<br><br>
But if our application is smooth and ready, do we love and say thank you?
<br><br>
I'd like to express <strong>my gratitude and tribute for you, <a href="https://davidgrudl.com/">David</a> - you made my programming life very joyful and curious experience</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <p>A great friend of mine <a href="http://honzacerny.com">Honza Černý</a> lend me a book <em><a href="http://austinkleon.com/steal">Steal Like An Artist</a></em> few months ago. I'm very grateful for that, because I don't have much art-people in my social circle. You may think, it's about art (so did I), but it's <strong>more about relationships, sharing, caring, showing your vulnerability and cooperation</strong>. And open-source software!</p>
<p>One of lessons that lead me to this was...</p>
<h2 id="write-letters-to-your-heroes">Write Letters to Your Heroes</h2>
<blockquote>
<p>Often when we write fan letters we’re looking for a blessing or an affirmation.
But if you truly love somebody's work, you shouldn't need a response from them.
Write a blog post about someone's work that you admire and link to their site.
Make something and dedicate it to your hero.
Answer a question they've asked, solve a problem for them or improve their work and share it online.</p>
</blockquote>
<p>After reading this, I had my hero in mind, whom I'd like to write. I also shared this though with <a href="https://github.com/JanMikes">Honza Mikeš</a>, who answered me by showing a beautiful thank you email he wrote.</p>
<p>So here is my turn:</p>
<h2 id="thank-you-david">Thank you David</h2>
<p>I'd like to really thank you for 3 things you gave me.</p>
<h2 id="thank-you-for-my-job">Thank You for My Job</h2>
<p>I'm very grateful you've created Nette and you have been taking care of it for the last 10 years. I could work on many interesting web projects, earn a living from it and learn best practise in open-source. I've been maintaining like dozens of packages for a few years and <strong>I could barely remotely imagine, what it takes to maintain one project mostly by yourself. I envy you your huge persistence and determination</strong>.</p>
<p><strong>Thanks to you, I could bring together 3 things I love the most in the world - people, open-source and education</strong> - and get to teaching, learning and growing a community. I must say it was a relief, because when I was at university, I felt like I could do only programming or only work with people in psychology field.</p>
<h3 id="it-s-easy-to-be-a-leader-isn-t-it">It's easy to be a leader, isn't it?</h3>
<p><strong>I remember one moment, when I got much more respect for you.</strong> We had a social training group at university, when me and 15 more schoolmates went to a cottage near Brno to experience social dynamics in games. So there was a boat. And every person on this boat had his or her role and I was chosen to be the captain of the boat.</p>
<p>I thought it must be easy to be a captain (or Nette creator), <strong>because you can tell people what to do and you can decide mostly by yourself</strong>. Oh how hard lesson was about to come. We sailed over the sea, sun was shining, we had enough food and I was looking at my shiny boat and life was great.</p>
<p>Later, we had a hole in our boat, we started to run out of food and we saw some sharks around us - everybody was asking me: &quot;Captain, what should we do? Where do we go? Captain? Captain?&quot; <strong>I felt so much pressure and had thousand of issues to solve</strong>. My head was about to explode. Even though it was just a game.</p>
<p>In that exact moment I realized that every time I needed something to be changed or fixed or explained in Nette, I was putting my responsibility to you. My &quot;I don't care, you do it&quot; approach was very one-sided. <strong>And I started to see how freaking difficult it must be to manage website, community, meetups, program a software, do lectures, learn PHP in-depth and invent new revolutionary approaches in PHP.</strong></p>
<p><strong>Deep bow to you for all this and I'm sorry for every bad word I spread about your work online or offline. I'd love to take it back, because now I realize it originated from my in-experience with the other side.</strong></p>
<p>Since then, I recommend every programmer to maintain an open-source project for half a year to get similar powerful experience.</p>
<h2 id="thank-you-for-joyful-way-to-learn-php">Thank you for Joyful Way to Learn PHP</h2>
<p>I must say, Nette put a joy to my PHP programming. After all this <code>$_GET</code> and <code>$_POST</code> putting together in 1 file, I could see there is more advanced software that is mostly intuitive and ready to use.</p>
<p><strong>Thanks for explaining principals <a href="https://phpfashion.com/co-je-dependency-injection">Dependency Injection in many blog posts</a></strong>. I realized how only this thing helped me a lot while designing apps and understanding other frameworks. After travelling around European conferences and meetups, <strong>I see this pattern is very advanced in our country and miles ahead compared to other frameworks - thanks to you</strong>.</p>
<h2 id="thank-you-for-showing-me-that-programming-can-be-fun">Thank you for Showing me That Programming Can Be Fun</h2>
<p>Last but not least, <strong>I really enjoy your talks</strong>. Because they are not usually tech talks - deep, long, boring or complex. <strong>You are very funny and that's what makes you great teacher.</strong></p>
<p>&quot;They best way to learn something is to learn without knowing it.&quot;</p>
<p>I don't know any speaker similar to you who could do such a performance. And also these <a href="https://phpfashion.com/pet-duvodu-upgradovat-na-nette-2-2-3">puns</a> in the <a href="https://phpfashion.com/jak-vyvijet-komfotrneji">posts</a>. Love it :)</p>
<p><strong>I consider master peace to combine entertainment and education in one piece. To teach others by making them feel happy.</strong></p>
<p>Maybe that's the reason I still love Nette and your work, even though I know Symfony on the same level and a bit of Laravel.</p>
<h2 id="to-sum-up">To Sum Up</h2>
<p>I just wanted to say a few words to let you know how important you are and how much your work means to me.</p>
<p>No need to reply and enjoy your day!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2017/06/01/thank-you-david</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 01 Jun 2017 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2017/06/01/thank-you-david#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to refactor to new Dependency Injection features in Symfony 3.3 ]]></title>
                <link>https://tomasvotruba.com/blog/2017/05/07/how-to-refactor-to-new-dependency-injection-features-in-symfony-3-3</link>
                <description><![CDATA[ <p>This May will be released Symfony 3.3 with many DependencyInjection improvements.
Each of them is quite nice, <strong>but combined together - they are huge jump</strong> compare to what we have now.
<br><br>
Today I will show you what code can you drop and how to migrate it.</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="what-is-new">What is New?</h2>
<p>Symfony 3.3+ brings new that will completely <strong>change they we register services</strong>:</p>
<ul>
<li><a href="https://symfony.com/blog/new-in-symfony-3-3-service-autoconfiguration"><code>autoconfigure</code></a></li>
<li><a href="https://symfony.com/blog/new-in-symfony-3-3-simpler-service-configuration"><code>_defaults</code> and <code>instanceof</code></a></li>
<li><a href="https://symfony.com/blog/new-in-symfony-3-3-optional-class-for-named-services">named services → class services</a></li>
<li><a href="https://github.com/symfony/symfony/pull/21289">PSR-4-based service autodiscovery</a></li>
</ul>
<p>You can click read post/PR in detail, but you take <strong>this shortcut to learn them</strong>...</p>
<p><br></p>
<blockquote class="blockquote text-center">
    "A full code example is worth ten thousand words of explanation."
    <footer class="blockquote-footer">Stephen P. Thomas</footer></blockquote>
<p><br></p>
<h2 id="refactor-service-config-in-5-steps">Refactor Service Config in 5 Steps</h2>
<p>This is service config in Application in Symfony 3.2 or lower.</p>
<p>We apply all features we can and I always add a small <code># comment</code> to the code with explanation.</p>
<pre><code class="language-yaml"># app/config/services.yml
services:
    some_service:
        class: App\SomeService
        autowire: true

    some_controller:
        class: App\Controller\SomeController
        autowire: true

    first_repository:
        class: App\Repository\FirstRepository
        autowire: true
        calls:
            - ["setEntityManager", ["@entity_manager"]]
    second_repository:
        class: App\Repository\SecondRepository
        autowire: true
        calls:
            - ["setEntityManager", ["@entity_manager"]]

    first_command:
        class: App\Command\FirstCommand
        autowire: true
        tags:
            - { name: console.command }
    second_command:
        class: App\Command\SecondCommand
        autowire: true
        tags:
            - { name: console.command }</code></pre>
<h3 id="1-let-s-add-code-defaults-code">1. Let's add <code>_defaults</code></h3>
<pre><code class="language-yaml"># app/config/services.yml
services:
    _defaults:
        autowire: true # all services in this config are now autowired

    some_service:
        class: App\SomeService

    some_controller:
        class: App\Controller\SomeController

    first_repository:
        class: App\Repository\FirstRepository
        calls:
            - ["setEntityManager", ["@entity_manager"]]
    second_repository:
        class: App\Repository\SecondRepository
        calls:
            - ["setEntityManager", ["@entity_manager"]]

    first_command:
        class: App\Command\FirstCommand
        tags:
            - { name: console.command }
    second_command:
        class: App\Command\SecondCommand
        tags:
            - { name: console.command }</code></pre>
<h3 id="2-use-autoconfigure">2. Use autoconfigure</h3>
<pre><code class="language-yaml"># app/config/services.yml
services:
    _defaults:
        autowire: true
        autoconfigure: true # all Symfony native tags are now added automatically

    some_service:
        class: App\SomeService

    some_controller:
        class: App\Controller\SomeController

    first_repository:
        class: App\Repository\FirstRepository
        calls:
            - ["setEntityManager", ["@entity_manager"]]
    second_repository:
        class: App\Repository\SecondRepository
        calls:
            - ["setEntityManager", ["@entity_manager"]]

    first_command:
        class: App\Command\FirstCommand
    second_command:
        class: App\Command\SecondCommand</code></pre>
<h3 id="3-use-class-named-services">3. Use Class-Named Services</h3>
<pre><code class="language-yaml"># app/config/services.yml
services:
    _defaults:
        autowire: true
        autoconfigure: true

    App\SomeService: ~ # no more thinking about creative and unique service name

    App\Controller\SomeController: ~

    App\Repository\FirstRepository:
        calls:
            - ["setEntityManager", ["@entity_manager"]]
    App\Repository\SecondRepository:
        calls:
            - ["setEntityManager", ["@entity_manager"]]

    App\Command\FirstCommand: ~
    App\Command\SecondCommand: ~</code></pre>
<h3 id="4-use-psr-4-based-service-autodiscovery-and-registration">4. Use PSR-4 based service autodiscovery and registration</h3>
<pre><code class="language-yaml"># app/config/services.yml
services:
    _defaults:
        autowire: true
        autoconfigure: true

    App\: # no more manual registration of similar groups of services
        resource: '../'

    App\Repository\FirstRepository:
        calls:
            - ["setEntityManager", ["@entity_manager"]]
    App\Repository\SecondRepository:
        calls:
            - ["setEntityManager", ["@entity_manager"]]</code></pre>
<h3 id="5-use-code-instanceof-code">5. Use <code>_instanceof</code>...</h3>
<pre><code class="language-yaml"># app/config/services.yml
services:
    _defaults:
        autowire: true
        autoconfigure: true

    App\:
        resource: '../'

    _instanceof: # clean and explicit dependency injection to abstract services
        App\Repository\AbstractRepository:
            calls:
                - ["setEntityManager", ["@entity_manager"]]</code></pre>
<h3 id="5-or-setter-injection">5. ...or Setter Injection</h3>
<p>You can even remove the <code>_instanceof</code> with setter injection. First, modify the abstract repository to add the <code>@required</code> annotation to <code>setEntityManager</code>:</p>
<pre><code class="language-php">&lt;?php

namespace App\Repository;

use Doctrine\ORM\EntityManagerInterface;

abstract class AbstractRepository
{
    /**
     * @var EntityManagerInterface
     */
    private $entityManager;

    /**
     * @required
     */
    public function setEntityManager(EntityManagerInterface $entityManager): void
    {
        $this-&gt;entityManager = $entityManager;
    }

    // ...
}</code></pre>
<p>Now, remove the <code>_instanceof</code> in your <code>services.yml</code>:</p>
<pre><code class="language-yaml"># app/config/services.yml
services:
    _defaults:
        autowire: true
        autoconfigure: true

    App\:
        resource: '../'</code></pre>
<p>You're awesome! Now you're using all the shiny new Symfony 3.3 Dependency Injection features.</p>
<p><br></p>
<p><strong>What is your favorite change?</strong></p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2017/05/07/how-to-refactor-to-new-dependency-injection-features-in-symfony-3-3</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Sun, 07 May 2017 00:00:00 +0000</pubDate>
                                    <updated>2018-12-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Dec 2018 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Dec 2018 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2017/05/07/how-to-refactor-to-new-dependency-injection-features-in-symfony-3-3#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Combine power of PHP_CodeSniffer and PHP CS Fixer in 3 lines ]]></title>
                <link>https://tomasvotruba.com/blog/2017/05/03/combine-power-of-php-code-sniffer-and-php-cs-fixer-in-3-lines</link>
                <description><![CDATA[ <p>PHP_CodeSniffer has over <strong>5 381 stars</strong> on Github and <strong>210 default sniffs</strong>,
PHP CS Fixer with <strong>6 467 stars</strong> brings you <strong>160 fixers</strong>.
<br><br>
Both powerful tools dealing with coding standards with <strong>huge communities behind them</strong>.
Can you imagine using them both and actually enjoy it? Today I will show you how.</p> ]]></description>
                <content:encoded><![CDATA[ <div class="text-center">
    <img src="/assets/images/posts/2017/easy-coding-standard-intro/together.png" class="img-thumbnail"></div>
<h3 id="right-to-the-answer">Right to The Answer</h3>
<p>Let's say we want to check arrays. We add first <em>checker</em> that requires short PHP 5.4 <code>[]</code> syntax:</p>
<pre><code class="language-php">&lt;?php

// ecs.php

declare(strict_types=1);

use PHP_CodeSniffer\Standards\Generic\Sniffs\Arrays\DisallowLongArraySyntaxSniff;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return static function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();
    $services-&gt;set(DisallowLongArraySyntaxSniff::class);
};
</code></pre>
<p>Great start. Then we want to check for trailing commas, so every line has them.</p>
<p>So add one more checker:</p>
<pre><code class="language-php">&lt;?php

// ecs.php

declare(strict_types=1);

use PHP_CodeSniffer\Standards\Generic\Sniffs\Arrays\DisallowLongArraySyntaxSniff;
use PhpCsFixer\Fixer\ArrayNotation\TrailingCommaInMultilineArrayFixer;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return static function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();
    $services-&gt;set(DisallowLongArraySyntaxSniff::class);
    $services-&gt;set(TrailingCommaInMultilineArrayFixer::class);
};</code></pre>
<p>Great job! <strong>You have just combined PHP_CodeSniffer and PHP CS Fixer in 3 lines.</strong></p>
<p>With a help of <a href="https://github.com/symplify/easy-coding-standard">ECS</a>. Now, when title promise is fulfilled, I will show how to install it, run it and how nice and clear reports it generates.</p>
<h2 id="how-to-add-ecs-in-3-steps">How to add ECS in 3 steps</h2>
<h3 id="1-install-package">1. Install Package</h3>
<pre><code class="language-bash">composer require symplify/easy-coding-standard --dev</code></pre>
<h3 id="2-configure">2. Configure</h3>
<p>Create a <code>ecs.php</code> file in your project and desired checkers as above.</p>
<p>You can add a comment to groups, so everyone can easily orientate when there are more checkers.</p>
<h3 id="be-lazy-with-php">Be Lazy with PHP</h3>
<p>Do you use PHPStorm? Just use PHP to autocomplete everything as you're used to since ECS 8.</p>
<p><strong>No more looking to documentation</strong>, what string matches what sniff or fixer, if there are any checkers for arrays or debugging typos.</p>
<h3 id="3-run-it-amp-fix-it">3. Run it &amp; Fix it</h3>
<pre><code class="language-bash">vendor/bin/ecs check src

# ...

vendor/bin/ecs check src --fix</code></pre>
<div class="text-center">
    <img src="/assets/images/posts/2017/easy-coding-standard-intro/run-and-fix.gif" class="img-thumbnail"></div>
<p>That's all for short ECS intro.</p>
<p>Do you want to know more? Learn <a href="/blog/2017/07/17/how-to-write-custom-sniff-for-code-sniffer-3/">how to write own sniff</a> or <a href="/blog/2017/07/24/how-to-write-custom-fixer-for-php-cs-fixer-24/">even better - a fixer</a>.</p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2017/05/03/combine-power-of-php-code-sniffer-and-php-cs-fixer-in-3-lines</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Wed, 03 May 2017 00:00:00 +0000</pubDate>
                                    <updated>2020-08-01UTC00:00:000</updated>
                    <atom:updated>Sat, 01 Aug 2020 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2017/05/03/combine-power-of-php-code-sniffer-and-php-cs-fixer-in-3-lines#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ 3 Symfony and Laravel Patterns that Make Code Easy to Extend Without Modification ]]></title>
                <link>https://tomasvotruba.com/blog/2017/04/14/3-symfony-and-laravel-patterns-that-make-code-easy-to-extends-without-modification</link>
                <description><![CDATA[ <p>Do you write open-source? If so, you probably get many PR and issues about adding new feature, that people miss.</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="how-is-open-source-different-from-private-code">How is Open-Source Different from Private Code</h2>
<p>There is a big mind-shift from closed-source to open-source. To make it really work, you need to move from <em>my ego first</em> to <em>other people's feelings first</em>.</p>
<p>It is like building Matrix open to everybody. <strong>You have to predict future and unexpected use cases</strong>. Your code have to be <strong>extendable without making any changes in it</strong>.</p>
<h3 id="quot-opened-for-extension-closed-for-modification-quot">&quot;Opened for Extension, Closed for Modification&quot;</h3>
<p>Now, I can refer to <a href="https://en.wikipedia.org/wiki/Open/closed_principle"><strong>Open/closed principle</strong> on Wikipedia</a>, which is the worst way to explain it.</p>
<p>Instead, <strong>I took a time to find simple example</strong> (pro tip: Google with &quot;simple&quot;) and actually found one - <a href="https://github.com/wataridori/solid-php-example/blob/b84657cb736f86dda1453061d15df01f260e5140/2-open-closed-principle.php#L20-L32">go check it</a>, it clearly shows wrong approach.</p>
<p>Today I will show you 3 ways to create such entrances.</p>
<h2 id="1-interfaces-for-everything">1. Interfaces for Everything</h2>
<p>When I first saw Laravel, I've noticed one big difference to other PHP projects I've seen. There is <a href="https://github.com/laravel/framework/tree/master/src/Illuminate/Contracts">Contracts</a> directory, that contains <strong>interface for every service there is in Laravel</strong>. And they're not only in this directory, but used everywhere in the code. Crazy move by <a href="https://medium.com/@taylorotwell">Taylor Otwell</a> in that times, but very useful.</p>
<h3 id="why-is-this-useful">Why is this Useful?</h3>
<ul>
<li>You don't have to think about every service, if it could be replaced or not.</li>
<li>People <strong>will love your package</strong>, because they will <strong>see freedom and understanding</strong>, not obedience as in other packages. That's what happened for me.</li>
</ul>
<h3 id="don-t-forget-to-have-final-word">Don't forget to have Final Word</h3>
<p>To promote using interfaces instead of extending your classes like this:</p>
<pre><code class="language-php">class BoothCallEntrance implements MatrixEntranceInterface
{

}

class ComputerEntrance extends BoothCallEntrance
{

}</code></pre>
<p><strong>always <a href="https://ocramius.github.io/blog/when-to-declare-classes-final">mark your classes final</a></strong>. There is event <a href="https://github.com/symplify/coding-standard/blob/master/src/Fixer/Solid/FinalInterfaceFixer.php">sniff for that</a>. Use it.</p>
<pre><code class="language-php">final class BoothCallEntrance implements MatrixEntranceInterface
{

}

final class ComputerEntrance implements MatrixEntranceInterface
{

}</code></pre>
<p>Programmers won't have to think about raping your classes in the night - <strong>they just use the interface you provide</strong>.</p>
<div class="text-center">
    <img src="/assets/images/posts/2017/extendable-open-source/override.jpg" class="img-thumbnail"></div>
<p><strong>This is code-embodied composition over inheritance</strong>. No documentation nor Wikipedia links required.</p>
<h2 id="2-go-to-party-events-when-in-the-mood">2. Go to Party Events, when in the Mood</h2>
<p>Back to Matrix world: imagine you can listen to every phone booth. Let's say you <strong>write a script, that sends you sms with geo location of the booth every time it gets called</strong> (favorite tool for agent Smith ;-)).</p>
<div class="text-center">
    <img src="/assets/images/posts/2017/extendable-open-source/booth.png" class="img-thumbnail"></div>
<p>This approach is implemented in PHP under name of EventDispatcher. While working with Symfony, <strong>events gave me very similar feeling of freedom</strong> - <a href="https://symfony.com/doc/current/reference/events.html#kernel-events">in docs</a> as well in small book <a href="https://leanpub.com/a-year-with-symfony">A Year with Symfony</a>.</p>
<p>Do you want simple example of such listening script? <a href="/blog/2019/08/05/standalone-symfony-event-dispatcher-from-the-scratch/">Check this tested post</a> with all code snippets you need.</p>
<h3 id="while-on-event-listen-carefully">While on Event, Listen Carefully</h3>
<p>Matrix situation above would look like this:</p>
<p>Code of your package:</p>
<pre><code class="language-php">// some CRON script checking all booths are working

if ($booth-&gt;isCalled()) {
    // you with people could get here without sending you a PR for everything they might need? Easy! ↓

    // this is the entry point, just listen to 'boothCall'
    $this-&gt;eventDispatcher-&gt;dispatch('boothCall', $booth-&gt;getLocation();
    // ...
}</code></pre>
<p>And custom script listening:</p>
<pre><code class="language-php">final class BoothSpy
{
    public function listenTo()
    {
        return 'boothCall';
    }

    public function runOnPing($location)
    {
        $this-&gt;smsSender-&gt;sendABoothAlert($location);
    }
}</code></pre>
<h3 id="why-is-this-useful">Why is this Useful?</h3>
<ul>
<li>You can introduce entry point via event.</li>
<li>You can <strong>also pass metadata</strong>, like location. Those data <strong>can be open to change</strong>, but don't have to be.</li>
</ul>
<p>It might be confusing while using at first, but after few weeks I get used to it. Trust me, it's the best.</p>
<h2 id="3-like-collecting-stamps-just-on-steroids">3. Like Collecting stamps, just on Steroids</h2>
<p>This is most powerful and less known architecture pattern.</p>
<p><strong>1 service collects all services of specific type</strong></p>
<h3 id="where-it-came-from">Where it came from?</h3>
<p>Do you know <a href="https://symfony.com/doc/current/reference/dic_tags.html">service tagging in Symfony</a>?</p>
<pre><code class="language-yaml">services:
    app.custom_subscriber:
        class: AppBundle\EventListener\CustomSubscriber
        tags:
            - { name: kernel.event_subscriber }</code></pre>
<p>All services of <code>EventSubscriber</code> type are collected by EventDispatcher.</p>
<h3 id="you-probably-already-use-it">You Probably Already Use It</h3>
<ul>
<li>Console Commands → Console Application</li>
<li><a href="https://symfony.com/doc/current/security/voters.html">Security Voters</a> → Access Decision Manager</li>
</ul>
<p>As for tags - <a href="/blog/2017/02/12/drop-all-service-tags-in-your-nette-and-symfony-applications/#bare-tagging-is-duplicated-information">they often promote bad practise of duplicated information</a>. Don't use it if you don't have to.</p>
<h3 id="why-is-this-useful">Why is this Useful?</h3>
<ul>
<li>It goes very well with step 1.</li>
<li><strong>It's easy to integrate into huge systems</strong>. All you need to do is add 1 line of code:</li>
</ul>
<pre><code class="language-yaml">services:
    - YourSubscriber</code></pre>
<ul>
<li>It gives you powers of constructor injection. <strong>Your service can use any other services.</strong></li>
<li>It's the best prevention and antidote to <a href="http://sahandsaba.com/nine-anti-patterns-every-programmer-should-be-aware-of-with-examples.html#god-class">God classes</a>.</li>
</ul>
<h3 id="back-to-the-matrix">Back to the Matrix</h3>
<div class="text-center">
    <img src="/assets/images/posts/2017/extendable-open-source/renderer.jpg" class="img-thumbnail"></div>
<p>Let's say we have a service to render Matrix. It might look like this:</p>
<pre><code class="language-php">final class MatrixRenderer()
{
    public function render()
    {
        $this-&gt;agents-&gt;render();
        $this-&gt;environment-&gt;render();
        $this-&gt;people-&gt;render();
    }
}</code></pre>
<p>Later, one customer wants to render night clubs. Another customer wants to add weather. How to do that without modifying the code?  Like this:</p>
<pre><code class="language-php">final class MatrixRenderer()
{
    /**
     * @var LayerRendererInterface[]
     */
    private $layerRenderers = [];

    public function addLayerRenderer(LayerRendererInterface $layerRenderer)
    {
        $this-&gt;layerRenderers[] = $layerRenderer;
    }

    public function render()
    {
        foreach ($this-&gt;layerRenderers as $layerRenderer) {
            $layerRenderer-&gt;render();
        }
    }
}</code></pre>
<p>And decouple to services:</p>
<pre><code class="language-yaml">services:
    - AgentLayerRenderer
    - EnvironmentLayerRenderer
    - PeopleLayerRenderer

    # added by customers
    - NightClubsLayerRenderer
    - WeatherLayerRenderer</code></pre>
<p><em>Do you want to use collectors without pain? In case you use Symfony, Nette or Laravel, here is <a href="https://github.com/symplify/package-builder/blob/54ca56f850867b5ba9c5d96d2a00f4e2f0bb63a4/src/Adapter/Symfony/DependencyInjection/DefinitionCollector.php">PackageBuilder</a> that makes it simple.</em></p>
<h3 id="how-do-you-make-your-packages-easy-to-extend">How do You Make your Packages Easy to Extend?</h3>
<p>Let me know if you use any of these patterns. Or do you use something else? I'd love to hear about that!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2017/04/14/3-symfony-and-laravel-patterns-that-make-code-easy-to-extends-without-modification</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Fri, 14 Apr 2017 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2017/04/14/3-symfony-and-laravel-patterns-that-make-code-easy-to-extends-without-modification#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Fast and Easy Way to Learn Complex Topics ]]></title>
                <link>https://tomasvotruba.com/blog/2017/02/22/fast-and-easy-way-to-learn-complex-topics</link>
                <description><![CDATA[ <p>This little trick helps me to learn complex topic both fast and easy. It works very well during my lectures and posts. In Informatics, people tend to make issues more complex than it is necessary. It slows down the learning steep with no added value.
<br><br>
I think it's about time to take it back to <strong>the simplest step</strong> and make learning faster (or machines will). Today I will show you how.</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="philosophy-everywhere">Philosophy Everywhere</h2>
<p>Do you know <a href="https://simple.wikipedia.org/wiki/Occam&#039;s_razor">Occam's razor</a>, <a href="https://en.wikipedia.org/wiki/Pareto_principle">Pareto principle</a> or <a href="https://en.wikipedia.org/wiki/Lowest_common_denominator">Lowest common denominator</a>?</p>
<p>This is the term from their neighborhood. Don't be scared it's of those philosophers. Those are actually mind hack useful in everyday life.</p>
<h2 id="coaching-example-create-a-school-and-destroy-it-with-coaching">Coaching example: Create a School and Destroy it With Coaching</h2>
<p>When I talked to my coach recently, I realized that <strong>my biggest dream is founding a school</strong>. I immediately started thinking about the building, how much money does it cost, who would be the teachers and who would be the students.</p>
<p>That's not so <a href="https://en.wikipedia.org/wiki/SMART_criteria">SMART</a>, is it? I got overwhelmed and was unable to produce any real step I could do next day.</p>
<p>The coach got me <strong>from huge and long-life dream to reality of every day life</strong> by these questions:</p>
<ul>
<li>What can you do this year?</li>
<li>What can you do this month?</li>
<li><strong>What can you do this week?</strong></li>
</ul>
<p>Then it become much more real to me, as I live only 1 day at a time. <strong>I could imagine</strong>, next week I would write a testament on Google Docs, just to put it out. <strong>When you can imagine some concept with your fantasy, you're on the right path</strong>.</p>
<p><strong>Same process can be applied to learning and teaching</strong>.</p>
<h2 id="learning-software-example-narrow-nette-extension-down-to-one-line">Learning Software example: Narrow Nette Extension Down to one Line</h2>
<p>Btw, in software, this is also called <a href="https://en.wikipedia.org/wiki/Lean_software_development">Lean Software Development</a>.</p>
<p>Recently, I applied this approach to article about How to Create Your First Nette Extension.</p>
<h3 id="i-learned-extensions-the-hard-way">I Learned Extensions the Hard Way</h3>
<ol>
<li>
<p><strong>By Reading Nette documentation</strong> <a href="https://doc.nette.org/en/di-extensions">that describes over 20 features and uses cases it has</a>. That is information, which is useful, because I can use the tool to it's potential, but not the best adopt the skill.</p>
</li>
<li>
<p><strong>By Reading extension of open-source packages</strong>. They are similar to documentation: many features on various use cases I didn't understand yet.</p>
</li>
</ol>
<p>That lead to <strong>overstretching my brain muscle</strong>. It's like trying to jump over huge hole before even walking.</p>
<p>Before starting and article, I tried to find this easiest step.</p>
<h3 id="could-it-be-simpler">Could it be simpler?</h3>
<p>What is essential purpose of the extension? It registers services to Nette Dependency Injection Container.</p>
<ul>
<li>Register services to Container?</li>
<li>Register services?</li>
<li><strong>Register 1 service</strong> - that's the one and only step we'll make today.</li>
</ul>
<p>And that was the topic I wrote about.</p>
<h2 id="pause-bad-feelings-and-take-your-time-to-think">Pause Bad Feelings and Take Your Time to Think</h2>
<p>So next time you'll think &quot;gosh, this is so hard, I don't understand it, I'm so slow/lazy/...&quot;, <strong>stop for a moment and carefully look at the problem</strong>. <strong>There might be an easier way.</strong></p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2017/02/22/fast-and-easy-way-to-learn-complex-topics</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Wed, 22 Feb 2017 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2017/02/22/fast-and-easy-way-to-learn-complex-topics#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Minimalistic Way to Create Your First Nette Extension ]]></title>
                <link>https://tomasvotruba.com/blog/2017/02/15/minimalistic-way-to-create-your-first-nette-extension</link>
                <description><![CDATA[ <p>Nette extension allows you not only to create open-source packages, but also to <strong>split your application to small and logical chunks of code</strong>.
<br><br>
Open-source extensions are more complex using many Nette\DI features, but today I will show you, how to <strong>start with one Nette\DI method and one service only</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <p>I consider <a href="https://github.com/nette/sandbox">Nette Sandbox</a> the best way to show learn any Nette feature. Let's use it.</p>
<h2 id="register-service-in-nette-sandbox">Register service in Nette Sandbox</h2>
<p>If you want to register a service, what will you do?</p>
<pre><code class="language-yaml"># app/config/config.neon

services:
    - App\Model\UserManager # put it there</code></pre>
<p>File <code>app/config/config.neon</code> is like a socket.</p>
<img src="/assets/images/posts/2017/nette-extension/single-socket.jpg" class="img-thumbnail">
<p>There is <strong>one place to active your computer</strong>, when you plug it in.</p>
<p>But what if your want to <strong>plug in computer and mobile charger</strong> in the same time?</p>
<img src="/assets/images/posts/2017/nette-extension/multi-socket.jpg" class="img-thumbnail">
<p>To load more services, we use the same interface as <code>app/config/config.neon</code>: <strong>a file with service section that lists services</strong>.</p>
<h2 id="create-local-extension-in-5-steps">Create Local Extension in 5 Steps</h2>
<p>Let's say we want to decouple a FileSystem utilities.</p>
<h3 id="1-pick-a-name-for-directory">1. Pick a Name for Directory</h3>
<p>What about &quot;FileSystem&quot;? If you agree, create <code>src/FileSystem</code> directory.
We will put configuration (sevices.neon) and classes there.</p>
<h3 id="2-create-or-move-related-classes-there">2. Create or move Related Classes there</h3>
<p>Starting small, one service will do. When it grows, we can decouple it later.</p>
<pre><code class="language-php"># src/FileSystem/FileSystem.php

&lt;?php declare(strict_types=1);

namespace FileSystem;

final class FileSystem
{
    // some awesome methods!
}
</code></pre>
<h3 id="3-create-config">3. Create config</h3>
<p>This is similar to <code>app/config/services.neon</code>, just in different location:</p>
<pre><code class="language-yaml"># src/FileSystem/config/services.neon

- FileSystem\FileSystem</code></pre>
<h3 id="4-create-an-extension">4. Create an Extension</h3>
<pre><code class="language-php"># src/FileSystem/DI/FileSystemExtension.php

&lt;?php declare(strict_types=1);

namespace FileSystem\DI;

use Nette\DI\Compiler;
use Nette\DI\CompilerExtension;

final class FileSystemExtension extends CompilerExtension
{
    public function loadConfiguration()
    {
        // this method loads servcies from config and registers them do Nette\DI Container
        Compiler::loadDefinitions(
            $this-&gt;getContainerBuilder(),
            $this-&gt;loadFromFile(__DIR__.'/../config/services.neon')
        );
    }
}</code></pre>
<h3 id="5-register-it-in-application">5. Register it in Application</h3>
<pre><code class="language-yaml"># app/config/config.neon

extensions:
    - FileSystem\DI\FileSystemExtension</code></pre>
<p>That's it!</p>
<h2 id="try-it-out">Try it Out</h2>
<p>Now try using <code>FileSystem\FileSystem</code> in HomepagePresenter:</p>
<pre><code class="language-php"># app/presenters/HomepagePresenter.php

&lt;?php declare(strict_types=1);

namespace App\Presenters;

use FileSystem\FileSystem;

class HomepagePresenter extends BasePresenter
{
    public function __construct(FileSystem $fileSystem)
    {
        $this-&gt;fileSystem = $fileSystem;
    }
}</code></pre>
<p>and running application:</p>
<img src="/assets/images/posts/2017/nette-extension/bug.png" class="img-thumbnail">
<p><strong>Fails</strong>? Damn, I can't put this on my blog.</p>
<p>Oh, <strong>we need to tell composer about these classes</strong>. He doesn't know, where to find it.</p>
<pre><code class="language-javascript">{
    "require-dev": {
        "..."
    },
    "autoload": {
        "psr-4": {
            "FileSystem\\": "src/FileSystem"
        }
    }
}</code></pre>
<p>And manually rebuild <code>autoload.php</code> (composer does by default only after <code>composer update</code>):</p>
<pre><code class="language-bash">composer dump-autoload</code></pre>
<p>Refresh and...</p>
<img src="/assets/images/posts/2017/nette-extension/good.png" class="img-thumbnail">
<p>...it works!</p>
<p>Phew! That would have been embarrassing.</p>
<h3 id="to-sum-up">To Sum Up</h3>
<p><strong>Now you know how to do your first extension</strong>.</p>
<ul>
<li>create a directory in <code>/src</code></li>
<li>add <code>/src/&lt;package-name&gt;/services.neon</code></li>
<li>add <code>/src/DI/&lt;package-name&gt;Extension.neon</code></li>
<li>register extension to <code>app/config/config.neon</code></li>
<li>and extend <code>autoload</code> section in <code>composer.json</code> (prevents from putting failing code to public blog :))</li>
</ul>
<p><strong>Let me know if you get stuck somewhere</strong>. I want this tutorial to be as easy to understand as possible.</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2017/02/15/minimalistic-way-to-create-your-first-nette-extension</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Wed, 15 Feb 2017 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2017/02/15/minimalistic-way-to-create-your-first-nette-extension#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Drop all Service Tags in Your Nette and Symfony Applications ]]></title>
                <link>https://tomasvotruba.com/blog/2017/02/12/drop-all-service-tags-in-your-nette-and-symfony-applications</link>
                <description><![CDATA[ <p>What is tagging for? Why we should get rid of it?
Today I will show you, how to do it gradually without breaking the application.</p> ]]></description>
                <content:encoded><![CDATA[ <p>This post is follow up to <em><a href="/blog/2016/12/24/how-to-avoid-inject-thanks-to-decorator-feature-in-nette/">How to Avoid Inject Thanks to Decorator feature in Nette</a></em>. Go read it if you missed it.</p>
<h2 id="what-is-tagging-for">What is Tagging For?</h2>
<pre><code class="language-yaml"># app/config/services.neon / app/config/services.yml

services:
    simple_console_command:
        class: "App\Command\SimpleConsoleCommand"
        tags:
            - "console.command"</code></pre>
<p>It is a method to mark services, so Dependency Injection Container could find them easily.</p>
<p>With that, we can add all Commands to Console Application during Dependency Injection Container compilation.</p>
<pre><code class="language-php">$commands = $this-&gt;container-&gt;findByTag('console.command');
$application-&gt;addMethod('addCommands', [$commands]);</code></pre>
<h2 id="bare-tagging-is-duplicated-information">Bare Tagging is Duplicated Information</h2>
<p>But is it really needed?</p>
<p>Without tags, you would probably write something like this:</p>
<pre><code class="language-php">$commands = $this-&gt;container-&gt;findAllByType(Command::class);
$application-&gt;addMethod('addCommands', [$commands]);</code></pre>
<p><strong>But it's here, because of historical reasons</strong>. Both Nette and Symfony ecosystem support it, so many packages adopted
it without thinking twice.</p>
<h3 id="the-only-place-to-consider-using-tags-metadata">The Only Place To Consider Using Tags: Metadata</h3>
<p>If you need to setup service priority registration or <strong>any information, that you can't put inside the class
itself</strong>, tagging is the only way:</p>
<pre><code class="language-yaml"># app/config/services.neon / app/config/services.yml

services:
    simple_console_command:
    class: "App\Command\SimpleConsoleCommand"
    tags:
        name: "console.command"
        priority: 20</code></pre>
<p>It's often used <strong>to duplicate information about a class or interface this service extends or implements</strong>. <code>Symfony\Component\Console\Command\Command</code> in this case.</p>
<h3 id="how-to-get-rid-of-them-decorator-to-the-rescue">How to get rid of them? Decorator to the rescue!</h3>
<p>When I see this pollution in the code, I try to explain there is no added value. Till now, there was only solution in
Nette and Symfony application were doomed to use this anti-pattern.</p>
<p>Now there is Decorator in Symfony as well. Let's see.</p>
<h2 id="get-rid-of-tagging-in-nette">Get Rid of Tagging in Nette</h2>
<p>In you Nette Application, you probably already use</p>
<pre><code class="language-yaml"># app/config/config.neon

services:
    -
        class: App\Console\FirstCommand
        tags: [kdyby.console.command]
    -
        class: App\Console\SecondCommand
        tags: [kdyby.console.command]
    -
        class: App\Console\ThirdCommand
        tags: [kdyby.console.command]
    -
        class: App\EventSubscriber\FirstEventSubscriber
        tags: [kdyby.subscriber]
    -
        class: App\EventSubscriber\SecondEventSubscriber
        tags: [kdyby.subscriber]
    -
        class: App\EventSubscriber\ThirdEventSubscriber
        tags: [kdyby.subscriber]</code></pre>
<p>So much reading, huh? Imagine 50 more of these.</p>
<p>This is exactly the place to use <a href="/blog/2016/12/24/how-to-avoid-inject-thanks-to-decorator-feature-in-nette/">Nette Decorator feature</a>.</p>
<pre><code class="language-yaml"># app/config/config.neon

services:
    - App\Console\FirstCommand
    - App\Console\SecondCommand
    - App\Console\ThirdCommand
    - App\EventSubscriber\FirstEventSubscriber
    - App\EventSubscriber\SecondEventSubscriber
    - App\EventSubscriber\ThirdEventSubscriber

decorator:
    Symfony\Component\Console\Command\Command:
        tags: [kdyby.console.command]
    Symfony\Component\EventDispatcher\EventSubscriberInterface:
        tags: [kdyby.subscriber]</code></pre>
<p>The more services you have, the more cleaner and readable code this approach brings.</p>
<h3 id="minitip">Minitip</h3>
<p>If you don't like the decorator and don't like to one service take 3 lines of config instead of 1, you can use this
shortage:</p>
<pre><code class="language-yaml"># app/config/config.neon

services:
    - { class: App\Console\FirstCommand, tags: [kdyby.console.command] }</code></pre>
<p>This is what I did, before I used Decorator and before I dropped tags from my coding habbits.</p>
<h2 id="get-rid-of-tagging-in-symfony">Get Rid of Tagging in Symfony</h2>
<p>Symfony <a href="https://symfony.com/doc/current/reference/dic_tags.html">has over 40 tags</a> that are coupled to many internal parts. This is barely half of it:</p>
<img src="/assets/images/posts/2017/decorator/symfony-tags-half.png" class="img-thumbnail" alt="Tag list">
<p>If we use the same setup as we used in Nette above, in Symfony it would look like this:</p>
<pre><code class="language-yaml"># app/config/config.yml

services:
    App\Console\FirstCommand:
        tags:
            - { name: console.command }
    App\Console\SecondCommand:
        tags:
            - { name: console.command }
    App\Console\ThirdCommand:
        tags:
            - { name: console.command }
    App\EventSubscriber\FirstEventSubscriber:
        tags:
            - { name: kernel.event_subscriber }
    App\EventSubscriber\SecondEventSubscriber:
        tags:
            - { name: kernel.event_subscriber }
    App\EventSubscriber\ThirdEventSubscriber:
        tags:
            - { name: kernel.event_subscriber }</code></pre>
<p>I want to quit this project already... but wait!</p>
<h3 id="you-can-use-new-a-href-https-symfony-com-blog-new-in-symfony-3-3-service-autoconfiguration-autoconfigure-a-since-symfony-3-3">You can use new <a href="https://symfony.com/blog/new-in-symfony-3-3-service-autoconfiguration">autoconfigure</a> since Symfony 3.3</h3>
<pre><code class="language-yaml"># app/config/config.yml

services:
    _defaults:
        autowire: true # recommended
        autoconfigure: true

    App\Console\FirstCommand: ~
    App\Console\SecondCommand: ~
    App\Console\ThirdCommand: ~
    App\EventSubscriber\FirstEventSubscriber: ~
    App\EventSubscriber\SecondEventSubscriber: ~
    App\EventSubscriber\ThirdEventSubscriber: ~</code></pre>
<p>That's it. Pretty cool, huh?</p>
<h2 id="how-do-you-approach-this">How do you Approach This?</h2>
<p>Again, this is my point of view on making things easy, KISS and DRY.</p>
<p><strong>How do you approach this duplication?</strong> What do you like about it apart &quot;it's in the docs&quot; or &quot;everybody does that&quot;?</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2017/02/12/drop-all-service-tags-in-your-nette-and-symfony-applications</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Sun, 12 Feb 2017 00:00:00 +0000</pubDate>
                                    <updated>2017-05-01UTC00:00:000</updated>
                    <atom:updated>Mon, 01 May 2017 00:00:00 +0000</atom:updated>
                    <lastBuildDate>Mon, 01 May 2017 00:00:00 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2017/02/12/drop-all-service-tags-in-your-nette-and-symfony-applications#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How Monolithic Repository in Open Source saved my Laziness ]]></title>
                <link>https://tomasvotruba.com/blog/2017/01/31/how-monolithic-repository-in-open-source-saved-my-laziness</link>
                <description><![CDATA[ <p>I've started creating open-source about 6 years ago. Now I'm maintaining over 20 repositories. I used classic standalone repositories, but with each new package I wanted to add, I realized, how much work it needs to keep everything up-to-date and consistent. So I didn't and got stuck.
<br><br>
Fortunately, I noticed <a href="https://www.youtube.com/watch?v=4w3-f6Xhvu8">talk from Fabien</a> about <a href="http://danluu.com/monorepo/">monorepo</a> and Symfony. I said to myself: &quot;I don't know a thing about it. Let's try it out. I can always return if it sucks.&quot;
<br><br>
I never did. Today I will show you <strong>why I see monorepo approach in open-source so awesome</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <p>If you don't have 50 minutes to watch the talk (my case), here are <strong><a href="https://speakerdeck.com/fabpot/a-monorepo-vs-manyrepos">40 slides</a></strong> from it.</p>
<p>Fabien introduces a tool, that helps you with splits - <a href="https://github.com/splitsh/lite">splitsh</a>. Do you understand it? Me neither. Splitsh is fast yet complex tool to maintain Symfony and Blackfire ecosystem. <strong>All we need is one git command</strong>.</p>
<p>But we'll get to that later. First things first.</p>
<h3 id="what-is-monorepo">What is Monorepo?</h3>
<p><strong>Monorepo</strong> (for monolithic repository) is single repository, which contains code for group of packages (framework, application...).</p>
<p>Not only Symfony, but also:</p>
<ul>
<li><a href="https://github.com/laravel/framework">Laravel</a></li>
<li><a href="https://github.com/Sylius/Sylius">Sylius</a></li>
<li><a href="https://github.com/elcodi/elcodi">Elcodi</a> - which is dead now</li>
</ul>
<p>Opposed to this is <strong>manyrepo</strong> approach (for many repositories), meaning every package is in his own repository.</p>
<p>It is used by:</p>
<ul>
<li><a href="https://github.com/nette">Nette</a></li>
<li><a href="https://github.com/doctrine">Doctrine</a></li>
<li><a href="https://github.com/thephpleague">PHPLeague</a></li>
</ul>
<p>and almost everybody else.</p>
<p>So how does this monorepo work?</p>
<h2 id="from-one-heart-to-many-arteries">From One Heart to Many Arteries</h2>
<p>Imagine flow of a oxygenated blood from heart to arteries. All blood that was in heart, will drift to all arteries.</p>
<img src="/assets/images/posts/2017/monorepo/blood-vein.png" alt="Blod vein" class="img-thumbnail">
<p>From <strong>1 heart</strong> to <strong>many arteries</strong> in one direction. Same relation is between <strong>1 monolithic repository</strong> and <strong>many repositories</strong>.</p>
<p>This is related to commits and tagging:</p>
<ul>
<li><strong>Every commit</strong> that does changes is Symfony\Console code in monorepo, is also in Symfony\Console manyrepo.</li>
<li><strong>Every tag</strong> in monorepo, is also in all manyrepos.</li>
</ul>
<h2 id="what-are-top-4-advantages-of-monorepo">What Are top 4 Advantages of Monorepo?</h2>
<h3 id="1-it-scales">1. It scales</h3>
<p>You have one repo to maintain.</p>
<ul>
<li>New package? Not a problem.</li>
<li>Changing name of method that is used by 10 other packages? Easier than ever.</li>
<li>Starting a framework? Ideal.</li>
</ul>
<p>That's the way Nette, Symfony and Laravel started and grew so much, even if only one person was behind majority of commits.</p>
<h3 id="2-upgrade-fast-upgrade-safe">2. Upgrade Fast, Upgrade Safe</h3>
<p>It's easy to make changes that affect all packages - bump to PHP 7.1, Symfony 3.2 or Nette 3.0 is a matter of minutes.
And I know it works on all packages. Before monorepo, I had to upgrade every package manually, which resulted in dissonance:
one package used Symfony\Console 3.2, but other only 2.8 and it got messy for no reason.</p>
<h3 id="3-test-both-on-monorepo-and-manyrepo-level-with-ease">3. Test Both on Monorepo and Manyrepo Level With Ease</h3>
<p>Another thing I love is testing both monorepo (all packages together) and manyrepo level. Once I spend 5 hours fixing a bug in Symfony\Process. It was difficult to find, because all tests were passing. Even for testing just the Symfony\Process directory made it pass. But when I copied only the Symfony\Process code to the standalone directory, it failed. Few hours later I found out, it's somehow related to having Symfony\Stopwatch package. Yea, WTF.</p>
<p><strong>That could be caught testing on monorepo level.</strong></p>
<p>On the other hand, monorepo testing is also important. When Nette <a href="https://phpfashion.com/prave-jsem-smazal-nette-framework">was split from monorepo to manyrepo only</a>, all tests were passing packages were standalone. But in combination some of them didn't.</p>
<p>This is not issue of the code itself, but of the testing architecture.</p>
<h3 id="4-the-burnout-is-much-more-harder">4. The Burnout is Much More Harder</h3>
<p>When maintaining 15 own packages, <a href="https://github.com/Apigen">ApiGen</a> and co-maintaining few more repositories, I spent a lot of time by package management and not coding. It wasn't fun and I contributed less and less.</p>
<p>Many packages like <a href="https://github.com/doctrine">Doctrine</a> or <a href="https://github.com/Kdyby">Kdyby</a> are slowing down in evolution because of this.</p>
<p>Again, it's a matter of project architecture rather than the code or maintainers.</p>
<p>These are the best for me, but there are many more described in <a href="https://speakerdeck.com/fabpot/a-monorepo-vs-manyrepos">those slides</a> by Fabien.</p>
<h2 id="example-how-it-s-done-in-symplify">Example: How it's done in Symplify</h2>
<h3 id="monorepo">Monorepo</h3>
<p><a href="https://github.com/symplify/symplify">symplify/symplify</a></p>
<pre><code class="language-bash">/packages
    /Symplify
        /DefaultAutowire
            /src
            /tests
            composer.json</code></pre>
<h3 id="run-git-command">Run Git Command</h3>
<p>Inspired by <a href="https://github.com/laravel/framework/tree/17ee3fd536d1db54dd4ae117c5665b6d03761337/build">Laravel</a>, all we really need is one git command. To split:</p>
<pre><code class="language-bash">git subsplit init git@github.com:symplify/symplify.git
git subsplit publish --heads="master" packages/DefaultAutowire:git@github.com:Symplify/DefaultAutowire.git
rm -rf .subsplit/</code></pre>
<p>It says: take code from <code>packages/DefaultAutowire</code> directory and put it to <code>git@github.com:Symplify/DefaultAutowire.git</code> repository.</p>
<h3 id="manyrepo">Manyrepo</h3>
<p><a href="https://github.com/Symplify/DefaultAutowire">Symplify/DefaultAutowire</a></p>
<p>As a result, we have this:</p>
<pre><code class="language-bash">/src
/tests
composer.json</code></pre>
<p>That's it! Could it be simpler?</p>
<h3 id="further-reading-local-packages">Further reading - Local Packages</h3>
<p>I recommend to read <a href="http://www.whitewashing.de/2015/04/11/monolithic_repositories_with_php_and_composer.html">Monolithic Repositories with PHP and Composer</a> by Benjamin Eberlei (Doctrine Core Maintainer). It's surpassed by composer <em>local packages</em>, but points remain the same. Don't worry, I will write about <em>local packages</em> in the near future.</p>
<p>If you like monorepo approach, but prefer own tagging per package, Martin Zlámal recently wrote about <a href="http://zlml.cz/vy-jeste-nemate-svuj-superprojekt">git submodule approach</a> (in Czech).</p>
<h3 id="how-do-you-like-this">How do you like this?</h3>
<p>This is my point of view.</p>
<p>Do you maintain lot of repositories? How do you make it fun to code and care for all of them?</p>
<p>Let me know in the comments. Thank you.</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2017/01/31/how-monolithic-repository-in-open-source-saved-my-laziness</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Tue, 31 Jan 2017 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2017/01/31/how-monolithic-repository-in-open-source-saved-my-laziness#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Why I Switched Scrutinizer for PHPStan and You Should Too ]]></title>
                <link>https://tomasvotruba.com/blog/2017/01/28/why-I-switched-scrutinizer-for-phpstan-and-you-should-too</link>
                <description><![CDATA[ <p>I used Scrutinizer for a few years now for code coverage and code quality. Configuration was far complex, some issues appeared and build kept failing. But I really wanted a code quality checker for my open-source projects and this was the best tool available.</p>
<p>But last week I had an issue with simple <code>composer install</code> command and I have had enough. Then <strong>my attention turned to PHPStan</strong>, soon-to-be its replacement.</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="what-is-phpstan">What is PHPStan</h2>
<p><strong>PHPStan is a tool for static analysis of PHP code</strong>. It's open source and free to use.
You can read more about it in this post with very true title - <a href="https://medium.com/@ondrejmirtes/phpstan-2939cd0ad0e3">PHPStan: Find Bugs In Your Code Without Writing Tests!</a></p>
<img src="https://raw.githubusercontent.com/phpstan/phpstan/master/build/phpstan.gif" alt="PHPStan in action" class="img-thumbnail">
<h2 id="why-i-prefer-it-over-scrutinizer-and-you-should-too">Why I Prefer It over Scrutinizer (and You Should Too)</h2>
<h3 id="it-is-open-source">It Is Open-Source</h3>
<p><strong>I can improve it, I can add an issue, I can see its development</strong>. I can't do anything like that with Scrutinizer. It used to be <a href="https://github.com/scrutinizer-ci/scrutinizer">open-source</a> but got closed. That's was a huge step back.</p>
<h3 id="it-focuses-just-on-php">It Focuses Just on PHP</h3>
<p><strong>It's a PHP tool that checks PHP code.</strong> Scrutinizer, on the other hand, focuses on various languages - Python, Ruby, soon Java and Scala. That's definitely a good direction, but not if a simple <code>composer install</code> command breaks and is not fixed for months.</p>
<h3 id="i-can-control-it">I Can Control It</h3>
<p>I can use it for private packages. I can download it, extend it in various ways (I can define magic behaviour of my classes) and even write my own checks.</p>
<h2 id="how-to-switch-from-scrutinizer-to-phpstan-in-4-steps">How to Switch from Scrutinizer to PHPStan in 4 Steps</h2>
<h3 id="1-disable-scrutinizer-code-rating">1. Disable Scrutinizer Code Rating</h3>
<p>Drop this from <code>.scrutinizer.yml</code>:</p>
<pre><code class="language-yaml">checks:
    php:
        code_rating: true</code></pre>
<h3 id="2-add-phpstan-dependency">2. Add PHPStan Dependency</h3>
<pre><code class="language-bash">composer require phpstan/phpstan --dev</code></pre>
<h3 id="3-setup-command-in-code-composer-json-code">3. Setup Command in <code>composer.json</code></h3>
<p>This step is optional and it might seem weird seeing it for the first time, but I like the united usage (on all different projects and environments).</p>
<pre><code class="language-json">{
    "scripts": {
        "phpstan": "vendor/bin/phpstan analyse src --level=0"
    }
}</code></pre>
<p>Now you can run with the same script, even if the settings changes (and it will):</p>
<pre><code class="language-bash">composer phpstan</code></pre>
<h3 id="4-setup-you-ci">4. Setup you CI</h3>
<pre><code class="language-yml"># .travis.yml
script:
    - composer phpstan</code></pre>
<p>Commit and... push! Now you are running PHPStan on your open-source project. Congrats!</p>
<h2 id="the-one-thing-i-love-about-phpstan">The One Thing I Love About PHPStan</h2>
<p>One last thing. You may have noticed the <code>level</code> option. What's that for? PHPStan has now 6 levels (in time of writing this article) - <strong>0 = least strict, 5 = the most strict</strong>.</p>
<p>This allowed me to <strong>put PHPStan to action without any huge work</strong>. I start with level 0, 12 errors were found and fixed them.</p>
<p>Next week, when I'm rested and full of joy, I can go to level 1, fix another 8 errors.</p>
<p>I love this approach over traditional overwhelming &quot;500 errors found. Fix them all or CI will keep failing.&quot;. That usually leads to removing the tool and to very long fixing process. I remember my long night hours with Scrutinizer just to get from code quality from 6 to 10.</p>
<h3 id="try-it-out">Try It Out...</h3>
<p>...on your open-source or local projects and let me know how you like it.</p>
<p>Happy coding!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2017/01/28/why-I-switched-scrutinizer-for-phpstan-and-you-should-too</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Sat, 28 Jan 2017 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2017/01/28/why-I-switched-scrutinizer-for-phpstan-and-you-should-too#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ 4 Emotional and Honest Reasons Why I Quit my Twitter ]]></title>
                <link>https://tomasvotruba.com/blog/2017/01/20/4-emotional-reasons-why-I-quit-my-twitter</link>
                <description><![CDATA[ <p>Nowadays we tend to live busy life with all those social networks, notifications and pings. So busy, we don't have emotional space to just evaluate &quot;How do I like that?&quot;. In my life, this creates cycles, where I keep doing over and over the same thing without any progress.<br><br>After few months feeling bad with Twitter, I've finally decided to quit. Instead of technical point of view <strong>I will focus on my feelings - because that's what matters the most</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <p>Before I started this article, I read
<a href="http://www.forbes.com/sites/laurenorsini/2015/11/11/i-quit-twitter-and-my-life-got-better-heres-why-im-going-back">I Quit Twitter And My Life Got Better. Here's Why I'm Going Back</a>. In the article Lauren describes <strong>what was it like to have 1 week without Twitter and why she got back</strong>. If you use Twitter, I recommend you reading it. There are some great insights on autopilot behavior.</p>
<p>Now here is my story...</p>
<p>I felt bad using Twitter last few months. <strong>I wasn't sure</strong> if I really want to quit Twitter.</p>
<h3 id="i-tried-small-experiments-hoping-to-get-better">I Tried Small Experiments Hoping To Get Better</h3>
<ul>
<li>I un-followed people down to zero.</li>
<li>I limited my time there to 10 minutes in the evening.</li>
<li>I tried different approach for Tweets and retweets:
<ul>
<li>pools to engage with followers</li>
<li>retweet the most popular Tweets from the past</li>
<li>mention multiple people</li>
<li>use 5+ hashtags</li>
<li>add 1 to 5 images</li>
</ul></li>
<li>I talked with friends how do they enjoy Twitter.</li>
<li>I requested feedback from marketing expert to my Tweets.</li>
<li>I tried using services to automate like <a href="https://buffer.com">Buffer</a> (thank you <a href="https://www.tomasfejfar.cz">Tomáš Fejfar</a> for the tip) or <a href="https://github.com/search?l=PHP&amp;q=twitter&amp;type=Repositories&amp;utf8=%E2%9C%93">Twitter API PHP packages</a>.</li>
</ul>
<p>I really tried, but none of these made me feel significantly better. So last experiment: I quit.</p>
<p><em>Interesting. This is very similar to my approach to crisis in relationships.</em></p>
<p><strong>What were those deal breakers that tear us apart?</strong></p>
<h2 id="1-i-was-addicted-give-me-my-dopamine-shot">1. I was Addicted - Give me my Dopamine Shot!</h2>
<p>Every like made me happy. <strong>Every retweet made happier three-times</strong>. I only wanted to invest just a little attention, so I refocused on numbers instead of content.
<strong>It's like trying to build a deep connection with somebody having only a 20 minutes a day</strong>. This frustrated me a lot, because I prefer working on content over collecting numbers.</p>
<p>I talked about my addiction with <a href="http://petrvacha.com">Petr Vácha</a> and my intentions to quit, and he <strong>suggested me to use it only once a day</strong>.
I tried it for few days and it was great. I got higher dopamine shots in the end of the day.</p>
<p>The only issue for me was <strong>I had to focus to not to think on Twitter throughout the whole day</strong>. It was like starving the whole day to eat once in the evening.
It worked technically, <strong>but it didn't feel right</strong>. I could spend 5 minutes on 10 social networks and spend less than hour, but I want to enjoy this by heart, not by my inner computer.</p>
<p>I know I can't do something for only 50 %. I either do it close to 100 % or go another way.</p>
<h2 id="2-i-tried-so-hard-to-look-good">2. I Tried so Hard to Look Good</h2>
<ul>
<li>I planned Tweets for one per day, so I won't spam.</li>
<li>I retweeted Tweets I found interesting.</li>
<li>I've added images, hashtags.</li>
<li>I have read many how-to-tweet articles.</li>
<li>I tweeted only valuable and positive stuffs. Not in relation to reality, really.</li>
</ul>
<p>Few month later I realized <strong>I'm turning into news machine</strong>. So I asked my followers, <a href="https://twitter.com/VotrubaT/status/816753682482085896">how do you use Twitter</a>?</p>
<p>I found there are many news channel that already cover this field.</p>
<p>Second, <strong>I found I have reactive-response syndrome: for every message I have to have an answer</strong>. It's close to <a href="https://zenhabits.net/miss">fear of missing out</a>.</p>
<p>That included conversations under tweets, checking Twitter often for new answers, and trials to explain complex problems and miss-understandings under 140 characters.</p>
<h2 id="3-it-s-boring">3. It's Boring</h2>
<p>Twitter innovated its service maybe twice since I used it, not much news. Also social adaptions is slow - not many new people are joining Twitter.</p>
<p>I was trying to find fun in service that didn't gave it to me. <strong>It's like seeking a passion in relationship with woman I'm not attracted to.</strong></p>
<p>What I like about Facebook, Github or PHPStorm is that <strong>they evolve and innovate</strong>. Sometimes I like it, sometimes I don't, but <strong>I know they are trying to be better</strong>.</p>
<p>If Twitter was a person, it would be fearful virgin in his 30ties sticking to first job with no girlfriend.</p>
<h2 id="4-i-already-love-somebody-else">4. I already Love Somebody Else</h2>
<p>140 limit for Tweet is fine, but I want to get deeper. I also don't like random Tweet stream: one day 50 tweets, other day 5. What the hell, man? That's so schizophrenic.</p>
<p><strong>I love system, regularity and predictability</strong>. This is the best way to educate constantly in certain speed.</p>
<p>That's why I switched from Tweetdeck-hashtag-group-following based to regular newsletter one in last year.</p>
<p>I started to follow:</p>
<ul>
<li><a href="https://info.jetbrains.com/PHP-Annotated-Subscription.html">PHP Annotated Monthly</a> from JetBrains (PHPStorm guys)</li>
<li><a href="http://www.phpweekly.com">PHP Weekly</a></li>
<li><a href="https://pehapkari.cz/#newsletter">Měsíčník pro Péhápkaře</a></li>
<li><a href="https://www.respekt.cz/echo/neco-konci-neco-zacina">Jan Růžička - Týden v Médiích</a> (in the bottom)</li>
<li><a href="http://www.danpink.com/pinkcast">Pink Cast</a></li>
</ul>
<p>And it's much better.</p>
<h2 id="i-love-experiments">I Love Experiments</h2>
<p>Leo Babauta happily dropped Twitter in 2013. In <a href="https://zenhabits.net/unline">Simplify the internet</a> he wrotes:</p>
<blockquote>
<p>If you’re going to do Facebook, don’t do other ones too. You can quit Twitter and Instagram. Really you can!</p>
</blockquote>
<p>Reading this first time in December, I felt it's the right thing to do, yet brain was opposing with &quot;that is insane!&quot;.</p>
<p>My great inspiration from polyphasic sleep days Steve Pavlina <a href="http://www.stevepavlina.com/blog/2014/07/social-media-you-got-dumped">got social media dumped hard</a>.</p>
<blockquote>
<p>I basically asked myself which scenario seemed best over the next 10 years — going social media-free vs. continuing to use it.</p>
</blockquote>
<p>Followed by <a href="http://www.stevepavlina.com/blog/2015/07/one-year-without-social-media">a year later reflection</a>.</p>
<p><strong>I love social experiments.</strong> After <a href="https://psychologie.cz/serialy/polyfazicky-spanek">polyphasic sleep</a>, switching main job focus after 8 years, having a baby while being infertile, dropping from university, moving to Prague after settling down in Brno, <a href="/blog/2017/01/05/why-I-deleted-my-linkedin-account/">dropping LinkedIn</a> and moving completely alone for the first time, <strong>I really look forward to this one</strong>.</p>
<h3 id="where-do-you-find-me">Where Do You Find Me?</h3>
<p>See <a href="/contact">contact page</a>.</p>
<h3 id="what-about-your-socials-experiments">What about Your Socials Experiments?</h3>
<p>I've already asked, why and what social networks do you use. Now, I would like to know, <strong>have you made any social network experiment?</strong>
How did it go? Did you like that?</p>
<p>I look forward to your answers!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2017/01/20/4-emotional-reasons-why-I-quit-my-twitter</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Fri, 20 Jan 2017 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2017/01/20/4-emotional-reasons-why-I-quit-my-twitter#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ Why I deleted my LinkedIn account ]]></title>
                <link>https://tomasvotruba.com/blog/2017/01/05/why-I-deleted-my-linkedin-account</link>
                <description><![CDATA[ <p>I used LinkedIn since 2008 when it was sending spam to all my friends. After 8 years of tuning my profile to 95 % score, reading mostly copy-pasted messages,
checking false notifications, flirting with HR girls and hoping for up votes for my recent skills, <strong>I've decided it is time to let it go</strong>. Why and what I'm gonna do now?</p> ]]></description>
                <content:encoded><![CDATA[ <p><em>Disclaimer: even if I get few abroad offers, my experience is related to work environment in the Czech Republic.</em></p>
<p>I was reviewing my 2016 and how <strong>I started to disconnect from social networks</strong> (<a href="http://www.stevepavlina.com/blog/2015/07/one-year-without-social-media">thanks Steve</a>): I reduced 350 friends on Facebook to 20, unfollowed all but 2 groups and I dropped all people I follow on Twitter.
<strong>My attention got better and I could focus</strong> on things that really matter to me &ndas; reading books, writing and real friends. That's when I started to focus on quality of my environment.</p>
<p>And the LinkedIn account was scratching my mind for a long time.</p>
<p>So I asked myself?</p>
<h2 id="what-is-linkedin-good-for">What is LinkedIn Good for?</h2>
<ul>
<li>It helped me in <strong>first 3 years in paid</strong> PHP programming field.</li>
<li>I got some references and up-votes for my skills, I attended university so I thought <strong>it gives me credibility</strong>.</li>
<li>It gave me <strong>self-confidence when talking about money</strong>.</li>
<li><strong>Everybody did it</strong>, so did I (like that time I jumped out of the window ;)).</li>
</ul>
<h2 id="where-linkedin-fails">Where LinkedIn Fails</h2>
<h3 id="it-s-kinda-broken-and-stuck-service">It's kinda Broken and Stuck Service</h3>
<p>I was getting fake notifications of new connections. I got over 20 pings for 6 moths old and answered message.
Also, I didn't notice many changes between 2008 and 2016. It could be so much more. Btw, do you remember MySpace?</p>
<h3 id="irrelevant-messages-95-job-offers-are-spam">Irrelevant Messages - 95 % Job Offers are Spam</h3>
<p>Only <strong>2 jobs offers end up in real contract</strong> during the whole 8 years. Most of offers are general random messages from bots or people,
who don't even read descriptions like <em>part-time only</em> or <em>Symfony project only</em>.</p>
<h3 id="target-group-bias">Target group Bias</h3>
<p><strong>I never look for PHP full-time job</strong>. I wanted part-times only. Not really favorite position on LinkedIn, is it?
Last 2 years I only offered consultancy and lecturing. Well, is that a full-time position?</p>
<h3 id="more-info-sources-more-outdated-info">More info sources = more outdated info</h3>
<p>I put my work information on places like my website, Facebook and LinkedIn. In the begging it's all up-to-date. But in time...</p>
<ul>
<li>on website there is last reference from 2014</li>
<li>on LinkedIn I'm still in university</li>
<li>and on Facebook I just left job I started in 2015</li>
</ul>
<p><strong>The more such places I have, the more outdated they will become</strong>. And I'm not alone.
I often see friends who have 3 years empty space on LinkedIn and website, yet still looking for new job.</p>
<h3 id="skill-lagging">Skill Lagging</h3>
<p>What can you tell about me from this picture?</p>
<img src="/assets/images/posts/2017/linked-in/skills.png" class="img-thumbnail" alt="Skill list">
<p>The oldest skills are upvoted the most. Also short and traditional, like Git. Even if I excel in coaching and open-source,
it looks like I'm 3× better in Git. No, I'm not. <strong>So when I got new skill, it took LinkedIn 3 years to reflect that</strong>. In that time, I'm already somewhere else.</p>
<h2 id="dying-in-comfort-zone">Dying in Comfort Zone</h2>
<p><strong>This is the most important takeaway.</strong></p>
<p><strong>LinkedIn was my comfort zone. It's like being a woman on Tinder</strong>. When I want sex, I have it. And I get many messages and attention from females with not much work.
This backfires.</p>
<p>Having so much attention and job position anytime I want makes me lazy. I don't need to improve. With this state of mind I would not probably reach the dream job as if I would be <strong>proactive</strong>.</p>
<img src="/assets/images/posts/2017/linked-in/allstar.jpg" alt="The Fake Allstar">
<p>Moreover, I've got quite a long profile:</p>
<ul>
<li>5 great jobs</li>
<li>3 startups</li>
<li>3 talks</li>
<li>2 abroad conferences</li>
<li>25 skills</li>
<li>7 recommendations</li>
</ul>
<p>As friend of mine Albert once said:</p>
<blockquote>
<p>&quot;Once you stop learning you start dying.&quot;</p>
</blockquote>
<p>I want to improve inside <a href="https://zenhabits.net/limits">limits</a> I set. <strong>Now I naturally tend to build something real.</strong></p>
<h2 id="is-it-your-time-to-let-go">Is it Your Time to Let Go?</h2>
<p>If you:</p>
<ul>
<li>are on the start of your career,</li>
<li>don't have own website,</li>
<li>don't have 3+ references,</li>
<li>look for full-time job</li>
<li>and don't want to work for yourself but rather for company,</li>
</ul>
<p>I would recommend keeping that profile.</p>
<p>But when you answered <em>NO</em> to all of these, here what you could do:</p>
<h2 id="be-proactive-ndash-find-yourself-better-job">Be Proactive &ndash; Find Yourself better Job</h2>
<ul>
<li><strong>Build personal brand on good old relationships</strong>.</li>
<li>Talk with people.</li>
<li><strong>Find active social networks where you interact with peers</strong> - for me it is Facebook or our Czech &amp; Slovak PHP Community <a href="http://pehapkari.slack.com">Péhápkaři Slack</a>.</li>
<li>Go to meetup.</li>
</ul>
<p>But this is my story, my personal needs and my personal experience. It probably won't work for everybody. Your experience might be different.</p>
<p>So, what about you?</p>
<h3 id="how-do-you-work-with-linkedin-is-it-worth-your-time">How do you work with LinkedIn? Is it worth your time?</h3> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2017/01/05/why-I-deleted-my-linkedin-account</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2017/01/05/why-I-deleted-my-linkedin-account#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to avoid @inject thanks to Decorator feature in Nette ]]></title>
                <link>https://tomasvotruba.com/blog/2016/12/24/how-to-avoid-inject-thanks-to-decorator-feature-in-nette</link>
                <description><![CDATA[ <p>I often find <code>@inject</code> being overused in projects I review while mentoring. They often bring less writing, but in exchange they break <a href="https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)">SOLID principles</a>.
<br><br>
Today I will show you solution that will <strong>keep your code both small and clean</strong> - <strong>Decorator feature in Nette</strong>.</p> ]]></description>
                <content:encoded><![CDATA[ <p>As <a href="https://www.ted.com/talks/simon_sinek_how_great_leaders_inspire_action">Derek Simons says</a> says...</p>
<h2 id="start-with-quot-why-quot">...Start with &quot;Why&quot;</h2>
<p>Why am I writing this article? I try to improve knowledge interoperability between frameworks so it <strong>is easier to understand and use each other</strong>. The goal is to discourage Nette- (or any framework-) specific things <strong>in favor of those that may be common</strong>.</p>
<p>Today, I will try to agree on setter injection with you.</p>
<h2 id="code-inject-code-overuse-is-spreading"><code>@Inject</code> Overuse is Spreading</h2>
<p>This code is common to 80 % Nette applications I came across in last year:</p>
<pre><code class="language-php">// app/Presenter/ProductPresenter.php

namespace App\Presenter;

final class ProductPresenter extends AbstractBasePresenter
{
    /**
     * @inject
     * @var ProductRepository
     */
    public $productRepository;
}</code></pre>
<p>Using <code>@inject</code> annotations over constructor injection is <strong>fast, short and it just works</strong>.</p>
<p>Ok, why not use it everywhere:</p>
<pre><code class="language-php">// app/Repository/ProductRepository.php

namespace App\Repository;

class ProductRepository
{
    /**
     * @inject
     * @var Doctrine
     */
    public $entityManager;
}</code></pre>
<p>and</p>
<pre><code class="language-yaml"># app/config/config.neon

services:
    -
        class: App\Repository\ProductRepository
        inject: on</code></pre>
<h2 id="your-code-is-seen-as-manual-how-to-write">Your Code is Seen as Manual How to Write</h2>
<p>Why? Because &quot;what you see is what you write&quot;. New programmer joins the teams, sees this handy <code>@inject</code> feature and uses when possible and handy.</p>
<p>Some of you, who already talked about <code>@inject</code> method usage already there are some and only few specific places to use it.</p>
<h2 id="where-to-only-code-inject-code">Where to only <code>@inject</code>?</h2>
<p><strong>To prevent constructor hell</strong>. If you meet this term first time, go read <a href="https://phpfashion.com/di-a-predavani-zavislosti#toc-constructor-hell">this short explanation</a> by David Grudl.</p>
<p>The best use case is <code>AbstractBasePresenter</code>.
Let's say I need <code>Translator</code> service in all of my presenters.</p>
<pre><code class="language-php">// app/Presenter/AbstractBasePresenter.php

namespace App\Presenter;

abstract class AbstractBasePresenter extends Nette\Application\UI\Presenter
{
    /**
     * @inject
     * @var Translator
     */
    public $translator;
}</code></pre>
<p>And I can use it in <code>ProductPresenter</code> along with constructor injection</p>
<pre><code class="language-php">// app/Presenter/ProductPresenter.php

namespace App\Presenter;

final class ProductPresenter extends AbstractBasePresenter
{
    /**
     * @var ProductRepository
     */
    private $productRepository;

    public function __construct(ProductRepository $productRepository)
    {
        $this-&gt;productRepository = $productRepository;
    }
}</code></pre>
<p>This is quite clean and easy to use, because presenters have injects <a href="https://github.com/nette/application/blob/3165d3a8dab876f4364cdcba450a33ab0182049a/src/Bridges/ApplicationDI/ApplicationExtension.php#L111-L116">enabled by default</a>.</p>
<h2 id="level-up">Level up</h2>
<p>But what if we have other objects that:</p>
<ul>
<li><strong>inherit from abstract parent</strong></li>
<li>needs <strong>1 service available everywhere</strong></li>
</ul>
<p>2 common case pop to my mind:</p>
<ul>
<li><code>AbstractBaseRepository</code> for all our repositories</li>
<li><code>AbstractBaseControl</code> for all our components</li>
</ul>
<p>Let's take the first one:</p>
<pre><code class="language-php">// app/Repository/AbstractBaseRepository.php

namespace App\Repository;

use Doctrine\ORM\EntityManagerInterface;

abstract class AbstractBaseRepository
{
    /**
     * @var EntityManagerInterface
     */
    protected $entityManager;

    public function setEntityManager(EntityManagerInterface $entityManager)
    {
        $this-&gt;entityManager = $entityManager;
    }
}</code></pre>
<p>And specific repository with some dependency:</p>
<pre><code class="language-php">// app/Repository/ProductRepository.php

namespace App\Repository;

use App\Model\Product\ProductSorter;

final ProductRepository extends AbstractBaseRepository
{
    /**
     * @var ProductSorter
     */
    private $productSorter;

    public function __construct(ProductSorter $productSorter)
    {
        $this-&gt;productSorter = $productSorter;
    }
}</code></pre>
<p>So our config would look like:</p>
<pre><code class="language-yaml"># app/config/config.neon

services:
    -
        class: App\Repository\ProductRepository
        setup:
            - setEntityManager
    # and for other repositories
    -
        class: App\Repository\UserRepository
        setup:
            - setEntityManager
    -
        class: App\Repository\CategoryRepository
        setup:
            - setEntityManager</code></pre>
<h3 id="so-much-writing">SO much writing!</h3>
<p>It is cleaner, but with so much writing? Thanks, but no, thanks. Let's go back to <code>@inject</code>...</p>
<p>Wait! Before any premature conclusion, let's set the goal first.</p>
<h3 id="what-is-desired-result">What is Desired Result?</h3>
<pre><code class="language-yaml"># app/config.config.neon

services:
    - App\Repository\ProductRepository
    - App\Repository\UserRepository
    - App\Repository\CategoryRepository</code></pre>
<p>That would be great, right? Is that possible in Nette while keeping the code clean?</p>
<h2 id="decorator-extension-to-the-rescue">Decorator Extension to the Rescue</h2>
<p>This feature is in Nette <a href="https://github.com/nette/di/commit/28fdac304b967ae43a90936069d94316ee2daca4">since 2014</a> (&lt;= the best documentation for it so far).</p>
<p>How does it work?</p>
<pre><code class="language-yaml"># app/config/config.neon

decorator: # keyword used by Nette
    App\Repository\AbstractBaseRepository: # 1. find every service this type
        setup: # same setup as we use in service configuration
            - setEntityManager # 2. call this setter injection on it

    # or do you need to call "setTranslator" on every component?
    App\Component\AbstractBaseControl:
        setup:
            - setTranslator</code></pre>
<p>That's it!</p>
<h2 id="what-have-you-learned-today">What Have You Learned Today?</h2>
<ul>
<li>It is easy to overuse <code>@inject</code> in places where it doesn't solve any problem</li>
<li>The problem <code>@inject</code>/<code>inject&lt;method&gt;</code> method were born to solve is called <em>dependency hell</em></li>
<li>If you need to <strong>decorate service of some type</strong>, use <em>Decorator Extension</em></li>
<li>This will lead <strong>to better framework understandability and usability</strong></li>
<li>...and world peace in time :)</li>
</ul>
<p>In next article, we will look at other practical use cases for Decorator Extension.</p>
<h3 id="p-s-what-about-symfony">P.S.: What about Symfony?</h3>
<p>Would like to see this feature in Symfony? Let me know. Maybe we can port it there.</p>
<p>How do you use <code>@inject</code>, constructor injection or Decorator Extension? Let me know in the comments, I'm curious.</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2016/12/24/how-to-avoid-inject-thanks-to-decorator-feature-in-nette</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Sat, 24 Dec 2016 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2016/12/24/how-to-avoid-inject-thanks-to-decorator-feature-in-nette#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to write open-source in PHP 2: Rise value of your package with help of skeleton ]]></title>
                <link>https://tomasvotruba.com/blog/2016/09/16/how-to-write-open-source-in-php-2-enjoy-skeletons</link>
                <description><![CDATA[ <p>After creating a repo, we have to fill it with something useful. Our code! Of course, but we also need some <strong>metadata files</strong>.
What are they for? Is there some prepared code we can use? What are badges for? <strong>I will answer all these questions today.</strong></p> ]]></description>
                <content:encoded><![CDATA[ <p>Other programmers who want to use your package are usually looking for <strong>long term value</strong>.
To estimate the value they need <strong>to answer 4 important questions</strong>.</p>
<ol>
<li><strong>What is quality of package?</strong></li>
<li><strong>Does it solve my issue?</strong></li>
<li><strong>Is it trustworthy?</strong></li>
<li><strong>How well maintained is it?</strong></li>
</ol>
<p>Even if you know your code is the best and the cleanest, if they don't trust you, they will never use it.</p>
<p>I will let you think about them a little bit. We will relate with specific files to them in second part of this article.</p>
<h2 id="use-solid-skeleton-start-solid-brand">Use solid skeleton → start solid brand</h2>
<p>Now, the first step that can positively influence all the 4 answers is <strong>using a skeleton</strong> with prepared metadata files. Guys from <a href="https://thephpleague.com">The PHP League</a> already did the job for you and created a <a href="https://github.com/thephpleague/skeleton">skeleton</a> package.</p>
<h2 id="how-to-get-skeleton-code-to-your-local-repository-in-4-steps">How to get skeleton code to your local repository in 4 steps</h2>
<ol>
<li>Go to repository on Github and click on <em>Clone or download</em></li>
<li>Then <em>Download a ZIP</em></li>
<li>Unzip the zip file to your local repository</li>
<li>
<p>And push new files to Github</p>
<pre><code class="language-bash">git add .
git commit -m "add metadata files"
git push origin master</code></pre>
</li>
</ol>
<h3 id="great-for-start-yet-obsolete-later">Great for start, yet obsolete later</h3>
<p>This skeleton is great for start and to learn about metadata files.</p>
<p>But when I create my package now, <strong>I just copy the most recent package I made</strong>, delete <code>/src</code> and <code>/tests</code>
directories and I'm ready to roll. This is because:</p>
<ul>
<li>I upgrade my packages more often then some <code>skeleton</code> package</li>
<li>and because my preferences and required code are evolving
<ul>
<li>e.g. A new PHP version is out, I tune my continuous integration (CI) setup etc.</li>
</ul></li>
</ul>
<h2 id="what-is-the-purpose-of-these-files">What is the purpose of these files</h2>
<p>Now we look on every directory and file and how it's related to the 4 key questions.
Just to remind you, the end user is interested in:</p>
<ol>
<li>Quality - <strong>What is quality of package?</strong></li>
<li>Usability - <strong>Does it solve my issue? Is it easy to use?</strong></li>
<li>Trust - <strong>Is it trustworthy?</strong></li>
<li>Maintenance - <strong>How well maintained is it?</strong></li>
</ol>
<h3 id="code-src-code-directory"><code>/src</code> directory</h3>
<p><em>Meaning</em></p>
<ul>
<li>all your PHP source code will go here</li>
</ul>
<p><em>Profit</em></p>
<ul>
<li>musthave :)</li>
</ul>
<h3 id="code-tests-code-directory"><code>/tests</code> directory</h3>
<p><em>Meaning</em></p>
<ul>
<li>all tests for your code in <code>/src</code></li>
<li>basically 1:1 mirror, just every file has <code>Test</code> suffix, e.g.
<ul>
<li><code>src/Cleaner.php</code></li>
<li><code>tests/CleanerTest.php</code></li>
</ul></li>
</ul>
<p><em>Profit</em></p>
<ul>
<li><strong>Quality</strong>: tested code is perceived better quality</li>
<li><strong>Trust</strong>: I don't have to hope that code works, <strong>I can trust the code</strong></li>
</ul>
<h3 id="code-gitattributes-code"><code>.gitattributes</code></h3>
<p><em>Meaning</em></p>
<ul>
<li>here are all files that are ignored by composer (using the <code>export-ignore</code> attribute)</li>
<li>when somebody will install your package via <code>composer require you/your-package</code>, they won't get these files downloaded to <code>/vendor</code> directory</li>
<li>usually its metadata files and tests, because application of end user does not need them</li>
</ul>
<p><em>Profit</em></p>
<ul>
<li><strong>Usability</strong>: Since your package save some internet traffic and space on hard drives, it's a bit more usable.</li>
</ul>
<h3 id="code-gitignore-code"><code>.gitignore</code></h3>
<p><em>Meaning</em></p>
<ul>
<li>here are files, that you will have locally but won't be uploaded to the remote git repository</li>
<li>for packages ignore <code>composer.lock</code>, for applications rather not - on Stackoverflow you can find <a href="https://stackoverflow.com/questions/12896780/should-composer-lock-be-committed-to-version-control">more detailed answer</a></li>
<li>also <code>/vendor</code> is there, as dependencies are installed by composer</li>
</ul>
<p><em>Profit</em></p>
<ul>
<li><strong>Trust</strong>: Without this I would not trust you know anything about open-source.</li>
</ul>
<h3 id="code-scrutinzer-yml-code"><code>.scrutinzer.yml</code></h3>
<p><em>Meaning</em></p>
<ul>
<li>configuration for <a href="https://scrutinizer-ci.com">Scrutinizer</a> - code quality and code coverage tool</li>
<li>to enable it, <a href="https://scrutinizer-ci.com/login">login</a> and new repository
<ul>
<li>I recommend you to login in via Github, since it adds hooks to your repository</li>
</ul></li>
<li>it would be triggered every time your commit to master or create a PR</li>
</ul>
<p><em>Profit</em></p>
<div>
    <img src="/assets/images/posts/2016/open-source/quality-and-coverage.png" alt="Code quality and coverage badges in README"><br><em>Code quality and coverage badges in README</em>
</div>
<p><br></p>
<ul>
<li><strong>Quality</strong>: Tests are fine, but with 5 % coverage, they have no added value. When you have 90% coverage, you got attention.
Also there is code quality score from 0 to 10. It tells you about code complexity, which is the most important. <strong>Simple code is easier to maintain and debug</strong>.
I will show you how to get 10 with bit of practise later.</li>
</ul>
<h3 id="code-travis-yml-code"><code>.travis.yml</code></h3>
<p><em>Meaning</em></p>
<ul>
<li>configuration for <a href="https://travis-ci.org">Travis</a> - continuous integration tool for tests</li>
<li>to enable it, go register there and add the repository</li>
</ul>
<p><em>Profit</em></p>
<ul>
<li><strong>Trust</strong>: Do you have test but you don't run them for every change? How can I know the code works?</li>
</ul>
<h3 id="code-composer-json-code"><code>composer.json</code></h3>
<ul>
<li>list of dependencies</li>
<li>also configuration for <a href="https://packagist.org">Packagist</a>, where you need to add your package, so it can be installed by others</li>
<li>to enable it, you have to:
<ul>
<li>go there</li>
<li>add repository</li>
<li>go to settings of package, <strong>Integration and services</strong> and <strong>Add Service</strong></li>
<li>select &quot;Packagist&quot; and add your name and token from your <a href="https://packagist.org/profile">user profile</a></li>
</ul></li>
</ul>
<h3 id="code-license-code"><code>LICENSE</code></h3>
<p><em>Meaning</em></p>
<ul>
<li>license goes here</li>
<li>it's important to have it as every country has different default approach, when this file is missing</li>
<li><a href="https://opensource.org/licenses/MIT">MIT</a> is the easiest to understand open-source license</li>
</ul>
<p><em>Profit</em></p>
<ul>
<li><strong>Usability</strong>: With licence, I know what I can do with the code. Usually everything.</li>
</ul>
<h3 id="code-phpunit-xml-code"><code>phpunit.xml</code></h3>
<p><em>Meaning</em></p>
<ul>
<li>configuration for <a href="https://phpunit.de">PHPUnit</a> - testing tool</li>
<li>this can be used either by end user or Travis</li>
</ul>
<p><em>Profit</em></p>
<ul>
<li><strong>Usability</strong>: I can run <code>vendor/bin/phpunit</code> with no manual configuration. It makes life easy.</li>
</ul>
<h3 id="code-readme-code"><code>README</code></h3>
<p><em>Meaning</em></p>
<ul>
<li>last but the most important - your welcome article for user</li>
<li>THE MOST IMPORTANT FILE IN THE PACKAGE!</li>
<li>Don't worry. We'll talk about writing a good readme later.</li>
</ul>
<p><em>Profit</em></p>
<ul>
<li><strong>Usability</strong>: If I understand the usage, I can rely to the issue I want to solve.</li>
<li><strong>Trust</strong>: Having code quality, Travis and coverage badges helps to identify the quality of the package.</li>
</ul>
<p>So that are all files and their purpose.</p>
<h2 id="no-time-fast-now-tell-your-story-with-an-image">No time! Fast! Now! → Tell your story with an image</h2>
<p>Today people are scanning the text rather then actually reading. That's why badges are so important!</p>
<p>Look on these 2 - what information can we get?</p>
<img src="/assets/images/posts/2016/open-source/badge-2.png" alt="Confusing badge">
<ul>
<li>Test are passing - <strong>GOOD</strong></li>
<li>There is stable tag with &quot;?&quot; coverage - <strong>CONFUSING</strong></li>
<li>Master has 89% test coverage - <strong>GOOD</strong></li>
<li>Last version is probably 2.5, but not sure. Do they update manually? - <strong>CONFUSING</strong></li>
<li>Why is master promoted on first place? Should I use that? - <strong>CONFUSING</strong></li>
</ul>
<p><small>From <a href="https://github.com/doctrine/doctrine2/blob/master/README.md">Doctrine2 repository</a>.</small></p>
<img src="/assets/images/posts/2016/open-source/badge-1.png" alt="Well informative badge">
<ul>
<li>Test are passing - <strong>GOOD</strong></li>
<li>Code quality is 10 - <strong>GOOD</strong></li>
<li>Code coverage 93% test coverage - <strong>GOOD</strong></li>
<li>It has 166 downloads. Here it depends on the age of package. → Go check release date! - <strong>GOOD</strong></li>
<li>It's tagged and has stable version. - <strong>GOOD</strong></li>
</ul>
<p><small>From <a href="https://github.com/Symplify/ControllerAutowire/blob/master/README.md">Symplify/ControllerAutowire repository</a>.</small></p>
<h2 id="what-have-we-done-today">What have we done today?</h2>
<ul>
<li>Where to go when <strong>starting a new repository</strong>.</li>
<li>What is <strong>the purpose meta files</strong>.</li>
<li>How to <strong>enable online services</strong> that help us to build better code.</li>
</ul>
<h2 id="what-s-next">What's next?</h2>
<ul>
<li>We'll peek on <strong>coding standards</strong>.</li>
<li>How do <strong>releases</strong> work a what is <strong>semantic versioning</strong>.</li>
<li>How to <strong>pick min PHP version and package versions in composer</strong>.</li>
</ul>
<hr />
<h2 id="hate-me-please">Hate me, please!</h2>
<p>Did you came across some error or wtf? Is it boring, too long or too vague?
Just send me a comment. I want to make this series bulletproof and as helpful as possible.</p>
<p><strong>You will help thousands of others if you help me to fix one issue.</strong></p>
<p>Thank you!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2016/09/16/how-to-write-open-source-in-php-2-enjoy-skeletons</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Fri, 16 Sep 2016 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2016/09/16/how-to-write-open-source-in-php-2-enjoy-skeletons#disqus_thread</comments>
            </item>
                    
            <item>
                <title><![CDATA[ How to write open-source in PHP 1: Create a repository on Github ]]></title>
                <link>https://tomasvotruba.com/blog/2016/09/09/how-to-write-open-source-in-php-1-create-a-repository</link>
                <description><![CDATA[ <p>Do you have some code you want to share but you don't know exactly how? Well, writing open-source is complex process.
In this series, I'll break it down to <strong>the smallest steps possible</strong>, so that you
can <strong>start your own OS project with zero-knowledge</strong> (OS = open-source).
Ready? Let's start with creating a Github repository!</p> ]]></description>
                <content:encoded><![CDATA[ <h2 id="meet-github-os-s-best-friend">Meet Github, OS's best friend</h2>
<p>If not already, <a href="https://github.com">register on Github</a>. It's a place where all open-source lives and breathes. For free!</p>
<p>Then create a repository with <a href="https://github.com/new">New Repository</a> button.</p>
<h3 id="name-repository-well-well-how">Name repository well... well how?</h3>
<ul>
<li>name should be explicit</li>
<li>noun... well pretty <strong>same rules as for class naming</strong></li>
<li>if you wrap or extend some other service/package, prefix with it</li>
<li>it's like headline &ndash; everyone should have clue what it does without peaking on readme</li>
<li>don't be cool... you already are!</li>
</ul>
<p>Nice theory. What about some examples?</p>
<ul>
<li><strong>good names</strong>: <em>Datagrid</em>, <em>ImageResizer</em>, <em>DoctrineFilters</em></li>
<li><strong>bad names</strong>: <em>TomasPackage</em>, <em>DoctrineExtras</em>, <em>Translate</em></li>
</ul>
<p>That's all you need now. Hit &quot;Create repository&quot; and you are done!</p>
<h2 id="little-book-of-git">Little book of git</h2>
<p>Now we practise first few git lines.</p>
<h3 id="get-to-the-right-place">Get to the right place</h3>
<p>Move to the directory, where you want to host your package locally.
Open command line or Terminal in PHPStorm. Actually the PHPStorm way will open terminal already in right place. So you don't have to browse directories via <code>cd</code> command.
And call these commands there.</p>
<p>Do you know git?</p>
<p>Just follow commands, that appeared on your Github repository and <a href="#your-code-is-online">skip to next headline</a>.</p>
<pre><code class="language-bash">echo "# OpenSourcePackageDemo" &gt;&gt; README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin git@github.com:TomasVotruba/OpenSourcePackageDemo.git
git push -u origin master</code></pre>
<h3 id="you-don-t-understand-those-geek-lines-i-ll-explain">You don't understand those geek lines? I'll explain</h3>
<p>These commits can be divided into 2 groups:</p>
<ol>
<li>to setup repository, <strong>just once</strong></li>
<li>to add some code, <strong>use repeatedly</strong></li>
</ol>
<h4 id="1-setup-repository">1. Setup repository</h4>
<p>Create an empty repository git repository</p>
<pre><code class="language-bash">git init</code></pre>
<p>Add ONLINE address where we want publish your code</p>
<pre><code class="language-bash">git remote add origin git@github.com:TomasVotruba/OpenSourcePackageDemo.git</code></pre>
<h4 id="2-add-some-code">2. Add some code</h4>
<p>Create a file README.md and add &quot;Unziping Package&quot; in it (this is just command line for geeks, I do this manually in my PHPStorm of course)</p>
<pre><code class="language-bash">echo "Unziping Package" &gt;&gt; README.md</code></pre>
<p>Tell git to NOTICE this file to be added later</p>
<pre><code class="language-bash">git add README.md</code></pre>
<p>Group all NOTICED files to single COMMIT (group of changes)</p>
<pre><code class="language-bash">git commit -m "first commit"</code></pre>
<p>Send ALL COMMITS online. Now your local system and Github repository are synced 1:1</p>
<pre><code class="language-bash">git push -u origin master</code></pre>
<p><a name="your-code-is-online"></a></p>
<h2 id="your-code-is-online">Your code is online!</h2>
<p>Just feel the smell of success.</p>
<hr />
<h2 id="do-you-want-get-deeper-than-that-check-the-checklist-2-min">Do you want get deeper than that? Check the Checklist (~2 min)</h2>
<p>Fast and clear? Go to <a href="http://phppackagechecklist.com">PHP Package Checklist</a>, that is easy to read and easy to follow.
This helped me to integrate workflow to all my packages in the start. I've selected <a href="http://phppackagechecklist.com/#1,2,3,4,6,7,11,12,13">9 most important points</a>.</p>
<p>Some of them I've already mentioned. Other will follow in next 2 articles.</p>
<p>Before creating next package, just go trough it to remind yourself what is most relevant.</p>
<hr />
<h2 id="so-our-first-step-is-behind-us">So our first step is behind us</h2>
<p>What have you learned today?</p>
<ul>
<li>That OS stands for open-source. You can also find <em>OSS</em> as for <em>open-source software</em>.</li>
<li>How to <strong>create proper OS repository</strong>.</li>
<li>How to <strong>add few lines there with git</strong>.</li>
</ul>
<h2 id="what-is-coming-next">What is coming next?</h2>
<ul>
<li>How does package skeleton make your work much easier.</li>
<li>What are <strong>repository meta files</strong>.</li>
<li>How and why to <strong>use badges</strong>.</li>
</ul>
<hr />
<h2 id="hate-me-please">Hate me, please!</h2>
<p>Did you came across some error or wtf? Is it boring, too long or too vague?
Just write me a comment. I want to make this series bulletproof and as much as helpful as possible.</p>
<p><strong>You will help thousands of others if you help me to fix one issue.</strong></p>
<p>Thank you!</p> ]]></content:encoded>
                <guid isPermaLink="false">https://tomasvotruba.com/blog/2016/09/09/how-to-write-open-source-in-php-1-create-a-repository</guid>
                <dc:creator><![CDATA[ Tomas Votruba ]]></dc:creator>

                                <pubDate>Fri, 09 Sep 2016 00:00:00 +0000</pubDate>
                                    <updated>2020-11-02UTC14:46:070</updated>
                    <atom:updated>Mon, 02 Nov 2020 14:46:07 +0000</atom:updated>
                    <lastBuildDate>Mon, 02 Nov 2020 14:46:07 +0000</lastBuildDate>
                
                <comments>https://tomasvotruba.com/blog/2016/09/09/how-to-write-open-source-in-php-1-create-a-repository#disqus_thread</comments>
            </item>
            </channel>
</rss>
